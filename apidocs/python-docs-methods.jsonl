{"index": 0, "name": "to3fixer-apply", "module": "2to3", "doc": ["Removes usage of apply().", "For example apply(function, *args, **kwargs) is converted to function(*args, **kwargs)."]}
{"index": 1, "name": "to3fixer-asserts", "module": "2to3", "doc": ["Replaces deprecated unittest method names with the correct ones."]}
{"index": 2, "name": "to3fixer-basestring", "module": "2to3", "doc": ["Converts basestring to str."]}
{"index": 3, "name": "to3fixer-buffer", "module": "2to3", "doc": ["Converts buffer to memoryview.", "This fixer is optional because the memoryview API is similar but not exactly the same as that of buffer."]}
{"index": 4, "name": "to3fixer-dict", "module": "2to3", "doc": ["Fixes dictionary iteration methods.", "dict.iteritems() is converted to dict.items(), dict.iterkeys() to dict.keys(), and dict.itervalues() to dict.values().", "Similarly, dict.viewitems(), dict.viewkeys() and dict.viewvalues() are converted respectively to dict.items(), dict.keys() and dict.values().", "It also wraps existing usages of dict.items(), dict.keys(), and dict.values() in a call to list."]}
{"index": 5, "name": "to3fixer-except", "module": "2to3", "doc": ["Converts except X, T to except X as T."]}
{"index": 6, "name": "to3fixer-exec", "module": "2to3", "doc": ["Converts the exec statement to the exec() function."]}
{"index": 7, "name": "to3fixer-execfile", "module": "2to3", "doc": ["Removes usage of execfile().", "The argument to execfile() is wrapped in calls to open(), compile(), and exec()."]}
{"index": 8, "name": "to3fixer-exitfunc", "module": "2to3", "doc": ["Changes assignment of sys.exitfunc to use of the atexit module."]}
{"index": 9, "name": "to3fixer-filter", "module": "2to3", "doc": ["Wraps filter() usage in a list call."]}
{"index": 10, "name": "to3fixer-funcattrs", "module": "2to3", "doc": ["Fixes function attributes that have been renamed.", "For example, my_function.func_closure is converted to my_function.__closure__."]}
{"index": 11, "name": "to3fixer-future", "module": "2to3", "doc": ["Removes from __future__ import new_feature statements."]}
{"index": 12, "name": "to3fixer-getcwdu", "module": "2to3", "doc": ["Renames os.getcwdu() to os.getcwd()."]}
{"index": 13, "name": "to3fixer-has_key", "module": "2to3", "doc": ["Changes dict.has_key(key) to key in dict."]}
{"index": 14, "name": "to3fixer-idioms", "module": "2to3", "doc": ["This optional fixer performs several transformations that make Python code more idiomatic.", "Type comparisons like type(x) is SomeClass and type(x) == SomeClass are converted to isinstance(x, SomeClass).", "while 1 becomes while True.", "This fixer also tries to make use of sorted() in appropriate places.", "For example, this block", "is changed to"]}
{"index": 15, "name": "to3fixer-import", "module": "2to3", "doc": ["Detects sibling imports and converts them to relative imports."]}
{"index": 16, "name": "to3fixer-imports", "module": "2to3", "doc": ["Handles module renames in the standard library."]}
{"index": 17, "name": "to3fixer-imports2", "module": "2to3", "doc": ["Handles other modules renames in the standard library.", "It is separate from the imports fixer only because of technical limitations."]}
{"index": 18, "name": "to3fixer-input", "module": "2to3", "doc": ["Converts input(prompt) to eval(input(prompt))."]}
{"index": 19, "name": "to3fixer-intern", "module": "2to3", "doc": ["Converts intern() to sys.intern()."]}
{"index": 20, "name": "to3fixer-isinstance", "module": "2to3", "doc": ["Fixes duplicate types in the second argument of isinstance().", "For example, isinstance(x, (int, int)) is converted to isinstance(x, int) and isinstance(x, (int, float, int)) is converted to isinstance(x, (int, float))."]}
{"index": 21, "name": "to3fixer-itertools_imports", "module": "2to3", "doc": ["Removes imports of itertools.ifilter(), itertools.izip(), and itertools.imap().", "Imports of itertools.ifilterfalse() are also changed to itertools.filterfalse()."]}
{"index": 22, "name": "to3fixer-itertools", "module": "2to3", "doc": ["Changes usage of itertools.ifilter(), itertools.izip(), and itertools.imap() to their built-in equivalents.", "itertools.ifilterfalse() is changed to itertools.filterfalse()."]}
{"index": 23, "name": "to3fixer-long", "module": "2to3", "doc": ["Renames long to int."]}
{"index": 24, "name": "to3fixer-map", "module": "2to3", "doc": ["Wraps map() in a list call.", "It also changes map(None, x) to list(x).", "Using from future_builtins import map disables this fixer."]}
{"index": 25, "name": "to3fixer-metaclass", "module": "2to3", "doc": ["Converts the old metaclass syntax (__metaclass__ = Meta in the class body) to the new (class X(metaclass=Meta))."]}
{"index": 26, "name": "to3fixer-methodattrs", "module": "2to3", "doc": ["Fixes old method attribute names.", "For example, meth.im_func is converted to meth.__func__."]}
{"index": 27, "name": "to3fixer-ne", "module": "2to3", "doc": ["Converts the old not-equal syntax, <>, to !=."]}
{"index": 28, "name": "to3fixer-next", "module": "2to3", "doc": ["Converts the use of iterator\u2019s next() methods to the next() function.", "It also renames next() methods to __next__()."]}
{"index": 29, "name": "to3fixer-nonzero", "module": "2to3", "doc": ["Renames __nonzero__() to __bool__()."]}
{"index": 30, "name": "to3fixer-numliterals", "module": "2to3", "doc": ["Converts octal literals into the new syntax."]}
{"index": 31, "name": "to3fixer-operator", "module": "2to3", "doc": ["Converts calls to various functions in the operator module to other, but equivalent, function calls.", "When needed, the appropriate import statements are added, e.g.", "import collections.abc.", "The following mapping are made:"]}
{"index": 32, "name": "to3fixer-paren", "module": "2to3", "doc": ["Add extra parenthesis where they are required in list comprehensions.", "For example, [x for x in 1, 2] becomes [x for x in (1, 2)]."]}
{"index": 33, "name": "to3fixer-print", "module": "2to3", "doc": ["Converts the print statement to the print() function."]}
{"index": 34, "name": "to3fixer-raise", "module": "2to3", "doc": ["Converts raise E, V to raise E(V), and raise E, V, T to raise E(V).with_traceback(T).", "If E is a tuple, the translation will be incorrect because substituting tuples for exceptions has been removed in 3.0."]}
{"index": 35, "name": "to3fixer-raw_input", "module": "2to3", "doc": ["Converts raw_input() to input()."]}
{"index": 36, "name": "to3fixer-reduce", "module": "2to3", "doc": ["Handles the move of reduce() to functools.reduce()."]}
{"index": 37, "name": "to3fixer-reload", "module": "2to3", "doc": ["Converts reload() to importlib.reload()."]}
{"index": 38, "name": "to3fixer-renames", "module": "2to3", "doc": ["Changes sys.maxint to sys.maxsize."]}
{"index": 39, "name": "to3fixer-repr", "module": "2to3", "doc": ["Replaces backtick repr with the repr() function."]}
{"index": 40, "name": "to3fixer-set_literal", "module": "2to3", "doc": ["Replaces use of the set constructor with set literals.", "This fixer is optional."]}
{"index": 41, "name": "to3fixer-standarderror", "module": "2to3", "doc": ["Renames StandardError to Exception."]}
{"index": 42, "name": "to3fixer-sys_exc", "module": "2to3", "doc": ["Changes the deprecated sys.exc_value, sys.exc_type, sys.exc_traceback to use sys.exc_info()."]}
{"index": 43, "name": "to3fixer-throw", "module": "2to3", "doc": ["Fixes the API change in generator\u2019s throw() method."]}
{"index": 44, "name": "to3fixer-tuple_params", "module": "2to3", "doc": ["Removes implicit tuple parameter unpacking.", "This fixer inserts temporary variables."]}
{"index": 45, "name": "to3fixer-types", "module": "2to3", "doc": ["Fixes code broken from the removal of some members in the types module."]}
{"index": 46, "name": "to3fixer-unicode", "module": "2to3", "doc": ["Renames unicode to str."]}
{"index": 47, "name": "to3fixer-urllib", "module": "2to3", "doc": ["Handles the rename of urllib and urllib2 to the urllib package."]}
{"index": 48, "name": "to3fixer-ws_comma", "module": "2to3", "doc": ["Removes excess whitespace from comma separated items.", "This fixer is optional."]}
{"index": 49, "name": "to3fixer-xrange", "module": "2to3", "doc": ["Renames xrange() to range() and wraps existing range() calls with list."]}
{"index": 50, "name": "to3fixer-xreadlines", "module": "2to3", "doc": ["Changes for x in file.xreadlines() to for x in file."]}
{"index": 51, "name": "to3fixer-zip", "module": "2to3", "doc": ["Wraps zip() usage in a list call.", "This is disabled when from future_builtins import zip appears."]}
{"index": 52, "name": "abc.ABC", "module": "abc", "doc": ["A helper class that has ABCMeta as its metaclass.", "With this class, an abstract base class can be created by simply deriving from ABC avoiding sometimes confusing metaclass usage, for example:", "Note that the type of ABC is still ABCMeta, therefore inheriting from ABC requires the usual precautions regarding metaclass usage, as multiple inheritance may lead to metaclass conflicts.", "One may also define an abstract base class by passing the metaclass keyword and using ABCMeta directly, for example:"]}
{"index": 53, "name": "abc.ABCMeta", "module": "abc", "doc": ["Metaclass for defining Abstract Base Classes (ABCs).", "Use this metaclass to create an ABC.", "An ABC can be subclassed directly, and then acts as a mix-in class.", "You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as \u201cvirtual subclasses\u201d \u2013 these and their descendants will be considered subclasses of the registering ABC by the built-in issubclass() function, but the registering ABC won\u2019t show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via super()).", "1", "Classes created with a metaclass of ABCMeta have the following method:", "You can also override this method in an abstract base class:", "For a demonstration of these concepts, look at this example ABC definition:", "The ABC MyIterable defines the standard iterable method, __iter__(), as an abstract method.", "The implementation given here can still be called from subclasses.", "The get_iterator() method is also part of the MyIterable abstract base class, but it does not have to be overridden in non-abstract derived classes.", "The __subclasshook__() class method defined here says that any class that has an __iter__() method in its __dict__ (or in that of one of its base classes, accessed via the __mro__ list) is considered a MyIterable too.", "Finally, the last line makes Foo a virtual subclass of MyIterable, even though it does not define an __iter__() method (it uses the old-style iterable protocol, defined in terms of __len__() and __getitem__()).", "Note that this will not make get_iterator available as a method of Foo, so it is provided separately."]}
{"index": 54, "name": "abc.ABCMeta.register", "module": "abc", "doc": ["Register subclass as a \u201cvirtual subclass\u201d of this ABC.", "For example:"]}
{"index": 55, "name": "abc.ABCMeta.__subclasshook__", "module": "abc", "doc": ["(Must be defined as a class method.)", "Check whether subclass is considered a subclass of this ABC.", "This means that you can customize the behavior of issubclass further without the need to call register() on every class you want to consider a subclass of the ABC.", "(This class method is called from the __subclasscheck__() method of the ABC.)", "This method should return True, False or NotImplemented.", "If it returns True, the subclass is considered a subclass of this ABC.", "If it returns False, the subclass is not considered a subclass of this ABC, even if it would normally be one.", "If it returns NotImplemented, the subclass check is continued with the usual mechanism."]}
{"index": 56, "name": "abc.abstractmethod", "module": "abc", "doc": ["A decorator indicating abstract methods.", "Using this decorator requires that the class\u2019s metaclass is ABCMeta or is derived from it.", "A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract methods and properties are overridden.", "The abstract methods can be called using any of the normal \u2018super\u2019 call mechanisms.", "abstractmethod() may be used to declare abstract methods for properties and descriptors.", "Dynamically adding abstract methods to a class, or attempting to modify the abstraction status of a method or class once it is created, are not supported.", "The abstractmethod() only affects subclasses derived using regular inheritance; \u201cvirtual subclasses\u201d registered with the ABC\u2019s register() method are not affected.", "When abstractmethod() is applied in combination with other method descriptors, it should be applied as the innermost decorator, as shown in the following usage examples:", "In order to correctly interoperate with the abstract base class machinery, the descriptor must identify itself as abstract using __isabstractmethod__.", "In general, this attribute should be True if any of the methods used to compose the descriptor are abstract.", "For example, Python\u2019s built-in property does the equivalent of:"]}
{"index": 57, "name": "abc.abstractclassmethod", "module": "abc", "doc": ["A subclass of the built-in classmethod(), indicating an abstract classmethod.", "Otherwise it is similar to abstractmethod().", "This special case is deprecated, as the classmethod() decorator is now correctly identified as abstract when applied to an abstract method:"]}
{"index": 58, "name": "abc.abstractstaticmethod", "module": "abc", "doc": ["A subclass of the built-in staticmethod(), indicating an abstract staticmethod.", "Otherwise it is similar to abstractmethod().", "This special case is deprecated, as the staticmethod() decorator is now correctly identified as abstract when applied to an abstract method:"]}
{"index": 59, "name": "", "module": "abc", "doc": ["A subclass of the built-in property(), indicating an abstract property.", "This special case is deprecated, as the property() decorator is now correctly identified as abstract when applied to an abstract method:", "The above example defines a read-only property; you can also define a read-write abstract property by appropriately marking one or more of the underlying methods as abstract:", "If only some components are abstract, only those components need to be updated to create a concrete property in a subclass:"]}
{"index": 60, "name": "abc.get_cache_token", "module": "abc", "doc": ["Returns the current abstract base class cache token.", "The token is an opaque object (that supports equality testing) identifying the current version of the abstract base class cache for virtual subclasses.", "The token changes with every call to ABCMeta.register() on any ABC."]}
{"index": 61, "name": "id2", "module": "abc", "doc": ["C++ programmers should note that Python\u2019s virtual base class concept is not the same as C++\u2019s."]}
{"index": 62, "name": "aifc.open", "module": "aifc", "doc": ["Open an AIFF or AIFF-C file and return an object instance with methods that are described below.", "The argument file is either a string naming a file or a file object.", "mode must be 'r' or 'rb' when the file must be opened for reading, or 'w'  or 'wb' when the file must be opened for writing.", "If omitted, file.mode is used if it exists, otherwise 'rb' is used.", "When used for writing, the file object should be seekable, unless you know ahead of time how many samples you are going to write in total and use writeframesraw() and setnframes().", "The open() function may be used in a with statement.", "When the with block completes, the close() method is called."]}
{"index": 63, "name": "aifc.aifc.getnchannels", "module": "aifc", "doc": ["Return the number of audio channels (1 for mono, 2 for stereo)."]}
{"index": 64, "name": "aifc.aifc.getsampwidth", "module": "aifc", "doc": ["Return the size in bytes of individual samples."]}
{"index": 65, "name": "aifc.aifc.getframerate", "module": "aifc", "doc": ["Return the sampling rate (number of audio frames per second)."]}
{"index": 66, "name": "aifc.aifc.getnframes", "module": "aifc", "doc": ["Return the number of audio frames in the file."]}
{"index": 67, "name": "aifc.aifc.getcomptype", "module": "aifc", "doc": ["Return a bytes array of length 4 describing the type of compression used in the audio file.", "For AIFF files, the returned value is b'NONE'."]}
{"index": 68, "name": "aifc.aifc.getcompname", "module": "aifc", "doc": ["Return a bytes array convertible to a human-readable description of the type of compression used in the audio file.", "For AIFF files, the returned value is b'not compressed'."]}
{"index": 69, "name": "aifc.aifc.getparams", "module": "aifc", "doc": ["Returns a namedtuple() (nchannels, sampwidth, framerate, nframes, comptype, compname), equivalent to output of the get*() methods."]}
{"index": 70, "name": "aifc.aifc.getmarkers", "module": "aifc", "doc": ["Return a list of markers in the audio file.", "A marker consists of a tuple of three elements.", "The first is the mark ID (an integer), the second is the mark position in frames from the beginning of the data (an integer), the third is the name of the mark (a string)."]}
{"index": 71, "name": "aifc.aifc.getmark", "module": "aifc", "doc": ["Return the tuple as described in getmarkers() for the mark with the given id."]}
{"index": 72, "name": "aifc.aifc.readframes", "module": "aifc", "doc": ["Read and return the next nframes frames from the audio file.", "The returned data is a string containing for each frame the uncompressed samples of all channels."]}
{"index": 73, "name": "aifc.aifc.rewind", "module": "aifc", "doc": ["Rewind the read pointer.", "The next readframes() will start from the beginning."]}
{"index": 74, "name": "aifc.aifc.setpos", "module": "aifc", "doc": ["Seek to the specified frame number."]}
{"index": 75, "name": "aifc.aifc.tell", "module": "aifc", "doc": ["Return the current frame number."]}
{"index": 76, "name": "aifc.aifc.close", "module": "aifc", "doc": ["Close the AIFF file.", "After calling this method, the object can no longer be used."]}
{"index": 77, "name": "aifc.aifc.aiff", "module": "aifc", "doc": ["Create an AIFF file.", "The default is that an AIFF-C file is created, unless the name of the file ends in '.aiff' in which case the default is an AIFF file."]}
{"index": 78, "name": "aifc.aifc.aifc", "module": "aifc", "doc": ["Create an AIFF-C file.", "The default is that an AIFF-C file is created, unless the name of the file ends in '.aiff' in which case the default is an AIFF file."]}
{"index": 79, "name": "aifc.aifc.setnchannels", "module": "aifc", "doc": ["Specify the number of channels in the audio file."]}
{"index": 80, "name": "aifc.aifc.setsampwidth", "module": "aifc", "doc": ["Specify the size in bytes of audio samples."]}
{"index": 81, "name": "aifc.aifc.setframerate", "module": "aifc", "doc": ["Specify the sampling frequency in frames per second."]}
{"index": 82, "name": "aifc.aifc.setnframes", "module": "aifc", "doc": ["Specify the number of frames that are to be written to the audio file.", "If this parameter is not set, or not set correctly, the file needs to support seeking."]}
{"index": 83, "name": "aifc.aifc.setcomptype", "module": "aifc", "doc": ["Specify the compression type.", "If not specified, the audio data will not be compressed.", "In AIFF files, compression is not possible.", "The name parameter should be a human-readable description of the compression type as a bytes array, the type parameter should be a bytes array of length 4.", "Currently the following compression types are supported: b'NONE', b'ULAW', b'ALAW', b'G722'."]}
{"index": 84, "name": "aifc.aifc.setparams", "module": "aifc", "doc": ["Set all the above parameters at once.", "The argument is a tuple consisting of the various parameters.", "This means that it is possible to use the result of a getparams() call as argument to setparams()."]}
{"index": 85, "name": "aifc.aifc.setmark", "module": "aifc", "doc": ["Add a mark with the given id (larger than 0), and the given name at the given position.", "This method can be called at any time before close()."]}
{"index": 86, "name": "id0", "module": "aifc", "doc": ["Return the current write position in the output file.", "Useful in combination with setmark()."]}
{"index": 87, "name": "aifc.aifc.writeframes", "module": "aifc", "doc": ["Write data to the output file.", "This method can only be called after the audio file parameters have been set."]}
{"index": 88, "name": "aifc.aifc.writeframesraw", "module": "aifc", "doc": ["Like writeframes(), except that the header of the audio file is not updated."]}
{"index": 89, "name": "id1", "module": "aifc", "doc": ["Close the AIFF file.", "The header of the file is updated to reflect the actual size of the audio data.", "After calling this method, the object can no longer be used."]}
{"index": 90, "name": "argparse.ArgumentParser", "module": "argparse", "doc": ["Create a new ArgumentParser object.", "All parameters should be passed as keyword arguments.", "Each parameter has its own more detailed description below, but in short they are:"]}
{"index": 91, "name": "argparse.ArgumentParser.add_argument", "module": "argparse", "doc": ["Define how a single command-line argument should be parsed.", "Each parameter has its own more detailed description below, but in short they are:"]}
{"index": 92, "name": "argparse.ArgumentParser.parse_args", "module": "argparse", "doc": ["Convert argument strings to objects and assign them as attributes of the namespace.", "Return the populated namespace.", "Previous calls to add_argument() determine exactly what objects are created and how they are assigned.", "See the documentation for add_argument() for details."]}
{"index": 93, "name": "argparse.Namespace", "module": "argparse", "doc": ["Simple class used by default by parse_args() to create an object holding attributes and return it."]}
{"index": 94, "name": "argparse.ArgumentParser.add_subparsers", "module": "argparse", "doc": ["Many programs split up their functionality into a number of sub-commands, for example, the svn program can invoke sub-commands like svn checkout, svn update, and svn commit.", "Splitting up functionality this way can be a particularly good idea when a program performs several different functions which require different kinds of command-line arguments.", "ArgumentParser supports the creation of such sub-commands with the add_subparsers() method.", "The add_subparsers() method is normally called with no arguments and returns a special action object.", "This object has a single method, add_parser(), which takes a command name and any ArgumentParser constructor arguments, and returns an ArgumentParser object that can be modified as usual.", "Description of parameters:", "Some example usage:", "Note that the object returned by parse_args() will only contain attributes for the main parser and the subparser that was selected by the command line (and not any other subparsers).", "So in the example above, when the a command is specified, only the foo and bar attributes are present, and when the b command is specified, only the foo and baz attributes are present.", "Similarly, when a help message is requested from a subparser, only the help for that particular parser will be printed.", "The help message will not include parent parser or sibling parser messages.", "(A help message for each subparser command, however, can be given by supplying the help= argument to add_parser() as above.)", "The add_subparsers() method also supports title and description keyword arguments.", "When either is present, the subparser\u2019s commands will appear in their own group in the help output.", "For example:", "Furthermore, add_parser supports an additional aliases argument, which allows multiple strings to refer to the same subparser.", "This example, like svn, aliases co as a shorthand for checkout:", "One particularly effective way of handling sub-commands is to combine the use of the add_subparsers() method with calls to set_defaults() so that each subparser knows which Python function it should execute.", "For example:", "This way, you can let parse_args() do the job of calling the appropriate function after argument parsing is complete.", "Associating functions with actions like this is typically the easiest way to handle the different actions for each of your subparsers.", "However, if it is necessary to check the name of the subparser that was invoked, the dest keyword argument to the add_subparsers() call will work:"]}
{"index": 95, "name": "argparse.FileType", "module": "argparse", "doc": ["The FileType factory creates objects that can be passed to the type argument of ArgumentParser.add_argument().", "Arguments that have FileType objects as their type will open command-line arguments as files with the requested modes, buffer sizes, encodings and error handling (see the open() function for more details):", "FileType objects understand the pseudo-argument '-' and automatically convert this into sys.stdin for readable FileType objects and sys.stdout for writable FileType objects:"]}
{"index": 96, "name": "argparse.ArgumentParser.add_argument_group", "module": "argparse", "doc": ["By default, ArgumentParser groups command-line arguments into \u201cpositional arguments\u201d and \u201coptional arguments\u201d when displaying help messages.", "When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the add_argument_group() method:", "The add_argument_group() method returns an argument group object which has an add_argument() method just like a regular ArgumentParser.", "When an argument is added to the group, the parser treats it just like a normal argument, but displays the argument in a separate group for help messages.", "The add_argument_group() method accepts title and description arguments which can be used to customize this display:", "Note that any arguments not in your user-defined groups will end up back in the usual \u201cpositional arguments\u201d and \u201coptional arguments\u201d sections."]}
{"index": 97, "name": "argparse.ArgumentParser.add_mutually_exclusive_group", "module": "argparse", "doc": ["Create a mutually exclusive group.", "argparse will make sure that only one of the arguments in the mutually exclusive group was present on the command line:", "The add_mutually_exclusive_group() method also accepts a required argument, to indicate that at least one of the mutually exclusive arguments is required:", "Note that currently mutually exclusive argument groups do not support the title and description arguments of add_argument_group()."]}
{"index": 98, "name": "argparse.ArgumentParser.set_defaults", "module": "argparse", "doc": ["Most of the time, the attributes of the object returned by parse_args() will be fully determined by inspecting the command-line arguments and the argument actions.", "set_defaults() allows some additional attributes that are determined without any inspection of the command line to be added:", "Note that parser-level defaults always override argument-level defaults:", "Parser-level defaults can be particularly useful when working with multiple parsers.", "See the add_subparsers() method for an example of this type."]}
{"index": 99, "name": "argparse.ArgumentParser.get_default", "module": "argparse", "doc": ["Get the default value for a namespace attribute, as set by either add_argument() or by set_defaults():"]}
{"index": 100, "name": "argparse.ArgumentParser.print_usage", "module": "argparse", "doc": ["Print a brief description of how the ArgumentParser should be invoked on the command line.", "If file is None, sys.stdout is assumed."]}
{"index": 101, "name": "argparse.ArgumentParser.print_help", "module": "argparse", "doc": ["Print a help message, including the program usage and information about the arguments registered with the ArgumentParser.", "If file is None, sys.stdout is assumed."]}
{"index": 102, "name": "argparse.ArgumentParser.format_usage", "module": "argparse", "doc": ["Return a string containing a brief description of how the ArgumentParser should be invoked on the command line."]}
{"index": 103, "name": "argparse.ArgumentParser.format_help", "module": "argparse", "doc": ["Return a string containing a help message, including the program usage and information about the arguments registered with the ArgumentParser."]}
{"index": 104, "name": "argparse.ArgumentParser.convert_arg_line_to_args", "module": "argparse", "doc": ["Arguments that are read from a file (see the fromfile_prefix_chars keyword argument to the ArgumentParser constructor) are read one argument per line.", "convert_arg_line_to_args() can be overridden for fancier reading.", "This method takes a single argument arg_line which is a string read from the argument file.", "It returns a list of arguments parsed from this string.", "The method is called once per line read from the argument file, in order.", "A useful override of this method is one that treats each space-separated word as an argument.", "The following example demonstrates how to do this:"]}
{"index": 105, "name": "argparse.ArgumentParser.exit", "module": "argparse", "doc": ["This method terminates the program, exiting with the specified status and, if given, it prints a message before that."]}
{"index": 106, "name": "argparse.ArgumentParser.error", "module": "argparse", "doc": ["This method prints a usage message including the message to the standard error and terminates the program with a status code of 2."]}
{"index": 107, "name": "array.array", "module": "array", "doc": ["A new array whose items are restricted by typecode, and initialized from the optional initializer value, which must be a list, a bytes-like object, or iterable over elements of the appropriate type.", "If given a list or string, the initializer is passed to the new array\u2019s fromlist(), frombytes(), or fromunicode() method (see below) to add initial items to the array.", "Otherwise, the iterable initializer is passed to the extend() method."]}
{"index": 108, "name": "array.typecodes", "module": "array", "doc": ["A string with all available type codes."]}
{"index": 109, "name": "array.array.typecode", "module": "array", "doc": ["The typecode character used to create the array."]}
{"index": 110, "name": "array.array.itemsize", "module": "array", "doc": ["The length in bytes of one array item in the internal representation."]}
{"index": 111, "name": "array.array.append", "module": "array", "doc": ["Append a new item with value x to the end of the array."]}
{"index": 112, "name": "array.array.buffer_info", "module": "array", "doc": ["Return a tuple (address, length) giving the current memory address and the length in elements of the buffer used to hold array\u2019s contents.", "The size of the memory buffer in bytes can be computed as array.buffer_info()[1] * array.itemsize.", "This is occasionally useful when working with low-level (and inherently unsafe) I/O interfaces that require memory addresses, such as certain ioctl() operations.", "The returned numbers are valid as long as the array exists and no length-changing operations are applied to it."]}
{"index": 113, "name": "array.array.byteswap", "module": "array", "doc": ["\u201cByteswap\u201d all items of the array.", "This is only supported for values which are 1, 2, 4, or 8 bytes in size; for other types of values, RuntimeError is raised.", "It is useful when reading data from a file written on a machine with a different byte order."]}
{"index": 114, "name": "array.array.count", "module": "array", "doc": ["Return the number of occurrences of x in the array."]}
{"index": 115, "name": "array.array.extend", "module": "array", "doc": ["Append items from iterable to the end of the array.", "If iterable is another array, it must have exactly the same type code; if not, TypeError will be raised.", "If iterable is not an array, it must be iterable and its elements must be the right type to be appended to the array."]}
{"index": 116, "name": "array.array.frombytes", "module": "array", "doc": ["Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the fromfile() method)."]}
{"index": 117, "name": "array.array.fromfile", "module": "array", "doc": ["Read n items (as machine values) from the file object f and append them to the end of the array.", "If less than n items are available, EOFError is raised, but the items that were available are still inserted into the array.", "f must be a real built-in file object; something else with a read() method won\u2019t do."]}
{"index": 118, "name": "array.array.fromlist", "module": "array", "doc": ["Append items from the list.", "This is equivalent to for x in list: a.append(x) except that if there is a type error, the array is unchanged."]}
{"index": 119, "name": "array.array.fromstring", "module": "array", "doc": ["Deprecated alias for frombytes()."]}
{"index": 120, "name": "array.array.fromunicode", "module": "array", "doc": ["Extends this array with data from the given unicode string.", "The array must be a type 'u' array; otherwise a ValueError is raised.", "Use array.frombytes(unicodestring.encode(enc)) to append Unicode data to an array of some other type."]}
{"index": 121, "name": "array.array.index", "module": "array", "doc": ["Return the smallest i such that i is the index of the first occurrence of x in the array."]}
{"index": 122, "name": "array.array.insert", "module": "array", "doc": ["Insert a new item with value x in the array before position i.", "Negative values are treated as being relative to the end of the array."]}
{"index": 123, "name": "array.array.pop", "module": "array", "doc": ["Removes the item with the index i from the array and returns it.", "The optional argument defaults to -1, so that by default the last item is removed and returned."]}
{"index": 124, "name": "array.array.remove", "module": "array", "doc": ["Remove the first occurrence of x from the array."]}
{"index": 125, "name": "array.array.reverse", "module": "array", "doc": ["Reverse the order of the items in the array."]}
{"index": 126, "name": "array.array.tobytes", "module": "array", "doc": ["Convert the array to an array of machine values and return the bytes representation (the same sequence of bytes that would be written to a file by the tofile() method.)"]}
{"index": 127, "name": "array.array.tofile", "module": "array", "doc": ["Write all items (as machine values) to the file object f."]}
{"index": 128, "name": "array.array.tolist", "module": "array", "doc": ["Convert the array to an ordinary list with the same items."]}
{"index": 129, "name": "array.array.tostring", "module": "array", "doc": ["Deprecated alias for tobytes()."]}
{"index": 130, "name": "array.array.tounicode", "module": "array", "doc": ["Convert the array to a unicode string.", "The array must be a type 'u' array; otherwise a ValueError is raised.", "Use array.tobytes().decode(enc) to obtain a unicode string from an array of some other type."]}
{"index": 131, "name": "ast.AST", "module": "ast", "doc": ["This is the base of all AST node classes.", "The actual node classes are derived from the Parser/Python.asdl file, which is reproduced below.", "They are defined in the _ast C module and re-exported in ast.", "There is one class defined for each left-hand side symbol in the abstract grammar (for example, ast.stmt or ast.expr).", "In addition, there is one class defined for each constructor on the right-hand side; these classes inherit from the classes for the left-hand side trees.", "For example, ast.BinOp inherits from ast.expr.", "For production rules with alternatives (aka \u201csums\u201d), the left-hand side class is abstract: only instances of specific constructor nodes are ever created.", "The constructor of a class ast.T parses its arguments as follows:", "For example, to create and populate an ast.UnaryOp node, you could use", "or the more compact"]}
{"index": 132, "name": "ast.AST._fields", "module": "ast", "doc": ["Each concrete class has an attribute _fields which gives the names of all child nodes.", "Each instance of a concrete class has one attribute for each child node, of the type as defined in the grammar.", "For example, ast.BinOp instances have an attribute left of type ast.expr.", "If these attributes are marked as optional in the grammar (using a question mark), the value might be None.", "If the attributes can have zero-or-more values (marked with an asterisk), the values are represented as Python lists.", "All possible attributes must be present and have valid values when compiling an AST with compile()."]}
{"index": 133, "name": "ast.AST.lineno", "module": "ast", "doc": ["Instances of ast.expr and ast.stmt subclasses have lineno and col_offset attributes.", "The lineno is the line number of source text (1-indexed so the first line is line 1) and the col_offset is the UTF-8 byte offset of the first token that generated the node.", "The UTF-8 offset is recorded because the parser uses UTF-8 internally."]}
{"index": 134, "name": "ast.AST.col_offset", "module": "ast", "doc": ["Instances of ast.expr and ast.stmt subclasses have lineno and col_offset attributes.", "The lineno is the line number of source text (1-indexed so the first line is line 1) and the col_offset is the UTF-8 byte offset of the first token that generated the node.", "The UTF-8 offset is recorded because the parser uses UTF-8 internally."]}
{"index": 135, "name": "ast.parse", "module": "ast", "doc": ["Parse the source into an AST node.", "Equivalent to compile(source, filename, mode, ast.PyCF_ONLY_AST)."]}
{"index": 136, "name": "ast.literal_eval", "module": "ast", "doc": ["Safely evaluate an expression node or a string containing a Python literal or container display.", "The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.", "This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself.", "It is not capable of evaluating arbitrarily complex expressions, for example involving operators or indexing."]}
{"index": 137, "name": "ast.get_docstring", "module": "ast", "doc": ["Return the docstring of the given node (which must be a FunctionDef, AsyncFunctionDef, ClassDef, or Module node), or None if it has no docstring.", "If clean is true, clean up the docstring\u2019s indentation with inspect.cleandoc()."]}
{"index": 138, "name": "ast.fix_missing_locations", "module": "ast", "doc": ["When you compile a node tree with compile(), the compiler expects lineno and col_offset attributes for every node that supports them.", "This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node.", "It works recursively starting at node."]}
{"index": 139, "name": "ast.increment_lineno", "module": "ast", "doc": ["Increment the line number of each node in the tree starting at node by n. This is useful to \u201cmove code\u201d to a different location in a file."]}
{"index": 140, "name": "ast.copy_location", "module": "ast", "doc": ["Copy source location (lineno and col_offset) from old_node to new_node if possible, and return new_node."]}
{"index": 141, "name": "ast.iter_fields", "module": "ast", "doc": ["Yield a tuple of (fieldname, value) for each field in node._fields that is present on node."]}
{"index": 142, "name": "ast.iter_child_nodes", "module": "ast", "doc": ["Yield all direct child nodes of node, that is, all fields that are nodes and all items of fields that are lists of nodes."]}
{"index": 143, "name": "ast.walk", "module": "ast", "doc": ["Recursively yield all descendant nodes in the tree starting at node (including node itself), in no specified order.", "This is useful if you only want to modify nodes in place and don\u2019t care about the context."]}
{"index": 144, "name": "ast.NodeVisitor", "module": "ast", "doc": ["A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found.", "This function may return a value which is forwarded by the visit() method.", "This class is meant to be subclassed, with the subclass adding visitor methods.", "Don\u2019t use the NodeVisitor if you want to apply changes to nodes during traversal.", "For this a special visitor exists (NodeTransformer) that allows modifications."]}
{"index": 145, "name": "ast.NodeVisitor.visit", "module": "ast", "doc": ["Visit a node.", "The default implementation calls the method called self.visit_classname where classname is the name of the node class, or generic_visit() if that method doesn\u2019t exist."]}
{"index": 146, "name": "ast.NodeVisitor.generic_visit", "module": "ast", "doc": ["This visitor calls visit() on all children of the node.", "Note that child nodes of nodes that have a custom visitor method won\u2019t be visited unless the visitor calls generic_visit() or visits them itself."]}
{"index": 147, "name": "ast.NodeTransformer", "module": "ast", "doc": ["A NodeVisitor subclass that walks the abstract syntax tree and allows modification of nodes.", "The NodeTransformer will walk the AST and use the return value of the visitor methods to replace or remove the old node.", "If the return value of the visitor method is None, the node will be removed from its location, otherwise it is replaced with the return value.", "The return value may be the original node in which case no replacement takes place.", "Here is an example transformer that rewrites all occurrences of name lookups (foo) to data['foo']:", "Keep in mind that if the node you\u2019re operating on has child nodes you must either transform the child nodes yourself or call the generic_visit() method for the node first.", "For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node.", "Usually you use the transformer like this:"]}
{"index": 148, "name": "ast.dump", "module": "ast", "doc": ["Return a formatted dump of the tree in node.", "This is mainly useful for debugging purposes.", "If annotate_fields is true (by default), the returned string will show the names and the values for fields.", "If annotate_fields is false, the result string will be more compact by omitting unambiguous field names.", "Attributes such as line numbers and column offsets are not dumped by default.", "If this is wanted, include_attributes can be set to true."]}
{"index": 149, "name": "asynchat.async_chat", "module": "asynchat", "doc": ["This class is an abstract subclass of asyncore.dispatcher.", "To make practical use of the code you must subclass async_chat, providing meaningful collect_incoming_data() and found_terminator() methods.", "The asyncore.dispatcher methods can be used, although not all make sense in a message/response context.", "Like asyncore.dispatcher, async_chat defines a set of events that are generated by an analysis of socket conditions after a select() call.", "Once the polling loop has been started the async_chat object\u2019s methods are called by the event-processing framework with no action on the part of the programmer.", "Two class attributes can be modified, to improve performance, or possibly even to conserve memory.", "Unlike asyncore.dispatcher, async_chat allows you to define a FIFO queue of producers.", "A producer need have only one method, more(), which should return data to be transmitted on the channel.", "The producer indicates exhaustion (i.e.", "that it contains no more data) by having its more() method return the empty bytes object.", "At this point the async_chat object removes the producer from the queue and starts using the next producer, if any.", "When the producer queue is empty the handle_write() method does nothing.", "You use the channel object\u2019s set_terminator() method to describe how to recognize the end of, or an important breakpoint in, an incoming transmission from the remote endpoint.", "To build a functioning async_chat subclass your  input methods collect_incoming_data() and found_terminator() must handle the data that the channel receives asynchronously.", "The methods are described below."]}
{"index": 150, "name": "asynchat.async_chat.ac_in_buffer_size", "module": "asynchat", "doc": ["The asynchronous input buffer size (default 4096)."]}
{"index": 151, "name": "asynchat.async_chat.ac_out_buffer_size", "module": "asynchat", "doc": ["The asynchronous output buffer size (default 4096)."]}
{"index": 152, "name": "asynchat.async_chat.close_when_done", "module": "asynchat", "doc": ["Pushes a None on to the producer queue.", "When this producer is popped off the queue it causes the channel to be closed."]}
{"index": 153, "name": "asynchat.async_chat.collect_incoming_data", "module": "asynchat", "doc": ["Called with data holding an arbitrary amount of received data.", "The default method, which must be overridden, raises a NotImplementedError exception."]}
{"index": 154, "name": "asynchat.async_chat.discard_buffers", "module": "asynchat", "doc": ["In emergencies this method will discard any data held in the input and/or output buffers and the producer queue."]}
{"index": 155, "name": "asynchat.async_chat.found_terminator", "module": "asynchat", "doc": ["Called when the incoming data stream  matches the termination condition set by set_terminator().", "The default method, which must be overridden, raises a NotImplementedError exception.", "The buffered input data should be available via an instance attribute."]}
{"index": 156, "name": "asynchat.async_chat.get_terminator", "module": "asynchat", "doc": ["Returns the current terminator for the channel."]}
{"index": 157, "name": "asynchat.async_chat.push", "module": "asynchat", "doc": ["Pushes data on to the channel\u2019s queue to ensure its transmission.", "This is all you need to do to have the channel write the data out to the network, although it is possible to use your own producers in more complex schemes to implement encryption and chunking, for example."]}
{"index": 158, "name": "asynchat.async_chat.push_with_producer", "module": "asynchat", "doc": ["Takes a producer object and adds it to the producer queue associated with the channel.", "When all currently-pushed producers have been exhausted the channel will consume this producer\u2019s data by calling its more() method and send the data to the remote endpoint."]}
{"index": 159, "name": "asynchat.async_chat.set_terminator", "module": "asynchat", "doc": ["Sets the terminating condition to be recognized on the channel.", "term may be any of three types of value, corresponding to three different ways to handle incoming protocol data.", "Note that any data following the terminator will be available for reading by the channel after found_terminator() is called."]}
{"index": 160, "name": "asyncio.get_running_loop", "module": "asyncio", "doc": ["Return the running event loop in the current OS thread.", "If there is no running event loop a RuntimeError is raised.", "This function can only be called from a coroutine or a callback."]}
{"index": 161, "name": "asyncio.get_event_loop", "module": "asyncio", "doc": ["Get the current event loop.", "If there is no current event loop set in the current OS thread and set_event_loop() has not yet been called, asyncio will create a new event loop and set it as the current one.", "Because this function has rather complex behavior (especially when custom event loop policies are in use), using the get_running_loop() function is preferred to get_event_loop() in coroutines and callbacks.", "Consider also using the asyncio.run() function instead of using lower level functions to manually create and close an event loop."]}
{"index": 162, "name": "asyncio.set_event_loop", "module": "asyncio", "doc": ["Set loop as a current event loop for the current OS thread."]}
{"index": 163, "name": "asyncio.new_event_loop", "module": "asyncio", "doc": ["Create a new event loop object."]}
{"index": 164, "name": "asyncio.loop.run_until_complete", "module": "asyncio", "doc": ["Run until the future (an instance of Future) has completed.", "If the argument is a coroutine object it is implicitly scheduled to run as a asyncio.Task.", "Return the Future\u2019s result or raise its exception."]}
{"index": 165, "name": "asyncio.loop.run_forever", "module": "asyncio", "doc": ["Run the event loop until stop() is called.", "If stop() is called before run_forever() is called, the loop will poll the I/O selector once with a timeout of zero, run all callbacks scheduled in response to I/O events (and those that were already scheduled), and then exit.", "If stop() is called while run_forever() is running, the loop will run the current batch of callbacks and then exit.", "Note that new callbacks scheduled by callbacks will not run in this case; instead, they will run the next time run_forever() or run_until_complete() is called."]}
{"index": 166, "name": "asyncio.loop.stop", "module": "asyncio", "doc": ["Stop the event loop."]}
{"index": 167, "name": "asyncio.loop.is_running", "module": "asyncio", "doc": ["Return True if the event loop is currently running."]}
{"index": 168, "name": "asyncio.loop.is_closed", "module": "asyncio", "doc": ["Return True if the event loop was closed."]}
{"index": 169, "name": "asyncio.loop.close", "module": "asyncio", "doc": ["Close the event loop.", "The loop must not be running when this function is called.", "Any pending callbacks will be discarded.", "This method clears all queues and shuts down the executor, but does not wait for the executor to finish.", "This method is idempotent and irreversible.", "No other methods should be called after the event loop is closed."]}
{"index": 170, "name": "asyncio.loop.shutdown_asyncgens", "module": "asyncio", "doc": ["Schedule all currently open asynchronous generator objects to close with an aclose() call.", "After calling this method, the event loop will issue a warning if a new asynchronous generator is iterated.", "This should be used to reliably finalize all scheduled asynchronous generators.", "Note that there is no need to call this function when asyncio.run() is used.", "Example:"]}
{"index": 171, "name": "asyncio.loop.call_soon", "module": "asyncio", "doc": ["Schedule a callback to be called with args arguments at the next iteration of the event loop.", "Callbacks are called in the order in which they are registered.", "Each callback will be called exactly once.", "An optional keyword-only context argument allows specifying a custom contextvars.Context for the callback to run in.", "The current context is used when no context is provided.", "An instance of asyncio.Handle is returned, which can be used later to cancel the callback.", "This method is not thread-safe."]}
{"index": 172, "name": "asyncio.loop.call_soon_threadsafe", "module": "asyncio", "doc": ["A thread-safe variant of call_soon().", "Must be used to schedule callbacks from another thread.", "See the concurrency and multithreading section of the documentation."]}
{"index": 173, "name": "asyncio.loop.call_later", "module": "asyncio", "doc": ["Schedule callback to be called after the given delay number of seconds (can be either an int or a float).", "An instance of asyncio.TimerHandle is returned which can be used to cancel the callback.", "callback will be called exactly once.", "If two callbacks are scheduled for exactly the same time, the order in which they are called is undefined.", "The optional positional args will be passed to the callback when it is called.", "If you want the callback to be called with keyword arguments use functools.partial().", "An optional keyword-only context argument allows specifying a custom contextvars.Context for the callback to run in.", "The current context is used when no context is provided."]}
{"index": 174, "name": "asyncio.loop.call_at", "module": "asyncio", "doc": ["Schedule callback to be called at the given absolute timestamp when (an int or a float), using the same time reference as loop.time().", "This method\u2019s behavior is the same as call_later().", "An instance of asyncio.TimerHandle is returned which can be used to cancel the callback."]}
{"index": 175, "name": "asyncio.loop.time", "module": "asyncio", "doc": ["Return the current time, as a float value, according to the event loop\u2019s internal monotonic clock."]}
{"index": 176, "name": "asyncio.loop.create_future", "module": "asyncio", "doc": ["Create an asyncio.Future object attached to the event loop.", "This is the preferred way to create Futures in asyncio.", "This lets third-party event loops provide alternative implementations of the Future object (with better performance or instrumentation)."]}
{"index": 177, "name": "asyncio.loop.create_task", "module": "asyncio", "doc": ["Schedule the execution of a Coroutines.", "Return a Task object.", "Third-party event loops can use their own subclass of Task for interoperability.", "In this case, the result type is a subclass of Task."]}
{"index": 178, "name": "asyncio.loop.set_task_factory", "module": "asyncio", "doc": ["Set a task factory that will be used by loop.create_task().", "If factory is None the default task factory will be set.", "Otherwise, factory must be a callable with the signature matching (loop, coro), where loop is a reference to the active event loop, and coro is a coroutine object.", "The callable must return a asyncio.Future-compatible object."]}
{"index": 179, "name": "asyncio.loop.get_task_factory", "module": "asyncio", "doc": ["Return a task factory or None if the default one is in use."]}
{"index": 180, "name": "asyncio.loop.create_connection", "module": "asyncio", "doc": ["Open a streaming transport connection to a given address specified by host and port.", "The socket family can be either AF_INET or AF_INET6 depending on host (or the family argument, if provided).", "The socket type will be SOCK_STREAM.", "protocol_factory must be a callable returning an asyncio protocol implementation.", "This method will try to establish the connection in the background.", "When successful, it returns a (transport, protocol) pair.", "The chronological synopsis of the underlying operation is as follows:", "The created transport is an implementation-dependent bidirectional stream.", "Other arguments:"]}
{"index": 181, "name": "asyncio.loop.create_datagram_endpoint", "module": "asyncio", "doc": ["Create a datagram connection.", "The socket family can be either AF_INET, AF_INET6, or AF_UNIX, depending on host (or the family argument, if provided).", "The socket type will be SOCK_DGRAM.", "protocol_factory must be a callable returning a protocol implementation.", "A tuple of (transport, protocol) is returned on success.", "Other arguments:", "On Windows, with ProactorEventLoop, this method is not supported.", "See UDP echo client protocol and UDP echo server protocol examples."]}
{"index": 182, "name": "asyncio.loop.create_unix_connection", "module": "asyncio", "doc": ["Create a Unix connection.", "The socket family will be AF_UNIX; socket type will be SOCK_STREAM.", "A tuple of (transport, protocol) is returned on success.", "path is the name of a Unix domain socket and is required, unless a sock parameter is specified.", "Abstract Unix sockets, str, bytes, and Path paths are supported.", "See the documentation of the loop.create_connection() method for information about arguments to this method.", "Availability: Unix."]}
{"index": 183, "name": "asyncio.loop.create_server", "module": "asyncio", "doc": ["Create a TCP server (socket type SOCK_STREAM) listening on port of the host address.", "Returns a Server object.", "Arguments:"]}
{"index": 184, "name": "asyncio.loop.create_unix_server", "module": "asyncio", "doc": ["Similar to loop.create_server() but works with the AF_UNIX socket family.", "path is the name of a Unix domain socket, and is required, unless a sock argument is provided.", "Abstract Unix sockets, str, bytes, and Path paths are supported.", "See the documentation of the loop.create_server() method for information about arguments to this method.", "Availability: Unix."]}
{"index": 185, "name": "asyncio.loop.connect_accepted_socket", "module": "asyncio", "doc": ["Wrap an already accepted connection into a transport/protocol pair.", "This method can be used by servers that accept connections outside of asyncio but that use asyncio to handle them.", "Parameters:", "Returns a (transport, protocol) pair."]}
{"index": 186, "name": "asyncio.loop.sendfile", "module": "asyncio", "doc": ["Send a file over a transport.", "Return the total number of bytes sent.", "The method uses high-performance os.sendfile() if available.", "file must be a regular file object opened in binary mode.", "offset tells from where to start reading the file.", "If specified, count is the total number of bytes to transmit as opposed to sending the file until EOF is reached.", "File position is always updated, even when this method raises an error, and file.tell() can be used to obtain the actual number of bytes sent.", "fallback set to True makes asyncio to manually read and send the file when the platform does not support the sendfile system call (e.g.", "Windows or SSL socket on Unix).", "Raise SendfileNotAvailableError if the system does not support the sendfile syscall and fallback is False."]}
{"index": 187, "name": "asyncio.loop.start_tls", "module": "asyncio", "doc": ["Upgrade an existing transport-based connection to TLS.", "Return a new transport instance, that the protocol must start using immediately after the await.", "The transport instance passed to the start_tls method should never be used again.", "Parameters:"]}
{"index": 188, "name": "asyncio.loop.add_reader", "module": "asyncio", "doc": ["Start monitoring the fd file descriptor for read availability and invoke callback with the specified arguments once fd is available for reading."]}
{"index": 189, "name": "asyncio.loop.remove_reader", "module": "asyncio", "doc": ["Stop monitoring the fd file descriptor for read availability."]}
{"index": 190, "name": "asyncio.loop.add_writer", "module": "asyncio", "doc": ["Start monitoring the fd file descriptor for write availability and invoke callback with the specified arguments once fd is available for writing.", "Use functools.partial() to pass keyword arguments to callback."]}
{"index": 191, "name": "asyncio.loop.remove_writer", "module": "asyncio", "doc": ["Stop monitoring the fd file descriptor for write availability."]}
{"index": 192, "name": "asyncio.loop.sock_recv", "module": "asyncio", "doc": ["Receive up to nbytes from sock.", "Asynchronous version of socket.recv().", "Return the received data as a bytes object.", "sock must be a non-blocking socket."]}
{"index": 193, "name": "asyncio.loop.sock_recv_into", "module": "asyncio", "doc": ["Receive data from sock into the buf buffer.", "Modeled after the blocking socket.recv_into() method.", "Return the number of bytes written to the buffer.", "sock must be a non-blocking socket."]}
{"index": 194, "name": "asyncio.loop.sock_sendall", "module": "asyncio", "doc": ["Send data to the sock socket.", "Asynchronous version of socket.sendall().", "This method continues to send to the socket until either all data in data has been sent or an error occurs.", "None is returned on success.", "On error, an exception is raised.", "Additionally, there is no way to determine how much data, if any, was successfully processed by the receiving end of the connection.", "sock must be a non-blocking socket."]}
{"index": 195, "name": "asyncio.loop.sock_connect", "module": "asyncio", "doc": ["Connect sock to a remote socket at address.", "Asynchronous version of socket.connect().", "sock must be a non-blocking socket."]}
{"index": 196, "name": "asyncio.loop.sock_accept", "module": "asyncio", "doc": ["Accept a connection.", "Modeled after the blocking socket.accept() method.", "The socket must be bound to an address and listening for connections.", "The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.", "sock must be a non-blocking socket."]}
{"index": 197, "name": "asyncio.loop.sock_sendfile", "module": "asyncio", "doc": ["Send a file using high-performance os.sendfile if possible.", "Return the total number of bytes sent.", "Asynchronous version of socket.sendfile().", "sock must be a non-blocking socket.SOCK_STREAM socket.", "file must be a regular file object open in binary mode.", "offset tells from where to start reading the file.", "If specified, count is the total number of bytes to transmit as opposed to sending the file until EOF is reached.", "File position is always updated, even when this method raises an error, and file.tell() can be used to obtain the actual number of bytes sent.", "fallback, when set to True, makes asyncio manually read and send the file when the platform does not support the sendfile syscall (e.g.", "Windows or SSL socket on Unix).", "Raise SendfileNotAvailableError if the system does not support sendfile syscall and fallback is False.", "sock must be a non-blocking socket."]}
{"index": 198, "name": "asyncio.loop.getaddrinfo", "module": "asyncio", "doc": ["Asynchronous version of socket.getaddrinfo()."]}
{"index": 199, "name": "asyncio.loop.getnameinfo", "module": "asyncio", "doc": ["Asynchronous version of socket.getnameinfo()."]}
{"index": 200, "name": "asyncio.loop.connect_read_pipe", "module": "asyncio", "doc": ["Register the read end of pipe in the event loop.", "protocol_factory must be a callable returning an asyncio protocol implementation.", "pipe is a file-like object.", "Return pair (transport, protocol), where transport supports the ReadTransport interface and protocol is an object instantiated by the protocol_factory.", "With SelectorEventLoop event loop, the pipe is set to non-blocking mode."]}
{"index": 201, "name": "asyncio.loop.connect_write_pipe", "module": "asyncio", "doc": ["Register the write end of pipe in the event loop.", "protocol_factory must be a callable returning an asyncio protocol implementation.", "pipe is file-like object.", "Return pair (transport, protocol), where transport supports WriteTransport interface and protocol is an object instantiated by the protocol_factory.", "With SelectorEventLoop event loop, the pipe is set to non-blocking mode."]}
{"index": 202, "name": "asyncio.loop.add_signal_handler", "module": "asyncio", "doc": ["Set callback as the handler for the signum signal.", "The callback will be invoked by loop, along with other queued callbacks and runnable coroutines of that event loop.", "Unlike signal handlers registered using signal.signal(), a callback registered with this function is allowed to interact with the event loop.", "Raise ValueError if the signal number is invalid or uncatchable.", "Raise RuntimeError if there is a problem setting up the handler.", "Use functools.partial() to pass keyword arguments to callback.", "Like signal.signal(), this function must be invoked in the main thread."]}
{"index": 203, "name": "asyncio.loop.remove_signal_handler", "module": "asyncio", "doc": ["Remove the handler for the sig signal.", "Return True if the signal handler was removed, or False if no handler was set for the given signal.", "Availability: Unix."]}
{"index": 204, "name": "asyncio.loop.run_in_executor", "module": "asyncio", "doc": ["Arrange for func to be called in the specified executor.", "The executor argument should be an concurrent.futures.Executor instance.", "The default executor is used if executor is None.", "Example:", "This method returns a asyncio.Future object.", "Use functools.partial() to pass keyword arguments to func."]}
{"index": 205, "name": "asyncio.loop.set_default_executor", "module": "asyncio", "doc": ["Set executor as the default executor used by run_in_executor().", "executor should be an instance of ThreadPoolExecutor.", "executor must be an instance of concurrent.futures.ThreadPoolExecutor."]}
{"index": 206, "name": "asyncio.loop.set_exception_handler", "module": "asyncio", "doc": ["Set handler as the new event loop exception handler.", "If handler is None, the default exception handler will be set.", "Otherwise, handler must be a callable with the signature matching (loop, context), where loop is a reference to the active event loop, and context is a dict object containing the details of the exception (see call_exception_handler() documentation for details about context)."]}
{"index": 207, "name": "asyncio.loop.get_exception_handler", "module": "asyncio", "doc": ["Return the current exception handler, or None if no custom exception handler was set."]}
{"index": 208, "name": "asyncio.loop.default_exception_handler", "module": "asyncio", "doc": ["Default exception handler.", "This is called when an exception occurs and no exception handler is set.", "This can be called by a custom exception handler that wants to defer to the default handler behavior.", "context parameter has the same meaning as in call_exception_handler()."]}
{"index": 209, "name": "asyncio.loop.call_exception_handler", "module": "asyncio", "doc": ["Call the current event loop exception handler.", "context is a dict object containing the following keys (new keys may be introduced in future Python versions):"]}
{"index": 210, "name": "asyncio.loop.get_debug", "module": "asyncio", "doc": ["Get the debug mode (bool) of the event loop.", "The default value is True if the environment variable PYTHONASYNCIODEBUG is set to a non-empty string, False otherwise."]}
{"index": 211, "name": "asyncio.loop.set_debug", "module": "asyncio", "doc": ["Set the debug mode of the event loop."]}
{"index": 212, "name": "asyncio.loop.subprocess_exec", "module": "asyncio", "doc": ["Create a subprocess from one or more string arguments specified by args.", "args must be a list of strings represented by:", "The first string specifies the program executable, and the remaining strings specify the arguments.", "Together, string arguments form the argv of the program.", "This is similar to the standard library subprocess.Popen class called with shell=False and the list of strings passed as the first argument; however, where Popen takes a single argument which is list of strings, subprocess_exec takes multiple string arguments.", "The protocol_factory must be a callable returning a subclass of the asyncio.SubprocessProtocol class.", "Other parameters:", "See the constructor of the subprocess.Popen class for documentation on other arguments.", "Returns a pair of (transport, protocol), where transport conforms to the asyncio.SubprocessTransport base class and protocol is an object instantiated by the protocol_factory."]}
{"index": 213, "name": "asyncio.loop.subprocess_shell", "module": "asyncio", "doc": ["Create a subprocess from cmd, which can be a str or a bytes string encoded to the filesystem encoding, using the platform\u2019s \u201cshell\u201d syntax.", "This is similar to the standard library subprocess.Popen class called with shell=True.", "The protocol_factory must be a callable returning a subclass of the SubprocessProtocol class.", "See subprocess_exec() for more details about the remaining arguments.", "Returns a pair of (transport, protocol), where transport conforms to the SubprocessTransport base class and protocol is an object instantiated by the protocol_factory."]}
{"index": 214, "name": "asyncio.Handle", "module": "asyncio", "doc": ["A callback wrapper object returned by loop.call_soon(), loop.call_soon_threadsafe()."]}
{"index": 215, "name": "asyncio.Handle.cancel", "module": "asyncio", "doc": ["Cancel the callback.", "If the callback has already been canceled or executed, this method has no effect."]}
{"index": 216, "name": "asyncio.Handle.cancelled", "module": "asyncio", "doc": ["Return True if the callback was cancelled."]}
{"index": 217, "name": "asyncio.TimerHandle", "module": "asyncio", "doc": ["A callback wrapper object returned by loop.call_later(), and loop.call_at().", "This class is a subclass of Handle."]}
{"index": 218, "name": "asyncio.TimerHandle.when", "module": "asyncio", "doc": ["Return a scheduled callback time as float seconds.", "The time is an absolute timestamp, using the same time reference as loop.time()."]}
{"index": 219, "name": "asyncio.Server", "module": "asyncio", "doc": ["Server objects are asynchronous context managers.", "When used in an async with statement, it\u2019s guaranteed that the Server object is closed and not accepting new connections when the async with statement is completed:"]}
{"index": 220, "name": "asyncio.Server.close", "module": "asyncio", "doc": ["Stop serving: close listening sockets and set the sockets attribute to None.", "The sockets that represent existing incoming client connections are left open.", "The server is closed asynchronously, use the wait_closed() coroutine to wait until the server is closed."]}
{"index": 221, "name": "asyncio.Server.get_loop", "module": "asyncio", "doc": ["Return the event loop associated with the server object."]}
{"index": 222, "name": "asyncio.Server.start_serving", "module": "asyncio", "doc": ["Start accepting connections.", "This method is idempotent, so it can be called when the server is already being serving.", "The start_serving keyword-only parameter to loop.create_server() and asyncio.start_server() allows creating a Server object that is not accepting connections initially.", "In this case Server.start_serving(), or Server.serve_forever() can be used to make the Server start accepting connections."]}
{"index": 223, "name": "asyncio.Server.serve_forever", "module": "asyncio", "doc": ["Start accepting connections until the coroutine is cancelled.", "Cancellation of serve_forever task causes the server to be closed.", "This method can be called if the server is already accepting connections.", "Only one serve_forever task can exist per one Server object.", "Example:"]}
{"index": 224, "name": "asyncio.Server.is_serving", "module": "asyncio", "doc": ["Return True if the server is accepting new connections."]}
{"index": 225, "name": "asyncio.Server.wait_closed", "module": "asyncio", "doc": ["Wait until the close() method completes."]}
{"index": 226, "name": "asyncio.Server.sockets", "module": "asyncio", "doc": ["List of socket.socket objects the server is listening on, or None if the server is closed."]}
{"index": 227, "name": "asyncio.SelectorEventLoop", "module": "asyncio", "doc": ["An event loop based on the selectors module.", "Uses the most efficient selector available for the given platform.", "It is also possible to manually configure the exact selector implementation to be used:", "Availability: Unix, Windows."]}
{"index": 228, "name": "asyncio.ProactorEventLoop", "module": "asyncio", "doc": ["An event loop for Windows that uses \u201cI/O Completion Ports\u201d (IOCP).", "Availability: Windows.", "An example how to use ProactorEventLoop on Windows:"]}
{"index": 229, "name": "asyncio.AbstractEventLoop", "module": "asyncio", "doc": ["Abstract base class for asyncio-compliant event loops.", "The Event Loop Methods section lists all methods that an alternative implementation of AbstractEventLoop should have defined."]}
{"index": 230, "name": "asyncio.TimeoutError", "module": "asyncio", "doc": ["The operation has exceeded the given deadline."]}
{"index": 231, "name": "asyncio.CancelledError", "module": "asyncio", "doc": ["The operation has been cancelled.", "This exception can be caught to perform custom operations when asyncio Tasks are cancelled.", "In almost all situations the exception must be re-raised."]}
{"index": 232, "name": "asyncio.InvalidStateError", "module": "asyncio", "doc": ["Invalid internal state of Task or Future.", "Can be raised in situations like setting a result value for a Future object that already has a result value set."]}
{"index": 233, "name": "asyncio.SendfileNotAvailableError", "module": "asyncio", "doc": ["The \u201csendfile\u201d syscall is not available for the given socket or file type.", "A subclass of RuntimeError."]}
{"index": 234, "name": "asyncio.IncompleteReadError", "module": "asyncio", "doc": ["The requested read operation did not complete fully.", "Raised by the asyncio stream APIs.", "This exception is a subclass of EOFError."]}
{"index": 235, "name": "asyncio.IncompleteReadError.expected", "module": "asyncio", "doc": ["The total number (int) of expected bytes."]}
{"index": 236, "name": "asyncio.IncompleteReadError.partial", "module": "asyncio", "doc": ["A string of bytes read before the end of stream was reached."]}
{"index": 237, "name": "asyncio.LimitOverrunError", "module": "asyncio", "doc": ["Reached the buffer size limit while looking for a separator.", "Raised by the asyncio stream APIs."]}
{"index": 238, "name": "asyncio.LimitOverrunError.consumed", "module": "asyncio", "doc": ["The total number of to be consumed bytes."]}
{"index": 239, "name": "asyncio.isfuture", "module": "asyncio", "doc": ["Return True if obj is either of:"]}
{"index": 240, "name": "asyncio.ensure_future", "module": "asyncio", "doc": ["Return:", "If obj is neither of the above a TypeError is raised."]}
{"index": 241, "name": "asyncio.wrap_future", "module": "asyncio", "doc": ["Wrap a concurrent.futures.Future object in a asyncio.Future object."]}
{"index": 242, "name": "asyncio.Future", "module": "asyncio", "doc": ["A Future represents an eventual result of an asynchronous operation.", "Not thread-safe.", "Future is an awaitable object.", "Coroutines can await on Future objects until they either have a result or an exception set, or until they are cancelled.", "Typically Futures are used to enable low-level callback-based code (e.g.", "in protocols implemented using asyncio transports) to interoperate with high-level async/await code.", "The rule of thumb is to never expose Future objects in user-facing APIs, and the recommended way to create a Future object is to call loop.create_future().", "This way alternative event loop implementations can inject their own optimized implementations of a Future object."]}
{"index": 243, "name": "asyncio.Future.result", "module": "asyncio", "doc": ["Return the result of the Future.", "If the Future is done and has a result set by the set_result() method, the result value is returned.", "If the Future is done and has an exception set by the set_exception() method, this method raises the exception.", "If the Future has been cancelled, this method raises a CancelledError exception.", "If the Future\u2019s result isn\u2019t yet available, this method raises a InvalidStateError exception."]}
{"index": 244, "name": "asyncio.Future.set_result", "module": "asyncio", "doc": ["Mark the Future as done and set its result.", "Raises a InvalidStateError error if the Future is already done."]}
{"index": 245, "name": "asyncio.Future.set_exception", "module": "asyncio", "doc": ["Mark the Future as done and set an exception.", "Raises a InvalidStateError error if the Future is already done."]}
{"index": 246, "name": "asyncio.Future.done", "module": "asyncio", "doc": ["Return True if the Future is done.", "A Future is done if it was cancelled or if it has a result or an exception set with set_result() or set_exception() calls."]}
{"index": 247, "name": "asyncio.Future.cancelled", "module": "asyncio", "doc": ["Return True if the Future was cancelled.", "The method is usually used to check if a Future is not cancelled before setting a result or an exception for it:"]}
{"index": 248, "name": "asyncio.Future.add_done_callback", "module": "asyncio", "doc": ["Add a callback to be run when the Future is done.", "The callback is called with the Future object as its only argument.", "If the Future is already done when this method is called, the callback is scheduled with loop.call_soon().", "An optional keyword-only context argument allows specifying a custom contextvars.Context for the callback to run in.", "The current context is used when no context is provided.", "functools.partial() can be used to pass parameters to the callback, e.g.", ":"]}
{"index": 249, "name": "asyncio.Future.remove_done_callback", "module": "asyncio", "doc": ["Remove callback from the callbacks list.", "Returns the number of callbacks removed, which is typically 1, unless a callback was added more than once."]}
{"index": 250, "name": "asyncio.Future.cancel", "module": "asyncio", "doc": ["Cancel the Future and schedule callbacks.", "If the Future is already done or cancelled, return False.", "Otherwise, change the Future\u2019s state to cancelled, schedule the callbacks, and return True."]}
{"index": 251, "name": "asyncio.Future.exception", "module": "asyncio", "doc": ["Return the exception that was set on this Future.", "The exception (or None if no exception was set) is returned only if the Future is done.", "If the Future has been cancelled, this method raises a CancelledError exception.", "If the Future isn\u2019t done yet, this method raises an InvalidStateError exception."]}
{"index": 252, "name": "asyncio.Future.get_loop", "module": "asyncio", "doc": ["Return the event loop the Future object is bound to."]}
{"index": 253, "name": "asyncio.get_event_loop_policy", "module": "asyncio", "doc": ["Return the current process-wide policy."]}
{"index": 254, "name": "asyncio.set_event_loop_policy", "module": "asyncio", "doc": ["Set the current process-wide policy to policy.", "If policy is set to None, the default policy is restored."]}
{"index": 255, "name": "asyncio.AbstractEventLoopPolicy", "module": "asyncio", "doc": ["An abstract base class for asyncio policies."]}
{"index": 256, "name": "asyncio.AbstractEventLoopPolicy.get_event_loop", "module": "asyncio", "doc": ["Get the event loop for the current context.", "Return an event loop object implementing the AbstractEventLoop interface.", "This method should never return None."]}
{"index": 257, "name": "asyncio.AbstractEventLoopPolicy.set_event_loop", "module": "asyncio", "doc": ["Set the event loop for the current context to loop."]}
{"index": 258, "name": "asyncio.AbstractEventLoopPolicy.new_event_loop", "module": "asyncio", "doc": ["Create and return a new event loop object.", "This method should never return None."]}
{"index": 259, "name": "asyncio.AbstractEventLoopPolicy.get_child_watcher", "module": "asyncio", "doc": ["Get a child process watcher object.", "Return a watcher object implementing the AbstractChildWatcher interface.", "This function is Unix specific."]}
{"index": 260, "name": "asyncio.AbstractEventLoopPolicy.set_child_watcher", "module": "asyncio", "doc": ["Set the current child process watcher to watcher.", "This function is Unix specific."]}
{"index": 261, "name": "asyncio.DefaultEventLoopPolicy", "module": "asyncio", "doc": ["The default asyncio policy.", "Uses SelectorEventLoop on both Unix and Windows platforms.", "There is no need to install the default policy manually.", "asyncio is configured to use the default policy automatically."]}
{"index": 262, "name": "asyncio.WindowsProactorEventLoopPolicy", "module": "asyncio", "doc": ["An alternative event loop policy that uses the ProactorEventLoop event loop implementation.", "Availability: Windows."]}
{"index": 263, "name": "asyncio.get_child_watcher", "module": "asyncio", "doc": ["Return the current child watcher for the current policy."]}
{"index": 264, "name": "asyncio.set_child_watcher", "module": "asyncio", "doc": ["Set the current child watcher to watcher for the current policy.", "watcher must implement methods defined in the AbstractChildWatcher base class."]}
{"index": 265, "name": "asyncio.AbstractChildWatcher.add_child_handler", "module": "asyncio", "doc": ["Register a new child handler.", "Arrange for callback(pid, returncode, *args) to be called when a process with PID equal to pid terminates.", "Specifying another callback for the same process replaces the previous handler.", "The callback callable must be thread-safe."]}
{"index": 266, "name": "asyncio.AbstractChildWatcher.remove_child_handler", "module": "asyncio", "doc": ["Removes the handler for process with PID equal to pid.", "The function returns True if the handler was successfully removed, False if there was nothing to remove."]}
{"index": 267, "name": "asyncio.AbstractChildWatcher.attach_loop", "module": "asyncio", "doc": ["Attach the watcher to an event loop.", "If the watcher was previously attached to an event loop, then it is first detached before attaching to the new loop.", "Note: loop may be None."]}
{"index": 268, "name": "asyncio.AbstractChildWatcher.close", "module": "asyncio", "doc": ["Close the watcher.", "This method has to be called to ensure that underlying resources are cleaned-up."]}
{"index": 269, "name": "asyncio.SafeChildWatcher", "module": "asyncio", "doc": ["This implementation avoids disrupting other code spawning processes by polling every process explicitly on a SIGCHLD signal.", "This is a safe solution but it has a significant overhead when handling a big number of processes (O(n) each time a SIGCHLD is received).", "asyncio uses this safe implementation by default."]}
{"index": 270, "name": "asyncio.FastChildWatcher", "module": "asyncio", "doc": ["This implementation reaps every terminated processes by calling os.waitpid(-1) directly, possibly breaking other code spawning processes and waiting for their termination.", "There is no noticeable overhead when handling a big number of children (O(1) each time a child terminates)."]}
{"index": 271, "name": "asyncio.BaseTransport", "module": "asyncio", "doc": ["Base class for all transports.", "Contains methods that all asyncio transports share."]}
{"index": 272, "name": "asyncio.WriteTransport", "module": "asyncio", "doc": ["A base transport for write-only connections.", "Instances of the WriteTransport class are returned from the loop.connect_write_pipe() event loop method and are also used by subprocess-related methods like loop.subprocess_exec()."]}
{"index": 273, "name": "asyncio.ReadTransport", "module": "asyncio", "doc": ["A base transport for read-only connections.", "Instances of the ReadTransport class are returned from the loop.connect_read_pipe() event loop method and are also used by subprocess-related methods like loop.subprocess_exec()."]}
{"index": 274, "name": "asyncio.Transport", "module": "asyncio", "doc": ["Interface representing a bidirectional transport, such as a TCP connection.", "The user does not instantiate a transport directly; they call a utility function, passing it a protocol factory and other information necessary to create the transport and protocol.", "Instances of the Transport class are returned from or used by event loop methods like loop.create_connection(), loop.create_unix_connection(), loop.create_server(), loop.sendfile(), etc."]}
{"index": 275, "name": "asyncio.DatagramTransport", "module": "asyncio", "doc": ["A transport for datagram (UDP) connections.", "Instances of the DatagramTransport class are returned from the loop.create_datagram_endpoint() event loop method."]}
{"index": 276, "name": "asyncio.SubprocessTransport", "module": "asyncio", "doc": ["An abstraction to represent a connection between a parent and its child OS process.", "Instances of the SubprocessTransport class are returned from event loop methods loop.subprocess_shell() and loop.subprocess_exec()."]}
{"index": 277, "name": "asyncio.BaseTransport.close", "module": "asyncio", "doc": ["Close the transport.", "If the transport has a buffer for outgoing data, buffered data will be flushed asynchronously.", "No more data will be received.", "After all buffered data is flushed, the protocol\u2019s protocol.connection_lost() method will be called with None as its argument."]}
{"index": 278, "name": "asyncio.BaseTransport.is_closing", "module": "asyncio", "doc": ["Return True if the transport is closing or is closed."]}
{"index": 279, "name": "asyncio.BaseTransport.get_extra_info", "module": "asyncio", "doc": ["Return information about the transport or underlying resources it uses.", "name is a string representing the piece of transport-specific information to get.", "default is the value to return if the information is not available, or if the transport does not support querying it with the given third-party event loop implementation or on the current platform.", "For example, the following code attempts to get the underlying socket object of the transport:", "Categories of information that can be queried on some transports:"]}
{"index": 280, "name": "asyncio.BaseTransport.set_protocol", "module": "asyncio", "doc": ["Set a new protocol.", "Switching protocol should only be done when both protocols are documented to support the switch."]}
{"index": 281, "name": "asyncio.BaseTransport.get_protocol", "module": "asyncio", "doc": ["Return the current protocol."]}
{"index": 282, "name": "asyncio.ReadTransport.is_reading", "module": "asyncio", "doc": ["Return True if the transport is receiving new data."]}
{"index": 283, "name": "asyncio.ReadTransport.pause_reading", "module": "asyncio", "doc": ["Pause the receiving end of the transport.", "No data will be passed to the protocol\u2019s protocol.data_received() method until resume_reading() is called."]}
{"index": 284, "name": "asyncio.ReadTransport.resume_reading", "module": "asyncio", "doc": ["Resume the receiving end.", "The protocol\u2019s protocol.data_received() method will be called once again if some data is available for reading."]}
{"index": 285, "name": "asyncio.WriteTransport.abort", "module": "asyncio", "doc": ["Close the transport immediately, without waiting for pending operations to complete.", "Buffered data will be lost.", "No more data will be received.", "The protocol\u2019s protocol.connection_lost() method will eventually be called with None as its argument."]}
{"index": 286, "name": "asyncio.WriteTransport.can_write_eof", "module": "asyncio", "doc": ["Return True if the transport supports write_eof(), False if not."]}
{"index": 287, "name": "asyncio.WriteTransport.get_write_buffer_size", "module": "asyncio", "doc": ["Return the current size of the output buffer used by the transport."]}
{"index": 288, "name": "asyncio.WriteTransport.get_write_buffer_limits", "module": "asyncio", "doc": ["Get the high and low watermarks for write flow control.", "Return a tuple (low, high) where low and high are positive number of bytes.", "Use set_write_buffer_limits() to set the limits."]}
{"index": 289, "name": "asyncio.WriteTransport.set_write_buffer_limits", "module": "asyncio", "doc": ["Set the high and low watermarks for write flow control.", "These two values (measured in number of bytes) control when the protocol\u2019s protocol.pause_writing() and protocol.resume_writing() methods are called.", "If specified, the low watermark must be less than or equal to the high watermark.", "Neither high nor low can be negative.", "pause_writing() is called when the buffer size becomes greater than or equal to the high value.", "If writing has been paused, resume_writing() is called when the buffer size becomes less than or equal to the low value.", "The defaults are implementation-specific.", "If only the high watermark is given, the low watermark defaults to an implementation-specific value less than or equal to the high watermark.", "Setting high to zero forces low to zero as well, and causes pause_writing() to be called whenever the buffer becomes non-empty.", "Setting low to zero causes resume_writing() to be called only once the buffer is empty.", "Use of zero for either limit is generally sub-optimal as it reduces opportunities for doing I/O and computation concurrently.", "Use get_write_buffer_limits() to get the limits."]}
{"index": 290, "name": "asyncio.WriteTransport.write", "module": "asyncio", "doc": ["Write some data bytes to the transport.", "This method does not block; it buffers the data and arranges for it to be sent out asynchronously."]}
{"index": 291, "name": "asyncio.WriteTransport.writelines", "module": "asyncio", "doc": ["Write a list (or any iterable) of data bytes to the transport.", "This is functionally equivalent to calling write() on each element yielded by the iterable, but may be implemented more efficiently."]}
{"index": 292, "name": "asyncio.WriteTransport.write_eof", "module": "asyncio", "doc": ["Close the write end of the transport after flushing all buffered data.", "Data may still be received.", "This method can raise NotImplementedError if the transport (e.g.", "SSL) doesn\u2019t support half-closed connections."]}
{"index": 293, "name": "asyncio.DatagramTransport.sendto", "module": "asyncio", "doc": ["Send the data bytes to the remote peer given by addr (a transport-dependent target address).", "If addr is None, the data is sent to the target address given on transport creation.", "This method does not block; it buffers the data and arranges for it to be sent out asynchronously."]}
{"index": 294, "name": "asyncio.DatagramTransport.abort", "module": "asyncio", "doc": ["Close the transport immediately, without waiting for pending operations to complete.", "Buffered data will be lost.", "No more data will be received.", "The protocol\u2019s protocol.connection_lost() method will eventually be called with None as its argument."]}
{"index": 295, "name": "asyncio.SubprocessTransport.get_pid", "module": "asyncio", "doc": ["Return the subprocess process id as an integer."]}
{"index": 296, "name": "asyncio.SubprocessTransport.get_pipe_transport", "module": "asyncio", "doc": ["Return the transport for the communication pipe corresponding to the integer file descriptor fd:"]}
{"index": 297, "name": "asyncio.SubprocessTransport.get_returncode", "module": "asyncio", "doc": ["Return the subprocess return code as an integer or None if it hasn\u2019t returned, which is similar to the subprocess.Popen.returncode attribute."]}
{"index": 298, "name": "asyncio.SubprocessTransport.kill", "module": "asyncio", "doc": ["Kill the subprocess.", "On POSIX systems, the function sends SIGKILL to the subprocess.", "On Windows, this method is an alias for terminate().", "See also subprocess.Popen.kill()."]}
{"index": 299, "name": "asyncio.SubprocessTransport.send_signal", "module": "asyncio", "doc": ["Send the signal number to the subprocess, as in subprocess.Popen.send_signal()."]}
{"index": 300, "name": "asyncio.SubprocessTransport.terminate", "module": "asyncio", "doc": ["Stop the subprocess.", "On POSIX systems, this method sends SIGTERM to the subprocess.", "On Windows, the Windows API function TerminateProcess() is called to stop the subprocess.", "See also subprocess.Popen.terminate()."]}
{"index": 301, "name": "asyncio.SubprocessTransport.close", "module": "asyncio", "doc": ["Kill the subprocess by calling the kill() method.", "If the subprocess hasn\u2019t returned yet, and close transports of stdin, stdout, and stderr pipes."]}
{"index": 302, "name": "asyncio.BaseProtocol", "module": "asyncio", "doc": ["Base protocol with methods that all protocols share."]}
{"index": 303, "name": "asyncio.Protocol", "module": "asyncio", "doc": ["The base class for implementing streaming protocols (TCP, Unix sockets, etc)."]}
{"index": 304, "name": "asyncio.BufferedProtocol", "module": "asyncio", "doc": ["A base class for implementing streaming protocols with manual control of the receive buffer."]}
{"index": 305, "name": "asyncio.DatagramProtocol", "module": "asyncio", "doc": ["The base class for implementing datagram (UDP) protocols."]}
{"index": 306, "name": "asyncio.SubprocessProtocol", "module": "asyncio", "doc": ["The base class for implementing protocols communicating with child processes (unidirectional pipes)."]}
{"index": 307, "name": "asyncio.BaseProtocol.connection_made", "module": "asyncio", "doc": ["Called when a connection is made.", "The transport argument is the transport representing the connection.", "The protocol is responsible for storing the reference to its transport."]}
{"index": 308, "name": "asyncio.BaseProtocol.connection_lost", "module": "asyncio", "doc": ["Called when the connection is lost or closed.", "The argument is either an exception object or None.", "The latter means a regular EOF is received, or the connection was aborted or closed by this side of the connection."]}
{"index": 309, "name": "asyncio.BaseProtocol.pause_writing", "module": "asyncio", "doc": ["Called when the transport\u2019s buffer goes over the high watermark."]}
{"index": 310, "name": "asyncio.BaseProtocol.resume_writing", "module": "asyncio", "doc": ["Called when the transport\u2019s buffer drains below the low watermark."]}
{"index": 311, "name": "asyncio.Protocol.data_received", "module": "asyncio", "doc": ["Called when some data is received.", "data is a non-empty bytes object containing the incoming data.", "Whether the data is buffered, chunked or reassembled depends on the transport.", "In general, you shouldn\u2019t rely on specific semantics and instead make your parsing generic and flexible.", "However, data is always received in the correct order.", "The method can be called an arbitrary number of times while a connection is open.", "However, protocol.eof_received() is called at most once.", "Once eof_received() is called, data_received() is not called anymore."]}
{"index": 312, "name": "asyncio.Protocol.eof_received", "module": "asyncio", "doc": ["Called when the other end signals it won\u2019t send any more data (for example by calling transport.write_eof(), if the other end also uses asyncio).", "This method may return a false value (including None), in which case the transport will close itself.", "Conversely, if this method returns a true value, the protocol used determines whether to close the transport.", "Since the default implementation returns None, it implicitly closes the connection.", "Some transports, including SSL, don\u2019t support half-closed connections, in which case returning true from this method will result in the connection being closed."]}
{"index": 313, "name": "asyncio.BufferedProtocol.get_buffer", "module": "asyncio", "doc": ["Called to allocate a new receive buffer.", "sizehint is the recommended minimum size for the returned buffer.", "It is acceptable to return smaller or larger buffers than what sizehint suggests.", "When set to -1, the buffer size can be arbitrary.", "It is an error to return a buffer with a zero size.", "get_buffer() must return an object implementing the buffer protocol."]}
{"index": 314, "name": "asyncio.BufferedProtocol.buffer_updated", "module": "asyncio", "doc": ["Called when the buffer was updated with the received data.", "nbytes is the total number of bytes that were written to the buffer."]}
{"index": 315, "name": "asyncio.BufferedProtocol.eof_received", "module": "asyncio", "doc": ["See the documentation of the protocol.eof_received() method."]}
{"index": 316, "name": "asyncio.DatagramProtocol.datagram_received", "module": "asyncio", "doc": ["Called when a datagram is received.", "data is a bytes object containing the incoming data.", "addr is the address of the peer sending the data; the exact format depends on the transport."]}
{"index": 317, "name": "asyncio.DatagramProtocol.error_received", "module": "asyncio", "doc": ["Called when a previous send or receive operation raises an OSError.", "exc is the OSError instance.", "This method is called in rare conditions, when the transport (e.g.", "UDP) detects that a datagram could not be delivered to its recipient.", "In many conditions though, undeliverable datagrams will be silently dropped."]}
{"index": 318, "name": "asyncio.SubprocessProtocol.pipe_data_received", "module": "asyncio", "doc": ["Called when the child process writes data into its stdout or stderr pipe.", "fd is the integer file descriptor of the pipe.", "data is a non-empty bytes object containing the received data."]}
{"index": 319, "name": "asyncio.SubprocessProtocol.pipe_connection_lost", "module": "asyncio", "doc": ["Called when one of the pipes communicating with the child process is closed.", "fd is the integer file descriptor that was closed."]}
{"index": 320, "name": "asyncio.SubprocessProtocol.process_exited", "module": "asyncio", "doc": ["Called when the child process has exited."]}
{"index": 321, "name": "asyncio.Queue", "module": "asyncio", "doc": ["A first in, first out (FIFO) queue.", "If maxsize is less than or equal to zero, the queue size is infinite.", "If it is an integer greater than 0, then await put() blocks when the queue reaches maxsize until an item is removed by get().", "Unlike the standard library threading queue, the size of the queue is always known and can be returned by calling the qsize() method.", "This class is not thread safe."]}
{"index": 322, "name": "asyncio.Queue.maxsize", "module": "asyncio", "doc": ["Number of items allowed in the queue."]}
{"index": 323, "name": "asyncio.Queue.empty", "module": "asyncio", "doc": ["Return True if the queue is empty, False otherwise."]}
{"index": 324, "name": "asyncio.Queue.full", "module": "asyncio", "doc": ["Return True if there are maxsize items in the queue.", "If the queue was initialized with maxsize=0 (the default), then full() never returns True."]}
{"index": 325, "name": "asyncio.Queue.get", "module": "asyncio", "doc": ["Remove and return an item from the queue.", "If queue is empty, wait until an item is available."]}
{"index": 326, "name": "asyncio.Queue.get_nowait", "module": "asyncio", "doc": ["Return an item if one is immediately available, else raise QueueEmpty."]}
{"index": 327, "name": "asyncio.Queue.join", "module": "asyncio", "doc": ["Block until all items in the queue have been received and processed.", "The count of unfinished tasks goes up whenever an item is added to the queue.", "The count goes down whenever a consumer coroutine calls task_done() to indicate that the item was retrieved and all work on it is complete.", "When the count of unfinished tasks drops to zero, join() unblocks."]}
{"index": 328, "name": "asyncio.Queue.put", "module": "asyncio", "doc": ["Put an item into the queue.", "If the queue is full, wait until a free slot is available before adding the item."]}
{"index": 329, "name": "asyncio.Queue.put_nowait", "module": "asyncio", "doc": ["Put an item into the queue without blocking.", "If no free slot is immediately available, raise QueueFull."]}
{"index": 330, "name": "asyncio.Queue.qsize", "module": "asyncio", "doc": ["Return the number of items in the queue."]}
{"index": 331, "name": "asyncio.Queue.task_done", "module": "asyncio", "doc": ["Indicate that a formerly enqueued task is complete.", "Used by queue consumers.", "For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete.", "If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue).", "Raises ValueError if called more times than there were items placed in the queue."]}
{"index": 332, "name": "asyncio.PriorityQueue", "module": "asyncio", "doc": ["A variant of Queue; retrieves entries in priority order (lowest first).", "Entries are typically tuples of the form (priority_number, data)."]}
{"index": 333, "name": "asyncio.LifoQueue", "module": "asyncio", "doc": ["A variant of Queue that retrieves most recently added entries first (last in, first out)."]}
{"index": 334, "name": "asyncio.QueueEmpty", "module": "asyncio", "doc": ["This exception is raised when the get_nowait() method is called on an empty queue."]}
{"index": 335, "name": "asyncio.QueueFull", "module": "asyncio", "doc": ["Exception raised when the put_nowait() method is called on a queue that has reached its maxsize."]}
{"index": 336, "name": "asyncio.open_connection", "module": "asyncio", "doc": ["Establish a network connection and return a pair of (reader, writer) objects.", "The returned reader and writer objects are instances of StreamReader and StreamWriter classes.", "The loop argument is optional and can always be determined automatically when this function is awaited from a coroutine.", "limit determines the buffer size limit used by the returned StreamReader instance.", "By default the limit is set to 64 KiB.", "The rest of the arguments are passed directly to loop.create_connection()."]}
{"index": 337, "name": "asyncio.start_server", "module": "asyncio", "doc": ["Start a socket server.", "The client_connected_cb callback is called whenever a new client connection is established.", "It receives a (reader, writer) pair as two arguments, instances of the StreamReader and StreamWriter classes.", "client_connected_cb can be a plain callable or a coroutine function; if it is a coroutine function, it will be automatically scheduled as a Task.", "The loop argument is optional and can always be determined automatically when this method is awaited from a coroutine.", "limit determines the buffer size limit used by the returned StreamReader instance.", "By default the limit is set to 64 KiB.", "The rest of the arguments are passed directly to loop.create_server()."]}
{"index": 338, "name": "asyncio.open_unix_connection", "module": "asyncio", "doc": ["Establish a Unix socket connection and return a pair of (reader, writer).", "Similar to open_connection() but operates on Unix sockets.", "See also the documentation of loop.create_unix_connection().", "Availability: Unix."]}
{"index": 339, "name": "asyncio.start_unix_server", "module": "asyncio", "doc": ["Start a Unix socket server.", "Similar to start_server() but works with Unix sockets.", "See also the documentation of loop.create_unix_server().", "Availability: Unix."]}
{"index": 340, "name": "asyncio.StreamReader", "module": "asyncio", "doc": ["Represents a reader object that provides APIs to read data from the IO stream.", "It is not recommended to instantiate StreamReader objects directly; use open_connection() and start_server() instead."]}
{"index": 341, "name": "asyncio.StreamReader.read", "module": "asyncio", "doc": ["Read up to n bytes.", "If n is not provided, or set to -1, read until EOF and return all read bytes.", "If EOF was received and the internal buffer is empty, return an empty bytes object."]}
{"index": 342, "name": "asyncio.StreamReader.readline", "module": "asyncio", "doc": ["Read one line, where \u201cline\u201d is a sequence of bytes ending with \\n.", "If EOF is received and \\n was not found, the method returns partially read data.", "If EOF is received and the internal buffer is empty, return an empty bytes object."]}
{"index": 343, "name": "asyncio.StreamReader.readexactly", "module": "asyncio", "doc": ["Read exactly n bytes.", "Raise an IncompleteReadError if EOF is reached before n can be read.", "Use the IncompleteReadError.partial attribute to get the partially read data."]}
{"index": 344, "name": "asyncio.StreamReader.readuntil", "module": "asyncio", "doc": ["Read data from the stream until separator is found.", "On success, the data and separator will be removed from the internal buffer (consumed).", "Returned data will include the separator at the end.", "If the amount of data read exceeds the configured stream limit, a LimitOverrunError exception is raised, and the data is left in the internal buffer and can be read again.", "If EOF is reached before the complete separator is found, an IncompleteReadError exception is raised, and the internal buffer is reset.", "The IncompleteReadError.partial attribute may contain a portion of the separator."]}
{"index": 345, "name": "asyncio.StreamReader.at_eof", "module": "asyncio", "doc": ["Return True if the buffer is empty and feed_eof() was called."]}
{"index": 346, "name": "asyncio.StreamWriter", "module": "asyncio", "doc": ["Represents a writer object that provides APIs to write data to the IO stream.", "It is not recommended to instantiate StreamWriter objects directly; use open_connection() and start_server() instead."]}
{"index": 347, "name": "asyncio.StreamWriter.can_write_eof", "module": "asyncio", "doc": ["Return True if the underlying transport supports the write_eof() method, False otherwise."]}
{"index": 348, "name": "asyncio.StreamWriter.write_eof", "module": "asyncio", "doc": ["Close the write end of the stream after the buffered write data is flushed."]}
{"index": 349, "name": "asyncio.StreamWriter.transport", "module": "asyncio", "doc": ["Return the underlying asyncio transport."]}
{"index": 350, "name": "asyncio.StreamWriter.get_extra_info", "module": "asyncio", "doc": ["Access optional transport information; see BaseTransport.get_extra_info() for details."]}
{"index": 351, "name": "asyncio.StreamWriter.write", "module": "asyncio", "doc": ["Write data to the stream.", "This method is not subject to flow control.", "Calls to write() should be followed by drain()."]}
{"index": 352, "name": "asyncio.StreamWriter.writelines", "module": "asyncio", "doc": ["Write a list (or any iterable) of bytes to the stream.", "This method is not subject to flow control.", "Calls to writelines() should be followed by drain()."]}
{"index": 353, "name": "asyncio.StreamWriter.drain", "module": "asyncio", "doc": ["Wait until it is appropriate to resume writing to the stream.", "Example:", "This is a flow control method that interacts with the underlying IO write buffer.", "When the size of the buffer reaches the high watermark, drain() blocks until the size of the buffer is drained down to the low watermark and writing can be resumed.", "When there is nothing to wait for, the drain() returns immediately."]}
{"index": 354, "name": "asyncio.StreamWriter.close", "module": "asyncio", "doc": ["Close the stream."]}
{"index": 355, "name": "asyncio.StreamWriter.is_closing", "module": "asyncio", "doc": ["Return True if the stream is closed or in the process of being closed."]}
{"index": 356, "name": "asyncio.StreamWriter.wait_closed", "module": "asyncio", "doc": ["Wait until the stream is closed.", "Should be called after close() to wait until the underlying connection is closed."]}
{"index": 357, "name": "asyncio.create_subprocess_exec", "module": "asyncio", "doc": ["Create a subprocess.", "The limit argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr (if subprocess.PIPE is passed to stdout and stderr arguments).", "Return a Process instance.", "See the documentation of loop.subprocess_exec() for other parameters."]}
{"index": 358, "name": "asyncio.create_subprocess_shell", "module": "asyncio", "doc": ["Run the cmd shell command.", "The limit argument sets the buffer limit for StreamReader wrappers for Process.stdout and Process.stderr (if subprocess.PIPE is passed to stdout and stderr arguments).", "Return a Process instance.", "See the documentation of loop.subprocess_shell() for other parameters."]}
{"index": 359, "name": "asyncio.asyncio.subprocess.PIPE", "module": "asyncio", "doc": ["Can be passed to the stdin, stdout or stderr parameters.", "If PIPE is passed to stdin argument, the Process.stdin attribute will point to a StreamWriter instance.", "If PIPE is passed to stdout or stderr arguments, the Process.stdout and Process.stderr attributes will point to StreamReader instances."]}
{"index": 360, "name": "asyncio.asyncio.subprocess.STDOUT", "module": "asyncio", "doc": ["Special value that can be used as the stderr argument and indicates that standard error should be redirected into standard output."]}
{"index": 361, "name": "asyncio.asyncio.subprocess.DEVNULL", "module": "asyncio", "doc": ["Special value that can be used as the stdin, stdout or stderr argument to process creation functions.", "It indicates that the special file os.devnull will be used for the corresponding subprocess stream."]}
{"index": 362, "name": "asyncio.asyncio.subprocess.Process", "module": "asyncio", "doc": ["An object that wraps OS processes created by the create_subprocess_exec() and create_subprocess_shell() functions.", "This class is designed to have a similar API to the subprocess.Popen class, but there are some notable differences:", "This class is not thread safe.", "See also the Subprocess and Threads section."]}
{"index": 363, "name": "asyncio.asyncio.subprocess.Process.wait", "module": "asyncio", "doc": ["Wait for the child process to terminate.", "Set and return the returncode attribute."]}
{"index": 364, "name": "asyncio.asyncio.subprocess.Process.communicate", "module": "asyncio", "doc": ["Interact with process:", "The optional input argument is the data (bytes object) that will be sent to the child process.", "Return a tuple (stdout_data, stderr_data).", "If either BrokenPipeError or ConnectionResetError exception is raised when writing input into stdin, the exception is ignored.", "This condition occurs when the process exits before all data are written into stdin.", "If it is desired to send data to the process\u2019 stdin, the process needs to be created with stdin=PIPE.", "Similarly, to get anything other than None in the result tuple, the process has to be created with stdout=PIPE and/or stderr=PIPE arguments.", "Note, that the data read is buffered in memory, so do not use this method if the data size is large or unlimited."]}
{"index": 365, "name": "asyncio.asyncio.subprocess.Process.send_signal", "module": "asyncio", "doc": ["Sends the signal signal to the child process."]}
{"index": 366, "name": "asyncio.asyncio.subprocess.Process.terminate", "module": "asyncio", "doc": ["Stop the child process.", "On POSIX systems this method sends signal.SIGTERM to the child process.", "On Windows the Win32 API function TerminateProcess() is called to stop the child process."]}
{"index": 367, "name": "asyncio.asyncio.subprocess.Process.kill", "module": "asyncio", "doc": ["Kill the child.", "On POSIX systems this method sends SIGKILL to the child process.", "On Windows this method is an alias for terminate()."]}
{"index": 368, "name": "asyncio.asyncio.subprocess.Process.stdin", "module": "asyncio", "doc": ["Standard input stream (StreamWriter) or None if the process was created with stdin=None."]}
{"index": 369, "name": "asyncio.asyncio.subprocess.Process.stdout", "module": "asyncio", "doc": ["Standard output stream (StreamReader) or None if the process was created with stdout=None."]}
{"index": 370, "name": "asyncio.asyncio.subprocess.Process.stderr", "module": "asyncio", "doc": ["Standard error stream (StreamReader) or None if the process was created with stderr=None."]}
{"index": 371, "name": "asyncio.asyncio.subprocess.Process.pid", "module": "asyncio", "doc": ["Process identification number (PID).", "Note that for processes created by the create_subprocess_shell() function, this attribute is the PID of the spawned shell."]}
{"index": 372, "name": "asyncio.asyncio.subprocess.Process.returncode", "module": "asyncio", "doc": ["Return code of the process when it exits.", "A None value indicates that the process has not terminated yet.", "A negative value -N indicates that the child was terminated by signal N (POSIX only)."]}
{"index": 373, "name": "asyncio.Lock", "module": "asyncio", "doc": ["Implements a mutex lock for asyncio tasks.", "Not thread-safe.", "An asyncio lock can be used to guarantee exclusive access to a shared resource.", "The preferred way to use a Lock is an async with statement:", "which is equivalent to:"]}
{"index": 374, "name": "asyncio.Lock.acquire", "module": "asyncio", "doc": ["Acquire the lock.", "This method waits until the lock is unlocked, sets it to locked and returns True.", "When more than one coroutine is blocked in acquire() waiting for the lock to be unlocked, only one coroutine eventually proceeds.", "Acquiring a lock is fair: the coroutine that proceeds will be the first coroutine that started waiting on the lock."]}
{"index": 375, "name": "asyncio.Lock.release", "module": "asyncio", "doc": ["Release the lock.", "When the lock is locked, reset it to unlocked and return.", "If the lock is unlocked, a RuntimeError is raised."]}
{"index": 376, "name": "asyncio.Lock.locked", "module": "asyncio", "doc": ["Return True if the lock is locked."]}
{"index": 377, "name": "asyncio.Event", "module": "asyncio", "doc": ["An event object.", "Not thread-safe.", "An asyncio event can be used to notify multiple asyncio tasks that some event has happened.", "An Event object manages an internal flag that can be set to true with the set() method and reset to false with the clear() method.", "The wait() method blocks until the flag is set to true.", "The flag is set to false initially.", "Example:"]}
{"index": 378, "name": "asyncio.Event.wait", "module": "asyncio", "doc": ["Wait until the event is set.", "If the event is set, return True immediately.", "Otherwise block until another task calls set()."]}
{"index": 379, "name": "asyncio.Event.set", "module": "asyncio", "doc": ["Set the event.", "All tasks waiting for event to be set will be immediately awakened."]}
{"index": 380, "name": "asyncio.Event.clear", "module": "asyncio", "doc": ["Clear (unset) the event.", "Tasks awaiting on wait() will now block until the set() method is called again."]}
{"index": 381, "name": "asyncio.Event.is_set", "module": "asyncio", "doc": ["Return True if the event is set."]}
{"index": 382, "name": "asyncio.Condition", "module": "asyncio", "doc": ["A Condition object.", "Not thread-safe.", "An asyncio condition primitive can be used by a task to wait for some event to happen and then get exclusive access to a shared resource.", "In essence, a Condition object combines the functionality of an Event and a Lock.", "It is possible to have multiple Condition objects share one Lock, which allows coordinating exclusive access to a shared resource between different tasks interested in particular states of that shared resource.", "The optional lock argument must be a Lock object or None.", "In the latter case a new Lock object is created automatically.", "The preferred way to use a Condition is an async with statement:", "which is equivalent to:"]}
{"index": 383, "name": "asyncio.Condition.acquire", "module": "asyncio", "doc": ["Acquire the underlying lock.", "This method waits until the underlying lock is unlocked, sets it to locked and returns True."]}
{"index": 384, "name": "asyncio.Condition.notify", "module": "asyncio", "doc": ["Wake up at most n tasks (1 by default) waiting on this condition.", "The method is no-op if no tasks are waiting.", "The lock must be acquired before this method is called and released shortly after.", "If called with an unlocked lock a RuntimeError error is raised."]}
{"index": 385, "name": "asyncio.Condition.locked", "module": "asyncio", "doc": ["Return True if the underlying lock is acquired."]}
{"index": 386, "name": "asyncio.Condition.notify_all", "module": "asyncio", "doc": ["Wake up all tasks waiting on this condition.", "This method acts like notify(), but wakes up all waiting tasks.", "The lock must be acquired before this method is called and released shortly after.", "If called with an unlocked lock a RuntimeError error is raised."]}
{"index": 387, "name": "asyncio.Condition.release", "module": "asyncio", "doc": ["Release the underlying lock.", "When invoked on an unlocked lock, a RuntimeError is raised."]}
{"index": 388, "name": "asyncio.Condition.wait", "module": "asyncio", "doc": ["Wait until notified.", "If the calling task has not acquired the lock when this method is called, a RuntimeError is raised.", "This method releases the underlying lock, and then blocks until it is awakened by a notify() or notify_all() call.", "Once awakened, the Condition re-acquires its lock and this method returns True."]}
{"index": 389, "name": "asyncio.Condition.wait_for", "module": "asyncio", "doc": ["Wait until a predicate becomes true.", "The predicate must be a callable which result will be interpreted as a boolean value.", "The final value is the return value."]}
{"index": 390, "name": "asyncio.Semaphore", "module": "asyncio", "doc": ["A Semaphore object.", "Not thread-safe.", "A semaphore manages an internal counter which is decremented by each acquire() call and incremented by each release() call.", "The counter can never go below zero; when acquire() finds that it is zero, it blocks, waiting until some task calls release().", "The optional value argument gives the initial value for the internal counter (1 by default).", "If the given value is less than 0 a ValueError is raised.", "The preferred way to use a Semaphore is an async with statement:", "which is equivalent to:"]}
{"index": 391, "name": "asyncio.Semaphore.acquire", "module": "asyncio", "doc": ["Acquire a semaphore.", "If the internal counter is greater than zero, decrement it by one and return True immediately.", "If it is zero, wait until a release() is called and return True."]}
{"index": 392, "name": "asyncio.Semaphore.locked", "module": "asyncio", "doc": ["Returns True if semaphore can not be acquired immediately."]}
{"index": 393, "name": "asyncio.Semaphore.release", "module": "asyncio", "doc": ["Release a semaphore, incrementing the internal counter by one.", "Can wake up a task waiting to acquire the semaphore.", "Unlike BoundedSemaphore, Semaphore allows making more release() calls than acquire() calls."]}
{"index": 394, "name": "asyncio.BoundedSemaphore", "module": "asyncio", "doc": ["A bounded semaphore object.", "Not thread-safe.", "Bounded Semaphore is a version of Semaphore that raises a ValueError in release() if it increases the internal counter above the initial value."]}
{"index": 395, "name": "asyncio.run", "module": "asyncio", "doc": ["Execute the coroutine coro and return the result.", "This function runs the passed coroutine, taking care of managing the asyncio event loop and finalizing asynchronous generators.", "This function cannot be called when another asyncio event loop is running in the same thread.", "If debug is True, the event loop will be run in debug mode.", "This function always creates a new event loop and closes it at the end.", "It should be used as a main entry point for asyncio programs, and should ideally only be called once.", "Example:"]}
{"index": 396, "name": "asyncio.create_task", "module": "asyncio", "doc": ["Wrap the coro coroutine into a Task and schedule its execution.", "Return the Task object.", "The task is executed in the loop returned by get_running_loop(), RuntimeError is raised if there is no running loop in current thread.", "This function has been added in Python 3.7.", "Prior to Python 3.7, the low-level asyncio.ensure_future() function can be used instead:"]}
{"index": 397, "name": "asyncio.sleep", "module": "asyncio", "doc": ["Block for delay seconds.", "If result is provided, it is returned to the caller when the coroutine completes.", "sleep() always suspends the current task, allowing other tasks to run.", "The loop argument is deprecated and scheduled for removal in Python 3.10.", "Example of coroutine displaying the current date every second for 5 seconds:"]}
{"index": 398, "name": "asyncio.gather", "module": "asyncio", "doc": ["Run awaitable objects in the aws sequence concurrently.", "If any awaitable in aws is a coroutine, it is automatically scheduled as a Task.", "If all awaitables are completed successfully, the result is an aggregate list of returned values.", "The order of result values corresponds to the order of awaitables in aws.", "If return_exceptions is False (default), the first raised exception is immediately propagated to the task that awaits on gather().", "Other awaitables in the aws sequence won\u2019t be cancelled and will continue to run.", "If return_exceptions is True, exceptions are treated the same as successful results, and aggregated in the result list.", "If gather() is cancelled, all submitted awaitables (that have not completed yet) are also cancelled.", "If any Task or Future from the aws sequence is cancelled, it is treated as if it raised CancelledError \u2013 the gather() call is not cancelled in this case.", "This is to prevent the cancellation of one submitted Task/Future to cause other Tasks/Futures to be cancelled.", "Example:"]}
{"index": 399, "name": "asyncio.shield", "module": "asyncio", "doc": ["Protect an awaitable object from being cancelled.", "If aw is a coroutine it is automatically scheduled as a Task.", "The statement:", "is equivalent to:", "except that if the coroutine containing it is cancelled, the Task running in something() is not cancelled.", "From the point of view of something(), the cancellation did not happen.", "Although its caller is still cancelled, so the \u201cawait\u201d expression still raises a CancelledError.", "If something() is cancelled by other means (i.e.", "from within itself) that would also cancel shield().", "If it is desired to completely ignore cancellation (not recommended) the shield() function should be combined with a try/except clause, as follows:"]}
{"index": 400, "name": "asyncio.wait_for", "module": "asyncio", "doc": ["Wait for the aw awaitable to complete with a timeout.", "If aw is a coroutine it is automatically scheduled as a Task.", "timeout can either be None or a float or int number of seconds to wait for.", "If timeout is None, block until the future completes.", "If a timeout occurs, it cancels the task and raises asyncio.TimeoutError.", "To avoid the task cancellation, wrap it in shield().", "The function will wait until the future is actually cancelled, so the total wait time may exceed the timeout.", "If the wait is cancelled, the future aw is also cancelled.", "The loop argument is deprecated and scheduled for removal in Python 3.10.", "Example:"]}
{"index": 401, "name": "asyncio.wait", "module": "asyncio", "doc": ["Run awaitable objects in the aws set concurrently and block until the condition specified by return_when.", "If any awaitable in aws is a coroutine, it is automatically scheduled as a Task.", "Passing coroutines objects to wait() directly is deprecated as it leads to confusing behavior.", "Returns two sets of Tasks/Futures: (done, pending).", "Usage:", "The loop argument is deprecated and scheduled for removal in Python 3.10.", "timeout (a float or int), if specified, can be used to control the maximum number of seconds to wait before returning.", "Note that this function does not raise asyncio.TimeoutError.", "Futures or Tasks that aren\u2019t done when the timeout occurs are simply returned in the second set.", "return_when indicates when this function should return.", "It must be one of the following constants:", "Unlike wait_for(), wait() does not cancel the futures when a timeout occurs."]}
{"index": 402, "name": "asyncio.as_completed", "module": "asyncio", "doc": ["Run awaitable objects in the aws set concurrently.", "Return an iterator of Future objects.", "Each Future object returned represents the earliest result from the set of the remaining awaitables.", "Raises asyncio.TimeoutError if the timeout occurs before all Futures are done.", "Example:"]}
{"index": 403, "name": "asyncio.run_coroutine_threadsafe", "module": "asyncio", "doc": ["Submit a coroutine to the given event loop.", "Thread-safe.", "Return a concurrent.futures.Future to wait for the result from another OS thread.", "This function is meant to be called from a different OS thread than the one where the event loop is running.", "Example:", "If an exception is raised in the coroutine, the returned Future will be notified.", "It can also be used to cancel the task in the event loop:", "See the concurrency and multithreading section of the documentation.", "Unlike other asyncio functions this function requires the loop argument to be passed explicitly."]}
{"index": 404, "name": "asyncio.current_task", "module": "asyncio", "doc": ["Return the currently running Task instance, or None if no task is running.", "If loop is None get_running_loop() is used to get the current loop."]}
{"index": 405, "name": "asyncio.all_tasks", "module": "asyncio", "doc": ["Return a set of not yet finished Task objects run by the loop.", "If loop is None, get_running_loop() is used for getting current loop."]}
{"index": 406, "name": "asyncio.Task", "module": "asyncio", "doc": ["A Future-like object that runs a Python coroutine.", "Not thread-safe.", "Tasks are used to run coroutines in event loops.", "If a coroutine awaits on a Future, the Task suspends the execution of the coroutine and waits for the completion of the Future.", "When the Future is done, the execution of the wrapped coroutine resumes.", "Event loops use cooperative scheduling: an event loop runs one Task at a time.", "While a Task awaits for the completion of a Future, the event loop runs other Tasks, callbacks, or performs IO operations.", "Use the high-level asyncio.create_task() function to create Tasks, or the low-level loop.create_task() or ensure_future() functions.", "Manual instantiation of Tasks is discouraged.", "To cancel a running Task use the cancel() method.", "Calling it will cause the Task to throw a CancelledError exception into the wrapped coroutine.", "If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled.", "cancelled() can be used to check if the Task was cancelled.", "The method returns True if the wrapped coroutine did not suppress the CancelledError exception and was actually cancelled.", "asyncio.Task inherits from Future all of its APIs except Future.set_result() and Future.set_exception().", "Tasks support the contextvars module.", "When a Task is created it copies the current context and later runs its coroutine in the copied context."]}
{"index": 407, "name": "asyncio.Task.cancel", "module": "asyncio", "doc": ["Request the Task to be cancelled.", "This arranges for a CancelledError exception to be thrown into the wrapped coroutine on the next cycle of the event loop.", "The coroutine then has a chance to clean up or even deny the request by suppressing the exception with a try \u2026 \u2026 except CancelledError \u2026 finally block.", "Therefore, unlike Future.cancel(), Task.cancel() does not guarantee that the Task will be cancelled, although suppressing cancellation completely is not common and is actively discouraged.", "The following example illustrates how coroutines can intercept the cancellation request:"]}
{"index": 408, "name": "asyncio.Task.cancelled", "module": "asyncio", "doc": ["Return True if the Task is cancelled.", "The Task is cancelled when the cancellation was requested with cancel() and the wrapped coroutine propagated the CancelledError exception thrown into it."]}
{"index": 409, "name": "asyncio.Task.done", "module": "asyncio", "doc": ["Return True if the Task is done.", "A Task is done when the wrapped coroutine either returned a value, raised an exception, or the Task was cancelled."]}
{"index": 410, "name": "asyncio.Task.result", "module": "asyncio", "doc": ["Return the result of the Task.", "If the Task is done, the result of the wrapped coroutine is returned (or if the coroutine raised an exception, that exception is re-raised.)", "If the Task has been cancelled, this method raises a CancelledError exception.", "If the Task\u2019s result isn\u2019t yet available, this method raises a InvalidStateError exception."]}
{"index": 411, "name": "asyncio.Task.exception", "module": "asyncio", "doc": ["Return the exception of the Task.", "If the wrapped coroutine raised an exception that exception is returned.", "If the wrapped coroutine returned normally this method returns None.", "If the Task has been cancelled, this method raises a CancelledError exception.", "If the Task isn\u2019t done yet, this method raises an InvalidStateError exception."]}
{"index": 412, "name": "asyncio.Task.add_done_callback", "module": "asyncio", "doc": ["Add a callback to be run when the Task is done.", "This method should only be used in low-level callback-based code.", "See the documentation of Future.add_done_callback() for more details."]}
{"index": 413, "name": "asyncio.Task.remove_done_callback", "module": "asyncio", "doc": ["Remove callback from the callbacks list.", "This method should only be used in low-level callback-based code.", "See the documentation of Future.remove_done_callback() for more details."]}
{"index": 414, "name": "asyncio.Task.get_stack", "module": "asyncio", "doc": ["Return the list of stack frames for this Task.", "If the wrapped coroutine is not done, this returns the stack where it is suspended.", "If the coroutine has completed successfully or was cancelled, this returns an empty list.", "If the coroutine was terminated by an exception, this returns the list of traceback frames.", "The frames are always ordered from oldest to newest.", "Only one stack frame is returned for a suspended coroutine.", "The optional limit argument sets the maximum number of frames to return; by default all available frames are returned.", "The ordering of the returned list differs depending on whether a stack or a traceback is returned: the newest frames of a stack are returned, but the oldest frames of a traceback are returned.", "(This matches the behavior of the traceback module.)"]}
{"index": 415, "name": "asyncio.Task.print_stack", "module": "asyncio", "doc": ["Print the stack or traceback for this Task.", "This produces output similar to that of the traceback module for the frames retrieved by get_stack().", "The limit argument is passed to get_stack() directly.", "The file argument is an I/O stream to which the output is written; by default output is written to sys.stderr."]}
{"index": 416, "name": "asyncio.Task.all_tasks", "module": "asyncio", "doc": ["Return a set of all tasks for an event loop.", "By default all tasks for the current event loop are returned.", "If loop is None, the get_event_loop() function is used to get the current loop.", "This method is deprecated and will be removed in Python 3.9.", "Use the asyncio.all_tasks() function instead."]}
{"index": 417, "name": "asyncio.Task.current_task", "module": "asyncio", "doc": ["Return the currently running task or None.", "If loop is None, the get_event_loop() function is used to get the current loop.", "This method is deprecated and will be removed in Python 3.9.", "Use the asyncio.current_task() function instead."]}
{"index": 418, "name": "asyncio.coroutine", "module": "asyncio", "doc": ["Decorator to mark generator-based coroutines.", "This decorator enables legacy generator-based coroutines to be compatible with async/await code:", "This decorator is deprecated and is scheduled for removal in Python 3.10.", "This decorator should not be used for async def coroutines."]}
{"index": 419, "name": "asyncio.iscoroutine", "module": "asyncio", "doc": ["Return True if obj is a coroutine object.", "This method is different from inspect.iscoroutine() because it returns True for generator-based coroutines."]}
{"index": 420, "name": "asyncio.iscoroutinefunction", "module": "asyncio", "doc": ["Return True if func is a coroutine function.", "This method is different from inspect.iscoroutinefunction() because it returns True for generator-based coroutine functions decorated with @coroutine."]}
{"index": 421, "name": "asyncore.loop", "module": "asyncore", "doc": ["Enter a polling loop that terminates after count passes or all open channels have been closed.", "All arguments are optional.", "The count parameter defaults to None, resulting in the loop terminating only when all channels have been closed.", "The timeout argument sets the timeout parameter for the appropriate select() or poll() call, measured in seconds; the default is 30 seconds.", "The use_poll parameter, if true, indicates that poll() should be used in preference to select() (the default is False).", "The map parameter is a dictionary whose items are the channels to watch.", "As channels are closed they are deleted from their map.", "If map is omitted, a global map is used.", "Channels (instances of asyncore.dispatcher, asynchat.async_chat and subclasses thereof) can freely be mixed in the map."]}
{"index": 422, "name": "asyncore.dispatcher", "module": "asyncore", "doc": ["The dispatcher class is a thin wrapper around a low-level socket object.", "To make it more useful, it has a few methods for event-handling which are called from the asynchronous loop.", "Otherwise, it can be treated as a normal non-blocking socket object.", "The firing of low-level events at certain times or in certain connection states tells the asynchronous loop that certain higher-level events have taken place.", "For example, if we have asked for a socket to connect to another host, we know that the connection has been made when the socket becomes writable for the first time (at this point you know that you may write to it with the expectation of success).", "The implied higher-level events are:", "During asynchronous processing, each mapped channel\u2019s readable() and writable() methods are used to determine whether the channel\u2019s socket should be added to the list of channels select()ed or poll()ed for read and write events.", "Thus, the set of channel events is larger than the basic socket events.", "The full set of methods that can be overridden in your subclass follows:", "In addition, each channel delegates or extends many of the socket methods.", "Most of these are nearly identical to their socket partners."]}
{"index": 423, "name": "asyncore.dispatcher.handle_read", "module": "asyncore", "doc": ["Called when the asynchronous loop detects that a read() call on the channel\u2019s socket will succeed."]}
{"index": 424, "name": "asyncore.dispatcher.handle_write", "module": "asyncore", "doc": ["Called when the asynchronous loop detects that a writable socket can be written.", "Often this method will implement the necessary buffering for performance.", "For example:"]}
{"index": 425, "name": "asyncore.dispatcher.handle_expt", "module": "asyncore", "doc": ["Called when there is out of band (OOB) data for a socket connection.", "This will almost never happen, as OOB is tenuously supported and rarely used."]}
{"index": 426, "name": "asyncore.dispatcher.handle_connect", "module": "asyncore", "doc": ["Called when the active opener\u2019s socket actually makes a connection.", "Might send a \u201cwelcome\u201d banner, or initiate a protocol negotiation with the remote endpoint, for example."]}
{"index": 427, "name": "asyncore.dispatcher.handle_close", "module": "asyncore", "doc": ["Called when the socket is closed."]}
{"index": 428, "name": "asyncore.dispatcher.handle_error", "module": "asyncore", "doc": ["Called when an exception is raised and not otherwise handled.", "The default version prints a condensed traceback."]}
{"index": 429, "name": "asyncore.dispatcher.handle_accept", "module": "asyncore", "doc": ["Called on listening channels (passive openers) when a connection can be established with a new remote endpoint that has issued a connect() call for the local endpoint.", "Deprecated in version 3.2; use handle_accepted() instead."]}
{"index": 430, "name": "asyncore.dispatcher.handle_accepted", "module": "asyncore", "doc": ["Called on listening channels (passive openers) when a connection has been established with a new remote endpoint that has issued a connect() call for the local endpoint.", "sock is a new socket object usable to send and receive data on the connection, and addr is the address bound to the socket on the other end of the connection."]}
{"index": 431, "name": "asyncore.dispatcher.readable", "module": "asyncore", "doc": ["Called each time around the asynchronous loop to determine whether a channel\u2019s socket should be added to the list on which read events can occur.", "The default method simply returns True, indicating that by default, all channels will be interested in read events."]}
{"index": 432, "name": "asyncore.dispatcher.writable", "module": "asyncore", "doc": ["Called each time around the asynchronous loop to determine whether a channel\u2019s socket should be added to the list on which write events can occur.", "The default method simply returns True, indicating that by default, all channels will be interested in write events."]}
{"index": 433, "name": "asyncore.dispatcher.create_socket", "module": "asyncore", "doc": ["This is identical to the creation of a normal socket, and will use the same options for creation.", "Refer to the socket documentation for information on creating sockets."]}
{"index": 434, "name": "asyncore.dispatcher.connect", "module": "asyncore", "doc": ["As with the normal socket object, address is a tuple with the first element the host to connect to, and the second the port number."]}
{"index": 435, "name": "asyncore.dispatcher.send", "module": "asyncore", "doc": ["Send data to the remote end-point of the socket."]}
{"index": 436, "name": "asyncore.dispatcher.recv", "module": "asyncore", "doc": ["Read at most buffer_size bytes from the socket\u2019s remote end-point.", "An empty bytes object implies that the channel has been closed from the other end.", "Note that recv() may raise BlockingIOError , even though select.select() or select.poll() has reported the socket ready for reading."]}
{"index": 437, "name": "asyncore.dispatcher.listen", "module": "asyncore", "doc": ["Listen for connections made to the socket.", "The backlog argument specifies the maximum number of queued connections and should be at least 1; the maximum value is system-dependent (usually 5)."]}
{"index": 438, "name": "asyncore.dispatcher.bind", "module": "asyncore", "doc": ["Bind the socket to address.", "The socket must not already be bound.", "(The format of address depends on the address family \u2014 refer to the socket documentation for more information.)", "To mark the socket as re-usable (setting the SO_REUSEADDR option), call the dispatcher object\u2019s set_reuse_addr() method."]}
{"index": 439, "name": "asyncore.dispatcher.accept", "module": "asyncore", "doc": ["Accept a connection.", "The socket must be bound to an address and listening for connections.", "The return value can be either None or a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.", "When None is returned it means the connection didn\u2019t take place, in which case the server should just ignore this event and keep listening for further incoming connections."]}
{"index": 440, "name": "asyncore.dispatcher.close", "module": "asyncore", "doc": ["Close the socket.", "All future operations on the socket object will fail.", "The remote end-point will receive no more data (after queued data is flushed).", "Sockets are automatically closed when they are garbage-collected."]}
{"index": 441, "name": "asyncore.dispatcher_with_send", "module": "asyncore", "doc": ["A dispatcher subclass which adds simple buffered output capability, useful for simple clients.", "For more sophisticated usage use asynchat.async_chat."]}
{"index": 442, "name": "asyncore.file_dispatcher", "module": "asyncore", "doc": ["A file_dispatcher takes a file descriptor or file object along with an optional map argument and wraps it for use with the poll() or loop() functions.", "If provided a file object or anything with a fileno() method, that method will be called and passed to the file_wrapper constructor.", "Availability: Unix."]}
{"index": 443, "name": "asyncore.file_wrapper", "module": "asyncore", "doc": ["A file_wrapper takes an integer file descriptor and calls os.dup() to duplicate the handle so that the original handle may be closed independently of the file_wrapper.", "This class implements sufficient methods to emulate a socket for use by the file_dispatcher class.", "Availability: Unix."]}
{"index": 444, "name": "atexit.register", "module": "atexit", "doc": ["Register func as a function to be executed at termination.", "Any optional arguments that are to be passed to func must be passed as arguments to register().", "It is possible to register the same function and arguments more than once.", "At normal program termination (for instance, if sys.exit() is called or the main module\u2019s execution completes), all functions registered are called in last in, first out order.", "The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.", "If an exception is raised during execution of the exit handlers, a traceback is printed (unless SystemExit is raised) and the exception information is saved.", "After all exit handlers have had a chance to run the last exception to be raised is re-raised.", "This function returns func, which makes it possible to use it as a decorator."]}
{"index": 445, "name": "atexit.unregister", "module": "atexit", "doc": ["Remove func from the list of functions to be run at interpreter shutdown.", "After calling unregister(), func is guaranteed not to be called when the interpreter shuts down, even if it was registered more than once.", "unregister() silently does nothing if func was not previously registered."]}
{"index": 446, "name": "audioop.error", "module": "audioop", "doc": ["This exception is raised on all errors, such as unknown number of bytes per sample, etc."]}
{"index": 447, "name": "audioop.add", "module": "audioop", "doc": ["Return a fragment which is the addition of the two samples passed as parameters.", "width is the sample width in bytes, either 1, 2, 3 or 4.", "Both fragments should have the same length.", "Samples are truncated in case of overflow."]}
{"index": 448, "name": "audioop.adpcm2lin", "module": "audioop", "doc": ["Decode an Intel/DVI ADPCM coded fragment to a linear fragment.", "See the description of lin2adpcm() for details on ADPCM coding.", "Return a tuple (sample, newstate) where the sample has the width specified in width."]}
{"index": 449, "name": "audioop.alaw2lin", "module": "audioop", "doc": ["Convert sound fragments in a-LAW encoding to linearly encoded sound fragments.", "a-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here."]}
{"index": 450, "name": "audioop.avg", "module": "audioop", "doc": ["Return the average over all samples in the fragment."]}
{"index": 451, "name": "audioop.avgpp", "module": "audioop", "doc": ["Return the average peak-peak value over all samples in the fragment.", "No filtering is done, so the usefulness of this routine is questionable."]}
{"index": 452, "name": "audioop.bias", "module": "audioop", "doc": ["Return a fragment that is the original fragment with a bias added to each sample.", "Samples wrap around in case of overflow."]}
{"index": 453, "name": "audioop.byteswap", "module": "audioop", "doc": ["\u201cByteswap\u201d all samples in a fragment and returns the modified fragment.", "Converts big-endian samples to little-endian and vice versa."]}
{"index": 454, "name": "audioop.cross", "module": "audioop", "doc": ["Return the number of zero crossings in the fragment passed as an argument."]}
{"index": 455, "name": "audioop.findfactor", "module": "audioop", "doc": ["Return a factor F such that rms(add(fragment, mul(reference, -F))) is minimal, i.e., return the factor with which you should multiply reference to make it match as well as possible to fragment.", "The fragments should both contain 2-byte samples.", "The time taken by this routine is proportional to len(fragment)."]}
{"index": 456, "name": "audioop.findfit", "module": "audioop", "doc": ["Try to match reference as well as possible to a portion of fragment (which should be the longer fragment).", "This is (conceptually) done by taking slices out of fragment, using findfactor() to compute the best match, and minimizing the result.", "The fragments should both contain 2-byte samples.", "Return a tuple (offset, factor) where offset is the (integer) offset into fragment where the optimal match started and factor is the (floating-point) factor as per findfactor()."]}
{"index": 457, "name": "audioop.findmax", "module": "audioop", "doc": ["Search fragment for a slice of length length samples (not bytes!)", "with maximum energy, i.e., return i for which rms(fragment[i*2:(i+length)*2]) is maximal.", "The fragments should both contain 2-byte samples.", "The routine takes time proportional to len(fragment)."]}
{"index": 458, "name": "audioop.getsample", "module": "audioop", "doc": ["Return the value of sample index from the fragment."]}
{"index": 459, "name": "audioop.lin2adpcm", "module": "audioop", "doc": ["Convert samples to 4 bit Intel/DVI ADPCM encoding.", "ADPCM coding is an adaptive coding scheme, whereby each 4 bit number is the difference between one sample and the next, divided by a (varying) step.", "The Intel/DVI ADPCM algorithm has been selected for use by the IMA, so it may well become a standard.", "state is a tuple containing the state of the coder.", "The coder returns a tuple (adpcmfrag, newstate), and the newstate should be passed to the next call of lin2adpcm().", "In the initial call, None can be passed as the state.", "adpcmfrag is the ADPCM coded fragment packed 2 4-bit values per byte."]}
{"index": 460, "name": "audioop.lin2alaw", "module": "audioop", "doc": ["Convert samples in the audio fragment to a-LAW encoding and return this as a bytes object.", "a-LAW is an audio encoding format whereby you get a dynamic range of about 13 bits using only 8 bit samples.", "It is used by the Sun audio hardware, among others."]}
{"index": 461, "name": "audioop.lin2lin", "module": "audioop", "doc": ["Convert samples between 1-, 2-, 3- and 4-byte formats."]}
{"index": 462, "name": "audioop.lin2ulaw", "module": "audioop", "doc": ["Convert samples in the audio fragment to u-LAW encoding and return this as a bytes object.", "u-LAW is an audio encoding format whereby you get a dynamic range of about 14 bits using only 8 bit samples.", "It is used by the Sun audio hardware, among others."]}
{"index": 463, "name": "audioop.max", "module": "audioop", "doc": ["Return the maximum of the absolute value of all samples in a fragment."]}
{"index": 464, "name": "audioop.maxpp", "module": "audioop", "doc": ["Return the maximum peak-peak value in the sound fragment."]}
{"index": 465, "name": "audioop.minmax", "module": "audioop", "doc": ["Return a tuple consisting of the minimum and maximum values of all samples in the sound fragment."]}
{"index": 466, "name": "audioop.mul", "module": "audioop", "doc": ["Return a fragment that has all samples in the original fragment multiplied by the floating-point value factor.", "Samples are truncated in case of overflow."]}
{"index": 467, "name": "audioop.ratecv", "module": "audioop", "doc": ["Convert the frame rate of the input fragment.", "state is a tuple containing the state of the converter.", "The converter returns a tuple (newfragment, newstate), and newstate should be passed to the next call of ratecv().", "The initial call should pass None as the state.", "The weightA and weightB arguments are parameters for a simple digital filter and default to 1 and 0 respectively."]}
{"index": 468, "name": "audioop.reverse", "module": "audioop", "doc": ["Reverse the samples in a fragment and returns the modified fragment."]}
{"index": 469, "name": "audioop.rms", "module": "audioop", "doc": ["Return the root-mean-square of the fragment, i.e.", "sqrt(sum(S_i^2)/n).", "This is a measure of the power in an audio signal."]}
{"index": 470, "name": "audioop.tomono", "module": "audioop", "doc": ["Convert a stereo fragment to a mono fragment.", "The left channel is multiplied by lfactor and the right channel by rfactor before adding the two channels to give a mono signal."]}
{"index": 471, "name": "audioop.tostereo", "module": "audioop", "doc": ["Generate a stereo fragment from a mono fragment.", "Each pair of samples in the stereo fragment are computed from the mono sample, whereby left channel samples are multiplied by lfactor and right channel samples by rfactor."]}
{"index": 472, "name": "audioop.ulaw2lin", "module": "audioop", "doc": ["Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.", "u-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here."]}
{"index": 473, "name": "base64.b64encode", "module": "base64", "doc": ["Encode the bytes-like object s using Base64 and return the encoded bytes.", "Optional altchars must be a bytes-like object of at least length 2 (additional characters are ignored) which specifies an alternative alphabet for the + and / characters.", "This allows an application to e.g.", "generate URL or filesystem safe Base64 strings.", "The default is None, for which the standard Base64 alphabet is used."]}
{"index": 474, "name": "base64.b64decode", "module": "base64", "doc": ["Decode the Base64 encoded bytes-like object or ASCII string s and return the decoded bytes.", "Optional altchars must be a bytes-like object or ASCII string of at least length 2 (additional characters are ignored) which specifies the alternative alphabet used instead of the + and / characters.", "A binascii.Error exception is raised if s is incorrectly padded.", "If validate is False (the default), characters that are neither in the normal base-64 alphabet nor the alternative alphabet are discarded prior to the padding check.", "If validate is True, these non-alphabet characters in the input result in a binascii.Error."]}
{"index": 475, "name": "base64.standard_b64encode", "module": "base64", "doc": ["Encode bytes-like object s using the standard Base64 alphabet and return the encoded bytes."]}
{"index": 476, "name": "base64.standard_b64decode", "module": "base64", "doc": ["Decode bytes-like object or ASCII string s using the standard Base64 alphabet and return the decoded bytes."]}
{"index": 477, "name": "base64.urlsafe_b64encode", "module": "base64", "doc": ["Encode bytes-like object s using the URL- and filesystem-safe alphabet, which substitutes - instead of + and _ instead of / in the standard Base64 alphabet, and return the encoded bytes.", "The result can still contain =."]}
{"index": 478, "name": "base64.urlsafe_b64decode", "module": "base64", "doc": ["Decode bytes-like object or ASCII string s using the URL- and filesystem-safe alphabet, which substitutes - instead of + and _ instead of / in the standard Base64 alphabet, and return the decoded bytes."]}
{"index": 479, "name": "base64.b32encode", "module": "base64", "doc": ["Encode the bytes-like object s using Base32 and return the encoded bytes."]}
{"index": 480, "name": "base64.b32decode", "module": "base64", "doc": ["Decode the Base32 encoded bytes-like object or ASCII string s and return the decoded bytes.", "Optional casefold is a flag specifying whether a lowercase alphabet is acceptable as input.", "For security purposes, the default is False.", "RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O (oh), and for optional mapping of the digit 1 (one) to either the letter I (eye) or letter L (el).", "The optional argument map01 when not None, specifies which letter the digit 1 should be mapped to (when map01 is not None, the digit 0 is always mapped to the letter O).", "For security purposes the default is None, so that 0 and 1 are not allowed in the input.", "A binascii.Error is raised if s is incorrectly padded or if there are non-alphabet characters present in the input."]}
{"index": 481, "name": "base64.b16encode", "module": "base64", "doc": ["Encode the bytes-like object s using Base16 and return the encoded bytes."]}
{"index": 482, "name": "base64.b16decode", "module": "base64", "doc": ["Decode the Base16 encoded bytes-like object or ASCII string s and return the decoded bytes.", "Optional casefold is a flag specifying whether a lowercase alphabet is acceptable as input.", "For security purposes, the default is False.", "A binascii.Error is raised if s is incorrectly padded or if there are non-alphabet characters present in the input."]}
{"index": 483, "name": "base64.a85encode", "module": "base64", "doc": ["Encode the bytes-like object b using Ascii85 and return the encoded bytes.", "foldspaces is an optional flag that uses the special short sequence \u2018y\u2019 instead of 4 consecutive spaces (ASCII 0x20) as supported by \u2018btoa\u2019.", "This feature is not supported by the \u201cstandard\u201d Ascii85 encoding.", "wrapcol controls whether the output should have newline (b'\\n') characters added to it.", "If this is non-zero, each output line will be at most this many characters long.", "pad controls whether the input is padded to a multiple of 4 before encoding.", "Note that the btoa implementation always pads.", "adobe controls whether the encoded byte sequence is framed with <~ and ~>, which is used by the Adobe implementation."]}
{"index": 484, "name": "base64.a85decode", "module": "base64", "doc": ["Decode the Ascii85 encoded bytes-like object or ASCII string b and return the decoded bytes.", "foldspaces is a flag that specifies whether the \u2018y\u2019 short sequence should be accepted as shorthand for 4 consecutive spaces (ASCII 0x20).", "This feature is not supported by the \u201cstandard\u201d Ascii85 encoding.", "adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.", "is framed with <~ and ~>).", "ignorechars should be a bytes-like object or ASCII string containing characters to ignore from the input.", "This should only contain whitespace characters, and by default contains all whitespace characters in ASCII."]}
{"index": 485, "name": "base64.b85encode", "module": "base64", "doc": ["Encode the bytes-like object b using base85 (as used in e.g.", "git-style binary diffs) and return the encoded bytes.", "If pad is true, the input is padded with b'\\0' so its length is a multiple of 4 bytes before encoding."]}
{"index": 486, "name": "base64.b85decode", "module": "base64", "doc": ["Decode the base85-encoded bytes-like object or ASCII string b and return the decoded bytes.", "Padding is implicitly removed, if necessary."]}
{"index": 487, "name": "base64.decode", "module": "base64", "doc": ["Decode the contents of the binary input file and write the resulting binary data to the output file.", "input and output must be file objects.", "input will be read until input.readline() returns an empty bytes object."]}
{"index": 488, "name": "base64.decodebytes", "module": "base64", "doc": ["Decode the bytes-like object s, which must contain one or more lines of base64 encoded data, and return the decoded bytes."]}
{"index": 489, "name": "base64.decodestring", "module": "base64", "doc": ["Deprecated alias of decodebytes()."]}
{"index": 490, "name": "base64.encode", "module": "base64", "doc": ["Encode the contents of the binary input file and write the resulting base64 encoded data to the output file.", "input and output must be file objects.", "input will be read until input.read() returns an empty bytes object.", "encode() inserts a newline character (b'\\n') after every 76 bytes of the output, as well as ensuring that the output always ends with a newline, as per RFC 2045 (MIME)."]}
{"index": 491, "name": "base64.encodebytes", "module": "base64", "doc": ["Encode the bytes-like object s, which can contain arbitrary binary data, and return bytes containing the base64-encoded data, with newlines (b'\\n') inserted after every 76 bytes of output, and ensuring that there is a trailing newline, as per RFC 2045 (MIME)."]}
{"index": 492, "name": "base64.encodestring", "module": "base64", "doc": ["Deprecated alias of encodebytes()."]}
{"index": 493, "name": "bdb.BdbQuit", "module": "bdb", "doc": ["Exception raised by the Bdb class for quitting the debugger."]}
{"index": 494, "name": "bdb.Breakpoint", "module": "bdb", "doc": ["This class implements temporary breakpoints, ignore counts, disabling and (re-)enabling, and conditionals.", "Breakpoints are indexed by number through a list called bpbynumber and by (file, line) pairs through bplist.", "The former points to a single instance of class Breakpoint.", "The latter points to a list of such instances since there may be more than one breakpoint per line.", "When creating a breakpoint, its associated filename should be in canonical form.", "If a funcname is defined, a breakpoint hit will be counted when the first line of that function is executed.", "A conditional breakpoint always counts a hit.", "Breakpoint instances have the following methods:"]}
{"index": 495, "name": "bdb.Breakpoint.deleteMe", "module": "bdb", "doc": ["Delete the breakpoint from the list associated to a file/line.", "If it is the last breakpoint in that position, it also deletes the entry for the file/line."]}
{"index": 496, "name": "bdb.Breakpoint.enable", "module": "bdb", "doc": ["Mark the breakpoint as enabled."]}
{"index": 497, "name": "bdb.Breakpoint.disable", "module": "bdb", "doc": ["Mark the breakpoint as disabled."]}
{"index": 498, "name": "bdb.Breakpoint.bpformat", "module": "bdb", "doc": ["Return a string with all the information about the breakpoint, nicely formatted:"]}
{"index": 499, "name": "bdb.Breakpoint.bpprint", "module": "bdb", "doc": ["Print the output of bpformat() to the file out, or if it is None, to standard output."]}
{"index": 500, "name": "bdb.Bdb", "module": "bdb", "doc": ["The Bdb class acts as a generic Python debugger base class.", "This class takes care of the details of the trace facility; a derived class should implement user interaction.", "The standard debugger class (pdb.Pdb) is an example.", "The skip argument, if given, must be an iterable of glob-style module name patterns.", "The debugger will not step into frames that originate in a module that matches one of these patterns.", "Whether a frame is considered to originate in a certain module is determined by the __name__ in the frame globals.", "The following methods of Bdb normally don\u2019t need to be overridden.", "Normally derived classes don\u2019t override the following methods, but they may if they want to redefine the definition of stopping and breakpoints.", "Derived classes should override these methods to gain control over debugger operation.", "Derived classes and clients can call the following methods to affect the stepping state.", "Derived classes and clients can call the following methods to manipulate breakpoints.", "These methods return a string containing an error message if something went wrong, or None if all is well.", "Derived classes and clients can call the following methods to get a data structure representing a stack trace.", "The following two methods can be called by clients to use a debugger to debug a statement, given as a string."]}
{"index": 501, "name": "bdb.Bdb.canonic", "module": "bdb", "doc": ["Auxiliary method for getting a filename in a canonical form, that is, as a case-normalized (on case-insensitive filesystems) absolute path, stripped of surrounding angle brackets."]}
{"index": 502, "name": "bdb.Bdb.reset", "module": "bdb", "doc": ["Set the botframe, stopframe, returnframe and quitting attributes with values ready to start debugging."]}
{"index": 503, "name": "bdb.Bdb.trace_dispatch", "module": "bdb", "doc": ["This function is installed as the trace function of debugged frames.", "Its return value is the new trace function (in most cases, that is, itself).", "The default implementation decides how to dispatch a frame, depending on the type of event (passed as a string) that is about to be executed.", "event can be one of the following:", "For the Python events, specialized functions (see below) are called.", "For the C events, no action is taken.", "The arg parameter depends on the previous event.", "See the documentation for sys.settrace() for more information on the trace function.", "For more information on code and frame objects, refer to The standard type hierarchy."]}
{"index": 504, "name": "bdb.Bdb.dispatch_line", "module": "bdb", "doc": ["If the debugger should stop on the current line, invoke the user_line() method (which should be overridden in subclasses).", "Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_line()).", "Return a reference to the trace_dispatch() method for further tracing in that scope."]}
{"index": 505, "name": "bdb.Bdb.dispatch_call", "module": "bdb", "doc": ["If the debugger should stop on this function call, invoke the user_call() method (which should be overridden in subclasses).", "Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_call()).", "Return a reference to the trace_dispatch() method for further tracing in that scope."]}
{"index": 506, "name": "bdb.Bdb.dispatch_return", "module": "bdb", "doc": ["If the debugger should stop on this function return, invoke the user_return() method (which should be overridden in subclasses).", "Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_return()).", "Return a reference to the trace_dispatch() method for further tracing in that scope."]}
{"index": 507, "name": "bdb.Bdb.dispatch_exception", "module": "bdb", "doc": ["If the debugger should stop at this exception, invokes the user_exception() method (which should be overridden in subclasses).", "Raise a BdbQuit exception if the Bdb.quitting flag is set (which can be set from user_exception()).", "Return a reference to the trace_dispatch() method for further tracing in that scope."]}
{"index": 508, "name": "bdb.Bdb.stop_here", "module": "bdb", "doc": ["This method checks if the frame is somewhere below botframe in the call stack.", "botframe is the frame in which debugging started."]}
{"index": 509, "name": "bdb.Bdb.break_here", "module": "bdb", "doc": ["This method checks if there is a breakpoint in the filename and line belonging to frame or, at least, in the current function.", "If the breakpoint is a temporary one, this method deletes it."]}
{"index": 510, "name": "bdb.Bdb.break_anywhere", "module": "bdb", "doc": ["This method checks if there is a breakpoint in the filename of the current frame."]}
{"index": 511, "name": "bdb.Bdb.user_call", "module": "bdb", "doc": ["This method is called from dispatch_call() when there is the possibility that a break might be necessary anywhere inside the called function."]}
{"index": 512, "name": "bdb.Bdb.user_line", "module": "bdb", "doc": ["This method is called from dispatch_line() when either stop_here() or break_here() yields True."]}
{"index": 513, "name": "bdb.Bdb.user_return", "module": "bdb", "doc": ["This method is called from dispatch_return() when stop_here() yields True."]}
{"index": 514, "name": "bdb.Bdb.user_exception", "module": "bdb", "doc": ["This method is called from dispatch_exception() when stop_here() yields True."]}
{"index": 515, "name": "bdb.Bdb.do_clear", "module": "bdb", "doc": ["Handle how a breakpoint must be removed when it is a temporary one.", "This method must be implemented by derived classes."]}
{"index": 516, "name": "bdb.Bdb.set_step", "module": "bdb", "doc": ["Stop after one line of code."]}
{"index": 517, "name": "bdb.Bdb.set_next", "module": "bdb", "doc": ["Stop on the next line in or below the given frame."]}
{"index": 518, "name": "bdb.Bdb.set_return", "module": "bdb", "doc": ["Stop when returning from the given frame."]}
{"index": 519, "name": "bdb.Bdb.set_until", "module": "bdb", "doc": ["Stop when the line with the line no greater than the current one is reached or when returning from current frame."]}
{"index": 520, "name": "bdb.Bdb.set_trace", "module": "bdb", "doc": ["Start debugging from frame.", "If frame is not specified, debugging starts from caller\u2019s frame."]}
{"index": 521, "name": "bdb.Bdb.set_continue", "module": "bdb", "doc": ["Stop only at breakpoints or when finished.", "If there are no breakpoints, set the system trace function to None."]}
{"index": 522, "name": "bdb.Bdb.set_quit", "module": "bdb", "doc": ["Set the quitting attribute to True.", "This raises BdbQuit in the next call to one of the dispatch_*() methods."]}
{"index": 523, "name": "bdb.Bdb.set_break", "module": "bdb", "doc": ["Set a new breakpoint.", "If the lineno line doesn\u2019t exist for the filename passed as argument, return an error message.", "The filename should be in canonical form, as described in the canonic() method."]}
{"index": 524, "name": "bdb.Bdb.clear_break", "module": "bdb", "doc": ["Delete the breakpoints in filename and lineno.", "If none were set, an error message is returned."]}
{"index": 525, "name": "bdb.Bdb.clear_bpbynumber", "module": "bdb", "doc": ["Delete the breakpoint which has the index arg in the Breakpoint.bpbynumber.", "If arg is not numeric or out of range, return an error message."]}
{"index": 526, "name": "bdb.Bdb.clear_all_file_breaks", "module": "bdb", "doc": ["Delete all breakpoints in filename.", "If none were set, an error message is returned."]}
{"index": 527, "name": "bdb.Bdb.clear_all_breaks", "module": "bdb", "doc": ["Delete all existing breakpoints."]}
{"index": 528, "name": "bdb.Bdb.get_bpbynumber", "module": "bdb", "doc": ["Return a breakpoint specified by the given number.", "If arg is a string, it will be converted to a number.", "If arg is a non-numeric string, if the given breakpoint never existed or has been deleted, a ValueError is raised."]}
{"index": 529, "name": "bdb.Bdb.get_break", "module": "bdb", "doc": ["Check if there is a breakpoint for lineno of filename."]}
{"index": 530, "name": "bdb.Bdb.get_breaks", "module": "bdb", "doc": ["Return all breakpoints for lineno in filename, or an empty list if none are set."]}
{"index": 531, "name": "bdb.Bdb.get_file_breaks", "module": "bdb", "doc": ["Return all breakpoints in filename, or an empty list if none are set."]}
{"index": 532, "name": "bdb.Bdb.get_all_breaks", "module": "bdb", "doc": ["Return all breakpoints that are set."]}
{"index": 533, "name": "bdb.Bdb.get_stack", "module": "bdb", "doc": ["Get a list of records for a frame and all higher (calling) and lower frames, and the size of the higher part."]}
{"index": 534, "name": "bdb.Bdb.format_stack_entry", "module": "bdb", "doc": ["Return a string with information about a stack entry, identified by a (frame, lineno) tuple:"]}
{"index": 535, "name": "bdb.Bdb.run", "module": "bdb", "doc": ["Debug a statement executed via the exec() function.", "globals defaults to __main__.__dict__, locals defaults to globals."]}
{"index": 536, "name": "bdb.Bdb.runeval", "module": "bdb", "doc": ["Debug an expression executed via the eval() function.", "globals and locals have the same meaning as in run()."]}
{"index": 537, "name": "bdb.Bdb.runctx", "module": "bdb", "doc": ["For backwards compatibility.", "Calls the run() method."]}
{"index": 538, "name": "bdb.Bdb.runcall", "module": "bdb", "doc": ["Debug a single function call, and return its result."]}
{"index": 539, "name": "bdb.checkfuncname", "module": "bdb", "doc": ["Check whether we should break here, depending on the way the breakpoint b was set.", "If it was set via line number, it checks if b.line is the same as the one in the frame also passed as argument.", "If the breakpoint was set via function name, we have to check we are in the right frame (the right function) and if we are in its first executable line."]}
{"index": 540, "name": "bdb.effective", "module": "bdb", "doc": ["Determine if there is an effective (active) breakpoint at this line of code.", "Return a tuple of the breakpoint and a boolean that indicates if it is ok to delete a temporary breakpoint.", "Return (None, None) if there is no matching breakpoint."]}
{"index": 541, "name": "bdb.set_trace", "module": "bdb", "doc": ["Start debugging with a Bdb instance from caller\u2019s frame."]}
{"index": 542, "name": "binascii.a2b_uu", "module": "binascii", "doc": ["Convert a single line of uuencoded data back to binary and return the binary data.", "Lines normally contain 45 (binary) bytes, except for the last line.", "Line data may be followed by whitespace."]}
{"index": 543, "name": "binascii.b2a_uu", "module": "binascii", "doc": ["Convert binary data to a line of ASCII characters, the return value is the converted line, including a newline char.", "The length of data should be at most 45.", "If backtick is true, zeros are represented by '`' instead of spaces."]}
{"index": 544, "name": "binascii.a2b_base64", "module": "binascii", "doc": ["Convert a block of base64 data back to binary and return the binary data.", "More than one line may be passed at a time."]}
{"index": 545, "name": "binascii.b2a_base64", "module": "binascii", "doc": ["Convert binary data to a line of ASCII characters in base64 coding.", "The return value is the converted line, including a newline char if newline is true.", "The output of this function conforms to RFC 3548."]}
{"index": 546, "name": "binascii.a2b_qp", "module": "binascii", "doc": ["Convert a block of quoted-printable data back to binary and return the binary data.", "More than one line may be passed at a time.", "If the optional argument header is present and true, underscores will be decoded as spaces."]}
{"index": 547, "name": "binascii.b2a_qp", "module": "binascii", "doc": ["Convert binary data to a line(s) of ASCII characters in quoted-printable encoding.", "The return value is the converted line(s).", "If the optional argument quotetabs is present and true, all tabs and spaces will be encoded.", "If the optional argument istext is present and true, newlines are not encoded but trailing whitespace will be encoded.", "If the optional argument header is present and true, spaces will be encoded as underscores per RFC 1522.", "If the optional argument header is present and false, newline characters will be encoded as well; otherwise linefeed conversion might corrupt the binary data stream."]}
{"index": 548, "name": "binascii.a2b_hqx", "module": "binascii", "doc": ["Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression.", "The string should contain a complete number of binary bytes, or (in case of the last portion of the binhex4 data) have the remaining bits zero."]}
{"index": 549, "name": "binascii.rledecode_hqx", "module": "binascii", "doc": ["Perform RLE-decompression on the data, as per the binhex4 standard.", "The algorithm uses 0x90 after a byte as a repeat indicator, followed by a count.", "A count of 0 specifies a byte value of 0x90.", "The routine returns the decompressed data, unless data input data ends in an orphaned repeat indicator, in which case the Incomplete exception is raised."]}
{"index": 550, "name": "binascii.rlecode_hqx", "module": "binascii", "doc": ["Perform binhex4 style RLE-compression on data and return the result."]}
{"index": 551, "name": "binascii.b2a_hqx", "module": "binascii", "doc": ["Perform hexbin4 binary-to-ASCII translation and return the resulting string.", "The argument should already be RLE-coded, and have a length divisible by 3 (except possibly the last fragment)."]}
{"index": 552, "name": "binascii.crc_hqx", "module": "binascii", "doc": ["Compute a 16-bit CRC value of data, starting with value as the initial CRC, and return the result.", "This uses the CRC-CCITT polynomial x16 + x12 + x5 + 1, often represented as 0x1021.", "This CRC is used in the binhex4 format."]}
{"index": 553, "name": "binascii.crc32", "module": "binascii", "doc": ["Compute CRC-32, the 32-bit checksum of data, starting with an initial CRC of value.", "The default initial CRC is zero.", "The algorithm is consistent with the ZIP file checksum.", "Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.", "Use as follows:"]}
{"index": 554, "name": "binascii.b2a_hex", "module": "binascii", "doc": ["Return the hexadecimal representation of the binary data.", "Every byte of data is converted into the corresponding 2-digit hex representation.", "The returned bytes object is therefore twice as long as the length of data.", "Similar functionality (but returning a text string) is also conveniently accessible using the bytes.hex() method."]}
{"index": 555, "name": "binascii.hexlify", "module": "binascii", "doc": ["Return the hexadecimal representation of the binary data.", "Every byte of data is converted into the corresponding 2-digit hex representation.", "The returned bytes object is therefore twice as long as the length of data.", "Similar functionality (but returning a text string) is also conveniently accessible using the bytes.hex() method."]}
{"index": 556, "name": "binascii.a2b_hex", "module": "binascii", "doc": ["Return the binary data represented by the hexadecimal string hexstr.", "This function is the inverse of b2a_hex().", "hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise an Error exception is raised.", "Similar functionality (accepting only text string arguments, but more liberal towards whitespace) is also accessible using the bytes.fromhex() class method."]}
{"index": 557, "name": "binascii.unhexlify", "module": "binascii", "doc": ["Return the binary data represented by the hexadecimal string hexstr.", "This function is the inverse of b2a_hex().", "hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise an Error exception is raised.", "Similar functionality (accepting only text string arguments, but more liberal towards whitespace) is also accessible using the bytes.fromhex() class method."]}
{"index": 558, "name": "binascii.Error", "module": "binascii", "doc": ["Exception raised on errors.", "These are usually programming errors."]}
{"index": 559, "name": "binascii.Incomplete", "module": "binascii", "doc": ["Exception raised on incomplete data.", "These are usually not programming errors, but may be handled by reading a little more data and trying again."]}
{"index": 560, "name": "binhex.binhex", "module": "binhex", "doc": ["Convert a binary file with filename input to binhex file output.", "The output parameter can either be a filename or a file-like object (any object supporting a write() and close() method)."]}
{"index": 561, "name": "binhex.hexbin", "module": "binhex", "doc": ["Decode a binhex file input.", "input may be a filename or a file-like object supporting read() and close() methods.", "The resulting file is written to a file named output, unless the argument is None in which case the output filename is read from the binhex file."]}
{"index": 562, "name": "binhex.Error", "module": "binhex", "doc": ["Exception raised when something can\u2019t be encoded using the binhex format (for example, a filename is too long to fit in the filename field), or when input is not properly encoded binhex data."]}
{"index": 563, "name": "bisect.bisect_left", "module": "bisect", "doc": ["Locate the insertion point for x in a to maintain sorted order.", "The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used.", "If x is already present in a, the insertion point will be before (to the left of) any existing entries.", "The return value is suitable for use as the first parameter to list.insert() assuming that a is already sorted.", "The returned insertion point i partitions the array a into two halves so that all(val < x for val in a[lo:i]) for the left side and all(val >= x for val in a[i:hi]) for the right side."]}
{"index": 564, "name": "bisect.bisect_right", "module": "bisect", "doc": ["Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of x in a.", "The returned insertion point i partitions the array a into two halves so that all(val <= x for val in a[lo:i]) for the left side and all(val > x for val in a[i:hi]) for the right side."]}
{"index": 565, "name": "bisect.bisect", "module": "bisect", "doc": ["Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of x in a.", "The returned insertion point i partitions the array a into two halves so that all(val <= x for val in a[lo:i]) for the left side and all(val > x for val in a[i:hi]) for the right side."]}
{"index": 566, "name": "bisect.insort_left", "module": "bisect", "doc": ["Insert x in a in sorted order.", "This is equivalent to a.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a is already sorted.", "Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step."]}
{"index": 567, "name": "bisect.insort_right", "module": "bisect", "doc": ["Similar to insort_left(), but inserting x in a after any existing entries of x."]}
{"index": 568, "name": "bisect.insort", "module": "bisect", "doc": ["Similar to insort_left(), but inserting x in a after any existing entries of x."]}
{"index": 569, "name": "bz2.open", "module": "bz2", "doc": ["Open a bzip2-compressed file in binary or text mode, returning a file object.", "As with the constructor for BZ2File, the filename argument can be an actual filename (a str or bytes object), or an existing file object to read from or write to.", "The mode argument can be any of 'r', 'rb', 'w', 'wb', 'x', 'xb', 'a' or 'ab' for binary mode, or 'rt', 'wt', 'xt', or 'at' for text mode.", "The default is 'rb'.", "The compresslevel argument is an integer from 1 to 9, as for the BZ2File constructor.", "For binary mode, this function is equivalent to the BZ2File constructor: BZ2File(filename, mode, compresslevel=compresslevel).", "In this case, the encoding, errors and newline arguments must not be provided.", "For text mode, a BZ2File object is created, and wrapped in an io.TextIOWrapper instance with the specified encoding, error handling behavior, and line ending(s)."]}
{"index": 570, "name": "bz2.BZ2File", "module": "bz2", "doc": ["Open a bzip2-compressed file in binary mode.", "If filename is a str or bytes object, open the named file directly.", "Otherwise, filename should be a file object, which will be used to read or write the compressed data.", "The mode argument can be either 'r' for reading (default), 'w' for overwriting, 'x' for exclusive creation, or 'a' for appending.", "These can equivalently be given as 'rb', 'wb', 'xb' and 'ab' respectively.", "If filename is a file object (rather than an actual file name), a mode of 'w' does not truncate the file, and is instead equivalent to 'a'.", "The buffering argument is ignored.", "Its use is deprecated.", "If mode is 'w' or 'a', compresslevel can be an integer between 1 and 9 specifying the level of compression: 1 produces the least compression, and 9 (default) produces the most compression.", "If mode is 'r', the input file may be the concatenation of multiple compressed streams.", "BZ2File provides all of the members specified by the io.BufferedIOBase, except for detach() and truncate().", "Iteration and the with statement are supported.", "BZ2File also provides the following method:"]}
{"index": 571, "name": "bz2.BZ2File.peek", "module": "bz2", "doc": ["Return buffered data without advancing the file position.", "At least one byte of data will be returned (unless at EOF).", "The exact number of bytes returned is unspecified."]}
{"index": 572, "name": "bz2.BZ2Compressor", "module": "bz2", "doc": ["Create a new compressor object.", "This object may be used to compress data incrementally.", "For one-shot compression, use the compress() function instead.", "compresslevel, if given, must be an integer between 1 and 9.", "The default is 9."]}
{"index": 573, "name": "bz2.BZ2Compressor.compress", "module": "bz2", "doc": ["Provide data to the compressor object.", "Returns a chunk of compressed data if possible, or an empty byte string otherwise.", "When you have finished providing data to the compressor, call the flush() method to finish the compression process."]}
{"index": 574, "name": "bz2.BZ2Compressor.flush", "module": "bz2", "doc": ["Finish the compression process.", "Returns the compressed data left in internal buffers.", "The compressor object may not be used after this method has been called."]}
{"index": 575, "name": "bz2.BZ2Decompressor", "module": "bz2", "doc": ["Create a new decompressor object.", "This object may be used to decompress data incrementally.", "For one-shot compression, use the decompress() function instead."]}
{"index": 576, "name": "bz2.BZ2Decompressor.decompress", "module": "bz2", "doc": ["Decompress data (a bytes-like object), returning uncompressed data as bytes.", "Some of data may be buffered internally, for use in later calls to decompress().", "The returned data should be concatenated with the output of any previous calls to decompress().", "If max_length is nonnegative, returns at most max_length bytes of decompressed data.", "If this limit is reached and further output can be produced, the needs_input attribute will be set to False.", "In this case, the next call to decompress() may provide data as b'' to obtain more of the output.", "If all of the input data was decompressed and returned (either because this was less than max_length bytes, or because max_length was negative), the needs_input attribute will be set to True.", "Attempting to decompress data after the end of stream is reached raises an EOFError.", "Any data found after the end of the stream is ignored and saved in the unused_data attribute."]}
{"index": 577, "name": "bz2.BZ2Decompressor.eof", "module": "bz2", "doc": ["True if the end-of-stream marker has been reached."]}
{"index": 578, "name": "bz2.BZ2Decompressor.unused_data", "module": "bz2", "doc": ["Data found after the end of the compressed stream.", "If this attribute is accessed before the end of the stream has been reached, its value will be b''."]}
{"index": 579, "name": "bz2.BZ2Decompressor.needs_input", "module": "bz2", "doc": ["False if the decompress() method can provide more decompressed data before requiring new uncompressed input."]}
{"index": 580, "name": "bz2.compress", "module": "bz2", "doc": ["Compress data, a bytes-like object.", "compresslevel, if given, must be an integer between 1 and 9.", "The default is 9.", "For incremental compression, use a BZ2Compressor instead."]}
{"index": 581, "name": "bz2.decompress", "module": "bz2", "doc": ["Decompress data, a bytes-like object.", "If data is the concatenation of multiple compressed streams, decompress all of the streams.", "For incremental decompression, use a BZ2Decompressor instead."]}
{"index": 582, "name": "calendar.Calendar", "module": "calendar", "doc": ["Creates a Calendar object.", "firstweekday is an integer specifying the first day of the week.", "0 is Monday (the default), 6 is Sunday.", "A Calendar object provides several methods that can be used for preparing the calendar data for formatting.", "This class doesn\u2019t do any formatting itself.", "This is the job of subclasses.", "Calendar instances have the following methods:"]}
{"index": 583, "name": "calendar.Calendar.iterweekdays", "module": "calendar", "doc": ["Return an iterator for the week day numbers that will be used for one week.", "The first value from the iterator will be the same as the value of the firstweekday property."]}
{"index": 584, "name": "calendar.Calendar.itermonthdates", "module": "calendar", "doc": ["Return an iterator for the month month (1\u201312) in the year year.", "This iterator will return all days (as datetime.date objects) for the month and all days before the start of the month or after the end of the month that are required to get a complete week."]}
{"index": 585, "name": "calendar.Calendar.itermonthdays", "module": "calendar", "doc": ["Return an iterator for the month month in the year year similar to itermonthdates(), but not restricted by the datetime.date range.", "Days returned will simply be day of the month numbers.", "For the days outside of the specified month, the day number is 0."]}
{"index": 586, "name": "calendar.Calendar.itermonthdays2", "module": "calendar", "doc": ["Return an iterator for the month month in the year year similar to itermonthdates(), but not restricted by the datetime.date range.", "Days returned will be tuples consisting of a day of the month number and a week day number."]}
{"index": 587, "name": "calendar.Calendar.itermonthdays3", "module": "calendar", "doc": ["Return an iterator for the month month in the year year similar to itermonthdates(), but not restricted by the datetime.date range.", "Days returned will be tuples consisting of a year, a month and a day of the month numbers."]}
{"index": 588, "name": "calendar.Calendar.itermonthdays4", "module": "calendar", "doc": ["Return an iterator for the month month in the year year similar to itermonthdates(), but not restricted by the datetime.date range.", "Days returned will be tuples consisting of a year, a month, a day of the month, and a day of the week numbers."]}
{"index": 589, "name": "calendar.Calendar.monthdatescalendar", "module": "calendar", "doc": ["Return a list of the weeks in the month month of the year as full weeks.", "Weeks are lists of seven datetime.date objects."]}
{"index": 590, "name": "calendar.Calendar.monthdays2calendar", "module": "calendar", "doc": ["Return a list of the weeks in the month month of the year as full weeks.", "Weeks are lists of seven tuples of day numbers and weekday numbers."]}
{"index": 591, "name": "calendar.Calendar.monthdayscalendar", "module": "calendar", "doc": ["Return a list of the weeks in the month month of the year as full weeks.", "Weeks are lists of seven day numbers."]}
{"index": 592, "name": "calendar.Calendar.yeardatescalendar", "module": "calendar", "doc": ["Return the data for the specified year ready for formatting.", "The return value is a list of month rows.", "Each month row contains up to width months (defaulting to 3).", "Each month contains between 4 and 6 weeks and each week contains 1\u20137 days.", "Days are datetime.date objects."]}
{"index": 593, "name": "calendar.Calendar.yeardays2calendar", "module": "calendar", "doc": ["Return the data for the specified year ready for formatting (similar to yeardatescalendar()).", "Entries in the week lists are tuples of day numbers and weekday numbers.", "Day numbers outside this month are zero."]}
{"index": 594, "name": "calendar.Calendar.yeardayscalendar", "module": "calendar", "doc": ["Return the data for the specified year ready for formatting (similar to yeardatescalendar()).", "Entries in the week lists are day numbers.", "Day numbers outside this month are zero."]}
{"index": 595, "name": "calendar.TextCalendar", "module": "calendar", "doc": ["This class can be used to generate plain text calendars.", "TextCalendar instances have the following methods:"]}
{"index": 596, "name": "calendar.TextCalendar.formatmonth", "module": "calendar", "doc": ["Return a month\u2019s calendar in a multi-line string.", "If w is provided, it specifies the width of the date columns, which are centered.", "If l is given, it specifies the number of lines that each week will use.", "Depends on the first weekday as specified in the constructor or set by the setfirstweekday() method."]}
{"index": 597, "name": "calendar.TextCalendar.prmonth", "module": "calendar", "doc": ["Print a month\u2019s calendar as returned by formatmonth()."]}
{"index": 598, "name": "calendar.TextCalendar.formatyear", "module": "calendar", "doc": ["Return a m-column calendar for an entire year as a multi-line string.", "Optional parameters w, l, and c are for date column width, lines per week, and number of spaces between month columns, respectively.", "Depends on the first weekday as specified in the constructor or set by the setfirstweekday() method.", "The earliest year for which a calendar can be generated is platform-dependent."]}
{"index": 599, "name": "calendar.TextCalendar.pryear", "module": "calendar", "doc": ["Print the calendar for an entire year as returned by formatyear()."]}
{"index": 600, "name": "calendar.HTMLCalendar", "module": "calendar", "doc": ["This class can be used to generate HTML calendars.", "HTMLCalendar instances have the following methods:", "HTMLCalendar has the following attributes you can override to customize the CSS classes used by the calendar:", "Note that although the naming for the above described class attributes is singular (e.g.", "cssclass_month cssclass_noday), one can replace the single CSS class with a space separated list of CSS classes, for example:", "Here is an example how HTMLCalendar can be customized:"]}
{"index": 601, "name": "calendar.HTMLCalendar.formatmonth", "module": "calendar", "doc": ["Return a month\u2019s calendar as an HTML table.", "If withyear is true the year will be included in the header, otherwise just the month name will be used."]}
{"index": 602, "name": "calendar.HTMLCalendar.formatyear", "module": "calendar", "doc": ["Return a year\u2019s calendar as an HTML table.", "width (defaulting to 3) specifies the number of months per row."]}
{"index": 603, "name": "calendar.HTMLCalendar.formatyearpage", "module": "calendar", "doc": ["Return a year\u2019s calendar as a complete HTML page.", "width (defaulting to 3) specifies the number of months per row.", "css is the name for the cascading style sheet to be used.", "None can be passed if no style sheet should be used.", "encoding specifies the encoding to be used for the output (defaulting to the system default encoding)."]}
{"index": 604, "name": "calendar.HTMLCalendar.cssclasses", "module": "calendar", "doc": ["A list of CSS classes used for each weekday.", "The default class list is:", "more styles can be added for each day:", "Note that the length of this list must be seven items."]}
{"index": 605, "name": "calendar.HTMLCalendar.cssclass_noday", "module": "calendar", "doc": ["The CSS class for a weekday occurring in the previous or coming month."]}
{"index": 606, "name": "calendar.HTMLCalendar.cssclasses_weekday_head", "module": "calendar", "doc": ["A list of CSS classes used for weekday names in the header row.", "The default is the same as cssclasses."]}
{"index": 607, "name": "calendar.HTMLCalendar.cssclass_month_head", "module": "calendar", "doc": ["The month\u2019s head CSS class (used by formatmonthname()).", "The default value is \"month\"."]}
{"index": 608, "name": "calendar.HTMLCalendar.cssclass_month", "module": "calendar", "doc": ["The CSS class for the whole month\u2019s table (used by formatmonth()).", "The default value is \"month\"."]}
{"index": 609, "name": "calendar.HTMLCalendar.cssclass_year", "module": "calendar", "doc": ["The CSS class for the whole year\u2019s table of tables (used by formatyear()).", "The default value is \"year\"."]}
{"index": 610, "name": "calendar.HTMLCalendar.cssclass_year_head", "module": "calendar", "doc": ["The CSS class for the table head for the whole year (used by formatyear()).", "The default value is \"year\"."]}
{"index": 611, "name": "calendar.LocaleTextCalendar", "module": "calendar", "doc": ["This subclass of TextCalendar can be passed a locale name in the constructor and will return month and weekday names in the specified locale.", "If this locale includes an encoding all strings containing month and weekday names will be returned as unicode."]}
{"index": 612, "name": "calendar.LocaleHTMLCalendar", "module": "calendar", "doc": ["This subclass of HTMLCalendar can be passed a locale name in the constructor and will return month and weekday names in the specified locale.", "If this locale includes an encoding all strings containing month and weekday names will be returned as unicode."]}
{"index": 613, "name": "calendar.setfirstweekday", "module": "calendar", "doc": ["Sets the weekday (0 is Monday, 6 is Sunday) to start each week.", "The values MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, and SUNDAY are provided for convenience.", "For example, to set the first weekday to Sunday:"]}
{"index": 614, "name": "calendar.firstweekday", "module": "calendar", "doc": ["Returns the current setting for the weekday to start each week."]}
{"index": 615, "name": "calendar.isleap", "module": "calendar", "doc": ["Returns True if year is a leap year, otherwise False."]}
{"index": 616, "name": "calendar.leapdays", "module": "calendar", "doc": ["Returns the number of leap years in the range from y1 to y2 (exclusive), where y1 and y2 are years.", "This function works for ranges spanning a century change."]}
{"index": 617, "name": "calendar.weekday", "module": "calendar", "doc": ["Returns the day of the week (0 is Monday) for year (1970\u2013\u2026), month (1\u201312), day (1\u201331)."]}
{"index": 618, "name": "calendar.weekheader", "module": "calendar", "doc": ["Return a header containing abbreviated weekday names.", "n specifies the width in characters for one weekday."]}
{"index": 619, "name": "calendar.monthrange", "module": "calendar", "doc": ["Returns weekday of first day of the month and number of days in month,  for the specified year and month."]}
{"index": 620, "name": "calendar.monthcalendar", "module": "calendar", "doc": ["Returns a matrix representing a month\u2019s calendar.", "Each row represents a week; days outside of the month a represented by zeros.", "Each week begins with Monday unless set by setfirstweekday()."]}
{"index": 621, "name": "calendar.prmonth", "module": "calendar", "doc": ["Prints a month\u2019s calendar as returned by month()."]}
{"index": 622, "name": "calendar.month", "module": "calendar", "doc": ["Returns a month\u2019s calendar in a multi-line string using the formatmonth() of the TextCalendar class."]}
{"index": 623, "name": "calendar.prcal", "module": "calendar", "doc": ["Prints the calendar for an entire year as returned by  calendar()."]}
{"index": 624, "name": "calendar.calendar", "module": "calendar", "doc": ["Returns a 3-column calendar for an entire year as a multi-line string using the formatyear() of the TextCalendar class."]}
{"index": 625, "name": "calendar.timegm", "module": "calendar", "doc": ["An unrelated but handy function that takes a time tuple such as returned by the gmtime() function in the time module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding.", "In fact, time.gmtime() and timegm() are each others\u2019 inverse."]}
{"index": 626, "name": "calendar.day_name", "module": "calendar", "doc": ["An array that represents the days of the week in the current locale."]}
{"index": 627, "name": "calendar.day_abbr", "module": "calendar", "doc": ["An array that represents the abbreviated days of the week in the current locale."]}
{"index": 628, "name": "calendar.month_name", "module": "calendar", "doc": ["An array that represents the months of the year in the current locale.", "This follows normal convention of January being month number 1, so it has a length of 13 and  month_name[0] is the empty string."]}
{"index": 629, "name": "calendar.month_abbr", "module": "calendar", "doc": ["An array that represents the abbreviated months of the year in the current locale.", "This follows normal convention of January being month number 1, so it has a length of 13 and  month_abbr[0] is the empty string."]}
{"index": 630, "name": "cgi.FieldStorage.getfirst", "module": "cgi", "doc": ["This method always returns only one value associated with form field name.", "The method returns only the first value in case that more values were posted under such name.", "Please note that the order in which the values are received may vary from browser to browser and should not be counted on.", "1  If no such form field or value exists then the method returns the value specified by the optional parameter default.", "This parameter defaults to None if not specified."]}
{"index": 631, "name": "cgi.FieldStorage.getlist", "module": "cgi", "doc": ["This method always returns a list of values associated with form field name.", "The method returns an empty list if no such form field or value exists for name.", "It returns a list consisting of one item if only one such value exists."]}
{"index": 632, "name": "cgi.parse", "module": "cgi", "doc": ["Parse a query in the environment or from a file (the file defaults to sys.stdin).", "The keep_blank_values and strict_parsing parameters are passed to urllib.parse.parse_qs() unchanged."]}
{"index": 633, "name": "cgi.parse_qs", "module": "cgi", "doc": ["This function is deprecated in this module.", "Use urllib.parse.parse_qs() instead.", "It is maintained here only for backward compatibility."]}
{"index": 634, "name": "cgi.parse_qsl", "module": "cgi", "doc": ["This function is deprecated in this module.", "Use urllib.parse.parse_qsl() instead.", "It is maintained here only for backward compatibility."]}
{"index": 635, "name": "cgi.parse_multipart", "module": "cgi", "doc": ["Parse input of type multipart/form-data (for  file uploads).", "Arguments are fp for the input file, pdict for a dictionary containing other parameters in the Content-Type header, and encoding, the request encoding.", "Returns a dictionary just like urllib.parse.parse_qs(): keys are the field names, each value is a list of values for that field.", "For non-file fields, the value is a list of strings.", "This is easy to use but not much good if you are expecting megabytes to be uploaded \u2014 in that case, use the FieldStorage class instead which is much more flexible."]}
{"index": 636, "name": "cgi.parse_header", "module": "cgi", "doc": ["Parse a MIME header (such as Content-Type) into a main value and a dictionary of parameters."]}
{"index": 637, "name": "cgi.test", "module": "cgi", "doc": ["Robust test CGI script, usable as main program.", "Writes minimal HTTP headers and formats all information provided to the script in HTML form."]}
{"index": 638, "name": "cgi.print_environ", "module": "cgi", "doc": ["Format the shell environment in HTML."]}
{"index": 639, "name": "cgi.print_form", "module": "cgi", "doc": ["Format a form in HTML."]}
{"index": 640, "name": "cgi.print_directory", "module": "cgi", "doc": ["Format the current directory in HTML."]}
{"index": 641, "name": "cgi.print_environ_usage", "module": "cgi", "doc": ["Print a list of useful (used by CGI) environment variables in HTML."]}
{"index": 642, "name": "cgi.escape", "module": "cgi", "doc": ["Convert the characters '&', '<' and '>' in string s to HTML-safe sequences.", "Use this if you need to display text that might contain such characters in HTML.", "If the optional flag quote is true, the quotation mark character (\") is also translated; this helps for inclusion in an HTML attribute value delimited by double quotes, as in <a href=\"...\">.", "Note that single quotes are never translated."]}
{"index": 643, "name": "id3", "module": "cgi", "doc": ["Note that some recent versions of the HTML specification do state what order the field values should be supplied in, but knowing whether a request was received from a conforming browser, or even from a browser at all, is tedious and error-prone."]}
{"index": 644, "name": "cgitb.enable", "module": "cgitb", "doc": ["This function causes the cgitb module to take over the interpreter\u2019s default handling for exceptions by setting the value of sys.excepthook.", "The optional argument display defaults to 1 and can be set to 0 to suppress sending the traceback to the browser.", "If the argument logdir is present, the traceback reports are written to files.", "The value of logdir should be a directory where these files will be placed.", "The optional argument context is the number of lines of context to display around the current line of source code in the traceback; this defaults to 5.", "If the optional argument format is \"html\", the output is formatted as HTML.", "Any other value forces plain text output.", "The default value is \"html\"."]}
{"index": 645, "name": "cgitb.text", "module": "cgitb", "doc": ["This function handles the exception described by info (a 3-tuple containing the result of sys.exc_info()), formatting its traceback as text and returning the result as a string.", "The optional argument context is the number of lines of context to display around the current line of source code in the traceback; this defaults to 5."]}
{"index": 646, "name": "cgitb.html", "module": "cgitb", "doc": ["This function handles the exception described by info (a 3-tuple containing the result of sys.exc_info()), formatting its traceback as HTML and returning the result as a string.", "The optional argument context is the number of lines of context to display around the current line of source code in the traceback; this defaults to 5."]}
{"index": 647, "name": "cgitb.handler", "module": "cgitb", "doc": ["This function handles an exception using the default settings (that is, show a report in the browser, but don\u2019t log to a file).", "This can be used when you\u2019ve caught an exception and want to report it using cgitb.", "The optional info argument should be a 3-tuple containing an exception type, exception value, and traceback object, exactly like the tuple returned by sys.exc_info().", "If the info argument is not supplied, the current exception is obtained from sys.exc_info()."]}
{"index": 648, "name": "chunk.Chunk", "module": "chunk", "doc": ["Class which represents a chunk.", "The file argument is expected to be a file-like object.", "An instance of this class is specifically allowed.", "The only method that is needed is read().", "If the methods seek() and tell() are present and don\u2019t raise an exception, they are also used.", "If these methods are present and raise an exception, they are expected to not have altered the object.", "If the optional argument align is true, chunks are assumed to be aligned on 2-byte boundaries.", "If align is false, no alignment is assumed.", "The default value is true.", "If the optional argument bigendian is false, the chunk size is assumed to be in little-endian order.", "This is needed for WAVE audio files.", "The default value is true.", "If the optional argument inclheader is true, the size given in the chunk header includes the size of the header.", "The default value is false.", "A Chunk object supports the following methods:", "The remaining methods will raise OSError if called after the close() method has been called.", "Before Python 3.3, they used to raise IOError, now an alias of OSError."]}
{"index": 649, "name": "chunk.Chunk.getname", "module": "chunk", "doc": ["Returns the name (ID) of the chunk.", "This is the first 4 bytes of the chunk."]}
{"index": 650, "name": "chunk.Chunk.getsize", "module": "chunk", "doc": ["Returns the size of the chunk."]}
{"index": 651, "name": "chunk.Chunk.close", "module": "chunk", "doc": ["Close and skip to the end of the chunk.", "This does not close the underlying file."]}
{"index": 652, "name": "chunk.Chunk.isatty", "module": "chunk", "doc": ["Returns False."]}
{"index": 653, "name": "chunk.Chunk.seek", "module": "chunk", "doc": ["Set the chunk\u2019s current position.", "The whence argument is optional and defaults to 0 (absolute file positioning); other values are 1 (seek relative to the current position) and 2 (seek relative to the file\u2019s end).", "There is no return value.", "If the underlying file does not allow seek, only forward seeks are allowed."]}
{"index": 654, "name": "chunk.Chunk.tell", "module": "chunk", "doc": ["Return the current position into the chunk."]}
{"index": 655, "name": "chunk.Chunk.read", "module": "chunk", "doc": ["Read at most size bytes from the chunk (less if the read hits the end of the chunk before obtaining size bytes).", "If the size argument is negative or omitted, read all data until the end of the chunk.", "An empty bytes object is returned when the end of the chunk is encountered immediately."]}
{"index": 656, "name": "chunk.Chunk.skip", "module": "chunk", "doc": ["Skip to the end of the chunk.", "All further calls to read() for the chunk will return b''.", "If you are not interested in the contents of the chunk, this method should be called so that the file points to the start of the next chunk."]}
{"index": 657, "name": "id2", "module": "chunk", "doc": ["\u201cEA IFF 85\u201d Standard for Interchange Format Files, Jerry Morrison, Electronic Arts, January 1985."]}
{"index": 658, "name": "cmath.phase", "module": "cmath", "doc": ["Return the phase of x (also known as the argument of x), as a float.", "phase(x) is equivalent to math.atan2(x.imag, x.real).", "The result lies in the range [-\u03c0, \u03c0], and the branch cut for this operation lies along the negative real axis, continuous from above.", "On systems with support for signed zeros (which includes most systems in current use), this means that the sign of the result is the same as the sign of x.imag, even when x.imag is zero:"]}
{"index": 659, "name": "cmath.polar", "module": "cmath", "doc": ["Return the representation of x in polar coordinates.", "Returns a pair (r, phi) where r is the modulus of x and phi is the phase of x.  polar(x) is equivalent to (abs(x), phase(x))."]}
{"index": 660, "name": "cmath.rect", "module": "cmath", "doc": ["Return the complex number x with polar coordinates r and phi.", "Equivalent to r * (math.cos(phi) + math.sin(phi)*1j)."]}
{"index": 661, "name": "cmath.exp", "module": "cmath", "doc": ["Return e raised to the power x, where e is the base of natural logarithms."]}
{"index": 662, "name": "cmath.log", "module": "cmath", "doc": ["Returns the logarithm of x to the given base.", "If the base is not specified, returns the natural logarithm of x.", "There is one branch cut, from 0 along the negative real axis to -\u221e, continuous from above."]}
{"index": 663, "name": "cmath.log10", "module": "cmath", "doc": ["Return the base-10 logarithm of x.", "This has the same branch cut as log()."]}
{"index": 664, "name": "cmath.sqrt", "module": "cmath", "doc": ["Return the square root of x.", "This has the same branch cut as log()."]}
{"index": 665, "name": "cmath.acos", "module": "cmath", "doc": ["Return the arc cosine of x.", "There are two branch cuts: One extends right from 1 along the real axis to \u221e, continuous from below.", "The other extends left from -1 along the real axis to -\u221e, continuous from above."]}
{"index": 666, "name": "cmath.asin", "module": "cmath", "doc": ["Return the arc sine of x.", "This has the same branch cuts as acos()."]}
{"index": 667, "name": "cmath.atan", "module": "cmath", "doc": ["Return the arc tangent of x.", "There are two branch cuts: One extends from 1j along the imaginary axis to \u221ej, continuous from the right.", "The other extends from -1j along the imaginary axis to -\u221ej, continuous from the left."]}
{"index": 668, "name": "cmath.cos", "module": "cmath", "doc": ["Return the cosine of x."]}
{"index": 669, "name": "cmath.sin", "module": "cmath", "doc": ["Return the sine of x."]}
{"index": 670, "name": "cmath.tan", "module": "cmath", "doc": ["Return the tangent of x."]}
{"index": 671, "name": "cmath.acosh", "module": "cmath", "doc": ["Return the inverse hyperbolic cosine of x.", "There is one branch cut, extending left from 1 along the real axis to -\u221e, continuous from above."]}
{"index": 672, "name": "cmath.asinh", "module": "cmath", "doc": ["Return the inverse hyperbolic sine of x.", "There are two branch cuts: One extends from 1j along the imaginary axis to \u221ej, continuous from the right.", "The other extends from -1j along the imaginary axis to -\u221ej, continuous from the left."]}
{"index": 673, "name": "cmath.atanh", "module": "cmath", "doc": ["Return the inverse hyperbolic tangent of x.", "There are two branch cuts: One extends from 1 along the real axis to \u221e, continuous from below.", "The other extends from -1 along the real axis to -\u221e, continuous from above."]}
{"index": 674, "name": "cmath.cosh", "module": "cmath", "doc": ["Return the hyperbolic cosine of x."]}
{"index": 675, "name": "cmath.sinh", "module": "cmath", "doc": ["Return the hyperbolic sine of x."]}
{"index": 676, "name": "cmath.tanh", "module": "cmath", "doc": ["Return the hyperbolic tangent of x."]}
{"index": 677, "name": "cmath.isfinite", "module": "cmath", "doc": ["Return True if both the real and imaginary parts of x are finite, and False otherwise."]}
{"index": 678, "name": "cmath.isinf", "module": "cmath", "doc": ["Return True if either the real or the imaginary part of x is an infinity, and False otherwise."]}
{"index": 679, "name": "cmath.isnan", "module": "cmath", "doc": ["Return True if either the real or the imaginary part of x is a NaN, and False otherwise."]}
{"index": 680, "name": "cmath.isclose", "module": "cmath", "doc": ["Return True if the values a and b are close to each other and False otherwise.", "Whether or not two values are considered close is determined according to given absolute and relative tolerances.", "rel_tol is the relative tolerance \u2013 it is the maximum allowed difference between a and b, relative to the larger absolute value of a or b.", "For example, to set a tolerance of 5%, pass rel_tol=0.05.", "The default tolerance is 1e-09, which assures that the two values are the same within about 9 decimal digits.", "rel_tol must be greater than zero.", "abs_tol is the minimum absolute tolerance \u2013 useful for comparisons near zero.", "abs_tol must be at least zero.", "If no errors occur, the result will be: abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol).", "The IEEE 754 special values of NaN, inf, and -inf will be handled according to IEEE rules.", "Specifically, NaN is not considered close to any other value, including NaN.", "inf and -inf are only considered close to themselves."]}
{"index": 681, "name": "cmath.pi", "module": "cmath", "doc": ["The mathematical constant \u03c0, as a float."]}
{"index": 682, "name": "cmath.e", "module": "cmath", "doc": ["The mathematical constant e, as a float."]}
{"index": 683, "name": "cmath.tau", "module": "cmath", "doc": ["The mathematical constant \u03c4, as a float."]}
{"index": 684, "name": "cmath.inf", "module": "cmath", "doc": ["Floating-point positive infinity.", "Equivalent to float('inf')."]}
{"index": 685, "name": "cmath.infj", "module": "cmath", "doc": ["Complex number with zero real part and positive infinity imaginary part.", "Equivalent to complex(0.0, float('inf'))."]}
{"index": 686, "name": "cmath.nan", "module": "cmath", "doc": ["A floating-point \u201cnot a number\u201d (NaN) value.", "Equivalent to float('nan')."]}
{"index": 687, "name": "cmath.nanj", "module": "cmath", "doc": ["Complex number with zero real part and NaN imaginary part.", "Equivalent to complex(0.0, float('nan'))."]}
{"index": 688, "name": "cmd.Cmd", "module": "cmd", "doc": ["A Cmd instance or subclass instance is a line-oriented interpreter framework.", "There is no good reason to instantiate Cmd itself; rather, it\u2019s useful as a superclass of an interpreter class you define yourself in order to inherit Cmd\u2019s methods and encapsulate action methods.", "The optional argument completekey is the readline name of a completion key; it defaults to Tab.", "If completekey is not None and readline is available, command completion is done automatically.", "The optional arguments stdin and stdout specify the  input and output file objects that the Cmd instance or subclass  instance will use for input and output.", "If not specified, they will default to sys.stdin and sys.stdout.", "If you want a given stdin to be used, make sure to set the instance\u2019s use_rawinput attribute to False, otherwise stdin will be ignored."]}
{"index": 689, "name": "cmd.Cmd.cmdloop", "module": "cmd", "doc": ["Repeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument.", "The optional argument is a banner or intro string to be issued before the first prompt (this overrides the intro class attribute).", "If the readline module is loaded, input will automatically inherit bash-like history-list editing (e.g.", "Control-P scrolls back to the last command, Control-N forward to the next one, Control-F moves the cursor to the right non-destructively, Control-B moves the cursor to the left non-destructively, etc.", ").", "An end-of-file on input is passed back as the string 'EOF'.", "An interpreter instance will recognize a command name foo if and only if it has a method do_foo().", "As a special case, a line beginning with the character '?'", "is dispatched to the method do_help().", "As another special case, a line beginning with the character '!'", "is dispatched to the method do_shell() (if such a method is defined).", "This method will return when the postcmd() method returns a true value.", "The stop argument to postcmd() is the return value from the command\u2019s corresponding do_*() method.", "If completion is enabled, completing commands will be done automatically, and completing of commands args is done by calling complete_foo() with arguments text, line, begidx, and endidx.", "text is the string prefix we are attempting to match: all returned matches must begin with it.", "line is the current input line with leading whitespace removed, begidx and endidx are the beginning and ending indexes of the prefix text, which could be used to provide different completion depending upon which position the argument is in.", "All subclasses of Cmd inherit a predefined do_help().", "This method, called with an argument 'bar', invokes the corresponding method help_bar(), and if that is not present, prints the docstring of do_bar(), if available.", "With no argument, do_help() lists all available help topics (that is, all commands with corresponding help_*() methods or commands that have docstrings), and also lists any undocumented commands."]}
{"index": 690, "name": "cmd.Cmd.onecmd", "module": "cmd", "doc": ["Interpret the argument as though it had been typed in response to the prompt.", "This may be overridden, but should not normally need to be; see the precmd() and postcmd() methods for useful execution hooks.", "The return value is a flag indicating whether interpretation of commands by the interpreter should stop.", "If there is a do_*() method for the command str, the return value of that method is returned, otherwise the return value from the default() method is returned."]}
{"index": 691, "name": "cmd.Cmd.emptyline", "module": "cmd", "doc": ["Method called when an empty line is entered in response to the prompt.", "If this method is not overridden, it repeats the last nonempty command entered."]}
{"index": 692, "name": "cmd.Cmd.default", "module": "cmd", "doc": ["Method called on an input line when the command prefix is not recognized.", "If this method is not overridden, it prints an error message and returns."]}
{"index": 693, "name": "cmd.Cmd.completedefault", "module": "cmd", "doc": ["Method called to complete an input line when no command-specific complete_*() method is available.", "By default, it returns an empty list."]}
{"index": 694, "name": "cmd.Cmd.precmd", "module": "cmd", "doc": ["Hook method executed just before the command line line is interpreted, but after the input prompt is generated and issued.", "This method is a stub in Cmd; it exists to be overridden by subclasses.", "The return value is used as the command which will be executed by the onecmd() method; the precmd() implementation may re-write the command or simply return line unchanged."]}
{"index": 695, "name": "cmd.Cmd.postcmd", "module": "cmd", "doc": ["Hook method executed just after a command dispatch is finished.", "This method is a stub in Cmd; it exists to be overridden by subclasses.", "line is the command line which was executed, and stop is a flag which indicates whether execution will be terminated after the call to postcmd(); this will be the return value of the onecmd() method.", "The return value of this method will be used as the new value for the internal flag which corresponds to stop; returning false will cause interpretation to continue."]}
{"index": 696, "name": "cmd.Cmd.preloop", "module": "cmd", "doc": ["Hook method executed once when cmdloop() is called.", "This method is a stub in Cmd; it exists to be overridden by subclasses."]}
{"index": 697, "name": "cmd.Cmd.postloop", "module": "cmd", "doc": ["Hook method executed once when cmdloop() is about to return.", "This method is a stub in Cmd; it exists to be overridden by subclasses."]}
{"index": 698, "name": "cmd.Cmd.prompt", "module": "cmd", "doc": ["The prompt issued to solicit input."]}
{"index": 699, "name": "cmd.Cmd.identchars", "module": "cmd", "doc": ["The string of characters accepted for the command prefix."]}
{"index": 700, "name": "cmd.Cmd.lastcmd", "module": "cmd", "doc": ["The last nonempty command prefix seen."]}
{"index": 701, "name": "cmd.Cmd.cmdqueue", "module": "cmd", "doc": ["A list of queued input lines.", "The cmdqueue list is checked in cmdloop() when new input is needed; if it is nonempty, its elements will be processed in order, as if entered at the prompt."]}
{"index": 702, "name": "cmd.Cmd.intro", "module": "cmd", "doc": ["A string to issue as an intro or banner.", "May be overridden by giving the cmdloop() method an argument."]}
{"index": 703, "name": "cmd.Cmd.doc_header", "module": "cmd", "doc": ["The header to issue if the help output has a section for documented commands."]}
{"index": 704, "name": "cmd.Cmd.misc_header", "module": "cmd", "doc": ["The header to issue if the help output has a section for miscellaneous  help topics (that is, there are help_*() methods without corresponding do_*() methods)."]}
{"index": 705, "name": "cmd.Cmd.undoc_header", "module": "cmd", "doc": ["The header to issue if the help output has a section for undocumented  commands (that is, there are do_*() methods without corresponding help_*() methods)."]}
{"index": 706, "name": "cmd.Cmd.ruler", "module": "cmd", "doc": ["The character used to draw separator lines under the help-message headers.", "If empty, no ruler line is drawn.", "It defaults to '='."]}
{"index": 707, "name": "cmd.Cmd.use_rawinput", "module": "cmd", "doc": ["A flag, defaulting to true.", "If true, cmdloop() uses input() to display a prompt and read the next command; if false, sys.stdout.write() and sys.stdin.readline() are used.", "(This means that by importing readline, on systems that support it, the interpreter will automatically support Emacs-like line editing  and command-history keystrokes.)"]}
{"index": 708, "name": "code.InteractiveInterpreter", "module": "code", "doc": ["This class deals with parsing and interpreter state (the user\u2019s namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly).", "The optional locals argument specifies the dictionary in which code will be executed; it defaults to a newly created dictionary with key '__name__' set to '__console__' and key '__doc__' set to None."]}
{"index": 709, "name": "code.InteractiveConsole", "module": "code", "doc": ["Closely emulate the behavior of the interactive Python interpreter.", "This class builds on InteractiveInterpreter and adds prompting using the familiar sys.ps1 and sys.ps2, and input buffering."]}
{"index": 710, "name": "code.interact", "module": "code", "doc": ["Convenience function to run a read-eval-print loop.", "This creates a new instance of InteractiveConsole and sets readfunc to be used as the InteractiveConsole.raw_input() method, if provided.", "If local is provided, it is passed to the InteractiveConsole constructor for use as the default namespace for the interpreter loop.", "The interact() method of the instance is then run with banner and exitmsg passed as the banner and exit message to use, if provided.", "The console object is discarded after use."]}
{"index": 711, "name": "code.compile_command", "module": "code", "doc": ["This function is useful for programs that want to emulate Python\u2019s interpreter main loop (a.k.a.", "the read-eval-print loop).", "The tricky part is to determine when the user has entered an incomplete command that can be completed by entering more text (as opposed to a complete command or a syntax error).", "This function almost always makes the same decision as the real interpreter main loop.", "source is the source string; filename is the optional filename from which source was read, defaulting to '<input>'; and symbol is the optional grammar start symbol, which should be either 'single' (the default) or 'eval'.", "Returns a code object (the same as compile(source, filename, symbol)) if the command is complete and valid; None if the command is incomplete; raises SyntaxError if the command is complete and contains a syntax error, or raises OverflowError or ValueError if the command contains an invalid literal."]}
{"index": 712, "name": "code.InteractiveInterpreter.runsource", "module": "code", "doc": ["Compile and run some source in the interpreter.", "Arguments are the same as for compile_command(); the default for filename is '<input>', and for symbol is 'single'.", "One several things can happen:", "The return value can be used to decide whether to use sys.ps1 or sys.ps2 to prompt the next line."]}
{"index": 713, "name": "code.InteractiveInterpreter.runcode", "module": "code", "doc": ["Execute a code object.", "When an exception occurs, showtraceback() is called to display a traceback.", "All exceptions are caught except SystemExit, which is allowed to propagate.", "A note about KeyboardInterrupt: this exception may occur elsewhere in this code, and may not always be caught.", "The caller should be prepared to deal with it."]}
{"index": 714, "name": "code.InteractiveInterpreter.showsyntaxerror", "module": "code", "doc": ["Display the syntax error that just occurred.", "This does not display a stack trace because there isn\u2019t one for syntax errors.", "If filename is given, it is stuffed into the exception instead of the default filename provided by Python\u2019s parser, because it always uses '<string>' when reading from a string.", "The output is written by the write() method."]}
{"index": 715, "name": "code.InteractiveInterpreter.showtraceback", "module": "code", "doc": ["Display the exception that just occurred.", "We remove the first stack item because it is within the interpreter object implementation.", "The output is written by the write() method."]}
{"index": 716, "name": "code.InteractiveInterpreter.write", "module": "code", "doc": ["Write a string to the standard error stream (sys.stderr).", "Derived classes should override this to provide the appropriate output handling as needed."]}
{"index": 717, "name": "code.InteractiveConsole.interact", "module": "code", "doc": ["Closely emulate the interactive Python console.", "The optional banner argument specify the banner to print before the first interaction; by default it prints a banner similar to the one printed by the standard Python interpreter, followed by the class name of the console object in parentheses (so as not to confuse this with the real interpreter \u2013 since it\u2019s so close!", ").", "The optional exitmsg argument specifies an exit message printed when exiting.", "Pass the empty string to suppress the exit message.", "If exitmsg is not given or None, a default message is printed."]}
{"index": 718, "name": "code.InteractiveConsole.push", "module": "code", "doc": ["Push a line of source text to the interpreter.", "The line should not have a trailing newline; it may have internal newlines.", "The line is appended to a buffer and the interpreter\u2019s runsource() method is called with the concatenated contents of the buffer as source.", "If this indicates that the command was executed or invalid, the buffer is reset; otherwise, the command is incomplete, and the buffer is left as it was after the line was appended.", "The return value is True if more input is required, False if the line was dealt with in some way (this is the same as runsource())."]}
{"index": 719, "name": "code.InteractiveConsole.resetbuffer", "module": "code", "doc": ["Remove any unhandled source text from the input buffer."]}
{"index": 720, "name": "code.InteractiveConsole.raw_input", "module": "code", "doc": ["Write a prompt and read a line.", "The returned line does not include the trailing newline.", "When the user enters the EOF key sequence, EOFError is raised.", "The base implementation reads from sys.stdin; a subclass may replace this with a different implementation."]}
{"index": 721, "name": "codecs.encode", "module": "codecs", "doc": ["Encodes obj using the codec registered for encoding.", "Errors may be given to set the desired error handling scheme.", "The default error handler is 'strict' meaning that encoding errors raise ValueError (or a more codec specific subclass, such as UnicodeEncodeError).", "Refer to Codec Base Classes for more information on codec error handling."]}
{"index": 722, "name": "codecs.decode", "module": "codecs", "doc": ["Decodes obj using the codec registered for encoding.", "Errors may be given to set the desired error handling scheme.", "The default error handler is 'strict' meaning that decoding errors raise ValueError (or a more codec specific subclass, such as UnicodeDecodeError).", "Refer to Codec Base Classes for more information on codec error handling."]}
{"index": 723, "name": "codecs.lookup", "module": "codecs", "doc": ["Looks up the codec info in the Python codec registry and returns a CodecInfo object as defined below.", "Encodings are first looked up in the registry\u2019s cache.", "If not found, the list of registered search functions is scanned.", "If no CodecInfo object is found, a LookupError is raised.", "Otherwise, the CodecInfo object is stored in the cache and returned to the caller."]}
{"index": 724, "name": "codecs.CodecInfo", "module": "codecs", "doc": ["Codec details when looking up the codec registry.", "The constructor arguments are stored in attributes of the same name:"]}
{"index": 725, "name": "codecs.CodecInfo.name", "module": "codecs", "doc": ["The name of the encoding."]}
{"index": 726, "name": "codecs.CodecInfo.encode", "module": "codecs", "doc": ["The stateless encoding and decoding functions.", "These must be functions or methods which have the same interface as the encode() and decode() methods of Codec instances (see Codec Interface).", "The functions or methods are expected to work in a stateless mode."]}
{"index": 727, "name": "codecs.CodecInfo.decode", "module": "codecs", "doc": ["The stateless encoding and decoding functions.", "These must be functions or methods which have the same interface as the encode() and decode() methods of Codec instances (see Codec Interface).", "The functions or methods are expected to work in a stateless mode."]}
{"index": 728, "name": "codecs.CodecInfo.incrementalencoder", "module": "codecs", "doc": ["Incremental encoder and decoder classes or factory functions.", "These have to provide the interface defined by the base classes IncrementalEncoder and IncrementalDecoder, respectively.", "Incremental codecs can maintain state."]}
{"index": 729, "name": "codecs.CodecInfo.incrementaldecoder", "module": "codecs", "doc": ["Incremental encoder and decoder classes or factory functions.", "These have to provide the interface defined by the base classes IncrementalEncoder and IncrementalDecoder, respectively.", "Incremental codecs can maintain state."]}
{"index": 730, "name": "codecs.CodecInfo.streamwriter", "module": "codecs", "doc": ["Stream writer and reader classes or factory functions.", "These have to provide the interface defined by the base classes StreamWriter and StreamReader, respectively.", "Stream codecs can maintain state."]}
{"index": 731, "name": "codecs.CodecInfo.streamreader", "module": "codecs", "doc": ["Stream writer and reader classes or factory functions.", "These have to provide the interface defined by the base classes StreamWriter and StreamReader, respectively.", "Stream codecs can maintain state."]}
{"index": 732, "name": "codecs.getencoder", "module": "codecs", "doc": ["Look up the codec for the given encoding and return its encoder function.", "Raises a LookupError in case the encoding cannot be found."]}
{"index": 733, "name": "codecs.getdecoder", "module": "codecs", "doc": ["Look up the codec for the given encoding and return its decoder function.", "Raises a LookupError in case the encoding cannot be found."]}
{"index": 734, "name": "codecs.getincrementalencoder", "module": "codecs", "doc": ["Look up the codec for the given encoding and return its incremental encoder class or factory function.", "Raises a LookupError in case the encoding cannot be found or the codec doesn\u2019t support an incremental encoder."]}
{"index": 735, "name": "codecs.getincrementaldecoder", "module": "codecs", "doc": ["Look up the codec for the given encoding and return its incremental decoder class or factory function.", "Raises a LookupError in case the encoding cannot be found or the codec doesn\u2019t support an incremental decoder."]}
{"index": 736, "name": "codecs.getreader", "module": "codecs", "doc": ["Look up the codec for the given encoding and return its StreamReader class or factory function.", "Raises a LookupError in case the encoding cannot be found."]}
{"index": 737, "name": "codecs.getwriter", "module": "codecs", "doc": ["Look up the codec for the given encoding and return its StreamWriter class or factory function.", "Raises a LookupError in case the encoding cannot be found."]}
{"index": 738, "name": "codecs.register", "module": "codecs", "doc": ["Register a codec search function.", "Search functions are expected to take one argument, being the encoding name in all lower case letters, and return a CodecInfo object.", "In case a search function cannot find a given encoding, it should return None."]}
{"index": 739, "name": "codecs.open", "module": "codecs", "doc": ["Open an encoded file using the given mode and return an instance of StreamReaderWriter, providing transparent encoding/decoding.", "The default file mode is 'r', meaning to open the file in read mode.", "encoding specifies the encoding which is to be used for the file.", "Any encoding that encodes to and decodes from bytes is allowed, and the data types supported by the file methods depend on the codec used.", "errors may be given to define the error handling.", "It defaults to 'strict' which causes a ValueError to be raised in case an encoding error occurs.", "buffering has the same meaning as for the built-in open() function.", "It defaults to line buffered."]}
{"index": 740, "name": "codecs.EncodedFile", "module": "codecs", "doc": ["Return a StreamRecoder instance, a wrapped version of file which provides transparent transcoding.", "The original file is closed when the wrapped version is closed.", "Data written to the wrapped file is decoded according to the given data_encoding and then written to the original file as bytes using file_encoding.", "Bytes read from the original file are decoded according to file_encoding, and the result is encoded using data_encoding.", "If file_encoding is not given, it defaults to data_encoding.", "errors may be given to define the error handling.", "It defaults to 'strict', which causes ValueError to be raised in case an encoding error occurs."]}
{"index": 741, "name": "codecs.iterencode", "module": "codecs", "doc": ["Uses an incremental encoder to iteratively encode the input provided by iterator.", "This function is a generator.", "The errors argument (as well as any other keyword argument) is passed through to the incremental encoder.", "This function requires that the codec accept text str objects to encode.", "Therefore it does not support bytes-to-bytes encoders such as base64_codec."]}
{"index": 742, "name": "codecs.iterdecode", "module": "codecs", "doc": ["Uses an incremental decoder to iteratively decode the input provided by iterator.", "This function is a generator.", "The errors argument (as well as any other keyword argument) is passed through to the incremental decoder.", "This function requires that the codec accept bytes objects to decode.", "Therefore it does not support text-to-text encoders such as rot_13, although rot_13 may be used equivalently with iterencode()."]}
{"index": 743, "name": "codecs.BOM", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 744, "name": "codecs.BOM_BE", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 745, "name": "codecs.BOM_LE", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 746, "name": "codecs.BOM_UTF8", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 747, "name": "codecs.BOM_UTF16", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 748, "name": "codecs.BOM_UTF16_BE", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 749, "name": "codecs.BOM_UTF16_LE", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 750, "name": "codecs.BOM_UTF32", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 751, "name": "codecs.BOM_UTF32_BE", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 752, "name": "codecs.BOM_UTF32_LE", "module": "codecs", "doc": ["These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings.", "They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature.", "BOM_UTF16 is either BOM_UTF16_BE or BOM_UTF16_LE depending on the platform\u2019s native byte order, BOM is an alias for BOM_UTF16, BOM_LE for BOM_UTF16_LE and BOM_BE for BOM_UTF16_BE.", "The others represent the BOM in UTF-8 and UTF-32 encodings."]}
{"index": 753, "name": "codecs.register_error", "module": "codecs", "doc": ["Register the error handling function error_handler under the name name.", "The error_handler argument will be called during encoding and decoding in case of an error, when name is specified as the errors parameter.", "For encoding, error_handler will be called with a UnicodeEncodeError instance, which contains information about the location of the error.", "The error handler must either raise this or a different exception, or return a tuple with a replacement for the unencodable part of the input and a position where encoding should continue.", "The replacement may be either str or bytes.", "If the replacement is bytes, the encoder will simply copy them into the output buffer.", "If the replacement is a string, the encoder will encode the replacement.", "Encoding continues on original input at the specified position.", "Negative position values will be treated as being relative to the end of the input string.", "If the resulting position is out of bound an IndexError will be raised.", "Decoding and translating works similarly, except UnicodeDecodeError or UnicodeTranslateError will be passed to the handler and that the replacement from the error handler will be put into the output directly."]}
{"index": 754, "name": "codecs.lookup_error", "module": "codecs", "doc": ["Return the error handler previously registered under the name name.", "Raises a LookupError in case the handler cannot be found."]}
{"index": 755, "name": "codecs.strict_errors", "module": "codecs", "doc": ["Implements the 'strict' error handling: each encoding or decoding error raises a UnicodeError."]}
{"index": 756, "name": "codecs.replace_errors", "module": "codecs", "doc": ["Implements the 'replace' error handling (for text encodings only): substitutes '?'", "for encoding errors (to be encoded by the codec), and '\\ufffd' (the Unicode replacement character) for decoding errors."]}
{"index": 757, "name": "codecs.ignore_errors", "module": "codecs", "doc": ["Implements the 'ignore' error handling: malformed data is ignored and encoding or decoding is continued without further notice."]}
{"index": 758, "name": "codecs.xmlcharrefreplace_errors", "module": "codecs", "doc": ["Implements the 'xmlcharrefreplace' error handling (for encoding with text encodings only): the unencodable character is replaced by an appropriate XML character reference."]}
{"index": 759, "name": "codecs.backslashreplace_errors", "module": "codecs", "doc": ["Implements the 'backslashreplace' error handling (for text encodings only): malformed data is replaced by a backslashed escape sequence."]}
{"index": 760, "name": "codecs.namereplace_errors", "module": "codecs", "doc": ["Implements the 'namereplace' error handling (for encoding with text encodings only): the unencodable character is replaced by a \\N{...} escape sequence."]}
{"index": 761, "name": "codecs.Codec.encode", "module": "codecs", "doc": ["Encodes the object input and returns a tuple (output object, length consumed).", "For instance, text encoding converts a string object to a bytes object using a particular character set encoding (e.g., cp1252 or iso-8859-1).", "The errors argument defines the error handling to apply.", "It defaults to 'strict' handling.", "The method may not store state in the Codec instance.", "Use StreamWriter for codecs which have to keep state in order to make encoding efficient.", "The encoder must be able to handle zero length input and return an empty object of the output object type in this situation."]}
{"index": 762, "name": "codecs.Codec.decode", "module": "codecs", "doc": ["Decodes the object input and returns a tuple (output object, length consumed).", "For instance, for a text encoding, decoding converts a bytes object encoded using a particular character set encoding to a string object.", "For text encodings and bytes-to-bytes codecs, input must be a bytes object or one which provides the read-only buffer interface \u2013 for example, buffer objects and memory mapped files.", "The errors argument defines the error handling to apply.", "It defaults to 'strict' handling.", "The method may not store state in the Codec instance.", "Use StreamReader for codecs which have to keep state in order to make decoding efficient.", "The decoder must be able to handle zero length input and return an empty object of the output object type in this situation."]}
{"index": 763, "name": "codecs.IncrementalEncoder", "module": "codecs", "doc": ["Constructor for an IncrementalEncoder instance.", "All incremental encoders must provide this constructor interface.", "They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.", "The IncrementalEncoder may implement different error handling schemes by providing the errors keyword argument.", "See Error Handlers for possible values.", "The errors argument will be assigned to an attribute of the same name.", "Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the IncrementalEncoder object."]}
{"index": 764, "name": "codecs.IncrementalEncoder.encode", "module": "codecs", "doc": ["Encodes object (taking the current state of the encoder into account) and returns the resulting encoded object.", "If this is the last call to encode() final must be true (the default is false)."]}
{"index": 765, "name": "codecs.IncrementalEncoder.reset", "module": "codecs", "doc": ["Reset the encoder to the initial state.", "The output is discarded: call .encode(object, final=True), passing an empty byte or text string if necessary, to reset the encoder and to get the output."]}
{"index": 766, "name": "codecs.IncrementalEncoder.getstate", "module": "codecs", "doc": ["Return the current state of the encoder which must be an integer.", "The implementation should make sure that 0 is the most common state.", "(States that are more complicated than integers can be converted into an integer by marshaling/pickling the state and encoding the bytes of the resulting string into an integer.)"]}
{"index": 767, "name": "codecs.IncrementalEncoder.setstate", "module": "codecs", "doc": ["Set the state of the encoder to state.", "state must be an encoder state returned by getstate()."]}
{"index": 768, "name": "codecs.IncrementalDecoder", "module": "codecs", "doc": ["Constructor for an IncrementalDecoder instance.", "All incremental decoders must provide this constructor interface.", "They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.", "The IncrementalDecoder may implement different error handling schemes by providing the errors keyword argument.", "See Error Handlers for possible values.", "The errors argument will be assigned to an attribute of the same name.", "Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the IncrementalDecoder object."]}
{"index": 769, "name": "codecs.IncrementalDecoder.decode", "module": "codecs", "doc": ["Decodes object (taking the current state of the decoder into account) and returns the resulting decoded object.", "If this is the last call to decode() final must be true (the default is false).", "If final is true the decoder must decode the input completely and must flush all buffers.", "If this isn\u2019t possible (e.g.", "because of incomplete byte sequences at the end of the input) it must initiate error handling just like in the stateless case (which might raise an exception)."]}
{"index": 770, "name": "codecs.IncrementalDecoder.reset", "module": "codecs", "doc": ["Reset the decoder to the initial state."]}
{"index": 771, "name": "codecs.IncrementalDecoder.getstate", "module": "codecs", "doc": ["Return the current state of the decoder.", "This must be a tuple with two items, the first must be the buffer containing the still undecoded input.", "The second must be an integer and can be additional state info.", "(The implementation should make sure that 0 is the most common additional state info.)", "If this additional state info is 0 it must be possible to set the decoder to the state which has no input buffered and 0 as the additional state info, so that feeding the previously buffered input to the decoder returns it to the previous state without producing any output.", "(Additional state info that is more complicated than integers can be converted into an integer by marshaling/pickling the info and encoding the bytes of the resulting string into an integer.)"]}
{"index": 772, "name": "codecs.IncrementalDecoder.setstate", "module": "codecs", "doc": ["Set the state of the decoder to state.", "state must be a decoder state returned by getstate()."]}
{"index": 773, "name": "codecs.StreamWriter", "module": "codecs", "doc": ["Constructor for a StreamWriter instance.", "All stream writers must provide this constructor interface.", "They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.", "The stream argument must be a file-like object open for writing text or binary data, as appropriate for the specific codec.", "The StreamWriter may implement different error handling schemes by providing the errors keyword argument.", "See Error Handlers for the standard error handlers the underlying stream codec may support.", "The errors argument will be assigned to an attribute of the same name.", "Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the StreamWriter object."]}
{"index": 774, "name": "codecs.StreamWriter.write", "module": "codecs", "doc": ["Writes the object\u2019s contents encoded to the stream."]}
{"index": 775, "name": "codecs.StreamWriter.writelines", "module": "codecs", "doc": ["Writes the concatenated list of strings to the stream (possibly by reusing the write() method).", "The standard bytes-to-bytes codecs do not support this method."]}
{"index": 776, "name": "codecs.StreamWriter.reset", "module": "codecs", "doc": ["Flushes and resets the codec buffers used for keeping state.", "Calling this method should ensure that the data on the output is put into a clean state that allows appending of new fresh data without having to rescan the whole stream to recover state."]}
{"index": 777, "name": "codecs.StreamReader", "module": "codecs", "doc": ["Constructor for a StreamReader instance.", "All stream readers must provide this constructor interface.", "They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.", "The stream argument must be a file-like object open for reading text or binary data, as appropriate for the specific codec.", "The StreamReader may implement different error handling schemes by providing the errors keyword argument.", "See Error Handlers for the standard error handlers the underlying stream codec may support.", "The errors argument will be assigned to an attribute of the same name.", "Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the StreamReader object.", "The set of allowed values for the errors argument can be extended with register_error()."]}
{"index": 778, "name": "codecs.StreamReader.read", "module": "codecs", "doc": ["Decodes data from the stream and returns the resulting object.", "The chars argument indicates the number of decoded code points or bytes to return.", "The read() method will never return more data than requested, but it might return less, if there is not enough available.", "The size argument indicates the approximate maximum number of encoded bytes or code points to read for decoding.", "The decoder can modify this setting as appropriate.", "The default value -1 indicates to read and decode as much as possible.", "This parameter is intended to prevent having to decode huge files in one step.", "The firstline flag indicates that it would be sufficient to only return the first line, if there are decoding errors on later lines.", "The method should use a greedy read strategy meaning that it should read as much data as is allowed within the definition of the encoding and the given size, e.g.", "if optional encoding endings or state markers are available on the stream, these should be read too."]}
{"index": 779, "name": "codecs.StreamReader.readline", "module": "codecs", "doc": ["Read one line from the input stream and return the decoded data.", "size, if given, is passed as size argument to the stream\u2019s read() method.", "If keepends is false line-endings will be stripped from the lines returned."]}
{"index": 780, "name": "codecs.StreamReader.readlines", "module": "codecs", "doc": ["Read all lines available on the input stream and return them as a list of lines.", "Line-endings are implemented using the codec\u2019s decode() method and are included in the list entries if keepends is true.", "sizehint, if given, is passed as the size argument to the stream\u2019s read() method."]}
{"index": 781, "name": "codecs.StreamReader.reset", "module": "codecs", "doc": ["Resets the codec buffers used for keeping state.", "Note that no stream repositioning should take place.", "This method is primarily intended to be able to recover from decoding errors."]}
{"index": 782, "name": "codecs.StreamReaderWriter", "module": "codecs", "doc": ["Creates a StreamReaderWriter instance.", "stream must be a file-like object.", "Reader and Writer must be factory functions or classes providing the StreamReader and StreamWriter interface resp.", "Error handling is done in the same way as defined for the stream readers and writers."]}
{"index": 783, "name": "codecs.StreamRecoder", "module": "codecs", "doc": ["Creates a StreamRecoder instance which implements a two-way conversion: encode and decode work on the frontend\u00a0\u2014 the data visible to code calling read() and write(), while Reader and Writer work on the backend\u00a0\u2014 the data in stream.", "You can use these objects to do transparent transcodings, e.g., from Latin-1 to UTF-8 and back.", "The stream argument must be a file-like object.", "The encode and decode arguments must adhere to the Codec interface.", "Reader and Writer must be factory functions or classes providing objects of the StreamReader and StreamWriter interface respectively.", "Error handling is done in the same way as defined for the stream readers and writers."]}
{"index": 784, "name": "b64", "module": "codecs", "doc": ["In addition to bytes-like objects, 'base64_codec' also accepts ASCII-only instances of str for decoding"]}
{"index": 785, "name": "encodings.idna.nameprep", "module": "encodings", "doc": ["Return the nameprepped version of label.", "The implementation currently assumes query strings, so AllowUnassigned is true."]}
{"index": 786, "name": "encodings.idna.ToASCII", "module": "encodings", "doc": ["Convert a label to ASCII, as specified in RFC 3490.", "UseSTD3ASCIIRules is assumed to be false."]}
{"index": 787, "name": "encodings.idna.ToUnicode", "module": "encodings", "doc": ["Convert a label to Unicode, as specified in RFC 3490."]}
{"index": 788, "name": "codeop.compile_command", "module": "codeop", "doc": ["Tries to compile source, which should be a string of Python code and return a code object if source is valid Python code.", "In that case, the filename attribute of the code object will be filename, which defaults to '<input>'.", "Returns None if source is not valid Python code, but is a prefix of valid Python code.", "If there is a problem with source, an exception will be raised.", "SyntaxError is raised if there is invalid Python syntax, and OverflowError or ValueError if there is an invalid literal.", "The symbol argument determines whether source is compiled as a statement ('single', the default) or as an expression ('eval').", "Any other value will cause ValueError to  be raised."]}
{"index": 789, "name": "codeop.Compile", "module": "codeop", "doc": ["Instances of this class have __call__() methods identical in signature to the built-in function compile(), but with the difference that if the instance compiles program text containing a __future__ statement, the instance \u2018remembers\u2019 and compiles all subsequent program texts with the statement in force."]}
{"index": 790, "name": "codeop.CommandCompiler", "module": "codeop", "doc": ["Instances of this class have __call__() methods identical in signature to compile_command(); the difference is that if the instance compiles program text containing a __future__ statement, the instance \u2018remembers\u2019 and compiles all subsequent program texts with the statement in force."]}
{"index": 791, "name": "collections.abc.Container", "module": "collections", "doc": ["ABCs for classes that provide respectively the methods __contains__(), __hash__(), __len__(), and __call__()."]}
{"index": 792, "name": "collections.abc.Hashable", "module": "collections", "doc": ["ABCs for classes that provide respectively the methods __contains__(), __hash__(), __len__(), and __call__()."]}
{"index": 793, "name": "collections.abc.Sized", "module": "collections", "doc": ["ABCs for classes that provide respectively the methods __contains__(), __hash__(), __len__(), and __call__()."]}
{"index": 794, "name": "collections.abc.Callable", "module": "collections", "doc": ["ABCs for classes that provide respectively the methods __contains__(), __hash__(), __len__(), and __call__()."]}
{"index": 795, "name": "collections.abc.Iterable", "module": "collections", "doc": ["ABC for classes that provide the __iter__() method.", "Checking isinstance(obj, Iterable) detects classes that are registered as Iterable or that have an __iter__() method, but it does not detect classes that iterate with the __getitem__() method.", "The only reliable way to determine whether an object is iterable is to call iter(obj)."]}
{"index": 796, "name": "collections.abc.Collection", "module": "collections", "doc": ["ABC for sized iterable container classes."]}
{"index": 797, "name": "collections.abc.Iterator", "module": "collections", "doc": ["ABC for classes that provide the __iter__() and __next__() methods.", "See also the definition of iterator."]}
{"index": 798, "name": "collections.abc.Reversible", "module": "collections", "doc": ["ABC for iterable classes that also provide the __reversed__() method."]}
{"index": 799, "name": "collections.abc.Generator", "module": "collections", "doc": ["ABC for generator classes that implement the protocol defined in PEP 342 that extends iterators with the send(), throw() and close() methods.", "See also the definition of generator."]}
{"index": 800, "name": "collections.abc.Sequence", "module": "collections", "doc": ["ABCs for read-only and mutable sequences.", "Implementation note: Some of the mixin methods, such as __iter__(), __reversed__() and index(), make repeated calls to the underlying __getitem__() method.", "Consequently, if __getitem__() is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden."]}
{"index": 801, "name": "collections.abc.MutableSequence", "module": "collections", "doc": ["ABCs for read-only and mutable sequences.", "Implementation note: Some of the mixin methods, such as __iter__(), __reversed__() and index(), make repeated calls to the underlying __getitem__() method.", "Consequently, if __getitem__() is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden."]}
{"index": 802, "name": "collections.abc.ByteString", "module": "collections", "doc": ["ABCs for read-only and mutable sequences.", "Implementation note: Some of the mixin methods, such as __iter__(), __reversed__() and index(), make repeated calls to the underlying __getitem__() method.", "Consequently, if __getitem__() is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden."]}
{"index": 803, "name": "collections.abc.Set", "module": "collections", "doc": ["ABCs for read-only and mutable sets."]}
{"index": 804, "name": "collections.abc.MutableSet", "module": "collections", "doc": ["ABCs for read-only and mutable sets."]}
{"index": 805, "name": "collections.abc.Mapping", "module": "collections", "doc": ["ABCs for read-only and mutable mappings."]}
{"index": 806, "name": "collections.abc.MutableMapping", "module": "collections", "doc": ["ABCs for read-only and mutable mappings."]}
{"index": 807, "name": "collections.abc.MappingView", "module": "collections", "doc": ["ABCs for mapping, items, keys, and values views."]}
{"index": 808, "name": "collections.abc.ItemsView", "module": "collections", "doc": ["ABCs for mapping, items, keys, and values views."]}
{"index": 809, "name": "collections.abc.KeysView", "module": "collections", "doc": ["ABCs for mapping, items, keys, and values views."]}
{"index": 810, "name": "collections.abc.ValuesView", "module": "collections", "doc": ["ABCs for mapping, items, keys, and values views."]}
{"index": 811, "name": "collections.abc.Awaitable", "module": "collections", "doc": ["ABC for awaitable objects, which can be used in await expressions.", "Custom implementations must provide the __await__() method.", "Coroutine objects and instances of the Coroutine ABC are all instances of this ABC."]}
{"index": 812, "name": "collections.abc.Coroutine", "module": "collections", "doc": ["ABC for coroutine compatible classes.", "These implement the following methods, defined in Coroutine Objects: send(), throw(), and close().", "Custom implementations must also implement __await__().", "All Coroutine instances are also instances of Awaitable.", "See also the definition of coroutine."]}
{"index": 813, "name": "collections.abc.AsyncIterable", "module": "collections", "doc": ["ABC for classes that provide __aiter__ method.", "See also the definition of asynchronous iterable."]}
{"index": 814, "name": "collections.abc.AsyncIterator", "module": "collections", "doc": ["ABC for classes that provide __aiter__ and __anext__ methods.", "See also the definition of asynchronous iterator."]}
{"index": 815, "name": "collections.abc.AsyncGenerator", "module": "collections", "doc": ["ABC for asynchronous generator classes that implement the protocol defined in PEP 525 and PEP 492."]}
{"index": 816, "name": "collections.ChainMap", "module": "collections", "doc": ["A ChainMap groups multiple dicts or other mappings together to create a single, updateable view.", "If no maps are specified, a single empty dictionary is provided so that a new chain always has at least one mapping.", "The underlying mappings are stored in a list.", "That list is public and can be accessed or updated using the maps attribute.", "There is no other state.", "Lookups search the underlying mappings successively until a key is found.", "In contrast, writes, updates, and deletions only operate on the first mapping.", "A ChainMap incorporates the underlying mappings by reference.", "So, if one of the underlying mappings gets updated, those changes will be reflected in ChainMap.", "All of the usual dictionary methods are supported.", "In addition, there is a maps attribute, a method for creating new subcontexts, and a property for accessing all but the first mapping:", "Note, the iteration order of a ChainMap() is determined by scanning the mappings last to first:", "This gives the same ordering as a series of dict.update() calls starting with the last mapping:"]}
{"index": 817, "name": "collections.ChainMap.maps", "module": "collections", "doc": ["A user updateable list of mappings.", "The list is ordered from first-searched to last-searched.", "It is the only stored state and can be modified to change which mappings are searched.", "The list should always contain at least one mapping."]}
{"index": 818, "name": "collections.ChainMap.new_child", "module": "collections", "doc": ["Returns a new ChainMap containing a new map followed by all of the maps in the current instance.", "If m is specified, it becomes the new map at the front of the list of mappings; if not specified, an empty dict is used, so that a call to d.new_child() is equivalent to: ChainMap({}, *d.maps).", "This method is used for creating subcontexts that can be updated without altering values in any of the parent mappings."]}
{"index": 819, "name": "collections.ChainMap.parents", "module": "collections", "doc": ["Property returning a new ChainMap containing all of the maps in the current instance except the first one.", "This is useful for skipping the first map in the search.", "Use cases are similar to those for the nonlocal keyword used in nested scopes.", "The use cases also parallel those for the built-in super() function.", "A reference to d.parents is equivalent to: ChainMap(*d.maps[1:])."]}
{"index": 820, "name": "collections.Counter", "module": "collections", "doc": ["A Counter is a dict subclass for counting hashable objects.", "It is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values.", "Counts are allowed to be any integer value including zero or negative counts.", "The Counter class is similar to bags or multisets in other languages.", "Elements are counted from an iterable or initialized from another mapping (or counter):", "Counter objects have a dictionary interface except that they return a zero count for missing items instead of raising a KeyError:", "Setting a count to zero does not remove an element from a counter.", "Use del to remove it entirely:", "Counter objects support three methods beyond those available for all dictionaries:", "The usual dictionary methods are available for Counter objects except for two which work differently for counters."]}
{"index": 821, "name": "collections.Counter.elements", "module": "collections", "doc": ["Return an iterator over elements repeating each as many times as its count.", "Elements are returned in arbitrary order.", "If an element\u2019s count is less than one, elements() will ignore it."]}
{"index": 822, "name": "collections.Counter.most_common", "module": "collections", "doc": ["Return a list of the n most common elements and their counts from the most common to the least.", "If n is omitted or None, most_common() returns all elements in the counter.", "Elements with equal counts are ordered arbitrarily:"]}
{"index": 823, "name": "collections.Counter.subtract", "module": "collections", "doc": ["Elements are subtracted from an iterable or from another mapping (or counter).", "Like dict.update() but subtracts counts instead of replacing them.", "Both inputs and outputs may be zero or negative."]}
{"index": 824, "name": "collections.Counter.fromkeys", "module": "collections", "doc": ["This class method is not implemented for Counter objects."]}
{"index": 825, "name": "collections.Counter.update", "module": "collections", "doc": ["Elements are counted from an iterable or added-in from another mapping (or counter).", "Like dict.update() but adds counts instead of replacing them.", "Also, the iterable is expected to be a sequence of elements, not a sequence of (key, value) pairs."]}
{"index": 826, "name": "collections.deque", "module": "collections", "doc": ["Returns a new deque object initialized left-to-right (using append()) with data from iterable.", "If iterable is not specified, the new deque is empty.", "Deques are a generalization of stacks and queues (the name is pronounced \u201cdeck\u201d and is short for \u201cdouble-ended queue\u201d).", "Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.", "Though list objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for pop(0) and insert(0, v) operations which change both the size and position of the underlying data representation.", "If maxlen is not specified or is None, deques may grow to an arbitrary length.", "Otherwise, the deque is bounded to the specified maximum length.", "Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end.", "Bounded length deques provide functionality similar to the tail filter in Unix.", "They are also useful for tracking transactions and other pools of data where only the most recent activity is of interest.", "Deque objects support the following methods:", "Deque objects also provide one read-only attribute:"]}
{"index": 827, "name": "collections.deque.append", "module": "collections", "doc": ["Add x to the right side of the deque."]}
{"index": 828, "name": "collections.deque.appendleft", "module": "collections", "doc": ["Add x to the left side of the deque."]}
{"index": 829, "name": "collections.deque.clear", "module": "collections", "doc": ["Remove all elements from the deque leaving it with length 0."]}
{"index": 830, "name": "collections.deque.copy", "module": "collections", "doc": ["Create a shallow copy of the deque."]}
{"index": 831, "name": "collections.deque.count", "module": "collections", "doc": ["Count the number of deque elements equal to x."]}
{"index": 832, "name": "collections.deque.extend", "module": "collections", "doc": ["Extend the right side of the deque by appending elements from the iterable argument."]}
{"index": 833, "name": "collections.deque.extendleft", "module": "collections", "doc": ["Extend the left side of the deque by appending elements from iterable.", "Note, the series of left appends results in reversing the order of elements in the iterable argument."]}
{"index": 834, "name": "collections.deque.index", "module": "collections", "doc": ["Return the position of x in the deque (at or after index start and before index stop).", "Returns the first match or raises ValueError if not found."]}
{"index": 835, "name": "collections.deque.insert", "module": "collections", "doc": ["Insert x into the deque at position i.", "If the insertion would cause a bounded deque to grow beyond maxlen, an IndexError is raised."]}
{"index": 836, "name": "collections.deque.pop", "module": "collections", "doc": ["Remove and return an element from the right side of the deque.", "If no elements are present, raises an IndexError."]}
{"index": 837, "name": "collections.deque.popleft", "module": "collections", "doc": ["Remove and return an element from the left side of the deque.", "If no elements are present, raises an IndexError."]}
{"index": 838, "name": "collections.deque.remove", "module": "collections", "doc": ["Remove the first occurrence of value.", "If not found, raises a ValueError."]}
{"index": 839, "name": "collections.deque.reverse", "module": "collections", "doc": ["Reverse the elements of the deque in-place and then return None."]}
{"index": 840, "name": "collections.deque.rotate", "module": "collections", "doc": ["Rotate the deque n steps to the right.", "If n is negative, rotate to the left.", "When the deque is not empty, rotating one step to the right is equivalent to d.appendleft(d.pop()), and rotating one step to the left is equivalent to d.append(d.popleft())."]}
{"index": 841, "name": "collections.deque.maxlen", "module": "collections", "doc": ["Maximum size of a deque or None if unbounded."]}
{"index": 842, "name": "collections.defaultdict", "module": "collections", "doc": ["Returns a new dictionary-like object.", "defaultdict is a subclass of the built-in dict class.", "It overrides one method and adds one writable instance variable.", "The remaining functionality is the same as for the dict class and is not documented here.", "The first argument provides the initial value for the default_factory attribute; it defaults to None.", "All remaining arguments are treated the same as if they were passed to the dict constructor, including keyword arguments.", "defaultdict objects support the following method in addition to the standard dict operations:", "defaultdict objects support the following instance variable:"]}
{"index": 843, "name": "collections.defaultdict.__missing__", "module": "collections", "doc": ["If the default_factory attribute is None, this raises a KeyError exception with the key as argument.", "If default_factory is not None, it is called without arguments to provide a default value for the given key, this value is inserted in the dictionary for the key, and returned.", "If calling default_factory raises an exception this exception is propagated unchanged.", "This method is called by the __getitem__() method of the dict class when the requested key is not found; whatever it returns or raises is then returned or raised by __getitem__().", "Note that __missing__() is not called for any operations besides __getitem__().", "This means that get() will, like normal dictionaries, return None as a default rather than using default_factory."]}
{"index": 844, "name": "collections.defaultdict.default_factory", "module": "collections", "doc": ["This attribute is used by the __missing__() method; it is initialized from the first argument to the constructor, if present, or to None, if absent."]}
{"index": 845, "name": "collections.namedtuple", "module": "collections", "doc": ["Returns a new tuple subclass named typename.", "The new subclass is used to create tuple-like objects that have fields accessible by attribute lookup as well as being indexable and iterable.", "Instances of the subclass also have a helpful docstring (with typename and field_names) and a helpful __repr__() method which lists the tuple contents in a name=value format.", "The field_names are a sequence of strings such as ['x', 'y'].", "Alternatively, field_names can be a single string with each fieldname separated by whitespace and/or commas, for example 'x y' or 'x, y'.", "Any valid Python identifier may be used for a fieldname except for names starting with an underscore.", "Valid identifiers consist of letters, digits, and underscores but do not start with a digit or underscore and cannot be a keyword such as class, for, return, global, pass, or raise.", "If rename is true, invalid fieldnames are automatically replaced with positional names.", "For example, ['abc', 'def', 'ghi', 'abc'] is converted to ['abc', '_1', 'ghi', '_3'], eliminating the keyword def and the duplicate fieldname abc.", "defaults can be None or an iterable of default values.", "Since fields with a default value must come after any fields without a default, the defaults are applied to the rightmost parameters.", "For example, if the fieldnames are ['x', 'y', 'z'] and the defaults are (1, 2), then x will be a required argument, y will default to 1, and z will default to 2.", "If module is defined, the __module__ attribute of the named tuple is set to that value.", "Named tuple instances do not have per-instance dictionaries, so they are lightweight and require no more memory than regular tuples."]}
{"index": 846, "name": "collections.somenamedtuple._make", "module": "collections", "doc": ["Class method that makes a new instance from an existing sequence or iterable."]}
{"index": 847, "name": "collections.somenamedtuple._asdict", "module": "collections", "doc": ["Return a new dict which maps field names to their corresponding values:"]}
{"index": 848, "name": "collections.somenamedtuple._replace", "module": "collections", "doc": ["Return a new instance of the named tuple replacing specified fields with new values:"]}
{"index": 849, "name": "collections.somenamedtuple._fields", "module": "collections", "doc": ["Tuple of strings listing the field names.", "Useful for introspection and for creating new named tuple types from existing named tuples."]}
{"index": 850, "name": "collections.somenamedtuple._field_defaults", "module": "collections", "doc": ["Dictionary mapping field names to default values."]}
{"index": 851, "name": "collections.OrderedDict", "module": "collections", "doc": ["Return an instance of a dict subclass that has methods specialized for rearranging dictionary order."]}
{"index": 852, "name": "collections.OrderedDict.popitem", "module": "collections", "doc": ["The popitem() method for ordered dictionaries returns and removes a (key, value) pair.", "The pairs are returned in LIFO order if last is true or FIFO order if false."]}
{"index": 853, "name": "collections.OrderedDict.move_to_end", "module": "collections", "doc": ["Move an existing key to either end of an ordered dictionary.", "The item is moved to the right end if last is true (the default) or to the beginning if last is false.", "Raises KeyError if the key does not exist:"]}
{"index": 854, "name": "collections.UserDict", "module": "collections", "doc": ["Class that simulates a dictionary.", "The instance\u2019s contents are kept in a regular dictionary, which is accessible via the data attribute of UserDict instances.", "If initialdata is provided, data is initialized with its contents; note that a reference to initialdata will not be kept, allowing it be used for other purposes.", "In addition to supporting the methods and operations of mappings, UserDict instances provide the following attribute:"]}
{"index": 855, "name": "collections.UserDict.data", "module": "collections", "doc": ["A real dictionary used to store the contents of the UserDict class."]}
{"index": 856, "name": "collections.UserList", "module": "collections", "doc": ["Class that simulates a list.", "The instance\u2019s contents are kept in a regular list, which is accessible via the data attribute of UserList instances.", "The instance\u2019s contents are initially set to a copy of list, defaulting to the empty list [].", "list can be any iterable, for example a real Python list or a UserList object.", "In addition to supporting the methods and operations of mutable sequences, UserList instances provide the following attribute:"]}
{"index": 857, "name": "collections.UserList.data", "module": "collections", "doc": ["A real list object used to store the contents of the UserList class."]}
{"index": 858, "name": "collections.UserString", "module": "collections", "doc": ["Class that simulates a string object.", "The instance\u2019s content is kept in a regular string object, which is accessible via the data attribute of UserString instances.", "The instance\u2019s contents are initially set to a copy of seq.", "The seq argument can be any object which can be converted into a string using the built-in str() function.", "In addition to supporting the methods and operations of strings, UserString instances provide the following attribute:"]}
{"index": 859, "name": "collections.UserString.data", "module": "collections", "doc": ["A real str object used to store the contents of the UserString class."]}
{"index": 860, "name": "colorsys.rgb_to_yiq", "module": "colorsys", "doc": ["Convert the color from RGB coordinates to YIQ coordinates."]}
{"index": 861, "name": "colorsys.yiq_to_rgb", "module": "colorsys", "doc": ["Convert the color from YIQ coordinates to RGB coordinates."]}
{"index": 862, "name": "colorsys.rgb_to_hls", "module": "colorsys", "doc": ["Convert the color from RGB coordinates to HLS coordinates."]}
{"index": 863, "name": "colorsys.hls_to_rgb", "module": "colorsys", "doc": ["Convert the color from HLS coordinates to RGB coordinates."]}
{"index": 864, "name": "colorsys.rgb_to_hsv", "module": "colorsys", "doc": ["Convert the color from RGB coordinates to HSV coordinates."]}
{"index": 865, "name": "colorsys.hsv_to_rgb", "module": "colorsys", "doc": ["Convert the color from HSV coordinates to RGB coordinates."]}
{"index": 866, "name": "cmdoption-compileall-arg-directory", "module": "compileall", "doc": ["Positional arguments are files to compile or directories that contain source files, traversed recursively.", "If no argument is given, behave as if the command line was -l <directories from sys.path>."]}
{"index": 867, "name": "cmdoption-compileall-arg-file", "module": "compileall", "doc": ["Positional arguments are files to compile or directories that contain source files, traversed recursively.", "If no argument is given, behave as if the command line was -l <directories from sys.path>."]}
{"index": 868, "name": "cmdoption-compileall-l", "module": "compileall", "doc": ["Do not recurse into subdirectories, only compile source code files directly contained in the named or implied directories."]}
{"index": 869, "name": "cmdoption-compileall-f", "module": "compileall", "doc": ["Force rebuild even if timestamps are up-to-date."]}
{"index": 870, "name": "cmdoption-compileall-q", "module": "compileall", "doc": ["Do not print the list of files compiled.", "If passed once, error messages will still be printed.", "If passed twice (-qq), all output is suppressed."]}
{"index": 871, "name": "cmdoption-compileall-d", "module": "compileall", "doc": ["Directory prepended to the path to each file being compiled.", "This will appear in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed."]}
{"index": 872, "name": "cmdoption-compileall-x", "module": "compileall", "doc": ["regex is used to search the full path to each file considered for compilation, and if the regex produces a match, the file is skipped."]}
{"index": 873, "name": "cmdoption-compileall-i", "module": "compileall", "doc": ["Read the file list and add each line that it contains to the list of files and directories to compile.", "If list is -, read lines from stdin."]}
{"index": 874, "name": "cmdoption-compileall-b", "module": "compileall", "doc": ["Write the byte-code files to their legacy locations and names, which may overwrite byte-code files created by another version of Python.", "The default is to write files to their PEP 3147 locations and names, which allows byte-code files from multiple versions of Python to coexist."]}
{"index": 875, "name": "cmdoption-compileall-r", "module": "compileall", "doc": ["Control the maximum recursion level for subdirectories.", "If this is given, then -l option will not be taken into account.", "python -m compileall <directory> -r 0 is equivalent to python -m compileall <directory> -l."]}
{"index": 876, "name": "cmdoption-compileall-j", "module": "compileall", "doc": ["Use N workers to compile the files within the given directory.", "If 0 is used, then the result of os.cpu_count() will be used."]}
{"index": 877, "name": "cmdoption-compileall-invalidation-mode", "module": "compileall", "doc": ["Control how the generated byte-code files are invalidated at runtime.", "The timestamp value, means that .pyc files with the source timestamp and size embedded will be generated.", "The checked-hash and unchecked-hash values cause hash-based pycs to be generated.", "Hash-based pycs embed a hash of the source file contents rather than a timestamp.", "See Cached bytecode invalidation for more information on how Python validates bytecode cache files at runtime.", "The default is timestamp if the SOURCE_DATE_EPOCH environment variable is not set, and checked-hash if the SOURCE_DATE_EPOCH environment variable is set."]}
{"index": 878, "name": "compileall.compile_dir", "module": "compileall", "doc": ["Recursively descend the directory tree named by dir, compiling all .py files along the way.", "Return a true value if all the files compiled successfully, and a false value otherwise.", "The maxlevels parameter is used to limit the depth of the recursion; it defaults to 10.", "If ddir is given, it is prepended to the path to each file being compiled for use in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed.", "If force is true, modules are re-compiled even if the timestamps are up to date.", "If rx is given, its search method is called on the complete path to each file considered for compilation, and if it returns a true value, the file is skipped.", "If quiet is False or 0 (the default), the filenames and other information are printed to standard out.", "Set to 1, only errors are printed.", "Set to 2, all output is suppressed.", "If legacy is true, byte-code files are written to their legacy locations and names, which may overwrite byte-code files created by another version of Python.", "The default is to write files to their PEP 3147 locations and names, which allows byte-code files from multiple versions of Python to coexist.", "optimize specifies the optimization level for the compiler.", "It is passed to the built-in compile() function.", "The argument workers specifies how many workers are used to compile files in parallel.", "The default is to not use multiple workers.", "If the platform can\u2019t use multiple workers and workers argument is given, then sequential compilation will be used as a fallback.", "If workers is lower than 0, a ValueError will be raised.", "invalidation_mode should be a member of the py_compile.PycInvalidationMode enum and controls how the generated pycs are invalidated at runtime."]}
{"index": 879, "name": "compileall.compile_file", "module": "compileall", "doc": ["Compile the file with path fullname.", "Return a true value if the file compiled successfully, and a false value otherwise.", "If ddir is given, it is prepended to the path to the file being compiled for use in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed.", "If rx is given, its search method is passed the full path name to the file being compiled, and if it returns a true value, the file is not compiled and True is returned.", "If quiet is False or 0 (the default), the filenames and other information are printed to standard out.", "Set to 1, only errors are printed.", "Set to 2, all output is suppressed.", "If legacy is true, byte-code files are written to their legacy locations and names, which may overwrite byte-code files created by another version of Python.", "The default is to write files to their PEP 3147 locations and names, which allows byte-code files from multiple versions of Python to coexist.", "optimize specifies the optimization level for the compiler.", "It is passed to the built-in compile() function.", "invalidation_mode should be a member of the py_compile.PycInvalidationMode enum and controls how the generated pycs are invalidated at runtime."]}
{"index": 880, "name": "compileall.compile_path", "module": "compileall", "doc": ["Byte-compile all the .py files found along sys.path.", "Return a true value if all the files compiled successfully, and a false value otherwise.", "If skip_curdir is true (the default), the current directory is not included in the search.", "All other parameters are passed to the compile_dir() function.", "Note that unlike the other compile functions, maxlevels defaults to 0."]}
{"index": 881, "name": "concurrent.futures.Executor", "module": "concurrent", "doc": ["An abstract class that provides methods to execute calls asynchronously.", "It should not be used directly, but through its concrete subclasses."]}
{"index": 882, "name": "concurrent.futures.Executor.submit", "module": "concurrent", "doc": ["Schedules the callable, fn, to be executed as fn(*args **kwargs) and returns a Future object representing the execution of the callable."]}
{"index": 883, "name": "concurrent.futures.Executor.map", "module": "concurrent", "doc": ["Similar to map(func, *iterables) except:", "The returned iterator raises a concurrent.futures.TimeoutError if __next__() is called and the result isn\u2019t available after timeout seconds from the original call to Executor.map().", "timeout can be an int or a float.", "If timeout is not specified or None, there is no limit to the wait time.", "If a func call raises an exception, then that exception will be raised when its value is retrieved from the iterator.", "When using ProcessPoolExecutor, this method chops iterables into a number of chunks which it submits to the pool as separate tasks.", "The (approximate) size of these chunks can be specified by setting chunksize to a positive integer.", "For very long iterables, using a large value for chunksize can significantly improve performance compared to the default size of 1.", "With ThreadPoolExecutor, chunksize has no effect."]}
{"index": 884, "name": "concurrent.futures.Executor.shutdown", "module": "concurrent", "doc": ["Signal the executor that it should free any resources that it is using when the currently pending futures are done executing.", "Calls to Executor.submit() and Executor.map() made after shutdown will raise RuntimeError.", "If wait is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed.", "If wait is False then this method will return immediately and the resources associated with the executor will be freed when all pending futures are done executing.", "Regardless of the value of wait, the entire Python program will not exit until all pending futures are done executing.", "You can avoid having to call this method explicitly if you use the with statement, which will shutdown the Executor (waiting as if Executor.shutdown() were called with wait set to True):"]}
{"index": 885, "name": "concurrent.futures.ThreadPoolExecutor", "module": "concurrent", "doc": ["An Executor subclass that uses a pool of at most max_workers threads to execute calls asynchronously.", "initializer is an optional callable that is called at the start of each worker thread; initargs is a tuple of arguments passed to the initializer.", "Should initializer raise an exception, all currently pending jobs will raise a BrokenThreadPool, as well as any attempt to submit more jobs to the pool."]}
{"index": 886, "name": "concurrent.futures.ProcessPoolExecutor", "module": "concurrent", "doc": ["An Executor subclass that executes calls asynchronously using a pool of at most max_workers processes.", "If max_workers is None or not given, it will default to the number of processors on the machine.", "If max_workers is lower or equal to 0, then a ValueError will be raised.", "On Windows, max_workers must be equal or lower than 61.", "If it is not then ValueError will be raised.", "If max_workers is None, then the default chosen will be at most 61, even if more processors are available.", "mp_context can be a multiprocessing context or None.", "It will be used to launch the workers.", "If mp_context is None or not given, the default multiprocessing context is used.", "initializer is an optional callable that is called at the start of each worker process; initargs is a tuple of arguments passed to the initializer.", "Should initializer raise an exception, all currently pending jobs will raise a BrokenProcessPool, as well any attempt to submit more jobs to the pool."]}
{"index": 887, "name": "concurrent.futures.Future", "module": "concurrent", "doc": ["Encapsulates the asynchronous execution of a callable.", "Future instances are created by Executor.submit() and should not be created directly except for testing.", "The following Future methods are meant for use in unit tests and Executor implementations."]}
{"index": 888, "name": "concurrent.futures.Future.cancel", "module": "concurrent", "doc": ["Attempt to cancel the call.", "If the call is currently being executed or finished running and cannot be cancelled then the method will return False, otherwise the call will be cancelled and the method will return True."]}
{"index": 889, "name": "concurrent.futures.Future.cancelled", "module": "concurrent", "doc": ["Return True if the call was successfully cancelled."]}
{"index": 890, "name": "concurrent.futures.Future.running", "module": "concurrent", "doc": ["Return True if the call is currently being executed and cannot be cancelled."]}
{"index": 891, "name": "concurrent.futures.Future.done", "module": "concurrent", "doc": ["Return True if the call was successfully cancelled or finished running."]}
{"index": 892, "name": "concurrent.futures.Future.result", "module": "concurrent", "doc": ["Return the value returned by the call.", "If the call hasn\u2019t yet completed then this method will wait up to timeout seconds.", "If the call hasn\u2019t completed in timeout seconds, then a concurrent.futures.TimeoutError will be raised.", "timeout can be an int or float.", "If timeout is not specified or None, there is no limit to the wait time.", "If the future is cancelled before completing then CancelledError will be raised.", "If the call raised, this method will raise the same exception."]}
{"index": 893, "name": "concurrent.futures.Future.exception", "module": "concurrent", "doc": ["Return the exception raised by the call.", "If the call hasn\u2019t yet completed then this method will wait up to timeout seconds.", "If the call hasn\u2019t completed in timeout seconds, then a concurrent.futures.TimeoutError will be raised.", "timeout can be an int or float.", "If timeout is not specified or None, there is no limit to the wait time.", "If the future is cancelled before completing then CancelledError will be raised.", "If the call completed without raising, None is returned."]}
{"index": 894, "name": "concurrent.futures.Future.add_done_callback", "module": "concurrent", "doc": ["Attaches the callable fn to the future.", "fn will be called, with the future as its only argument, when the future is cancelled or finishes running.", "Added callables are called in the order that they were added and are always called in a thread belonging to the process that added them.", "If the callable raises an Exception subclass, it will be logged and ignored.", "If the callable raises a BaseException subclass, the behavior is undefined.", "If the future has already completed or been cancelled, fn will be called immediately."]}
{"index": 895, "name": "concurrent.futures.Future.set_running_or_notify_cancel", "module": "concurrent", "doc": ["This method should only be called by Executor implementations before executing the work associated with the Future and by unit tests.", "If the method returns False then the Future was cancelled, i.e.", "Future.cancel() was called and returned True.", "Any threads waiting on the Future completing (i.e.", "through as_completed() or wait()) will be woken up.", "If the method returns True then the Future was not cancelled and has been put in the running state, i.e.", "calls to Future.running() will return True.", "This method can only be called once and cannot be called after Future.set_result() or Future.set_exception() have been called."]}
{"index": 896, "name": "concurrent.futures.Future.set_result", "module": "concurrent", "doc": ["Sets the result of the work associated with the Future to result.", "This method should only be used by Executor implementations and unit tests."]}
{"index": 897, "name": "concurrent.futures.Future.set_exception", "module": "concurrent", "doc": ["Sets the result of the work associated with the Future to the Exception exception.", "This method should only be used by Executor implementations and unit tests."]}
{"index": 898, "name": "concurrent.futures.wait", "module": "concurrent", "doc": ["Wait for the Future instances (possibly created by different Executor instances) given by fs to complete.", "Returns a named 2-tuple of sets.", "The first set, named done, contains the futures that completed (finished or cancelled futures) before the wait completed.", "The second set, named not_done, contains the futures that did not complete (pending or running futures).", "timeout can be used to control the maximum number of seconds to wait before returning.", "timeout can be an int or float.", "If timeout is not specified or None, there is no limit to the wait time.", "return_when indicates when this function should return.", "It must be one of the following constants:"]}
{"index": 899, "name": "concurrent.futures.as_completed", "module": "concurrent", "doc": ["Returns an iterator over the Future instances (possibly created by different Executor instances) given by fs that yields futures as they complete (finished or cancelled futures).", "Any futures given by fs that are duplicated will be returned once.", "Any futures that completed before as_completed() is called will be yielded first.", "The returned iterator raises a concurrent.futures.TimeoutError if __next__() is called and the result isn\u2019t available after timeout seconds from the original call to as_completed().", "timeout can be an int or float.", "If timeout is not specified or None, there is no limit to the wait time."]}
{"index": 900, "name": "concurrent.futures.CancelledError", "module": "concurrent", "doc": ["Raised when a future is cancelled."]}
{"index": 901, "name": "concurrent.futures.TimeoutError", "module": "concurrent", "doc": ["Raised when a future operation exceeds the given timeout."]}
{"index": 902, "name": "concurrent.futures.BrokenExecutor", "module": "concurrent", "doc": ["Derived from RuntimeError, this exception class is raised when an executor is broken for some reason, and cannot be used to submit or execute new tasks."]}
{"index": 903, "name": "concurrent.futures.thread.BrokenThreadPool", "module": "concurrent", "doc": ["Derived from BrokenExecutor, this exception class is raised when one of the workers of a ThreadPoolExecutor has failed initializing."]}
{"index": 904, "name": "concurrent.futures.process.BrokenProcessPool", "module": "concurrent", "doc": ["Derived from BrokenExecutor (formerly RuntimeError), this exception class is raised when one of the workers of a ProcessPoolExecutor has terminated in a non-clean fashion (for example, if it was killed from the outside)."]}
{"index": 905, "name": "configparser.BasicInterpolation", "module": "configparser", "doc": ["The default implementation used by ConfigParser.", "It enables values to contain format strings which refer to other values in the same section, or values in the special default section 1.", "Additional default values can be provided on initialization.", "For example:", "In the example above, ConfigParser with interpolation set to BasicInterpolation() would resolve %(home_dir)s to the value of home_dir (/Users in this case).", "%(my_dir)s in effect would resolve to /Users/lumberjack.", "All interpolations are done on demand so keys used in the chain of references do not have to be specified in any specific order in the configuration file.", "With interpolation set to None, the parser would simply return %(my_dir)s/Pictures as the value of my_pictures and %(home_dir)s/lumberjack as the value of my_dir."]}
{"index": 906, "name": "configparser.ExtendedInterpolation", "module": "configparser", "doc": ["An alternative handler for interpolation which implements a more advanced syntax, used for instance in zc.buildout.", "Extended interpolation is using ${section:option} to denote a value from a foreign section.", "Interpolation can span multiple levels.", "For convenience, if the section: part is omitted, interpolation defaults to the current section (and possibly the default values from the special section).", "For example, the configuration specified above with basic interpolation, would look like this with extended interpolation:", "Values from other sections can be fetched as well:"]}
{"index": 907, "name": "configparser.ConfigParser.BOOLEAN_STATES", "module": "configparser", "doc": ["By default when using getboolean(), config parsers consider the following values True: '1', 'yes', 'true', 'on' and the following values False: '0', 'no', 'false', 'off'.", "You can override this by specifying a custom dictionary of strings and their Boolean outcomes.", "For example:", "Other typical Boolean pairs include accept/reject or enabled/disabled."]}
{"index": 908, "name": "configparser.ConfigParser.optionxform", "module": "configparser", "doc": ["This method transforms option names on every read, get, or set operation.", "The default converts the name to lowercase.", "This also means that when a configuration file gets written, all keys will be lowercase.", "Override this method if that\u2019s unsuitable.", "For example:"]}
{"index": 909, "name": "configparser.ConfigParser.SECTCRE", "module": "configparser", "doc": ["A compiled regular expression used to parse section headers.", "The default matches [section] to the name \"section\".", "Whitespace is considered part of the section name, thus [\u00a0 larch\u00a0 ] will be read as a section of name \"\u00a0 larch\u00a0 \".", "Override this attribute if that\u2019s unsuitable.", "For example:"]}
{"index": 910, "name": "configparser.ConfigParser", "module": "configparser", "doc": ["The main configuration parser.", "When defaults is given, it is initialized into the dictionary of intrinsic defaults.", "When dict_type is given, it will be used to create the dictionary objects for the list of sections, for the options within a section, and for the default values.", "When delimiters is given, it is used as the set of substrings that divide keys from values.", "When comment_prefixes is given, it will be used as the set of substrings that prefix comments in otherwise empty lines.", "Comments can be indented.", "When inline_comment_prefixes is given, it will be used as the set of substrings that prefix comments in non-empty lines.", "When strict is True (the default), the parser won\u2019t allow for any section or option duplicates while reading from a single source (file, string or dictionary), raising DuplicateSectionError or DuplicateOptionError.", "When empty_lines_in_values is False (default: True), each empty line marks the end of an option.", "Otherwise, internal empty lines of a multiline option are kept as part of the value.", "When allow_no_value is True (default: False), options without values are accepted; the value held for these is None and they are serialized without the trailing delimiter.", "When default_section is given, it specifies the name for the special section holding default values for other sections and interpolation purposes (normally named \"DEFAULT\").", "This value can be retrieved and changed on runtime using the default_section instance attribute.", "Interpolation behaviour may be customized by providing a custom handler through the interpolation argument.", "None can be used to turn off interpolation completely, ExtendedInterpolation() provides a more advanced variant inspired by zc.buildout.", "More on the subject in the dedicated documentation section.", "All option names used in interpolation will be passed through the optionxform() method just like any other option name reference.", "For example, using the default implementation of optionxform() (which converts option names to lower case), the values foo %(bar)s and foo %(BAR)s are equivalent.", "When converters is given, it should be a dictionary where each key represents the name of a type converter and each value is a callable implementing the conversion from string to the desired datatype.", "Every converter gets its own corresponding get*() method on the parser object and section proxies."]}
{"index": 911, "name": "configparser.ConfigParser.defaults", "module": "configparser", "doc": ["Return a dictionary containing the instance-wide defaults."]}
{"index": 912, "name": "configparser.ConfigParser.sections", "module": "configparser", "doc": ["Return a list of the sections available; the default section is not included in the list."]}
{"index": 913, "name": "configparser.ConfigParser.add_section", "module": "configparser", "doc": ["Add a section named section to the instance.", "If a section by the given name already exists, DuplicateSectionError is raised.", "If the default section name is passed, ValueError is raised.", "The name of the section must be a string; if not, TypeError is raised."]}
{"index": 914, "name": "configparser.ConfigParser.has_section", "module": "configparser", "doc": ["Indicates whether the named section is present in the configuration.", "The default section is not acknowledged."]}
{"index": 915, "name": "configparser.ConfigParser.options", "module": "configparser", "doc": ["Return a list of options available in the specified section."]}
{"index": 916, "name": "configparser.ConfigParser.has_option", "module": "configparser", "doc": ["If the given section exists, and contains the given option, return True; otherwise return False.", "If the specified section is None or an empty string, DEFAULT is assumed."]}
{"index": 917, "name": "configparser.ConfigParser.read", "module": "configparser", "doc": ["Attempt to read and parse an iterable of filenames, returning a list of filenames which were successfully parsed.", "If filenames is a string, a bytes object or a path-like object, it is treated as a single filename.", "If a file named in filenames cannot be opened, that file will be ignored.", "This is designed so that you can specify an iterable of potential configuration file locations (for example, the current directory, the user\u2019s home directory, and some system-wide directory), and all existing configuration files in the iterable will be read.", "If none of the named files exist, the ConfigParser instance will contain an empty dataset.", "An application which requires initial values to be loaded from a file should load the required file or files using read_file() before calling read() for any optional files:"]}
{"index": 918, "name": "configparser.ConfigParser.read_file", "module": "configparser", "doc": ["Read and parse configuration data from f which must be an iterable yielding Unicode strings (for example files opened in text mode).", "Optional argument source specifies the name of the file being read.", "If not given and f has a name attribute, that is used for source; the default is '<??", "?>'."]}
{"index": 919, "name": "configparser.ConfigParser.read_string", "module": "configparser", "doc": ["Parse configuration data from a string.", "Optional argument source specifies a context-specific name of the string passed.", "If not given, '<string>' is used.", "This should commonly be a filesystem path or a URL."]}
{"index": 920, "name": "configparser.ConfigParser.read_dict", "module": "configparser", "doc": ["Load configuration from any object that provides a dict-like items() method.", "Keys are section names, values are dictionaries with keys and values that should be present in the section.", "If the used dictionary type preserves order, sections and their keys will be added in order.", "Values are automatically converted to strings.", "Optional argument source specifies a context-specific name of the dictionary passed.", "If not given, <dict> is used.", "This method can be used to copy state between parsers."]}
{"index": 921, "name": "configparser.ConfigParser.get", "module": "configparser", "doc": ["Get an option value for the named section.", "If vars is provided, it must be a dictionary.", "The option is looked up in vars (if provided), section, and in DEFAULTSECT in that order.", "If the key is not found and fallback is provided, it is used as a fallback value.", "None can be provided as a fallback value.", "All the '%' interpolations are expanded in the return values, unless the raw argument is true.", "Values for interpolation keys are looked up in the same manner as the option."]}
{"index": 922, "name": "configparser.ConfigParser.getint", "module": "configparser", "doc": ["A convenience method which coerces the option in the specified section to an integer.", "See get() for explanation of raw, vars and fallback."]}
{"index": 923, "name": "configparser.ConfigParser.getfloat", "module": "configparser", "doc": ["A convenience method which coerces the option in the specified section to a floating point number.", "See get() for explanation of raw, vars and fallback."]}
{"index": 924, "name": "configparser.ConfigParser.getboolean", "module": "configparser", "doc": ["A convenience method which coerces the option in the specified section to a Boolean value.", "Note that the accepted values for the option are '1', 'yes', 'true', and 'on', which cause this method to return True, and '0', 'no', 'false', and 'off', which cause it to return False.", "These string values are checked in a case-insensitive manner.", "Any other value will cause it to raise ValueError.", "See get() for explanation of raw, vars and fallback."]}
{"index": 925, "name": "configparser.ConfigParser.items", "module": "configparser", "doc": ["When section is not given, return a list of section_name, section_proxy pairs, including DEFAULTSECT.", "Otherwise, return a list of name, value pairs for the options in the given section.", "Optional arguments have the same meaning as for the get() method."]}
{"index": 926, "name": "configparser.ConfigParser.set", "module": "configparser", "doc": ["If the given section exists, set the given option to the specified value; otherwise raise NoSectionError.", "option and value must be strings; if not, TypeError is raised."]}
{"index": 927, "name": "configparser.ConfigParser.write", "module": "configparser", "doc": ["Write a representation of the configuration to the specified file object, which must be opened in text mode (accepting strings).", "This representation can be parsed by a future read() call.", "If space_around_delimiters is true, delimiters between keys and values are surrounded by spaces."]}
{"index": 928, "name": "configparser.ConfigParser.remove_option", "module": "configparser", "doc": ["Remove the specified option from the specified section.", "If the section does not exist, raise NoSectionError.", "If the option existed to be removed, return True; otherwise return False."]}
{"index": 929, "name": "configparser.ConfigParser.remove_section", "module": "configparser", "doc": ["Remove the specified section from the configuration.", "If the section in fact existed, return True.", "Otherwise return False."]}
{"index": 930, "name": "id0", "module": "configparser", "doc": ["Transforms the option name option as found in an input file or as passed in by client code to the form that should be used in the internal structures.", "The default implementation returns a lower-case version of option; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior.", "You don\u2019t need to subclass the parser to use this method, you can also set it on an instance, to a function that takes a string argument and returns a string.", "Setting it to str, for example, would make option names case sensitive:", "Note that when reading configuration files, whitespace around the option names is stripped before optionxform() is called."]}
{"index": 931, "name": "configparser.ConfigParser.readfp", "module": "configparser", "doc": ["For existing code calling readfp() with arguments which don\u2019t support iteration, the following generator may be used as a wrapper around the file-like object:", "Instead of parser.readfp(fp) use parser.read_file(readline_generator(fp))."]}
{"index": 932, "name": "configparser.MAX_INTERPOLATION_DEPTH", "module": "configparser", "doc": ["The maximum depth for recursive interpolation for get() when the raw parameter is false.", "This is relevant only when the default interpolation is used."]}
{"index": 933, "name": "configparser.RawConfigParser", "module": "configparser", "doc": ["Legacy variant of the ConfigParser.", "It has interpolation disabled by default and allows for non-string section names, option names, and values via its unsafe add_section and set methods, as well as the legacy defaults= keyword argument handling."]}
{"index": 934, "name": "configparser.RawConfigParser.add_section", "module": "configparser", "doc": ["Add a section named section to the instance.", "If a section by the given name already exists, DuplicateSectionError is raised.", "If the default section name is passed, ValueError is raised.", "Type of section is not checked which lets users create non-string named sections.", "This behaviour is unsupported and may cause internal errors."]}
{"index": 935, "name": "configparser.RawConfigParser.set", "module": "configparser", "doc": ["If the given section exists, set the given option to the specified value; otherwise raise NoSectionError.", "While it is possible to use RawConfigParser (or ConfigParser with raw parameters set to true) for internal storage of non-string values, full functionality (including interpolation and output to files) can only be achieved using string values.", "This method lets users assign non-string values to keys internally.", "This behaviour is unsupported and will cause errors when attempting to write to a file or get it in non-raw mode.", "Use the mapping protocol API which does not allow such assignments to take place."]}
{"index": 936, "name": "configparser.Error", "module": "configparser", "doc": ["Base class for all other configparser exceptions."]}
{"index": 937, "name": "configparser.NoSectionError", "module": "configparser", "doc": ["Exception raised when a specified section is not found."]}
{"index": 938, "name": "configparser.DuplicateSectionError", "module": "configparser", "doc": ["Exception raised if add_section() is called with the name of a section that is already present or in strict parsers when a section if found more than once in a single input file, string or dictionary."]}
{"index": 939, "name": "configparser.DuplicateOptionError", "module": "configparser", "doc": ["Exception raised by strict parsers if a single option appears twice during reading from a single file, string or dictionary.", "This catches misspellings and case sensitivity-related errors, e.g.", "a dictionary may have two keys representing the same case-insensitive configuration key."]}
{"index": 940, "name": "configparser.NoOptionError", "module": "configparser", "doc": ["Exception raised when a specified option is not found in the specified section."]}
{"index": 941, "name": "configparser.InterpolationError", "module": "configparser", "doc": ["Base class for exceptions raised when problems occur performing string interpolation."]}
{"index": 942, "name": "configparser.InterpolationDepthError", "module": "configparser", "doc": ["Exception raised when string interpolation cannot be completed because the number of iterations exceeds MAX_INTERPOLATION_DEPTH.", "Subclass of InterpolationError."]}
{"index": 943, "name": "configparser.InterpolationMissingOptionError", "module": "configparser", "doc": ["Exception raised when an option referenced from a value does not exist.", "Subclass of InterpolationError."]}
{"index": 944, "name": "configparser.InterpolationSyntaxError", "module": "configparser", "doc": ["Exception raised when the source text into which substitutions are made does not conform to the required syntax.", "Subclass of InterpolationError."]}
{"index": 945, "name": "configparser.MissingSectionHeaderError", "module": "configparser", "doc": ["Exception raised when attempting to parse a file which has no section headers."]}
{"index": 946, "name": "configparser.ParsingError", "module": "configparser", "doc": ["Exception raised when errors occur attempting to parse a file."]}
{"index": 947, "name": "id14", "module": "configparser", "doc": ["Config parsers allow for heavy customization.", "If you are interested in changing the behaviour outlined by the footnote reference, consult the Customizing Parser Behaviour section."]}
{"index": 948, "name": "False", "module": "constants", "doc": ["The false value of the bool type.", "Assignments to False are illegal and raise a SyntaxError."]}
{"index": 949, "name": "True", "module": "constants", "doc": ["The true value of the bool type.", "Assignments to True are illegal and raise a SyntaxError."]}
{"index": 950, "name": "None", "module": "constants", "doc": ["The sole value of the type NoneType.", "None is frequently used to represent the absence of a value, as when default arguments are not passed to a function.", "Assignments to None are illegal and raise a SyntaxError."]}
{"index": 951, "name": "NotImplemented", "module": "constants", "doc": ["Special value which should be returned by the binary special methods (e.g.", "__eq__(), __lt__(), __add__(), __rsub__(), etc.)", "to indicate that the operation is not implemented with respect to the other type; may be returned by the in-place binary special methods (e.g.", "__imul__(), __iand__(), etc.)", "for the same purpose.", "Its truth value is true."]}
{"index": 952, "name": "Ellipsis", "module": "constants", "doc": ["The same as the ellipsis literal \u201c...\u201d.", "Special value used mostly in conjunction with extended slicing syntax for user-defined container data types."]}
{"index": 953, "name": "debug__", "module": "constants", "doc": ["This constant is true if Python was not started with an -O option.", "See also the assert statement."]}
{"index": 954, "name": "quit", "module": "constants", "doc": ["Objects that when printed, print a message like \u201cUse quit() or Ctrl-D (i.e.", "EOF) to exit\u201d, and when called, raise SystemExit with the specified exit code."]}
{"index": 955, "name": "exit", "module": "constants", "doc": ["Objects that when printed, print a message like \u201cUse quit() or Ctrl-D (i.e.", "EOF) to exit\u201d, and when called, raise SystemExit with the specified exit code."]}
{"index": 956, "name": "copyright", "module": "constants", "doc": ["Objects that when printed or called, print the text of copyright or credits, respectively."]}
{"index": 957, "name": "credits", "module": "constants", "doc": ["Objects that when printed or called, print the text of copyright or credits, respectively."]}
{"index": 958, "name": "license", "module": "constants", "doc": ["Object that when printed, prints the message \u201cType license() to see the full license text\u201d, and when called, displays the full license text in a pager-like fashion (one screen at a time)."]}
{"index": 959, "name": "contextlib.AbstractContextManager", "module": "contextlib", "doc": ["An abstract base class for classes that implement object.__enter__() and object.__exit__().", "A default implementation for object.__enter__() is provided which returns self while object.__exit__() is an abstract method which by default returns None.", "See also the definition of Context Manager Types."]}
{"index": 960, "name": "contextlib.AbstractAsyncContextManager", "module": "contextlib", "doc": ["An abstract base class for classes that implement object.__aenter__() and object.__aexit__().", "A default implementation for object.__aenter__() is provided which returns self while object.__aexit__() is an abstract method which by default returns None.", "See also the definition of Asynchronous Context Managers."]}
{"index": 961, "name": "contextlib.contextmanager", "module": "contextlib", "doc": ["This function is a decorator that can be used to define a factory function for with statement context managers, without needing to create a class or separate __enter__() and __exit__() methods.", "While many objects natively support use in with statements, sometimes a resource needs to be managed that isn\u2019t a context manager in its own right, and doesn\u2019t implement a close() method for use with contextlib.closing", "An abstract example would be the following to ensure correct resource management:", "The function being decorated must return a generator-iterator when called.", "This iterator must yield exactly one value, which will be bound to the targets in the with statement\u2019s as clause, if any.", "At the point where the generator yields, the block nested in the with statement is executed.", "The generator is then resumed after the block is exited.", "If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred.", "Thus, you can use a try\u2026except\u2026finally statement to trap the error (if any), or ensure that some cleanup takes place.", "If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception.", "Otherwise the generator context manager will indicate to the with statement that the exception has been handled, and execution will resume with the statement immediately following the with statement.", "contextmanager() uses ContextDecorator so the context managers it creates can be used as decorators as well as in with statements.", "When used as a decorator, a new generator instance is implicitly created on each function call (this allows the otherwise \u201cone-shot\u201d context managers created by contextmanager() to meet the requirement that context managers support multiple invocations in order to be used as decorators)."]}
{"index": 962, "name": "contextlib.asynccontextmanager", "module": "contextlib", "doc": ["Similar to contextmanager(), but creates an asynchronous context manager.", "This function is a decorator that can be used to define a factory function for async with statement asynchronous context managers, without needing to create a class or separate __aenter__() and __aexit__() methods.", "It must be applied to an asynchronous generator function.", "A simple example:"]}
{"index": 963, "name": "contextlib.closing", "module": "contextlib", "doc": ["Return a context manager that closes thing upon completion of the block.", "This is basically equivalent to:", "And lets you write code like this:", "without needing to explicitly close page.", "Even if an error occurs, page.close() will be called when the with block is exited."]}
{"index": 964, "name": "contextlib.nullcontext", "module": "contextlib", "doc": ["Return a context manager that returns enter_result from __enter__, but otherwise does nothing.", "It is intended to be used as a stand-in for an optional context manager, for example:", "An example using enter_result:"]}
{"index": 965, "name": "contextlib.suppress", "module": "contextlib", "doc": ["Return a context manager that suppresses any of the specified exceptions if they occur in the body of a with statement and then resumes execution with the first statement following the end of the with statement.", "As with any other mechanism that completely suppresses exceptions, this context manager should be used only to cover very specific errors where silently continuing with program execution is known to be the right thing to do.", "For example:", "This code is equivalent to:", "This context manager is reentrant."]}
{"index": 966, "name": "contextlib.redirect_stdout", "module": "contextlib", "doc": ["Context manager for temporarily redirecting sys.stdout to another file or file-like object.", "This tool adds flexibility to existing functions or classes whose output is hardwired to stdout.", "For example, the output of help() normally is sent to sys.stdout.", "You can capture that output in a string by redirecting the output to an io.StringIO object:", "To send the output of help() to a file on disk, redirect the output to a regular file:", "To send the output of help() to sys.stderr:", "Note that the global side effect on sys.stdout means that this context manager is not suitable for use in library code and most threaded applications.", "It also has no effect on the output of subprocesses.", "However, it is still a useful approach for many utility scripts.", "This context manager is reentrant."]}
{"index": 967, "name": "contextlib.redirect_stderr", "module": "contextlib", "doc": ["Similar to redirect_stdout() but redirecting sys.stderr to another file or file-like object.", "This context manager is reentrant."]}
{"index": 968, "name": "contextlib.ContextDecorator", "module": "contextlib", "doc": ["A base class that enables a context manager to also be used as a decorator.", "Context managers inheriting from ContextDecorator have to implement __enter__ and __exit__ as normal.", "__exit__ retains its optional exception handling even when used as a decorator.", "ContextDecorator is used by contextmanager(), so you get this functionality automatically.", "Example of ContextDecorator:", "This change is just syntactic sugar for any construct of the following form:", "ContextDecorator lets you instead write:", "It makes it clear that the cm applies to the whole function, rather than just a piece of it (and saving an indentation level is nice, too).", "Existing context managers that already have a base class can be extended by using ContextDecorator as a mixin class:"]}
{"index": 969, "name": "contextlib.ExitStack", "module": "contextlib", "doc": ["A context manager that is designed to make it easy to programmatically combine other context managers and cleanup functions, especially those that are optional or otherwise driven by input data.", "For example, a set of files may easily be handled in a single with statement as follows:", "Each instance maintains a stack of registered callbacks that are called in reverse order when the instance is closed (either explicitly or implicitly at the end of a with statement).", "Note that callbacks are not invoked implicitly when the context stack instance is garbage collected.", "This stack model is used so that context managers that acquire their resources in their __init__ method (such as file objects) can be handled correctly.", "Since registered callbacks are invoked in the reverse order of registration, this ends up behaving as if multiple nested with statements had been used with the registered set of callbacks.", "This even extends to exception handling - if an inner callback suppresses or replaces an exception, then outer callbacks will be passed arguments based on that updated state.", "This is a relatively low level API that takes care of the details of correctly unwinding the stack of exit callbacks.", "It provides a suitable foundation for higher level context managers that manipulate the exit stack in application specific ways."]}
{"index": 970, "name": "contextlib.ExitStack.enter_context", "module": "contextlib", "doc": ["Enters a new context manager and adds its __exit__() method to the callback stack.", "The return value is the result of the context manager\u2019s own __enter__() method.", "These context managers may suppress exceptions just as they normally would if used directly as part of a with statement."]}
{"index": 971, "name": "contextlib.ExitStack.push", "module": "contextlib", "doc": ["Adds a context manager\u2019s __exit__() method to the callback stack.", "As __enter__ is not invoked, this method can be used to cover part of an __enter__() implementation with a context manager\u2019s own __exit__() method.", "If passed an object that is not a context manager, this method assumes it is a callback with the same signature as a context manager\u2019s __exit__() method and adds it directly to the callback stack.", "By returning true values, these callbacks can suppress exceptions the same way context manager __exit__() methods can.", "The passed in object is returned from the function, allowing this method to be used as a function decorator."]}
{"index": 972, "name": "contextlib.ExitStack.callback", "module": "contextlib", "doc": ["Accepts an arbitrary callback function and arguments and adds it to the callback stack.", "Unlike the other methods, callbacks added this way cannot suppress exceptions (as they are never passed the exception details).", "The passed in callback is returned from the function, allowing this method to be used as a function decorator."]}
{"index": 973, "name": "contextlib.ExitStack.pop_all", "module": "contextlib", "doc": ["Transfers the callback stack to a fresh ExitStack instance and returns it.", "No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a with statement).", "For example, a group of files can be opened as an \u201call or nothing\u201d operation as follows:"]}
{"index": 974, "name": "contextlib.ExitStack.close", "module": "contextlib", "doc": ["Immediately unwinds the callback stack, invoking callbacks in the reverse order of registration.", "For any context managers and exit callbacks registered, the arguments passed in will indicate that no exception occurred."]}
{"index": 975, "name": "contextlib.AsyncExitStack", "module": "contextlib", "doc": ["An asynchronous context manager, similar to ExitStack, that supports combining both synchronous and asynchronous context managers, as well as having coroutines for cleanup logic.", "The close() method is not implemented, aclose() must be used instead.", "Continuing the example for asynccontextmanager():"]}
{"index": 976, "name": "contextlib.AsyncExitStack.enter_async_context", "module": "contextlib", "doc": ["Similar to enter_context() but expects an asynchronous context manager."]}
{"index": 977, "name": "contextlib.AsyncExitStack.push_async_exit", "module": "contextlib", "doc": ["Similar to push() but expects either an asynchronous context manager or a coroutine function."]}
{"index": 978, "name": "contextlib.AsyncExitStack.push_async_callback", "module": "contextlib", "doc": ["Similar to callback() but expects a coroutine function."]}
{"index": 979, "name": "contextlib.AsyncExitStack.aclose", "module": "contextlib", "doc": ["Similar to close() but properly handles awaitables."]}
{"index": 980, "name": "contextvars.ContextVar", "module": "contextvars", "doc": ["This class is used to declare a new Context Variable, e.g.", ":", "The required name parameter is used for introspection and debug purposes.", "The optional keyword-only default parameter is returned by ContextVar.get() when no value for the variable is found in the current context.", "Important: Context Variables should be created at the top module level and never in closures.", "Context objects hold strong references to context variables which prevents context variables from being properly garbage collected."]}
{"index": 981, "name": "contextvars.ContextVar.name", "module": "contextvars", "doc": ["The name of the variable.", "This is a read-only property."]}
{"index": 982, "name": "contextvars.ContextVar.get", "module": "contextvars", "doc": ["Return a value for the context variable for the current context.", "If there is no value for the variable in the current context, the method will:"]}
{"index": 983, "name": "contextvars.ContextVar.set", "module": "contextvars", "doc": ["Call to set a new value for the context variable in the current context.", "The required value argument is the new value for the context variable.", "Returns a Token object that can be used to restore the variable to its previous value via the ContextVar.reset() method."]}
{"index": 984, "name": "contextvars.ContextVar.reset", "module": "contextvars", "doc": ["Reset the context variable to the value it had before the ContextVar.set() that created the token was used.", "For example:"]}
{"index": 985, "name": "contextvars.contextvars.Token", "module": "contextvars", "doc": ["Token objects are returned by the ContextVar.set() method.", "They can be passed to the ContextVar.reset() method to revert the value of the variable to what it was before the corresponding set."]}
{"index": 986, "name": "contextvars.contextvars.Token.Token.var", "module": "contextvars", "doc": ["A read-only property.", "Points to the ContextVar object that created the token."]}
{"index": 987, "name": "contextvars.contextvars.Token.Token.old_value", "module": "contextvars", "doc": ["A read-only property.", "Set to the value the variable had before the ContextVar.set() method call that created the token.", "It points to Token.MISSING is the variable was not set before the call."]}
{"index": 988, "name": "contextvars.contextvars.Token.Token.MISSING", "module": "contextvars", "doc": ["A marker object used by Token.old_value."]}
{"index": 989, "name": "contextvars.copy_context", "module": "contextvars", "doc": ["Returns a copy of the current Context object.", "The following snippet gets a copy of the current context and prints all variables and their values that are set in it:", "The function has an O(1) complexity, i.e.", "works equally fast for contexts with a few context variables and for contexts that have a lot of them."]}
{"index": 990, "name": "contextvars.Context", "module": "contextvars", "doc": ["A mapping of ContextVars to their values.", "Context() creates an empty context with no values in it.", "To get a copy of the current context use the copy_context() function.", "Context implements the collections.abc.Mapping interface."]}
{"index": 991, "name": "contextvars.Context.run", "module": "contextvars", "doc": ["Execute callable(*args, **kwargs) code in the context object the run method is called on.", "Return the result of the execution or propagate an exception if one occurred.", "Any changes to any context variables that callable makes will be contained in the context object:", "The method raises a RuntimeError when called on the same context object from more than one OS thread, or when called recursively."]}
{"index": 992, "name": "contextvars.Context.copy", "module": "contextvars", "doc": ["Return a shallow copy of the context object."]}
{"index": 993, "name": "contextvars.Context.get", "module": "contextvars", "doc": ["Return the value for var if var has the value in the context object.", "Return default otherwise.", "If default is not given, return None."]}
{"index": 994, "name": "contextvars.Context.keys", "module": "contextvars", "doc": ["Return a list of all variables in the context object."]}
{"index": 995, "name": "contextvars.Context.values", "module": "contextvars", "doc": ["Return a list of all variables\u2019 values in the context object."]}
{"index": 996, "name": "contextvars.Context.items", "module": "contextvars", "doc": ["Return a list of 2-tuples containing all variables and their values in the context object."]}
{"index": 997, "name": "copy.copy", "module": "copy", "doc": ["Return a shallow copy of x."]}
{"index": 998, "name": "copy.deepcopy", "module": "copy", "doc": ["Return a deep copy of x."]}
{"index": 999, "name": "copy.error", "module": "copy", "doc": ["Raised for module specific errors."]}
{"index": 1000, "name": "copyreg.constructor", "module": "copyreg", "doc": ["Declares object to be a valid constructor.", "If object is not callable (and hence not valid as a constructor), raises TypeError."]}
{"index": 1001, "name": "copyreg.pickle", "module": "copyreg", "doc": ["Declares that function should be used as a \u201creduction\u201d function for objects of type type.", "function should return either a string or a tuple containing two or three elements.", "The optional constructor parameter, if provided, is a callable object which can be used to reconstruct the object when called with the tuple of arguments returned by function at pickling time.", "TypeError will be raised if object is a class or constructor is not callable.", "See the pickle module for more details on the interface expected of function and constructor.", "Note that the dispatch_table attribute of a pickler object or subclass of pickle.Pickler can also be used for declaring reduction functions."]}
{"index": 1002, "name": "crypt.METHOD_SHA512", "module": "crypt", "doc": ["A Modular Crypt Format method with 16 character salt and 86 character hash based on the SHA-512 hash function.", "This is the strongest method."]}
{"index": 1003, "name": "crypt.METHOD_SHA256", "module": "crypt", "doc": ["Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function."]}
{"index": 1004, "name": "crypt.METHOD_BLOWFISH", "module": "crypt", "doc": ["Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher."]}
{"index": 1005, "name": "crypt.METHOD_MD5", "module": "crypt", "doc": ["Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function."]}
{"index": 1006, "name": "crypt.METHOD_CRYPT", "module": "crypt", "doc": ["The traditional method with a 2 character salt and 13 characters of hash.", "This is the weakest method."]}
{"index": 1007, "name": "crypt.methods", "module": "crypt", "doc": ["A list of available password hashing algorithms, as crypt.METHOD_* objects.", "This list is sorted from strongest to weakest."]}
{"index": 1008, "name": "crypt.crypt", "module": "crypt", "doc": ["word will usually be a user\u2019s password as typed at a prompt or  in a graphical interface.", "The optional salt is either a string as returned from mksalt(), one of the crypt.METHOD_* values (though not all may be available on all platforms), or a full encrypted password including salt, as returned by this function.", "If salt is not provided, the strongest method will be used (as returned by methods()).", "Checking a password is usually done by passing the plain-text password as word and the full results of a previous crypt() call, which should be the same as the results of this call.", "salt (either a random 2 or 16 character string, possibly prefixed with $digit$ to indicate the method) which will be used to perturb the encryption algorithm.", "The characters in salt must be in the set [./a-zA-Z0-9], with the exception of Modular Crypt Format which prefixes a $digit$.", "Returns the hashed password as a string, which will be composed of characters from the same alphabet as the salt.", "Since a few crypt(3) extensions allow different values, with different sizes in the salt, it is recommended to use  the full crypted password as salt when checking for a password."]}
{"index": 1009, "name": "crypt.mksalt", "module": "crypt", "doc": ["Return a randomly generated salt of the specified method.", "If no method is given, the strongest method available as returned by methods() is used.", "The return value is a string suitable for passing as the salt argument to crypt().", "rounds specifies the number of rounds for METHOD_SHA256, METHOD_SHA512 and METHOD_BLOWFISH.", "For METHOD_SHA256 and METHOD_SHA512 it must be an integer between 1000 and 999_999_999, the default is 5000.", "For METHOD_BLOWFISH it must be a power of two between 16 (24) and 2_147_483_648 (231), the default is 4096 (212)."]}
{"index": 1010, "name": "csv.reader", "module": "csv", "doc": ["Return a reader object which will iterate over lines in the given csvfile.", "csvfile can be any object which supports the iterator protocol and returns a string each time its __next__() method is called \u2014 file objects and list objects are both suitable.", "If csvfile is a file object, it should be opened with newline=''.", "1  An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect.", "It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function.", "The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect.", "For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.", "Each row read from the csv file is returned as a list of strings.", "No automatic data type conversion is performed unless the QUOTE_NONNUMERIC format option is specified (in which case unquoted fields are transformed into floats).", "A short usage example:"]}
{"index": 1011, "name": "csv.writer", "module": "csv", "doc": ["Return a writer object responsible for converting the user\u2019s data into delimited strings on the given file-like object.", "csvfile can be any object with a write() method.", "If csvfile is a file object, it should be opened with newline='' 1.", "An optional dialect parameter can be given which is used to define a set of parameters specific to a particular CSV dialect.", "It may be an instance of a subclass of the Dialect class or one of the strings returned by the list_dialects() function.", "The other optional fmtparams keyword arguments can be given to override individual formatting parameters in the current dialect.", "For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters.", "To make it as easy as possible to interface with modules which implement the DB API, the value None is written as the empty string.", "While this isn\u2019t a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a cursor.fetch* call.", "All other non-string data are stringified with str() before being written.", "A short usage example:"]}
{"index": 1012, "name": "csv.register_dialect", "module": "csv", "doc": ["Associate dialect with name.", "name must be a string.", "The dialect can be specified either by passing a sub-class of Dialect, or by fmtparams keyword arguments, or both, with keyword arguments overriding parameters of the dialect.", "For full details about the dialect and formatting parameters, see section Dialects and Formatting Parameters."]}
{"index": 1013, "name": "csv.unregister_dialect", "module": "csv", "doc": ["Delete the dialect associated with name from the dialect registry.", "An Error is raised if name is not a registered dialect name."]}
{"index": 1014, "name": "csv.get_dialect", "module": "csv", "doc": ["Return the dialect associated with name.", "An Error is raised if name is not a registered dialect name.", "This function returns an immutable Dialect."]}
{"index": 1015, "name": "csv.list_dialects", "module": "csv", "doc": ["Return the names of all registered dialects."]}
{"index": 1016, "name": "csv.field_size_limit", "module": "csv", "doc": ["Returns the current maximum field size allowed by the parser.", "If new_limit is given, this becomes the new limit."]}
{"index": 1017, "name": "csv.DictReader", "module": "csv", "doc": ["Create an object that operates like a regular reader but maps the information in each row to an OrderedDict whose keys are given by the optional fieldnames parameter.", "The fieldnames parameter is a sequence.", "If fieldnames is omitted, the values in the first row of file f will be used as the fieldnames.", "Regardless of how the fieldnames are determined, the ordered dictionary preserves their original ordering.", "If a row has more fields than fieldnames, the remaining data is put in a list and stored with the fieldname specified by restkey (which defaults to None).", "If a non-blank row has fewer fields than fieldnames, the missing values are filled-in with None.", "All other optional or keyword arguments are passed to the underlying reader instance.", "A short usage example:"]}
{"index": 1018, "name": "csv.DictWriter", "module": "csv", "doc": ["Create an object which operates like a regular writer but maps dictionaries onto output rows.", "The fieldnames parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow() method are written to file f.  The optional restval parameter specifies the value to be written if the dictionary is missing a key in fieldnames.", "If the dictionary passed to the writerow() method contains a key not found in fieldnames, the optional extrasaction parameter indicates what action to take.", "If it is set to 'raise', the default value, a ValueError is raised.", "If it is set to 'ignore', extra values in the dictionary are ignored.", "Any other optional or keyword arguments are passed to the underlying writer instance.", "Note that unlike the DictReader class, the fieldnames parameter of the DictWriter class is not optional.", "A short usage example:"]}
{"index": 1019, "name": "csv.Dialect", "module": "csv", "doc": ["The Dialect class is a container class relied on primarily for its attributes, which are used to define the parameters for a specific reader or writer instance."]}
{"index": 1020, "name": "csv.excel", "module": "csv", "doc": ["The excel class defines the usual properties of an Excel-generated CSV file.", "It is registered with the dialect name 'excel'."]}
{"index": 1021, "name": "csv.excel_tab", "module": "csv", "doc": ["The excel_tab class defines the usual properties of an Excel-generated TAB-delimited file.", "It is registered with the dialect name 'excel-tab'."]}
{"index": 1022, "name": "csv.unix_dialect", "module": "csv", "doc": ["The unix_dialect class defines the usual properties of a CSV file generated on UNIX systems, i.e.", "using '\\n' as line terminator and quoting all fields.", "It is registered with the dialect name 'unix'."]}
{"index": 1023, "name": "csv.Sniffer", "module": "csv", "doc": ["The Sniffer class is used to deduce the format of a CSV file.", "The Sniffer class provides two methods:"]}
{"index": 1024, "name": "csv.Sniffer.sniff", "module": "csv", "doc": ["Analyze the given sample and return a Dialect subclass reflecting the parameters found.", "If the optional delimiters parameter is given, it is interpreted as a string containing possible valid delimiter characters."]}
{"index": 1025, "name": "csv.Sniffer.has_header", "module": "csv", "doc": ["Analyze the sample text (presumed to be in CSV format) and return True if the first row appears to be a series of column headers."]}
{"index": 1026, "name": "csv.QUOTE_ALL", "module": "csv", "doc": ["Instructs writer objects to quote all fields."]}
{"index": 1027, "name": "csv.QUOTE_MINIMAL", "module": "csv", "doc": ["Instructs writer objects to only quote those fields which contain special characters such as delimiter, quotechar or any of the characters in lineterminator."]}
{"index": 1028, "name": "csv.QUOTE_NONNUMERIC", "module": "csv", "doc": ["Instructs writer objects to quote all non-numeric fields.", "Instructs the reader to convert all non-quoted fields to type float."]}
{"index": 1029, "name": "csv.QUOTE_NONE", "module": "csv", "doc": ["Instructs writer objects to never quote fields.", "When the current delimiter occurs in output data it is preceded by the current escapechar character.", "If escapechar is not set, the writer will raise Error if any characters that require escaping are encountered.", "Instructs reader to perform no special processing of quote characters."]}
{"index": 1030, "name": "csv.Error", "module": "csv", "doc": ["Raised by any of the functions when an error is detected."]}
{"index": 1031, "name": "csv.Dialect.delimiter", "module": "csv", "doc": ["A one-character string used to separate fields.", "It defaults to ','."]}
{"index": 1032, "name": "csv.Dialect.doublequote", "module": "csv", "doc": ["Controls how instances of quotechar appearing inside a field should themselves be quoted.", "When True, the character is doubled.", "When False, the escapechar is used as a prefix to the quotechar.", "It defaults to True.", "On output, if doublequote is False and no escapechar is set, Error is raised if a quotechar is found in a field."]}
{"index": 1033, "name": "csv.Dialect.escapechar", "module": "csv", "doc": ["A one-character string used by the writer to escape the delimiter if quoting is set to QUOTE_NONE and the quotechar if doublequote is False.", "On reading, the escapechar removes any special meaning from the following character.", "It defaults to None, which disables escaping."]}
{"index": 1034, "name": "csv.Dialect.lineterminator", "module": "csv", "doc": ["The string used to terminate lines produced by the writer.", "It defaults to '\\r\\n'."]}
{"index": 1035, "name": "csv.Dialect.quotechar", "module": "csv", "doc": ["A one-character string used to quote fields containing special characters, such as the delimiter or quotechar, or which contain new-line characters.", "It defaults to '\"'."]}
{"index": 1036, "name": "csv.Dialect.quoting", "module": "csv", "doc": ["Controls when quotes should be generated by the writer and recognised by the reader.", "It can take on any of the QUOTE_* constants (see section Module Contents) and defaults to QUOTE_MINIMAL."]}
{"index": 1037, "name": "csv.Dialect.skipinitialspace", "module": "csv", "doc": ["When True, whitespace immediately following the delimiter is ignored.", "The default is False."]}
{"index": 1038, "name": "csv.Dialect.strict", "module": "csv", "doc": ["When True, raise exception Error on bad CSV input.", "The default is False."]}
{"index": 1039, "name": "csv.csvreader.__next__", "module": "csv", "doc": ["Return the next row of the reader\u2019s iterable object as a list (if the object was returned from reader()) or a dict (if it is a DictReader instance), parsed according to the current dialect.", "Usually you should call this as next(reader)."]}
{"index": 1040, "name": "csv.csvreader.dialect", "module": "csv", "doc": ["A read-only description of the dialect in use by the parser."]}
{"index": 1041, "name": "csv.csvreader.line_num", "module": "csv", "doc": ["The number of lines read from the source iterator.", "This is not the same as the number of records returned, as records can span multiple lines."]}
{"index": 1042, "name": "csv.csvreader.fieldnames", "module": "csv", "doc": ["If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file."]}
{"index": 1043, "name": "csv.csvwriter.writerow", "module": "csv", "doc": ["Write the row parameter to the writer\u2019s file object, formatted according to the current dialect."]}
{"index": 1044, "name": "csv.csvwriter.writerows", "module": "csv", "doc": ["Write all elements in rows (an iterable of row objects as described above) to the writer\u2019s file object, formatted according to the current dialect."]}
{"index": 1045, "name": "csv.csvwriter.dialect", "module": "csv", "doc": ["A read-only description of the dialect in use by the writer."]}
{"index": 1046, "name": "csv.DictWriter.writeheader", "module": "csv", "doc": ["Write a row with the field names (as specified in the constructor)."]}
{"index": 1047, "name": "id3", "module": "csv", "doc": ["If newline='' is not specified, newlines embedded inside quoted fields will not be interpreted correctly, and on platforms that use \\r\\n linendings on write an extra \\r will be added.", "It should always be safe to specify newline='', since the csv module does its own (universal) newline handling."]}
{"index": 1048, "name": "ctypes.CDLL", "module": "ctypes", "doc": ["Instances of this class represent loaded shared libraries.", "Functions in these libraries use the standard C calling convention, and are assumed to return int."]}
{"index": 1049, "name": "ctypes.OleDLL", "module": "ctypes", "doc": ["Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the stdcall calling convention, and are assumed to return the windows specific HRESULT code.", "HRESULT values contain information specifying whether the function call failed or succeeded, together with additional error code.", "If the return value signals a failure, an OSError is automatically raised."]}
{"index": 1050, "name": "ctypes.WinDLL", "module": "ctypes", "doc": ["Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the stdcall calling convention, and are assumed to return int by default.", "On Windows CE only the standard calling convention is used, for convenience the WinDLL and OleDLL use the standard calling convention on this platform."]}
{"index": 1051, "name": "ctypes.PyDLL", "module": "ctypes", "doc": ["Instances of this class behave like CDLL instances, except that the Python GIL is not released during the function call, and after the function execution the Python error flag is checked.", "If the error flag is set, a Python exception is raised.", "Thus, this is only useful to call Python C api functions directly."]}
{"index": 1052, "name": "ctypes.PyDLL._handle", "module": "ctypes", "doc": ["The system handle used to access the library."]}
{"index": 1053, "name": "ctypes.PyDLL._name", "module": "ctypes", "doc": ["The name of the library passed in the constructor."]}
{"index": 1054, "name": "ctypes.LibraryLoader", "module": "ctypes", "doc": ["Class which loads shared libraries.", "dlltype should be one of the CDLL, PyDLL, WinDLL, or OleDLL types.", "__getattr__() has special behavior: It allows loading a shared library by accessing it as attribute of a library loader instance.", "The result is cached, so repeated attribute accesses return the same library each time."]}
{"index": 1055, "name": "ctypes.LibraryLoader.LoadLibrary", "module": "ctypes", "doc": ["Load a shared library into the process and return it.", "This method always returns a new instance of the library."]}
{"index": 1056, "name": "ctypes._FuncPtr", "module": "ctypes", "doc": ["Base class for C callable foreign functions.", "Instances of foreign functions are also C compatible data types; they represent C function pointers.", "This behavior can be customized by assigning to special attributes of the foreign function object."]}
{"index": 1057, "name": "ctypes._FuncPtr.restype", "module": "ctypes", "doc": ["Assign a ctypes type to specify the result type of the foreign function.", "Use None for void, a function not returning anything.", "It is possible to assign a callable Python object that is not a ctypes type, in this case the function is assumed to return a C int, and the callable will be called with this integer, allowing further processing or error checking.", "Using this is deprecated, for more flexible post processing or error checking use a ctypes data type as restype and assign a callable to the errcheck attribute."]}
{"index": 1058, "name": "ctypes._FuncPtr.argtypes", "module": "ctypes", "doc": ["Assign a tuple of ctypes types to specify the argument types that the function accepts.", "Functions using the stdcall calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well.", "When a foreign function is called, each actual argument is passed to the from_param() class method of the items in the argtypes tuple, this method allows adapting the actual argument to an object that the foreign function accepts.", "For example, a c_char_p item in the argtypes tuple will convert a string passed as argument into a bytes object using ctypes conversion rules.", "New: It is now possible to put items in argtypes which are not ctypes types, but each item must have a from_param() method which returns a value usable as argument (integer, string, ctypes instance).", "This allows defining adapters that can adapt custom objects as function parameters."]}
{"index": 1059, "name": "ctypes._FuncPtr.errcheck", "module": "ctypes", "doc": ["Assign a Python function or another callable to this attribute.", "The callable will be called with three or more arguments:", "The object that this function returns will be returned from the foreign function call, but it can also check the result value and raise an exception if the foreign function call failed."]}
{"index": 1060, "name": "ctypes.ArgumentError", "module": "ctypes", "doc": ["This exception is raised when a foreign function call cannot convert one of the passed arguments."]}
{"index": 1061, "name": "ctypes.CFUNCTYPE", "module": "ctypes", "doc": ["The returned function prototype creates functions that use the standard C calling convention.", "The function will release the GIL during the call.", "If use_errno is set to true, the ctypes private copy of the system errno variable is exchanged with the real errno value before and after the call; use_last_error does the same for the Windows error code."]}
{"index": 1062, "name": "ctypes.WINFUNCTYPE", "module": "ctypes", "doc": ["Windows only: The returned function prototype creates functions that use the stdcall calling convention, except on Windows CE where WINFUNCTYPE() is the same as CFUNCTYPE().", "The function will release the GIL during the call.", "use_errno and use_last_error have the same meaning as above."]}
{"index": 1063, "name": "ctypes.PYFUNCTYPE", "module": "ctypes", "doc": ["The returned function prototype creates functions that use the Python calling convention.", "The function will not release the GIL during the call."]}
{"index": 1064, "name": "ctypes.addressof", "module": "ctypes", "doc": ["Returns the address of the memory buffer as integer.", "obj must be an instance of a ctypes type."]}
{"index": 1065, "name": "ctypes.alignment", "module": "ctypes", "doc": ["Returns the alignment requirements of a ctypes type.", "obj_or_type must be a ctypes type or instance."]}
{"index": 1066, "name": "ctypes.byref", "module": "ctypes", "doc": ["Returns a light-weight pointer to obj, which must be an instance of a ctypes type.", "offset defaults to zero, and must be an integer that will be added to the internal pointer value.", "byref(obj, offset) corresponds to this C code:", "The returned object can only be used as a foreign function call parameter.", "It behaves similar to pointer(obj), but the construction is a lot faster."]}
{"index": 1067, "name": "ctypes.cast", "module": "ctypes", "doc": ["This function is similar to the cast operator in C. It returns a new instance of type which points to the same memory block as obj.", "type must be a pointer type, and obj must be an object that can be interpreted as a pointer."]}
{"index": 1068, "name": "ctypes.create_string_buffer", "module": "ctypes", "doc": ["This function creates a mutable character buffer.", "The returned object is a ctypes array of c_char.", "init_or_size must be an integer which specifies the size of the array, or a bytes object which will be used to initialize the array items.", "If a bytes object is specified as first argument, the buffer is made one item larger than its length so that the last element in the array is a NUL termination character.", "An integer can be passed as second argument which allows specifying the size of the array if the length of the bytes should not be used."]}
{"index": 1069, "name": "ctypes.create_unicode_buffer", "module": "ctypes", "doc": ["This function creates a mutable unicode character buffer.", "The returned object is a ctypes array of c_wchar.", "init_or_size must be an integer which specifies the size of the array, or a string which will be used to initialize the array items.", "If a string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character.", "An integer can be passed as second argument which allows specifying the size of the array if the length of the string should not be used."]}
{"index": 1070, "name": "ctypes.DllCanUnloadNow", "module": "ctypes", "doc": ["Windows only: This function is a hook which allows implementing in-process COM servers with ctypes.", "It is called from the DllCanUnloadNow function that the _ctypes extension dll exports."]}
{"index": 1071, "name": "ctypes.DllGetClassObject", "module": "ctypes", "doc": ["Windows only: This function is a hook which allows implementing in-process COM servers with ctypes.", "It is called from the DllGetClassObject function that the _ctypes extension dll exports."]}
{"index": 1072, "name": "ctypes.util.find_library", "module": "ctypes", "doc": ["Try to find a library and return a pathname.", "name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l).", "If no library can be found, returns None.", "The exact functionality is system dependent."]}
{"index": 1073, "name": "ctypes.util.find_msvcrt", "module": "ctypes", "doc": ["Windows only: return the filename of the VC runtime library used by Python, and by the extension modules.", "If the name of the library cannot be determined, None is returned.", "If you need to free memory, for example, allocated by an extension module with a call to the free(void *), it is important that you use the function in the same library that allocated the memory."]}
{"index": 1074, "name": "ctypes.FormatError", "module": "ctypes", "doc": ["Windows only: Returns a textual description of the error code code.", "If no error code is specified, the last error code is used by calling the Windows api function GetLastError."]}
{"index": 1075, "name": "ctypes.GetLastError", "module": "ctypes", "doc": ["Windows only: Returns the last error code set by Windows in the calling thread.", "This function calls the Windows GetLastError() function directly, it does not return the ctypes-private copy of the error code."]}
{"index": 1076, "name": "ctypes.get_errno", "module": "ctypes", "doc": ["Returns the current value of the ctypes-private copy of the system errno variable in the calling thread."]}
{"index": 1077, "name": "ctypes.get_last_error", "module": "ctypes", "doc": ["Windows only: returns the current value of the ctypes-private copy of the system LastError variable in the calling thread."]}
{"index": 1078, "name": "ctypes.memmove", "module": "ctypes", "doc": ["Same as the standard C memmove library function: copies count bytes from src to dst.", "dst and src must be integers or ctypes instances that can be converted to pointers."]}
{"index": 1079, "name": "ctypes.memset", "module": "ctypes", "doc": ["Same as the standard C memset library function: fills the memory block at address dst with count bytes of value c. dst must be an integer specifying an address, or a ctypes instance."]}
{"index": 1080, "name": "ctypes.POINTER", "module": "ctypes", "doc": ["This factory function creates and returns a new ctypes pointer type.", "Pointer types are cached and reused internally, so calling this function repeatedly is cheap.", "type must be a ctypes type."]}
{"index": 1081, "name": "ctypes.pointer", "module": "ctypes", "doc": ["This function creates a new pointer instance, pointing to obj.", "The returned object is of the type POINTER(type(obj)).", "Note: If you just want to pass a pointer to an object to a foreign function call, you should use byref(obj) which is much faster."]}
{"index": 1082, "name": "ctypes.resize", "module": "ctypes", "doc": ["This function resizes the internal memory buffer of obj, which must be an instance of a ctypes type.", "It is not possible to make the buffer smaller than the native size of the objects type, as given by sizeof(type(obj)), but it is possible to enlarge the buffer."]}
{"index": 1083, "name": "ctypes.set_errno", "module": "ctypes", "doc": ["Set the current value of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value."]}
{"index": 1084, "name": "ctypes.set_last_error", "module": "ctypes", "doc": ["Windows only: set the current value of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value."]}
{"index": 1085, "name": "ctypes.sizeof", "module": "ctypes", "doc": ["Returns the size in bytes of a ctypes type or instance memory buffer.", "Does the same as the C sizeof operator."]}
{"index": 1086, "name": "ctypes.string_at", "module": "ctypes", "doc": ["This function returns the C string starting at memory address address as a bytes object.", "If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated."]}
{"index": 1087, "name": "ctypes.WinError", "module": "ctypes", "doc": ["Windows only: this function is probably the worst-named thing in ctypes.", "It creates an instance of OSError.", "If code is not specified, GetLastError is called to determine the error code.", "If descr is not specified, FormatError() is called to get a textual description of the error."]}
{"index": 1088, "name": "ctypes.wstring_at", "module": "ctypes", "doc": ["This function returns the wide character string starting at memory address address as a string.", "If size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated."]}
{"index": 1089, "name": "ctypes._CData", "module": "ctypes", "doc": ["This non-public class is the common base class of all ctypes data types.", "Among other things, all ctypes type instances contain a memory block that hold C compatible data; the address of the memory block is returned by the addressof() helper function.", "Another instance variable is exposed as _objects; this contains other Python objects that need to be kept alive in case the memory block contains pointers.", "Common methods of ctypes data types, these are all class methods (to be exact, they are methods of the metaclass):", "Common instance variables of ctypes data types:"]}
{"index": 1090, "name": "ctypes._CData.from_buffer", "module": "ctypes", "doc": ["This method returns a ctypes instance that shares the buffer of the source object.", "The source object must support the writeable buffer interface.", "The optional offset parameter specifies an offset into the source buffer in bytes; the default is zero.", "If the source buffer is not large enough a ValueError is raised."]}
{"index": 1091, "name": "ctypes._CData.from_buffer_copy", "module": "ctypes", "doc": ["This method creates a ctypes instance, copying the buffer from the source object buffer which must be readable.", "The optional offset parameter specifies an offset into the source buffer in bytes; the default is zero.", "If the source buffer is not large enough a ValueError is raised."]}
{"index": 1092, "name": "ctypes._CData.from_address", "module": "ctypes", "doc": ["This method returns a ctypes type instance using the memory specified by address which must be an integer."]}
{"index": 1093, "name": "ctypes._CData.from_param", "module": "ctypes", "doc": ["This method adapts obj to a ctypes type.", "It is called with the actual object used in a foreign function call when the type is present in the foreign function\u2019s argtypes tuple; it must return an object that can be used as a function call parameter.", "All ctypes data types have a default implementation of this classmethod that normally returns obj if that is an instance of the type.", "Some types accept other objects as well."]}
{"index": 1094, "name": "ctypes._CData.in_dll", "module": "ctypes", "doc": ["This method returns a ctypes type instance exported by a shared library.", "name is the name of the symbol that exports the data, library is the loaded shared library."]}
{"index": 1095, "name": "ctypes._CData._b_base_", "module": "ctypes", "doc": ["Sometimes ctypes data instances do not own the memory block they contain, instead they share part of the memory block of a base object.", "The _b_base_ read-only member is the root ctypes object that owns the memory block."]}
{"index": 1096, "name": "ctypes._CData._b_needsfree_", "module": "ctypes", "doc": ["This read-only variable is true when the ctypes data instance has allocated the memory block itself, false otherwise."]}
{"index": 1097, "name": "ctypes._CData._objects", "module": "ctypes", "doc": ["This member is either None or a dictionary containing Python objects that need to be kept alive so that the memory block contents is kept valid.", "This object is only exposed for debugging; never modify the contents of this dictionary."]}
{"index": 1098, "name": "ctypes._SimpleCData", "module": "ctypes", "doc": ["This non-public class is the base class of all fundamental ctypes data types.", "It is mentioned here because it contains the common attributes of the fundamental ctypes data types.", "_SimpleCData is a subclass of _CData, so it inherits their methods and attributes.", "ctypes data types that are not and do not contain pointers can now be pickled.", "Instances have a single attribute:"]}
{"index": 1099, "name": "ctypes._SimpleCData.value", "module": "ctypes", "doc": ["This attribute contains the actual value of the instance.", "For integer and pointer types, it is an integer, for character types, it is a single character bytes object or string, for character pointer types it is a Python bytes object or string.", "When the value attribute is retrieved from a ctypes instance, usually a new object is returned each time.", "ctypes does not implement original object return, always a new object is constructed.", "The same is true for all other ctypes object instances."]}
{"index": 1100, "name": "ctypes.c_byte", "module": "ctypes", "doc": ["Represents the C signed char datatype, and interprets the value as small integer.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1101, "name": "ctypes.c_char", "module": "ctypes", "doc": ["Represents the C char datatype, and interprets the value as a single character.", "The constructor accepts an optional string initializer, the length of the string must be exactly one character."]}
{"index": 1102, "name": "ctypes.c_char_p", "module": "ctypes", "doc": ["Represents the C char * datatype when it points to a zero-terminated string.", "For a general character pointer that may also point to binary data, POINTER(c_char) must be used.", "The constructor accepts an integer address, or a bytes object."]}
{"index": 1103, "name": "ctypes.c_double", "module": "ctypes", "doc": ["Represents the C double datatype.", "The constructor accepts an optional float initializer."]}
{"index": 1104, "name": "ctypes.c_longdouble", "module": "ctypes", "doc": ["Represents the C long double datatype.", "The constructor accepts an optional float initializer.", "On platforms where sizeof(long double) == sizeof(double) it is an alias to c_double."]}
{"index": 1105, "name": "ctypes.c_float", "module": "ctypes", "doc": ["Represents the C float datatype.", "The constructor accepts an optional float initializer."]}
{"index": 1106, "name": "ctypes.c_int", "module": "ctypes", "doc": ["Represents the C signed int datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done.", "On platforms where sizeof(int) == sizeof(long) it is an alias to c_long."]}
{"index": 1107, "name": "ctypes.c_int8", "module": "ctypes", "doc": ["Represents the C 8-bit signed int datatype.", "Usually an alias for c_byte."]}
{"index": 1108, "name": "ctypes.c_int16", "module": "ctypes", "doc": ["Represents the C 16-bit signed int datatype.", "Usually an alias for c_short."]}
{"index": 1109, "name": "ctypes.c_int32", "module": "ctypes", "doc": ["Represents the C 32-bit signed int datatype.", "Usually an alias for c_int."]}
{"index": 1110, "name": "ctypes.c_int64", "module": "ctypes", "doc": ["Represents the C 64-bit signed int datatype.", "Usually an alias for c_longlong."]}
{"index": 1111, "name": "ctypes.c_long", "module": "ctypes", "doc": ["Represents the C signed long datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1112, "name": "ctypes.c_longlong", "module": "ctypes", "doc": ["Represents the C signed long long datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1113, "name": "ctypes.c_short", "module": "ctypes", "doc": ["Represents the C signed short datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1114, "name": "ctypes.c_size_t", "module": "ctypes", "doc": ["Represents the C size_t datatype."]}
{"index": 1115, "name": "ctypes.c_ssize_t", "module": "ctypes", "doc": ["Represents the C ssize_t datatype."]}
{"index": 1116, "name": "ctypes.c_ubyte", "module": "ctypes", "doc": ["Represents the C unsigned char datatype, it interprets the value as small integer.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1117, "name": "ctypes.c_uint", "module": "ctypes", "doc": ["Represents the C unsigned int datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done.", "On platforms where sizeof(int) == sizeof(long) it is an alias for c_ulong."]}
{"index": 1118, "name": "ctypes.c_uint8", "module": "ctypes", "doc": ["Represents the C 8-bit unsigned int datatype.", "Usually an alias for c_ubyte."]}
{"index": 1119, "name": "ctypes.c_uint16", "module": "ctypes", "doc": ["Represents the C 16-bit unsigned int datatype.", "Usually an alias for c_ushort."]}
{"index": 1120, "name": "ctypes.c_uint32", "module": "ctypes", "doc": ["Represents the C 32-bit unsigned int datatype.", "Usually an alias for c_uint."]}
{"index": 1121, "name": "ctypes.c_uint64", "module": "ctypes", "doc": ["Represents the C 64-bit unsigned int datatype.", "Usually an alias for c_ulonglong."]}
{"index": 1122, "name": "ctypes.c_ulong", "module": "ctypes", "doc": ["Represents the C unsigned long datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1123, "name": "ctypes.c_ulonglong", "module": "ctypes", "doc": ["Represents the C unsigned long long datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1124, "name": "ctypes.c_ushort", "module": "ctypes", "doc": ["Represents the C unsigned short datatype.", "The constructor accepts an optional integer initializer; no overflow checking is done."]}
{"index": 1125, "name": "ctypes.c_void_p", "module": "ctypes", "doc": ["Represents the C void * type.", "The value is represented as integer.", "The constructor accepts an optional integer initializer."]}
{"index": 1126, "name": "ctypes.c_wchar", "module": "ctypes", "doc": ["Represents the C wchar_t datatype, and interprets the value as a single character unicode string.", "The constructor accepts an optional string initializer, the length of the string must be exactly one character."]}
{"index": 1127, "name": "ctypes.c_wchar_p", "module": "ctypes", "doc": ["Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string.", "The constructor accepts an integer address, or a string."]}
{"index": 1128, "name": "ctypes.c_bool", "module": "ctypes", "doc": ["Represent the C bool datatype (more accurately, _Bool from C99).", "Its value can be True or False, and the constructor accepts any object that has a truth value."]}
{"index": 1129, "name": "ctypes.HRESULT", "module": "ctypes", "doc": ["Windows only: Represents a HRESULT value, which contains success or error information for a function or method call."]}
{"index": 1130, "name": "ctypes.py_object", "module": "ctypes", "doc": ["Represents the C PyObject * datatype.", "Calling this without an argument creates a NULL PyObject * pointer."]}
{"index": 1131, "name": "ctypes.Union", "module": "ctypes", "doc": ["Abstract base class for unions in native byte order."]}
{"index": 1132, "name": "ctypes.BigEndianStructure", "module": "ctypes", "doc": ["Abstract base class for structures in big endian byte order."]}
{"index": 1133, "name": "ctypes.LittleEndianStructure", "module": "ctypes", "doc": ["Abstract base class for structures in little endian byte order."]}
{"index": 1134, "name": "ctypes.Structure", "module": "ctypes", "doc": ["Abstract base class for structures in native byte order.", "Concrete structure and union types must be created by subclassing one of these types, and at least define a _fields_ class variable.", "ctypes will create descriptors which allow reading and writing the fields by direct attribute accesses.", "These are the", "It is possible to define sub-subclasses of structures, they inherit the fields of the base class.", "If the subclass definition has a separate _fields_ variable, the fields specified in this are appended to the fields of the base class.", "Structure and union constructors accept both positional and keyword arguments.", "Positional arguments are used to initialize member fields in the same order as they are appear in _fields_.", "Keyword arguments in the constructor are interpreted as attribute assignments, so they will initialize _fields_ with the same name, or create new attributes for names not present in _fields_."]}
{"index": 1135, "name": "ctypes.Structure._fields_", "module": "ctypes", "doc": ["A sequence defining the structure fields.", "The items must be 2-tuples or 3-tuples.", "The first item is the name of the field, the second item specifies the type of the field; it can be any ctypes data type.", "For integer type fields like c_int, a third optional item can be given.", "It must be a small positive integer defining the bit width of the field.", "Field names must be unique within one structure or union.", "This is not checked, only one field can be accessed when names are repeated.", "It is possible to define the _fields_ class variable after the class statement that defines the Structure subclass, this allows creating data types that directly or indirectly reference themselves:", "The _fields_ class variable must, however, be defined before the type is first used (an instance is created, sizeof() is called on it, and so on).", "Later assignments to the _fields_ class variable will raise an AttributeError.", "It is possible to define sub-subclasses of structure types, they inherit the fields of the base class plus the _fields_ defined in the sub-subclass, if any."]}
{"index": 1136, "name": "ctypes.Structure._pack_", "module": "ctypes", "doc": ["An optional small integer that allows overriding the alignment of structure fields in the instance.", "_pack_ must already be defined when _fields_ is assigned, otherwise it will have no effect."]}
{"index": 1137, "name": "ctypes.Structure._anonymous_", "module": "ctypes", "doc": ["An optional sequence that lists the names of unnamed (anonymous) fields.", "_anonymous_ must be already defined when _fields_ is assigned, otherwise it will have no effect.", "The fields listed in this variable must be structure or union type fields.", "ctypes will create descriptors in the structure type that allows accessing the nested fields directly, without the need to create the structure or union field.", "Here is an example type (Windows):", "The TYPEDESC structure describes a COM data type, the vt field specifies which one of the union fields is valid.", "Since the u field is defined as anonymous field, it is now possible to access the members directly off the TYPEDESC instance.", "td.lptdesc and td.u.lptdesc are equivalent, but the former is faster since it does not need to create a temporary union instance:"]}
{"index": 1138, "name": "ctypes.Array", "module": "ctypes", "doc": ["Abstract base class for arrays.", "The recommended way to create concrete array types is by multiplying any ctypes data type with a positive integer.", "Alternatively, you can subclass this type and define _length_ and _type_ class variables.", "Array elements can be read and written using standard subscript and slice accesses; for slice reads, the resulting object is not itself an Array.", "Array subclass constructors accept positional arguments, used to initialize the elements in order."]}
{"index": 1139, "name": "ctypes.Array._length_", "module": "ctypes", "doc": ["A positive integer specifying the number of elements in the array.", "Out-of-range subscripts result in an IndexError.", "Will be returned by len()."]}
{"index": 1140, "name": "ctypes.Array._type_", "module": "ctypes", "doc": ["Specifies the type of each element in the array."]}
{"index": 1141, "name": "ctypes._Pointer", "module": "ctypes", "doc": ["Private, abstract base class for pointers.", "Concrete pointer types are created by calling POINTER() with the type that will be pointed to; this is done automatically by pointer().", "If a pointer points to an array, its elements can be read and written using standard subscript and slice accesses.", "Pointer objects have no size, so len() will raise TypeError.", "Negative subscripts will read from the memory before the pointer (as in C), and out-of-range subscripts will probably crash with an access violation (if you\u2019re lucky)."]}
{"index": 1142, "name": "ctypes._Pointer._type_", "module": "ctypes", "doc": ["Specifies the type pointed to."]}
{"index": 1143, "name": "ctypes._Pointer.contents", "module": "ctypes", "doc": ["Returns the object to which to pointer points.", "Assigning to this attribute changes the pointer to point to the assigned object."]}
{"index": 1144, "name": "curses.ascii.isalnum", "module": "curses", "doc": ["Checks for an ASCII alphanumeric character; it is equivalent to isalpha(c) or isdigit(c)."]}
{"index": 1145, "name": "curses.ascii.isalpha", "module": "curses", "doc": ["Checks for an ASCII alphabetic character; it is equivalent to isupper(c) or islower(c)."]}
{"index": 1146, "name": "curses.ascii.isascii", "module": "curses", "doc": ["Checks for a character value that fits in the 7-bit ASCII set."]}
{"index": 1147, "name": "curses.ascii.isblank", "module": "curses", "doc": ["Checks for an ASCII whitespace character; space or horizontal tab."]}
{"index": 1148, "name": "curses.ascii.iscntrl", "module": "curses", "doc": ["Checks for an ASCII control character (in the range 0x00 to 0x1f or 0x7f)."]}
{"index": 1149, "name": "curses.ascii.isdigit", "module": "curses", "doc": ["Checks for an ASCII decimal digit, '0' through '9'.", "This is equivalent to c in string.digits."]}
{"index": 1150, "name": "curses.ascii.isgraph", "module": "curses", "doc": ["Checks for ASCII any printable character except space."]}
{"index": 1151, "name": "curses.ascii.islower", "module": "curses", "doc": ["Checks for an ASCII lower-case character."]}
{"index": 1152, "name": "curses.ascii.isprint", "module": "curses", "doc": ["Checks for any ASCII printable character including space."]}
{"index": 1153, "name": "curses.ascii.ispunct", "module": "curses", "doc": ["Checks for any printable ASCII character which is not a space or an alphanumeric character."]}
{"index": 1154, "name": "curses.ascii.isspace", "module": "curses", "doc": ["Checks for ASCII white-space characters; space, line feed, carriage return, form feed, horizontal tab, vertical tab."]}
{"index": 1155, "name": "curses.ascii.isupper", "module": "curses", "doc": ["Checks for an ASCII uppercase letter."]}
{"index": 1156, "name": "curses.ascii.isxdigit", "module": "curses", "doc": ["Checks for an ASCII hexadecimal digit.", "This is equivalent to c in string.hexdigits."]}
{"index": 1157, "name": "curses.ascii.isctrl", "module": "curses", "doc": ["Checks for an ASCII control character (ordinal values 0 to 31)."]}
{"index": 1158, "name": "curses.ascii.ismeta", "module": "curses", "doc": ["Checks for a non-ASCII character (ordinal values 0x80 and above)."]}
{"index": 1159, "name": "curses.ascii.ascii", "module": "curses", "doc": ["Return the ASCII value corresponding to the low 7 bits of c."]}
{"index": 1160, "name": "curses.ascii.ctrl", "module": "curses", "doc": ["Return the control character corresponding to the given character (the character bit value is bitwise-anded with 0x1f)."]}
{"index": 1161, "name": "curses.ascii.alt", "module": "curses", "doc": ["Return the 8-bit character corresponding to the given ASCII character (the character bit value is bitwise-ored with 0x80)."]}
{"index": 1162, "name": "curses.ascii.unctrl", "module": "curses", "doc": ["Return a string representation of the ASCII character c.  If c is printable, this string is the character itself.", "If the character is a control character (0x00\u20130x1f) the string consists of a caret ('^') followed by the corresponding uppercase letter.", "If the character is an ASCII delete (0x7f) the string is '^?'.", "If the character has its meta bit (0x80) set, the meta bit is stripped, the preceding rules applied, and '!'", "prepended to the result."]}
{"index": 1163, "name": "curses.ascii.controlnames", "module": "curses", "doc": ["A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic SP for the space character."]}
{"index": 1164, "name": "curses.error", "module": "curses", "doc": ["Exception raised when a curses library function returns an error."]}
{"index": 1165, "name": "curses.baudrate", "module": "curses", "doc": ["Return the output speed of the terminal in bits per second.", "On software terminal emulators it will have a fixed high value.", "Included for historical reasons; in former times, it was used to  write output loops for time delays and occasionally to change interfaces depending on the line speed."]}
{"index": 1166, "name": "curses.beep", "module": "curses", "doc": ["Emit a short attention sound."]}
{"index": 1167, "name": "curses.can_change_color", "module": "curses", "doc": ["Return True or False, depending on whether the programmer can change the colors displayed by the terminal."]}
{"index": 1168, "name": "curses.cbreak", "module": "curses", "doc": ["Enter cbreak mode.", "In cbreak mode (sometimes called \u201crare\u201d mode) normal tty line buffering is turned off and characters are available to be read one by one.", "However, unlike raw mode, special characters (interrupt, quit, suspend, and flow control) retain their effects on the tty driver and calling program.", "Calling first raw() then cbreak() leaves the terminal in cbreak mode."]}
{"index": 1169, "name": "curses.color_content", "module": "curses", "doc": ["Return the intensity of the red, green, and blue (RGB) components in the color color_number, which must be between 0 and COLORS.", "Return a 3-tuple, containing the R,G,B values for the given color, which will be between 0 (no component) and 1000 (maximum amount of component)."]}
{"index": 1170, "name": "curses.color_pair", "module": "curses", "doc": ["Return the attribute value for displaying text in the specified color.", "This attribute value can be combined with A_STANDOUT, A_REVERSE, and the other A_* attributes.", "pair_number() is the counterpart to this function."]}
{"index": 1171, "name": "curses.curs_set", "module": "curses", "doc": ["Set the cursor state.", "visibility can be set to 0, 1, or 2, for invisible, normal, or very visible.", "If the terminal supports the visibility requested, return the previous cursor state; otherwise raise an exception.", "On many terminals, the \u201cvisible\u201d mode is an underline cursor and the \u201cvery visible\u201d mode is a block cursor."]}
{"index": 1172, "name": "curses.def_prog_mode", "module": "curses", "doc": ["Save the current terminal mode as the \u201cprogram\u201d mode, the mode when the running program is using curses.", "(Its counterpart is the \u201cshell\u201d mode, for when the program is not in curses.)", "Subsequent calls to reset_prog_mode() will restore this mode."]}
{"index": 1173, "name": "curses.def_shell_mode", "module": "curses", "doc": ["Save the current terminal mode as the \u201cshell\u201d mode, the mode when the running program is not using curses.", "(Its counterpart is the \u201cprogram\u201d mode, when the program is using curses capabilities.)", "Subsequent calls to reset_shell_mode() will restore this mode."]}
{"index": 1174, "name": "curses.delay_output", "module": "curses", "doc": ["Insert an ms millisecond pause in output."]}
{"index": 1175, "name": "curses.doupdate", "module": "curses", "doc": ["Update the physical screen.", "The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state.", "The doupdate() ground updates the physical screen to match the virtual screen.", "The virtual screen may be updated by a noutrefresh() call after write operations such as addstr() have been performed on a window.", "The normal refresh() call is simply noutrefresh() followed by doupdate(); if you have to update multiple windows, you can speed performance and perhaps reduce screen flicker by issuing noutrefresh() calls on all windows, followed by a single doupdate()."]}
{"index": 1176, "name": "curses.echo", "module": "curses", "doc": ["Enter echo mode.", "In echo mode, each character input is echoed to the screen as it is entered."]}
{"index": 1177, "name": "curses.endwin", "module": "curses", "doc": ["De-initialize the library, and return terminal to normal status."]}
{"index": 1178, "name": "curses.erasechar", "module": "curses", "doc": ["Return the user\u2019s current erase character as a one-byte bytes object.", "Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself."]}
{"index": 1179, "name": "curses.filter", "module": "curses", "doc": ["The filter() routine, if used, must be called before initscr() is called.", "The effect is that, during those calls, LINES is set to 1; the capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and the home string is set to the value of cr.", "The effect is that the cursor is confined to the current line, and so are screen updates.", "This may be used for enabling character-at-a-time  line editing without touching the rest of the screen."]}
{"index": 1180, "name": "curses.flash", "module": "curses", "doc": ["Flash the screen.", "That is, change it to reverse-video and then change it back in a short interval.", "Some people prefer such as \u2018visible bell\u2019 to the audible attention signal produced by beep()."]}
{"index": 1181, "name": "curses.flushinp", "module": "curses", "doc": ["Flush all input buffers.", "This throws away any  typeahead  that  has been typed by the user and has not yet been processed by the program."]}
{"index": 1182, "name": "curses.getmouse", "module": "curses", "doc": ["After getch() returns KEY_MOUSE to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple (id, x, y, z, bstate).", "id is an ID value used to distinguish multiple devices, and x, y, z are the event\u2019s coordinates.", "(z is currently unused.)", "bstate is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where n is the button number from 1 to 4: BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED, BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED, BUTTON_SHIFT, BUTTON_CTRL, BUTTON_ALT."]}
{"index": 1183, "name": "curses.getsyx", "module": "curses", "doc": ["Return the current coordinates of the virtual screen cursor as a tuple (y, x).", "If leaveok is currently True, then return (-1, -1)."]}
{"index": 1184, "name": "curses.getwin", "module": "curses", "doc": ["Read window related data stored in the file by an earlier putwin() call.", "The routine then creates and initializes a new window using that data, returning the new window object."]}
{"index": 1185, "name": "curses.has_colors", "module": "curses", "doc": ["Return True if the terminal can display colors; otherwise, return False."]}
{"index": 1186, "name": "curses.has_ic", "module": "curses", "doc": ["Return True if the terminal has insert- and delete-character capabilities.", "This function is included for historical reasons only, as all modern software terminal emulators have such capabilities."]}
{"index": 1187, "name": "curses.has_il", "module": "curses", "doc": ["Return True if the terminal has insert- and delete-line capabilities, or can simulate  them  using scrolling regions.", "This function is included for historical reasons only, as all modern software terminal emulators have such capabilities."]}
{"index": 1188, "name": "curses.has_key", "module": "curses", "doc": ["Take a key value ch, and return True if the current terminal type recognizes a key with that value."]}
{"index": 1189, "name": "curses.halfdelay", "module": "curses", "doc": ["Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program.", "However, after blocking for tenths tenths of seconds, raise an exception if nothing has been typed.", "The value of tenths must be a number between 1 and 255.", "Use nocbreak() to leave half-delay mode."]}
{"index": 1190, "name": "curses.init_color", "module": "curses", "doc": ["Change the definition of a color, taking the number of the color to be changed followed by three RGB values (for the amounts of red, green, and blue components).", "The value of color_number must be between 0 and COLORS.", "Each of r, g, b, must be a value between 0 and 1000.", "When init_color() is used, all occurrences of that color on the screen immediately change to the new definition.", "This function is a no-op on most terminals; it is active only if can_change_color() returns True."]}
{"index": 1191, "name": "curses.init_pair", "module": "curses", "doc": ["Change the definition of a color-pair.", "It takes three arguments: the number of the color-pair to be changed, the foreground color number, and the background color number.", "The value of pair_number must be between 1 and COLOR_PAIRS - 1 (the 0 color pair is wired to white on black and cannot be changed).", "The value of fg and bg arguments must be between 0 and COLORS.", "If the color-pair was previously initialized, the screen is refreshed and all occurrences of that color-pair are changed to the new definition."]}
{"index": 1192, "name": "curses.initscr", "module": "curses", "doc": ["Initialize the library.", "Return a window object which represents the whole screen."]}
{"index": 1193, "name": "curses.is_term_resized", "module": "curses", "doc": ["Return True if resize_term() would modify the window structure, False otherwise."]}
{"index": 1194, "name": "curses.isendwin", "module": "curses", "doc": ["Return True if endwin() has been called (that is, the  curses library has been deinitialized)."]}
{"index": 1195, "name": "curses.keyname", "module": "curses", "doc": ["Return the name of the key numbered k as a bytes object.", "The name of a key generating printable ASCII character is the key\u2019s character.", "The name of a control-key combination is a two-byte bytes object consisting of a caret (b'^') followed by the corresponding printable ASCII character.", "The name of an alt-key combination (128\u2013255) is a bytes object consisting of the prefix b'M-' followed by the name of the corresponding ASCII character."]}
{"index": 1196, "name": "curses.killchar", "module": "curses", "doc": ["Return the user\u2019s current line kill character as a one-byte bytes object.", "Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself."]}
{"index": 1197, "name": "curses.longname", "module": "curses", "doc": ["Return a bytes object containing the terminfo long name field describing the current terminal.", "The maximum length of a verbose description is 128 characters.", "It is defined only after the call to initscr()."]}
{"index": 1198, "name": "curses.meta", "module": "curses", "doc": ["If flag is True, allow 8-bit characters to be input.", "If flag is False,  allow only 7-bit chars."]}
{"index": 1199, "name": "curses.mouseinterval", "module": "curses", "doc": ["Set the maximum time in milliseconds that can elapse between press and release events in order for them to be recognized as a click, and return the previous interval value.", "The default value is 200 msec, or one fifth of a second."]}
{"index": 1200, "name": "curses.mousemask", "module": "curses", "doc": ["Set the mouse events to be reported, and return a tuple (availmask, oldmask).", "availmask indicates which of the specified mouse events can be reported; on complete failure it returns 0.  oldmask is the previous value of the given window\u2019s mouse event mask.", "If this function is never called, no mouse events are ever reported."]}
{"index": 1201, "name": "curses.napms", "module": "curses", "doc": ["Sleep for ms milliseconds."]}
{"index": 1202, "name": "curses.newpad", "module": "curses", "doc": ["Create and return a pointer to a new pad data structure with the given number of lines and columns.", "Return a pad as a window object.", "A pad is like a window, except that it is not restricted by the screen size, and is not necessarily associated with a particular part of the screen.", "Pads can be used when a large window is needed, and only a part of the window will be on the screen at one time.", "Automatic refreshes of pads (such as from scrolling or echoing of input) do not occur.", "The refresh() and noutrefresh() methods of a pad require 6 arguments to specify the part of the pad to be displayed and the location on the screen to be used for the display.", "The arguments are pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol; the p arguments refer to the upper left corner of the pad region to be displayed and the s arguments define a clipping box on the screen within which the pad region is to be displayed."]}
{"index": 1203, "name": "curses.newwin", "module": "curses", "doc": ["Return a new window, whose left-upper corner is at  (begin_y, begin_x), and whose height/width is  nlines/ncols.", "By default, the window will extend from the  specified position to the lower right corner of the screen."]}
{"index": 1204, "name": "curses.nl", "module": "curses", "doc": ["Enter newline mode.", "This mode translates the return key into newline on input, and translates newline into return and line-feed on output.", "Newline mode is initially on."]}
{"index": 1205, "name": "curses.nocbreak", "module": "curses", "doc": ["Leave cbreak mode.", "Return to normal \u201ccooked\u201d mode with line buffering."]}
{"index": 1206, "name": "curses.noecho", "module": "curses", "doc": ["Leave echo mode.", "Echoing of input characters is turned off."]}
{"index": 1207, "name": "curses.nonl", "module": "curses", "doc": ["Leave newline mode.", "Disable translation of return into newline on input, and disable low-level translation of newline into newline/return on output (but this does not change the behavior of addch('\\n'), which always does the equivalent of return and line feed on the virtual screen).", "With translation off, curses can sometimes speed up vertical motion a little; also, it will be able to detect the return key on input."]}
{"index": 1208, "name": "curses.noqiflush", "module": "curses", "doc": ["When the noqiflush() routine is used, normal flush of input and output queues associated with the INTR, QUIT and SUSP characters will not be done.", "You may want to call noqiflush() in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits."]}
{"index": 1209, "name": "curses.noraw", "module": "curses", "doc": ["Leave raw mode.", "Return to normal \u201ccooked\u201d mode with line buffering."]}
{"index": 1210, "name": "curses.pair_content", "module": "curses", "doc": ["Return a tuple (fg, bg) containing the colors for the requested color pair.", "The value of pair_number must be between 1 and COLOR_PAIRS - 1."]}
{"index": 1211, "name": "curses.pair_number", "module": "curses", "doc": ["Return the number of the color-pair set by the attribute value attr.", "color_pair() is the counterpart to this function."]}
{"index": 1212, "name": "curses.putp", "module": "curses", "doc": ["Equivalent to tputs(str, 1, putchar); emit the value of a specified terminfo capability for the current terminal.", "Note that the output of putp() always goes to standard output."]}
{"index": 1213, "name": "curses.qiflush", "module": "curses", "doc": ["If flag is False, the effect is the same as calling noqiflush().", "If flag is True, or no argument is provided, the queues will be flushed when these control characters are read."]}
{"index": 1214, "name": "curses.raw", "module": "curses", "doc": ["Enter raw mode.", "In raw mode, normal line buffering and  processing of interrupt, quit, suspend, and flow control keys are turned off; characters are presented to curses input functions one by one."]}
{"index": 1215, "name": "curses.reset_prog_mode", "module": "curses", "doc": ["Restore the  terminal  to \u201cprogram\u201d mode, as previously saved  by def_prog_mode()."]}
{"index": 1216, "name": "curses.reset_shell_mode", "module": "curses", "doc": ["Restore the  terminal  to \u201cshell\u201d mode, as previously saved  by def_shell_mode()."]}
{"index": 1217, "name": "curses.resetty", "module": "curses", "doc": ["Restore the state of the terminal modes to what it was at the last call to savetty()."]}
{"index": 1218, "name": "curses.resize_term", "module": "curses", "doc": ["Backend function used by resizeterm(), performing most of the work; when resizing the windows, resize_term() blank-fills the areas that are extended.", "The calling application should fill in these areas with appropriate data.", "The resize_term() function attempts to resize all windows.", "However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application."]}
{"index": 1219, "name": "curses.resizeterm", "module": "curses", "doc": ["Resize the standard and current windows to the specified dimensions, and adjusts other bookkeeping data used by the curses library that record the window dimensions (in particular the SIGWINCH handler)."]}
{"index": 1220, "name": "curses.savetty", "module": "curses", "doc": ["Save the current state of the terminal modes in a buffer, usable by resetty()."]}
{"index": 1221, "name": "curses.setsyx", "module": "curses", "doc": ["Set the virtual screen cursor to y, x.", "If y and x are both -1, then leaveok is set True."]}
{"index": 1222, "name": "curses.setupterm", "module": "curses", "doc": ["Initialize the terminal.", "term is a string giving the terminal name, or None; if omitted or None, the value of the TERM environment variable will be used.", "fd is the file descriptor to which any initialization sequences will be sent; if not supplied or -1, the file descriptor for sys.stdout will be used."]}
{"index": 1223, "name": "curses.start_color", "module": "curses", "doc": ["Must be called if the programmer wants to use colors, and before any other color manipulation routine is called.", "It is good practice to call this routine right after initscr().", "start_color() initializes eight basic colors (black, red,  green, yellow, blue, magenta, cyan, and white), and two global variables in the curses module, COLORS and COLOR_PAIRS, containing the maximum number of colors and color-pairs the terminal can support.", "It also restores the colors on the terminal to the values they had when the terminal was just turned on."]}
{"index": 1224, "name": "curses.termattrs", "module": "curses", "doc": ["Return a logical OR of all video attributes supported by the terminal.", "This information is useful when a curses program needs complete control over the appearance of the screen."]}
{"index": 1225, "name": "curses.termname", "module": "curses", "doc": ["Return the value of the environment variable TERM, as a bytes object, truncated to 14 characters."]}
{"index": 1226, "name": "curses.tigetflag", "module": "curses", "doc": ["Return the value of the Boolean capability corresponding to the terminfo capability name capname as an integer.", "Return the value -1 if capname is not a Boolean capability, or 0 if it is canceled or absent from the terminal description."]}
{"index": 1227, "name": "curses.tigetnum", "module": "curses", "doc": ["Return the value of the numeric capability corresponding to the terminfo capability name capname as an integer.", "Return the value -2 if capname is not a numeric capability, or -1 if it is canceled or absent from the terminal description."]}
{"index": 1228, "name": "curses.tigetstr", "module": "curses", "doc": ["Return the value of the string capability corresponding to the terminfo capability name capname as a bytes object.", "Return None if capname is not a terminfo \u201cstring capability\u201d, or is canceled or absent from the terminal description."]}
{"index": 1229, "name": "curses.tparm", "module": "curses", "doc": ["Instantiate the bytes object str with the supplied parameters, where str should be a parameterized string obtained from the terminfo database.", "E.g.", "tparm(tigetstr(\"cup\"), 5, 3) could result in b'\\033[6;4H', the exact result depending on terminal type."]}
{"index": 1230, "name": "curses.typeahead", "module": "curses", "doc": ["Specify that the file descriptor fd be used for typeahead checking.", "If fd is -1, then no typeahead checking is done.", "The curses library does \u201cline-breakout optimization\u201d by looking for typeahead periodically while updating the screen.", "If input is found, and it is coming from a tty, the current update is postponed until refresh or doupdate is called again, allowing faster response to commands typed in advance.", "This function allows specifying a different file descriptor for typeahead checking."]}
{"index": 1231, "name": "curses.unctrl", "module": "curses", "doc": ["Return a bytes object which is a printable representation of the character ch.", "Control characters are represented as a caret followed by the character, for example as b'^C'.", "Printing characters are left as they are."]}
{"index": 1232, "name": "curses.ungetch", "module": "curses", "doc": ["Push ch so the next getch() will return it."]}
{"index": 1233, "name": "curses.update_lines_cols", "module": "curses", "doc": ["Update LINES and COLS.", "Useful for detecting manual screen resize."]}
{"index": 1234, "name": "curses.unget_wch", "module": "curses", "doc": ["Push ch so the next get_wch() will return it."]}
{"index": 1235, "name": "curses.ungetmouse", "module": "curses", "doc": ["Push a KEY_MOUSE event onto the input queue, associating the given state data with it."]}
{"index": 1236, "name": "curses.use_env", "module": "curses", "doc": ["If used, this function should be called before initscr() or newterm are called.", "When flag is False, the values of lines and columns specified in the terminfo database will be used, even if environment variables LINES and COLUMNS (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if LINES and COLUMNS are not set)."]}
{"index": 1237, "name": "curses.use_default_colors", "module": "curses", "doc": ["Allow use of default values for colors on terminals supporting this feature.", "Use this to support transparency in your application.", "The default color is assigned to the color number -1.", "After calling this function,  init_pair(x, curses.COLOR_RED, -1) initializes, for instance, color pair x to a red foreground color on the default background."]}
{"index": 1238, "name": "curses.wrapper", "module": "curses", "doc": ["Initialize curses and call another callable object, func, which should be the rest of your curses-using application.", "If the application raises an exception, this function will restore the terminal to a sane state before re-raising the exception and generating a traceback.", "The callable object func is then passed the main window \u2018stdscr\u2019 as its first argument, followed by any other arguments passed to wrapper().", "Before calling func, wrapper() turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support.", "On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad."]}
{"index": 1239, "name": "curses.window.addch", "module": "curses", "doc": ["Paint character ch at (y, x) with attributes attr, overwriting any character previously painter at that location.", "By default, the character position and attributes are the current settings for the window object."]}
{"index": 1240, "name": "curses.window.addnstr", "module": "curses", "doc": ["Paint at most n characters of the character string str at (y, x) with attributes attr, overwriting anything previously on the display."]}
{"index": 1241, "name": "curses.window.addstr", "module": "curses", "doc": ["Paint the character string str at (y, x) with attributes attr, overwriting anything previously on the display."]}
{"index": 1242, "name": "curses.window.attroff", "module": "curses", "doc": ["Remove attribute attr from the \u201cbackground\u201d set applied to all writes to the current window."]}
{"index": 1243, "name": "curses.window.attron", "module": "curses", "doc": ["Add attribute attr from the \u201cbackground\u201d set applied to all writes to the current window."]}
{"index": 1244, "name": "curses.window.attrset", "module": "curses", "doc": ["Set the \u201cbackground\u201d set of attributes to attr.", "This set is initially 0 (no attributes)."]}
{"index": 1245, "name": "curses.window.bkgd", "module": "curses", "doc": ["Set the background property of the window to the character ch, with attributes attr.", "The change is then applied to every character position in that window:"]}
{"index": 1246, "name": "curses.window.bkgdset", "module": "curses", "doc": ["Set the window\u2019s background.", "A window\u2019s background consists of a character and any combination of attributes.", "The attribute part of the background is combined (OR\u2019ed) with all non-blank characters that are written into the window.", "Both the character and attribute parts of the background are combined with the blank characters.", "The background becomes a property of the character and moves with the character through any scrolling and insert/delete line/character operations."]}
{"index": 1247, "name": "curses.window.border", "module": "curses", "doc": ["Draw a border around the edges of the window.", "Each parameter specifies  the character to use for a specific part of the border; see the table below for more details."]}
{"index": 1248, "name": "curses.window.box", "module": "curses", "doc": ["Similar to border(), but both ls and rs are vertch and both ts and bs are horch.", "The default corner characters are always used by this function."]}
{"index": 1249, "name": "curses.window.chgat", "module": "curses", "doc": ["Set the attributes of num characters at the current cursor position, or at position (y, x) if supplied.", "If num is not given or is -1, the attribute will be set on all the characters to the end of the line.", "This function moves cursor to position (y, x) if supplied.", "The changed line will be touched using the touchline() method so that the contents will be redisplayed by the next window refresh."]}
{"index": 1250, "name": "curses.window.clear", "module": "curses", "doc": ["Like erase(), but also cause the whole window to be repainted upon next call to refresh()."]}
{"index": 1251, "name": "curses.window.clearok", "module": "curses", "doc": ["If flag is True, the next call to refresh() will clear the window completely."]}
{"index": 1252, "name": "curses.window.clrtobot", "module": "curses", "doc": ["Erase from cursor to the end of the window: all lines below the cursor are deleted, and then the equivalent of clrtoeol() is performed."]}
{"index": 1253, "name": "curses.window.clrtoeol", "module": "curses", "doc": ["Erase from cursor to the end of the line."]}
{"index": 1254, "name": "curses.window.cursyncup", "module": "curses", "doc": ["Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window."]}
{"index": 1255, "name": "curses.window.delch", "module": "curses", "doc": ["Delete any character at (y, x)."]}
{"index": 1256, "name": "curses.window.deleteln", "module": "curses", "doc": ["Delete the line under the cursor.", "All following lines are moved up by one line."]}
{"index": 1257, "name": "curses.window.derwin", "module": "curses", "doc": ["An abbreviation for \u201cderive window\u201d, derwin() is the same as calling subwin(), except that begin_y and begin_x are relative to the origin of the window, rather than relative to the entire screen.", "Return a window object for the derived window."]}
{"index": 1258, "name": "curses.window.echochar", "module": "curses", "doc": ["Add character ch with attribute attr, and immediately  call refresh() on the window."]}
{"index": 1259, "name": "curses.window.enclose", "module": "curses", "doc": ["Test whether the given pair of screen-relative character-cell coordinates are enclosed by the given window, returning True or False.", "It is useful for determining what subset of the screen windows enclose the location of a mouse event."]}
{"index": 1260, "name": "curses.window.encoding", "module": "curses", "doc": ["Encoding used to encode method arguments (Unicode strings and characters).", "The encoding attribute is inherited from the parent window when a subwindow is created, for example with window.subwin().", "By default, the locale encoding is used (see locale.getpreferredencoding())."]}
{"index": 1261, "name": "curses.window.erase", "module": "curses", "doc": ["Clear the window."]}
{"index": 1262, "name": "curses.window.getbegyx", "module": "curses", "doc": ["Return a tuple (y, x) of co-ordinates of upper-left corner."]}
{"index": 1263, "name": "curses.window.getbkgd", "module": "curses", "doc": ["Return the given window\u2019s current background character/attribute pair."]}
{"index": 1264, "name": "curses.window.getch", "module": "curses", "doc": ["Get a character.", "Note that the integer returned does not have to be in ASCII range: function keys, keypad keys and so on are represented by numbers higher than 255.", "In no-delay mode, return -1 if there is no input, otherwise wait until a key is pressed."]}
{"index": 1265, "name": "curses.window.get_wch", "module": "curses", "doc": ["Get a wide character.", "Return a character for most keys, or an integer for function keys, keypad keys, and other special keys.", "In no-delay mode, raise an exception if there is no input."]}
{"index": 1266, "name": "curses.window.getkey", "module": "curses", "doc": ["Get a character, returning a string instead of an integer, as getch() does.", "Function keys, keypad keys and other special keys return a multibyte string containing the key name.", "In no-delay mode, raise an exception if there is no input."]}
{"index": 1267, "name": "curses.window.getmaxyx", "module": "curses", "doc": ["Return a tuple (y, x) of the height and width of the window."]}
{"index": 1268, "name": "curses.window.getparyx", "module": "curses", "doc": ["Return the beginning coordinates of this window relative to its parent window as a tuple (y, x).", "Return (-1, -1) if this window has no parent."]}
{"index": 1269, "name": "curses.window.getstr", "module": "curses", "doc": ["Read a bytes object from the user, with primitive line editing capacity."]}
{"index": 1270, "name": "curses.window.getyx", "module": "curses", "doc": ["Return a tuple (y, x) of current cursor position  relative to the window\u2019s upper-left corner."]}
{"index": 1271, "name": "curses.window.hline", "module": "curses", "doc": ["Display a horizontal line starting at (y, x) with length n consisting of the character ch."]}
{"index": 1272, "name": "curses.window.idcok", "module": "curses", "doc": ["If flag is False, curses no longer considers using the hardware insert/delete character feature of the terminal; if flag is True, use of character insertion and deletion is enabled.", "When curses is first initialized, use of character insert/delete is enabled by default."]}
{"index": 1273, "name": "curses.window.idlok", "module": "curses", "doc": ["If flag is True, curses will try and use hardware line editing facilities.", "Otherwise, line insertion/deletion are disabled."]}
{"index": 1274, "name": "curses.window.immedok", "module": "curses", "doc": ["If flag is True, any change in the window image automatically causes the window to be refreshed; you no longer have to call refresh() yourself.", "However, it may degrade performance considerably, due to repeated calls to wrefresh.", "This option is disabled by default."]}
{"index": 1275, "name": "curses.window.inch", "module": "curses", "doc": ["Return the character at the given position in the window.", "The bottom 8 bits are the character proper, and upper bits are the attributes."]}
{"index": 1276, "name": "curses.window.insch", "module": "curses", "doc": ["Paint character ch at (y, x) with attributes attr, moving the line from position x right by one character."]}
{"index": 1277, "name": "curses.window.insdelln", "module": "curses", "doc": ["Insert nlines lines into the specified window above the current line.", "The nlines bottom lines are lost.", "For negative nlines, delete nlines lines starting with the one under the cursor, and move the remaining lines up.", "The bottom nlines lines are cleared.", "The current cursor position remains the same."]}
{"index": 1278, "name": "curses.window.insertln", "module": "curses", "doc": ["Insert a blank line under the cursor.", "All following lines are moved down by one line."]}
{"index": 1279, "name": "curses.window.insnstr", "module": "curses", "doc": ["Insert a character string (as many characters as will fit on the line) before the character under the cursor, up to n characters.", "If n is zero or negative, the entire string is inserted.", "All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost.", "The cursor position does not change (after moving to y, x, if specified)."]}
{"index": 1280, "name": "curses.window.insstr", "module": "curses", "doc": ["Insert a character string (as many characters as will fit on the line) before the character under the cursor.", "All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost.", "The cursor position does not change (after moving to y, x, if specified)."]}
{"index": 1281, "name": "curses.window.instr", "module": "curses", "doc": ["Return a bytes object of characters, extracted from the window starting at the current cursor position, or at y, x if specified.", "Attributes are stripped from the characters.", "If n is specified, instr() returns a string at most n characters long (exclusive of the trailing NUL)."]}
{"index": 1282, "name": "curses.window.is_linetouched", "module": "curses", "doc": ["Return True if the specified line was modified since the last call to refresh(); otherwise return False.", "Raise a curses.error exception if line is not valid for the given window."]}
{"index": 1283, "name": "curses.window.is_wintouched", "module": "curses", "doc": ["Return True if the specified window was modified since the last call to refresh(); otherwise return False."]}
{"index": 1284, "name": "curses.window.keypad", "module": "curses", "doc": ["If flag is True, escape sequences generated by some keys (keypad,  function keys) will be interpreted by curses.", "If flag is False, escape sequences will be left as is in the input stream."]}
{"index": 1285, "name": "curses.window.leaveok", "module": "curses", "doc": ["If flag is True, cursor is left where it is on update, instead of being at \u201ccursor position.\u201d  This reduces cursor movement where possible.", "If possible the cursor will be made invisible.", "If flag is False, cursor will always be at \u201ccursor position\u201d after an update."]}
{"index": 1286, "name": "curses.window.move", "module": "curses", "doc": ["Move cursor to (new_y, new_x)."]}
{"index": 1287, "name": "curses.window.mvderwin", "module": "curses", "doc": ["Move the window inside its parent window.", "The screen-relative parameters of the window are not changed.", "This routine is used to display different parts of the parent window at the same physical position on the screen."]}
{"index": 1288, "name": "curses.window.mvwin", "module": "curses", "doc": ["Move the window so its upper-left corner is at (new_y, new_x)."]}
{"index": 1289, "name": "curses.window.nodelay", "module": "curses", "doc": ["If flag is True, getch() will be non-blocking."]}
{"index": 1290, "name": "curses.window.notimeout", "module": "curses", "doc": ["If flag is True, escape sequences will not be timed out.", "If flag is False, after a few milliseconds, an escape sequence will not be interpreted, and will be left in the input stream as is."]}
{"index": 1291, "name": "curses.window.noutrefresh", "module": "curses", "doc": ["Mark for refresh but wait.", "This function updates the data structure representing the desired state of the window, but does not force an update of the physical screen.", "To accomplish that, call  doupdate()."]}
{"index": 1292, "name": "curses.window.overlay", "module": "curses", "doc": ["Overlay the window on top of destwin.", "The windows need not be the same size, only the overlapping region is copied.", "This copy is non-destructive, which means that the current background character does not overwrite the old contents of destwin.", "To get fine-grained control over the copied region, the second form of overlay() can be used.", "sminrow and smincol are the upper-left coordinates of the source window, and the other variables mark a rectangle in the destination window."]}
{"index": 1293, "name": "curses.window.overwrite", "module": "curses", "doc": ["Overwrite the window on top of destwin.", "The windows need not be the same size, in which case only the overlapping region is copied.", "This copy is destructive, which means that the current background character overwrites the old contents of destwin.", "To get fine-grained control over the copied region, the second form of overwrite() can be used.", "sminrow and smincol are the upper-left coordinates of the source window, the other variables mark a rectangle in the destination window."]}
{"index": 1294, "name": "curses.window.putwin", "module": "curses", "doc": ["Write all data associated with the window into the provided file object.", "This information can be later retrieved using the getwin() function."]}
{"index": 1295, "name": "curses.window.redrawln", "module": "curses", "doc": ["Indicate that the num screen lines, starting at line beg, are corrupted and should be completely redrawn on the next refresh() call."]}
{"index": 1296, "name": "curses.window.redrawwin", "module": "curses", "doc": ["Touch the entire window, causing it to be completely redrawn on the next refresh() call."]}
{"index": 1297, "name": "curses.window.refresh", "module": "curses", "doc": ["Update the display immediately (sync actual screen with previous drawing/deleting methods).", "The 6 optional arguments can only be specified when the window is a pad created with newpad().", "The additional parameters are needed to indicate what part of the pad and screen are involved.", "pminrow and pmincol specify the upper left-hand corner of the rectangle to be displayed in the pad.", "sminrow, smincol, smaxrow, and smaxcol specify the edges of the rectangle to be displayed on the screen.", "The lower right-hand corner of the rectangle to be displayed in the pad is calculated from the screen coordinates, since the rectangles must be the same size.", "Both rectangles must be entirely contained within their respective structures.", "Negative values of pminrow, pmincol, sminrow, or smincol are treated as if they were zero."]}
{"index": 1298, "name": "curses.window.resize", "module": "curses", "doc": ["Reallocate storage for a curses window to adjust its dimensions to the specified values.", "If either dimension is larger than the current values, the window\u2019s data is filled with blanks that have the current background rendition (as set by bkgdset()) merged into them."]}
{"index": 1299, "name": "curses.window.scroll", "module": "curses", "doc": ["Scroll the screen or scrolling region upward by lines lines."]}
{"index": 1300, "name": "curses.window.scrollok", "module": "curses", "doc": ["Control what happens when the cursor of a window is moved off the edge of the window or scrolling region, either as a result of a newline action on the bottom line, or typing the last character of the last line.", "If flag is False, the cursor is left on the bottom line.", "If flag is True, the window is scrolled up one line.", "Note that in order to get the physical scrolling effect on the terminal, it is also necessary to call idlok()."]}
{"index": 1301, "name": "curses.window.setscrreg", "module": "curses", "doc": ["Set the scrolling region from line top to line bottom.", "All scrolling actions will take place in this region."]}
{"index": 1302, "name": "curses.window.standend", "module": "curses", "doc": ["Turn off the standout attribute.", "On some terminals this has the side effect of turning off all attributes."]}
{"index": 1303, "name": "curses.window.standout", "module": "curses", "doc": ["Turn on attribute A_STANDOUT."]}
{"index": 1304, "name": "curses.window.subpad", "module": "curses", "doc": ["Return a sub-window, whose upper-left corner is at (begin_y, begin_x), and whose width/height is ncols/nlines."]}
{"index": 1305, "name": "curses.window.subwin", "module": "curses", "doc": ["Return a sub-window, whose upper-left corner is at (begin_y, begin_x), and whose width/height is ncols/nlines.", "By default, the sub-window will extend from the specified position to the lower right corner of the window."]}
{"index": 1306, "name": "curses.window.syncdown", "module": "curses", "doc": ["Touch each location in the window that has been touched in any of its ancestor windows.", "This routine is called by refresh(), so it should almost never be necessary to call it manually."]}
{"index": 1307, "name": "curses.window.syncok", "module": "curses", "doc": ["If flag is True, then syncup() is called automatically whenever there is a change in the window."]}
{"index": 1308, "name": "curses.window.syncup", "module": "curses", "doc": ["Touch all locations in ancestors of the window that have been changed in  the window."]}
{"index": 1309, "name": "curses.window.timeout", "module": "curses", "doc": ["Set blocking or non-blocking read behavior for the window.", "If delay is negative, blocking read is used (which will wait indefinitely for input).", "If delay is zero, then non-blocking read is used, and getch() will return -1 if no input is waiting.", "If delay is positive, then getch() will block for delay milliseconds, and return -1 if there is still no input at the end of that time."]}
{"index": 1310, "name": "curses.window.touchline", "module": "curses", "doc": ["Pretend count lines have been changed, starting with line start.", "If changed is supplied, it specifies whether the affected lines are marked as having been changed (changed=True) or unchanged (changed=False)."]}
{"index": 1311, "name": "curses.window.touchwin", "module": "curses", "doc": ["Pretend the whole window has been changed, for purposes of drawing optimizations."]}
{"index": 1312, "name": "curses.window.untouchwin", "module": "curses", "doc": ["Mark all lines in  the  window  as unchanged since the last call to refresh()."]}
{"index": 1313, "name": "curses.window.vline", "module": "curses", "doc": ["Display a vertical line starting at (y, x) with length n consisting of the character ch."]}
{"index": 1314, "name": "curses.ERR", "module": "curses", "doc": ["Some curses routines  that  return  an integer, such as getch(), return ERR upon failure."]}
{"index": 1315, "name": "curses.OK", "module": "curses", "doc": ["Some curses routines  that  return  an integer, such as  napms(), return OK upon success."]}
{"index": 1316, "name": "curses.version", "module": "curses", "doc": ["A bytes object representing the current version of the module.", "Also available as __version__."]}
{"index": 1317, "name": "curses.textpad.rectangle", "module": "curses", "doc": ["Draw a rectangle.", "The first argument must be a window object; the remaining arguments are coordinates relative to that window.", "The second and third arguments are the y and x coordinates of the upper left hand corner of the rectangle to be drawn; the fourth and fifth arguments are the y and x coordinates of the lower right hand corner.", "The rectangle will be drawn using VT100/IBM PC forms characters on terminals that make this possible (including xterm and most other software terminal emulators).", "Otherwise it will be drawn with ASCII  dashes, vertical bars, and plus signs."]}
{"index": 1318, "name": "curses.textpad.Textbox", "module": "curses", "doc": ["Return a textbox widget object.", "The win argument should be a curses window object in which the textbox is to be contained.", "The edit cursor of the textbox is initially located at the upper left hand corner of the containing window, with coordinates (0, 0).", "The instance\u2019s stripspaces flag is initially on.", "Textbox objects have the following methods:"]}
{"index": 1319, "name": "curses.textpad.Textbox.edit", "module": "curses", "doc": ["This is the entry point you will normally use.", "It accepts editing keystrokes until one of the termination keystrokes is entered.", "If validator is supplied, it must be a function.", "It will be called for each keystroke entered with the keystroke as a parameter; command dispatch is done on the result.", "This method returns the window contents as a string; whether blanks in the window are included is affected by the stripspaces attribute."]}
{"index": 1320, "name": "curses.textpad.Textbox.do_command", "module": "curses", "doc": ["Process a single command keystroke.", "Here are the supported special keystrokes:", "Move operations do nothing if the cursor is at an edge where the movement is not possible.", "The following synonyms are supported where possible:", "All other keystrokes are treated as a command to insert the given character and move right (with line wrapping)."]}
{"index": 1321, "name": "curses.textpad.Textbox.gather", "module": "curses", "doc": ["Return the window contents as a string; whether blanks in the window are included is affected by the stripspaces member."]}
{"index": 1322, "name": "curses.textpad.Textbox.stripspaces", "module": "curses", "doc": ["This attribute is a flag which controls the interpretation of blanks in the window.", "When it is on, trailing blanks on each line are ignored; any cursor motion that would land the cursor on a trailing blank goes to the end of that line instead, and trailing blanks are stripped when the window contents are gathered."]}
{"index": 1323, "name": "curses.panel.bottom_panel", "module": "curses", "doc": ["Returns the bottom panel in the panel stack."]}
{"index": 1324, "name": "curses.panel.new_panel", "module": "curses", "doc": ["Returns a panel object, associating it with the given window win.", "Be aware that you need to keep the returned panel object referenced explicitly.", "If you don\u2019t, the panel object is garbage collected and removed from the panel stack."]}
{"index": 1325, "name": "curses.panel.top_panel", "module": "curses", "doc": ["Returns the top panel in the panel stack."]}
{"index": 1326, "name": "curses.panel.update_panels", "module": "curses", "doc": ["Updates the virtual screen after changes in the panel stack.", "This does not call curses.doupdate(), so you\u2019ll have to do this yourself."]}
{"index": 1327, "name": "curses.panel.Panel.above", "module": "curses", "doc": ["Returns the panel above the current panel."]}
{"index": 1328, "name": "curses.panel.Panel.below", "module": "curses", "doc": ["Returns the panel below the current panel."]}
{"index": 1329, "name": "curses.panel.Panel.bottom", "module": "curses", "doc": ["Push the panel to the bottom of the stack."]}
{"index": 1330, "name": "curses.panel.Panel.hidden", "module": "curses", "doc": ["Returns True if the panel is hidden (not visible), False otherwise."]}
{"index": 1331, "name": "curses.panel.Panel.hide", "module": "curses", "doc": ["Hide the panel.", "This does not delete the object, it just makes the window on screen invisible."]}
{"index": 1332, "name": "curses.panel.Panel.move", "module": "curses", "doc": ["Move the panel to the screen coordinates (y, x)."]}
{"index": 1333, "name": "curses.panel.Panel.replace", "module": "curses", "doc": ["Change the window associated with the panel to the window win."]}
{"index": 1334, "name": "curses.panel.Panel.set_userptr", "module": "curses", "doc": ["Set the panel\u2019s user pointer to obj.", "This is used to associate an arbitrary piece of data with the panel, and can be any Python object."]}
{"index": 1335, "name": "curses.panel.Panel.show", "module": "curses", "doc": ["Display the panel (which might have been hidden)."]}
{"index": 1336, "name": "curses.panel.Panel.top", "module": "curses", "doc": ["Push panel to the top of the stack."]}
{"index": 1337, "name": "curses.panel.Panel.userptr", "module": "curses", "doc": ["Returns the user pointer for the panel.", "This might be any Python object."]}
{"index": 1338, "name": "curses.panel.Panel.window", "module": "curses", "doc": ["Returns the window object associated with the panel."]}
{"index": 1339, "name": "dataclasses.dataclass", "module": "dataclasses", "doc": ["This function is a decorator that is used to add generated special methods to classes, as described below.", "The dataclass() decorator examines the class to find fields.", "A field is defined as class variable that has a type annotation.", "With two exceptions described below, nothing in dataclass() examines the type specified in the variable annotation.", "The order of the fields in all of the generated methods is the order in which they appear in the class definition.", "The dataclass() decorator will add various \u201cdunder\u201d methods to the class, described below.", "If any of the added methods already exist on the class, the behavior depends on the parameter, as documented below.", "The decorator returns the same class that is called on; no new class is created.", "If dataclass() is used just as a simple decorator with no parameters, it acts as if it has the default values documented in this signature.", "That is, these three uses of dataclass() are equivalent:", "The parameters to dataclass() are:", "fields may optionally specify a default value, using normal Python syntax:", "In this example, both a and b will be included in the added __init__() method, which will be defined as:", "TypeError will be raised if a field without a default value follows a field with a default value.", "This is true either when this occurs in a single class, or as a result of class inheritance."]}
{"index": 1340, "name": "dataclasses.field", "module": "dataclasses", "doc": ["For common and simple use cases, no other functionality is required.", "There are, however, some dataclass features that require additional per-field information.", "To satisfy this need for additional information, you can replace the default field value with a call to the provided field() function.", "For example:", "As shown above, the MISSING value is a sentinel object used to detect if the default and default_factory parameters are provided.", "This sentinel is used because None is a valid value for default.", "No code should directly use the MISSING value.", "The parameters to field() are:", "If the default value of a field is specified by a call to field(), then the class attribute for this field will be replaced by the specified default value.", "If no default is provided, then the class attribute will be deleted.", "The intent is that after the dataclass() decorator runs, the class attributes will all contain the default values for the fields, just as if the default value itself were specified.", "For example, after:", "The class attribute C.z will be 10, the class attribute C.t will be 20, and the class attributes C.x and C.y will not be set."]}
{"index": 1341, "name": "dataclasses.Field", "module": "dataclasses", "doc": ["Field objects describe each defined field.", "These objects are created internally, and are returned by the fields() module-level method (see below).", "Users should never instantiate a Field object directly.", "Its documented attributes are:", "Other attributes may exist, but they are private and must not be inspected or relied on."]}
{"index": 1342, "name": "dataclasses.fields", "module": "dataclasses", "doc": ["Returns a tuple of Field objects that define the fields for this dataclass.", "Accepts either a dataclass, or an instance of a dataclass.", "Raises TypeError if not passed a dataclass or instance of one.", "Does not return pseudo-fields which are ClassVar or InitVar."]}
{"index": 1343, "name": "dataclasses.asdict", "module": "dataclasses", "doc": ["Converts the dataclass instance to a dict (by using the factory function dict_factory).", "Each dataclass is converted to a dict of its fields, as name: value pairs.", "dataclasses, dicts, lists, and tuples are recursed into.", "For example:", "Raises TypeError if instance is not a dataclass instance."]}
{"index": 1344, "name": "dataclasses.astuple", "module": "dataclasses", "doc": ["Converts the dataclass instance to a tuple (by using the factory function tuple_factory).", "Each dataclass is converted to a tuple of its field values.", "dataclasses, dicts, lists, and tuples are recursed into.", "Continuing from the previous example:", "Raises TypeError if instance is not a dataclass instance."]}
{"index": 1345, "name": "dataclasses.make_dataclass", "module": "dataclasses", "doc": ["Creates a new dataclass with name cls_name, fields as defined in fields, base classes as given in bases, and initialized with a namespace as given in namespace.", "fields is an iterable whose elements are each either name, (name, type), or (name, type, Field).", "If just name is supplied, typing.Any is used for type.", "The values of init, repr, eq, order, unsafe_hash, and frozen have the same meaning as they do in dataclass().", "This function is not strictly required, because any Python mechanism for creating a new class with __annotations__ can then apply the dataclass() function to convert that class to a dataclass.", "This function is provided as a convenience.", "For example:", "Is equivalent to:"]}
{"index": 1346, "name": "dataclasses.replace", "module": "dataclasses", "doc": ["Creates a new object of the same type of instance, replacing fields with values from changes.", "If instance is not a Data Class, raises TypeError.", "If values in changes do not specify fields, raises TypeError.", "The newly returned object is created by calling the __init__() method of the dataclass.", "This ensures that __post_init__(), if present, is also called.", "Init-only variables without default values, if any exist, must be specified on the call to replace() so that they can be passed to __init__() and __post_init__().", "It is an error for changes to contain any fields that are defined as having init=False.", "A ValueError will be raised in this case.", "Be forewarned about how init=False fields work during a call to replace().", "They are not copied from the source object, but rather are initialized in __post_init__(), if they\u2019re initialized at all.", "It is expected that init=False fields will be rarely and judiciously used.", "If they are used, it might be wise to have alternate class constructors, or perhaps a custom replace() (or similarly named) method which handles instance copying."]}
{"index": 1347, "name": "dataclasses.is_dataclass", "module": "dataclasses", "doc": ["Returns True if its parameter is a dataclass or an instance of one, otherwise returns False.", "If you need to know if a class is an instance of a dataclass (and not a dataclass itself), then add a further check for not isinstance(obj, type):"]}
{"index": 1348, "name": "dataclasses.FrozenInstanceError", "module": "dataclasses", "doc": ["Raised when an implicitly defined __setattr__() or __delattr__() is called on a dataclass which was defined with frozen=True."]}
{"index": 1349, "name": "datetime.MINYEAR", "module": "datetime", "doc": ["The smallest year number allowed in a date or datetime object.", "MINYEAR is 1."]}
{"index": 1350, "name": "datetime.MAXYEAR", "module": "datetime", "doc": ["The largest year number allowed in a date or datetime object.", "MAXYEAR is 9999."]}
{"index": 1351, "name": "datetime.timedelta", "module": "datetime", "doc": ["All arguments are optional and default to 0.", "Arguments may be integers or floats, and may be positive or negative.", "Only days, seconds and microseconds are stored internally.", "Arguments are converted to those units:", "and days, seconds and microseconds are then normalized so that the representation is unique, with", "If any argument is a float and there are fractional microseconds, the fractional microseconds left over from all arguments are combined and their sum is rounded to the nearest microsecond using round-half-to-even tiebreaker.", "If no argument is a float, the conversion and normalization processes are exact (no information is lost).", "If the normalized value of days lies outside the indicated range, OverflowError is raised.", "Note that normalization of negative values may be surprising at first.", "For example,"]}
{"index": 1352, "name": "datetime.timedelta.min", "module": "datetime", "doc": ["The most negative timedelta object, timedelta(-999999999)."]}
{"index": 1353, "name": "datetime.timedelta.max", "module": "datetime", "doc": ["The most positive timedelta object, timedelta(days=999999999, hours=23, minutes=59, seconds=59, microseconds=999999)."]}
{"index": 1354, "name": "datetime.timedelta.resolution", "module": "datetime", "doc": ["The smallest possible difference between non-equal timedelta objects, timedelta(microseconds=1)."]}
{"index": 1355, "name": "datetime.timedelta.total_seconds", "module": "datetime", "doc": ["Return the total number of seconds contained in the duration.", "Equivalent to td / timedelta(seconds=1).", "For interval units other than seconds, use the division form directly (e.g.", "td / timedelta(microseconds=1)).", "Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy."]}
{"index": 1356, "name": "datetime.date", "module": "datetime", "doc": ["All arguments are required.", "Arguments must be integers in the following ranges:", "If an argument outside those ranges is given, ValueError is raised."]}
{"index": 1357, "name": "datetime.date.today", "module": "datetime", "doc": ["Return the current local date.", "This is equivalent to date.fromtimestamp(time.time())."]}
{"index": 1358, "name": "datetime.date.fromtimestamp", "module": "datetime", "doc": ["Return the local date corresponding to the POSIX timestamp, such as is returned by time.time().", "This may raise OverflowError, if the timestamp is out of the range of values supported by the platform C localtime() function, and OSError on localtime() failure.", "It\u2019s common for this to be restricted to years from 1970 through 2038.", "Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by fromtimestamp()."]}
{"index": 1359, "name": "datetime.date.fromordinal", "module": "datetime", "doc": ["Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.", "ValueError is raised unless 1 <= ordinal <= date.max.toordinal().", "For any date d, date.fromordinal(d.toordinal()) == d."]}
{"index": 1360, "name": "datetime.date.fromisoformat", "module": "datetime", "doc": ["Return a date corresponding to a date_string in the format emitted by date.isoformat().", "Specifically, this function supports strings in the format(s) YYYY-MM-DD."]}
{"index": 1361, "name": "datetime.date.min", "module": "datetime", "doc": ["The earliest representable date, date(MINYEAR, 1, 1)."]}
{"index": 1362, "name": "datetime.date.max", "module": "datetime", "doc": ["The latest representable date, date(MAXYEAR, 12, 31)."]}
{"index": 1363, "name": "datetime.date.resolution", "module": "datetime", "doc": ["The smallest possible difference between non-equal date objects, timedelta(days=1)."]}
{"index": 1364, "name": "datetime.date.year", "module": "datetime", "doc": ["Between MINYEAR and MAXYEAR inclusive."]}
{"index": 1365, "name": "datetime.date.month", "module": "datetime", "doc": ["Between 1 and 12 inclusive."]}
{"index": 1366, "name": "datetime.date.day", "module": "datetime", "doc": ["Between 1 and the number of days in the given month of the given year."]}
{"index": 1367, "name": "datetime.date.replace", "module": "datetime", "doc": ["Return a date with the same value, except for those parameters given new values by whichever keyword arguments are specified.", "For example, if d == date(2002, 12, 31), then d.replace(day=26) == date(2002, 12, 26)."]}
{"index": 1368, "name": "datetime.date.timetuple", "module": "datetime", "doc": ["Return a time.struct_time such as returned by time.localtime().", "The hours, minutes and seconds are 0, and the DST flag is -1. d.timetuple() is equivalent to time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1)), where yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1 is the day number within the current year starting with 1 for January 1st."]}
{"index": 1369, "name": "datetime.date.toordinal", "module": "datetime", "doc": ["Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1.", "For any date object d, date.fromordinal(d.toordinal()) == d."]}
{"index": 1370, "name": "datetime.date.weekday", "module": "datetime", "doc": ["Return the day of the week as an integer, where Monday is 0 and Sunday is 6.", "For example, date(2002, 12, 4).weekday() == 2, a Wednesday.", "See also isoweekday()."]}
{"index": 1371, "name": "datetime.date.isoweekday", "module": "datetime", "doc": ["Return the day of the week as an integer, where Monday is 1 and Sunday is 7.", "For example, date(2002, 12, 4).isoweekday() == 3, a Wednesday.", "See also weekday(), isocalendar()."]}
{"index": 1372, "name": "datetime.date.isocalendar", "module": "datetime", "doc": ["Return a 3-tuple, (ISO year, ISO week number, ISO weekday).", "The ISO calendar is a widely used variant of the Gregorian calendar.", "See https://www.staff.science.uu.nl/~gent0113/calendar/isocalendar.htm for a good explanation.", "The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday.", "The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday.", "This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year.", "For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that date(2003, 12, 29).isocalendar() == (2004, 1, 1) and date(2004, 1, 4).isocalendar() == (2004, 1, 7)."]}
{"index": 1373, "name": "datetime.date.isoformat", "module": "datetime", "doc": ["Return a string representing the date in ISO 8601 format, \u2018YYYY-MM-DD\u2019.", "For example, date(2002, 12, 4).isoformat() == '2002-12-04'."]}
{"index": 1374, "name": "datetime.date.__str__", "module": "datetime", "doc": ["For a date d, str(d) is equivalent to d.isoformat()."]}
{"index": 1375, "name": "datetime.date.ctime", "module": "datetime", "doc": ["Return a string representing the date, for example date(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'.", "d.ctime() is equivalent to time.ctime(time.mktime(d.timetuple())) on platforms where the native C ctime() function (which time.ctime() invokes, but which date.ctime() does not invoke) conforms to the C standard."]}
{"index": 1376, "name": "datetime.date.strftime", "module": "datetime", "doc": ["Return a string representing the date, controlled by an explicit format string.", "Format codes referring to hours, minutes or seconds will see 0 values.", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1377, "name": "datetime.date.__format__", "module": "datetime", "doc": ["Same as date.strftime().", "This makes it possible to specify a format string for a date object in formatted string literals and when using str.format().", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1378, "name": "datetime.datetime", "module": "datetime", "doc": ["The year, month and day arguments are required.", "tzinfo may be None, or an instance of a tzinfo subclass.", "The remaining arguments must be integers in the following ranges:", "If an argument outside those ranges is given, ValueError is raised."]}
{"index": 1379, "name": "datetime.datetime.today", "module": "datetime", "doc": ["Return the current local datetime, with tzinfo None.", "This is equivalent to datetime.fromtimestamp(time.time()).", "See also now(), fromtimestamp()."]}
{"index": 1380, "name": "datetime.datetime.now", "module": "datetime", "doc": ["Return the current local date and time.", "If optional argument tz is None or not specified, this is like today(), but, if possible, supplies more precision than can be gotten from going through a time.time() timestamp (for example, this may be possible on platforms supplying the C gettimeofday() function).", "If tz is not None, it must be an instance of a tzinfo subclass, and the current date and time are converted to tz\u2019s time zone.", "In this case the result is equivalent to tz.fromutc(datetime.utcnow().replace(tzinfo=tz)).", "See also today(), utcnow()."]}
{"index": 1381, "name": "datetime.datetime.utcnow", "module": "datetime", "doc": ["Return the current UTC date and time, with tzinfo None.", "This is like now(), but returns the current UTC date and time, as a naive datetime object.", "An aware current UTC datetime can be obtained by calling datetime.now(timezone.utc).", "See also now()."]}
{"index": 1382, "name": "datetime.datetime.fromtimestamp", "module": "datetime", "doc": ["Return the local date and time corresponding to the POSIX timestamp, such as is returned by time.time().", "If optional argument tz is None or not specified, the timestamp is converted to the platform\u2019s local date and time, and the returned datetime object is naive.", "If tz is not None, it must be an instance of a tzinfo subclass, and the timestamp is converted to tz\u2019s time zone.", "In this case the result is equivalent to tz.fromutc(datetime.utcfromtimestamp(timestamp).replace(tzinfo=tz)).", "fromtimestamp() may raise OverflowError, if the timestamp is out of the range of values supported by the platform C localtime() or gmtime() functions, and OSError on localtime() or gmtime() failure.", "It\u2019s common for this to be restricted to years in 1970 through 2038.", "Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by fromtimestamp(), and then it\u2019s possible to have two timestamps differing by a second that yield identical datetime objects.", "See also utcfromtimestamp()."]}
{"index": 1383, "name": "datetime.datetime.utcfromtimestamp", "module": "datetime", "doc": ["Return the UTC datetime corresponding to the POSIX timestamp, with tzinfo None.", "This may raise OverflowError, if the timestamp is out of the range of values supported by the platform C gmtime() function, and OSError on gmtime() failure.", "It\u2019s common for this to be restricted to years in 1970 through 2038.", "To get an aware datetime object, call fromtimestamp():", "On the POSIX compliant platforms, it is equivalent to the following expression:", "except the latter formula always supports the full years range: between MINYEAR and MAXYEAR inclusive."]}
{"index": 1384, "name": "datetime.datetime.fromordinal", "module": "datetime", "doc": ["Return the datetime corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.", "ValueError is raised unless 1 <= ordinal <= datetime.max.toordinal().", "The hour, minute, second and microsecond of the result are all 0, and tzinfo is None."]}
{"index": 1385, "name": "datetime.datetime.combine", "module": "datetime", "doc": ["Return a new datetime object whose date components are equal to the given date object\u2019s, and whose time components are equal to the given time object\u2019s.", "If the tzinfo argument is provided, its value is used to set the tzinfo attribute of the result, otherwise the tzinfo attribute of the time argument is used.", "For any datetime object d, d == datetime.combine(d.date(), d.time(), d.tzinfo).", "If date is a datetime object, its time components and tzinfo attributes are ignored."]}
{"index": 1386, "name": "datetime.datetime.fromisoformat", "module": "datetime", "doc": ["Return a datetime corresponding to a date_string in one of the formats emitted by date.isoformat() and datetime.isoformat().", "Specifically, this function supports strings in the format(s) YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]], where * can match any single character."]}
{"index": 1387, "name": "datetime.datetime.strptime", "module": "datetime", "doc": ["Return a datetime corresponding to date_string, parsed according to format.", "This is equivalent to datetime(*(time.strptime(date_string, format)[0:6])).", "ValueError is raised if the date_string and format can\u2019t be parsed by time.strptime() or if it returns a value which isn\u2019t a time tuple.", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1388, "name": "datetime.datetime.min", "module": "datetime", "doc": ["The earliest representable datetime, datetime(MINYEAR, 1, 1, tzinfo=None)."]}
{"index": 1389, "name": "datetime.datetime.max", "module": "datetime", "doc": ["The latest representable datetime, datetime(MAXYEAR, 12, 31, 23, 59, 59, 999999, tzinfo=None)."]}
{"index": 1390, "name": "datetime.datetime.resolution", "module": "datetime", "doc": ["The smallest possible difference between non-equal datetime objects, timedelta(microseconds=1)."]}
{"index": 1391, "name": "datetime.datetime.year", "module": "datetime", "doc": ["Between MINYEAR and MAXYEAR inclusive."]}
{"index": 1392, "name": "datetime.datetime.month", "module": "datetime", "doc": ["Between 1 and 12 inclusive."]}
{"index": 1393, "name": "datetime.datetime.day", "module": "datetime", "doc": ["Between 1 and the number of days in the given month of the given year."]}
{"index": 1394, "name": "datetime.datetime.hour", "module": "datetime", "doc": ["In range(24)."]}
{"index": 1395, "name": "datetime.datetime.minute", "module": "datetime", "doc": ["In range(60)."]}
{"index": 1396, "name": "datetime.datetime.second", "module": "datetime", "doc": ["In range(60)."]}
{"index": 1397, "name": "datetime.datetime.microsecond", "module": "datetime", "doc": ["In range(1000000)."]}
{"index": 1398, "name": "datetime.datetime.tzinfo", "module": "datetime", "doc": ["The object passed as the tzinfo argument to the datetime constructor, or None if none was passed."]}
{"index": 1399, "name": "datetime.datetime.fold", "module": "datetime", "doc": ["In [0, 1].", "Used to disambiguate wall times during a repeated interval.", "(A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.)", "The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation."]}
{"index": 1400, "name": "datetime.datetime.date", "module": "datetime", "doc": ["Return date object with same year, month and day."]}
{"index": 1401, "name": "datetime.datetime.time", "module": "datetime", "doc": ["Return time object with same hour, minute, second, microsecond and fold.", "tzinfo is None.", "See also method timetz()."]}
{"index": 1402, "name": "datetime.datetime.timetz", "module": "datetime", "doc": ["Return time object with same hour, minute, second, microsecond, fold, and tzinfo attributes.", "See also method time()."]}
{"index": 1403, "name": "datetime.datetime.replace", "module": "datetime", "doc": ["Return a datetime with the same attributes, except for those attributes given new values by whichever keyword arguments are specified.", "Note that tzinfo=None can be specified to create a naive datetime from an aware datetime with no conversion of date and time data."]}
{"index": 1404, "name": "datetime.datetime.astimezone", "module": "datetime", "doc": ["Return a datetime object with new tzinfo attribute tz, adjusting the date and time data so the result is the same UTC time as self, but in tz\u2019s local time.", "If provided, tz must be an instance of a tzinfo subclass, and its utcoffset() and dst() methods must not return None.", "If self is naive, it is presumed to represent time in the system timezone.", "If called without arguments (or with tz=None) the system local timezone is assumed for the target timezone.", "The .tzinfo attribute of the converted datetime instance will be set to an instance of timezone with the zone name and offset obtained from the OS.", "If self.tzinfo is tz, self.astimezone(tz) is equal to self:  no adjustment of date or time data is performed.", "Else the result is local time in the timezone tz, representing the same UTC time as self:  after astz = dt.astimezone(tz), astz - astz.utcoffset() will have the same date and time data as dt - dt.utcoffset().", "If you merely want to attach a time zone object tz to a datetime dt without adjustment of date and time data, use dt.replace(tzinfo=tz).", "If you merely want to remove the time zone object from an aware datetime dt without conversion of date and time data, use dt.replace(tzinfo=None).", "Note that the default tzinfo.fromutc() method can be overridden in a tzinfo subclass to affect the result returned by astimezone().", "Ignoring error cases, astimezone() acts like:"]}
{"index": 1405, "name": "datetime.datetime.utcoffset", "module": "datetime", "doc": ["If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(self), and raises an exception if the latter doesn\u2019t return None or a timedelta object with magnitude less than one day."]}
{"index": 1406, "name": "datetime.datetime.dst", "module": "datetime", "doc": ["If tzinfo is None, returns None, else returns self.tzinfo.dst(self), and raises an exception if the latter doesn\u2019t return None or a timedelta object with magnitude less than one day."]}
{"index": 1407, "name": "datetime.datetime.tzname", "module": "datetime", "doc": ["If tzinfo is None, returns None, else returns self.tzinfo.tzname(self), raises an exception if the latter doesn\u2019t return None or a string object,"]}
{"index": 1408, "name": "datetime.datetime.timetuple", "module": "datetime", "doc": ["Return a time.struct_time such as returned by time.localtime().", "d.timetuple() is equivalent to time.struct_time((d.year, d.month, d.day, d.hour, d.minute, d.second, d.weekday(), yday, dst)), where yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1 is the day number within the current year starting with 1 for January 1st.", "The tm_isdst flag of the result is set according to the dst() method: tzinfo is None or dst() returns None, tm_isdst is set to -1; else if dst() returns a non-zero value, tm_isdst is set to 1; else tm_isdst is set to 0."]}
{"index": 1409, "name": "datetime.datetime.utctimetuple", "module": "datetime", "doc": ["If datetime instance d is naive, this is the same as d.timetuple() except that tm_isdst is forced to 0 regardless of what d.dst() returns.", "DST is never in effect for a UTC time.", "If d is aware, d is normalized to UTC time, by subtracting d.utcoffset(), and a time.struct_time for the normalized time is returned.", "tm_isdst is forced to 0.", "Note that an OverflowError may be raised if d.year was MINYEAR or MAXYEAR and UTC adjustment spills over a year boundary."]}
{"index": 1410, "name": "datetime.datetime.toordinal", "module": "datetime", "doc": ["Return the proleptic Gregorian ordinal of the date.", "The same as self.date().toordinal()."]}
{"index": 1411, "name": "datetime.datetime.timestamp", "module": "datetime", "doc": ["Return POSIX timestamp corresponding to the datetime instance.", "The return value is a float similar to that returned by time.time().", "Naive datetime instances are assumed to represent local time and this method relies on the platform C mktime() function to perform the conversion.", "Since datetime supports wider range of values than mktime() on many platforms, this method may raise OverflowError for times far in the past or far in the future.", "For aware datetime instances, the return value is computed as:"]}
{"index": 1412, "name": "datetime.datetime.weekday", "module": "datetime", "doc": ["Return the day of the week as an integer, where Monday is 0 and Sunday is 6.", "The same as self.date().weekday().", "See also isoweekday()."]}
{"index": 1413, "name": "datetime.datetime.isoweekday", "module": "datetime", "doc": ["Return the day of the week as an integer, where Monday is 1 and Sunday is 7.", "The same as self.date().isoweekday().", "See also weekday(), isocalendar()."]}
{"index": 1414, "name": "datetime.datetime.isocalendar", "module": "datetime", "doc": ["Return a 3-tuple, (ISO year, ISO week number, ISO weekday).", "The same as self.date().isocalendar()."]}
{"index": 1415, "name": "datetime.datetime.isoformat", "module": "datetime", "doc": ["Return a string representing the date and time in ISO 8601 format, YYYY-MM-DDTHH:MM:SS.ffffff or, if microsecond is 0, YYYY-MM-DDTHH:MM:SS", "If utcoffset() does not return None, a string is appended, giving the UTC offset: YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if microsecond is 0 YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]].", "The optional argument sep (default 'T') is a one-character separator, placed between the date and time portions of the result.", "For example,", "The optional argument timespec specifies the number of additional components of the time to include (the default is 'auto').", "It can be one of the following:", "ValueError will be raised on an invalid timespec argument."]}
{"index": 1416, "name": "datetime.datetime.__str__", "module": "datetime", "doc": ["For a datetime instance d, str(d) is equivalent to d.isoformat(' ')."]}
{"index": 1417, "name": "datetime.datetime.ctime", "module": "datetime", "doc": ["Return a string representing the date and time, for example datetime(2002, 12, 4, 20, 30, 40).ctime() == 'Wed Dec\u00a0 4 20:30:40 2002'.", "d.ctime() is equivalent to time.ctime(time.mktime(d.timetuple())) on platforms where the native C ctime() function (which time.ctime() invokes, but which datetime.ctime() does not invoke) conforms to the C standard."]}
{"index": 1418, "name": "datetime.datetime.strftime", "module": "datetime", "doc": ["Return a string representing the date and time, controlled by an explicit format string.", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1419, "name": "datetime.datetime.__format__", "module": "datetime", "doc": ["Same as datetime.strftime().", "This makes it possible to specify a format string for a datetime object in formatted string literals and when using str.format().", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1420, "name": "datetime.time", "module": "datetime", "doc": ["All arguments are optional.", "tzinfo may be None, or an instance of a tzinfo subclass.", "The remaining arguments must be integers in the following ranges:", "If an argument outside those ranges is given, ValueError is raised.", "All default to 0 except tzinfo, which defaults to None."]}
{"index": 1421, "name": "datetime.time.min", "module": "datetime", "doc": ["The earliest representable time, time(0, 0, 0, 0)."]}
{"index": 1422, "name": "datetime.time.max", "module": "datetime", "doc": ["The latest representable time, time(23, 59, 59, 999999)."]}
{"index": 1423, "name": "datetime.time.resolution", "module": "datetime", "doc": ["The smallest possible difference between non-equal time objects, timedelta(microseconds=1), although note that arithmetic on time objects is not supported."]}
{"index": 1424, "name": "datetime.time.hour", "module": "datetime", "doc": ["In range(24)."]}
{"index": 1425, "name": "datetime.time.minute", "module": "datetime", "doc": ["In range(60)."]}
{"index": 1426, "name": "datetime.time.second", "module": "datetime", "doc": ["In range(60)."]}
{"index": 1427, "name": "datetime.time.microsecond", "module": "datetime", "doc": ["In range(1000000)."]}
{"index": 1428, "name": "datetime.time.tzinfo", "module": "datetime", "doc": ["The object passed as the tzinfo argument to the time constructor, or None if none was passed."]}
{"index": 1429, "name": "datetime.time.fold", "module": "datetime", "doc": ["In [0, 1].", "Used to disambiguate wall times during a repeated interval.", "(A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.)", "The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation."]}
{"index": 1430, "name": "datetime.time.fromisoformat", "module": "datetime", "doc": ["Return a time corresponding to a time_string in one of the formats emitted by time.isoformat().", "Specifically, this function supports strings in the format(s) HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]."]}
{"index": 1431, "name": "datetime.time.replace", "module": "datetime", "doc": ["Return a time with the same value, except for those attributes given new values by whichever keyword arguments are specified.", "Note that tzinfo=None can be specified to create a naive time from an aware time, without conversion of the time data."]}
{"index": 1432, "name": "datetime.time.isoformat", "module": "datetime", "doc": ["Return a string representing the time in ISO 8601 format, HH:MM:SS.ffffff or, if microsecond is 0, HH:MM:SS If utcoffset() does not return None, a string is appended, giving the UTC offset: HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]] or, if self.microsecond is 0, HH:MM:SS+HH:MM[:SS[.ffffff]].", "The optional argument timespec specifies the number of additional components of the time to include (the default is 'auto').", "It can be one of the following:", "ValueError will be raised on an invalid timespec argument."]}
{"index": 1433, "name": "datetime.time.__str__", "module": "datetime", "doc": ["For a time t, str(t) is equivalent to t.isoformat()."]}
{"index": 1434, "name": "datetime.time.strftime", "module": "datetime", "doc": ["Return a string representing the time, controlled by an explicit format string.", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1435, "name": "datetime.time.__format__", "module": "datetime", "doc": ["Same as time.strftime().", "This makes it possible to specify a format string for a time object in formatted string literals and when using str.format().", "For a complete list of formatting directives, see strftime() and strptime() Behavior."]}
{"index": 1436, "name": "datetime.time.utcoffset", "module": "datetime", "doc": ["If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(None), and raises an exception if the latter doesn\u2019t return None or a timedelta object with magnitude less than one day."]}
{"index": 1437, "name": "datetime.time.dst", "module": "datetime", "doc": ["If tzinfo is None, returns None, else returns self.tzinfo.dst(None), and raises an exception if the latter doesn\u2019t return None, or a timedelta object with magnitude less than one day."]}
{"index": 1438, "name": "datetime.time.tzname", "module": "datetime", "doc": ["If tzinfo is None, returns None, else returns self.tzinfo.tzname(None), or raises an exception if the latter doesn\u2019t return None or a string object."]}
{"index": 1439, "name": "datetime.tzinfo", "module": "datetime", "doc": ["This is an abstract base class, meaning that this class should not be instantiated directly.", "You need to derive a concrete subclass, and (at least) supply implementations of the standard tzinfo methods needed by the datetime methods you use.", "The datetime module supplies a simple concrete subclass of tzinfo, timezone, which can represent timezones with fixed offset from UTC such as UTC itself or North American EST and EDT.", "An instance of (a concrete subclass of) tzinfo can be passed to the constructors for datetime and time objects.", "The latter objects view their attributes as being in local time, and the tzinfo object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them.", "Special requirement for pickling:  A tzinfo subclass must have an __init__() method that can be called with no arguments, else it can be pickled but possibly not unpickled again.", "This is a technical requirement that may be relaxed in the future.", "A concrete subclass of tzinfo may need to implement the following methods.", "Exactly which methods are needed depends on the uses made of aware datetime objects.", "If in doubt, simply implement all of them."]}
{"index": 1440, "name": "datetime.tzinfo.utcoffset", "module": "datetime", "doc": ["Return offset of local time from UTC, as a timedelta object that is positive east of UTC.", "If local time is west of UTC, this should be negative.", "Note that this is intended to be the total offset from UTC; for example, if a tzinfo object represents both time zone and DST adjustments, utcoffset() should return their sum.", "If the UTC offset isn\u2019t known, return None.", "Else the value returned must be a timedelta object strictly between -timedelta(hours=24) and timedelta(hours=24) (the magnitude of the offset must be less than one day).", "Most implementations of utcoffset() will probably look like one of these two:", "If utcoffset() does not return None, dst() should not return None either.", "The default implementation of utcoffset() raises NotImplementedError."]}
{"index": 1441, "name": "datetime.tzinfo.dst", "module": "datetime", "doc": ["Return the daylight saving time (DST) adjustment, as a timedelta object or None if DST information isn\u2019t known.", "Return timedelta(0) if DST is not in effect.", "If DST is in effect, return the offset as a timedelta object (see utcoffset() for details).", "Note that DST offset, if applicable, has already been added to the UTC offset returned by utcoffset(), so there\u2019s no need to consult dst() unless you\u2019re interested in obtaining DST info separately.", "For example, datetime.timetuple() calls its tzinfo attribute\u2019s dst() method to determine how the tm_isdst flag should be set, and tzinfo.fromutc() calls dst() to account for DST changes when crossing time zones.", "An instance tz of a tzinfo subclass that models both standard and daylight times must be consistent in this sense:", "tz.utcoffset(dt) - tz.dst(dt)", "must return the same result for every datetime dt with dt.tzinfo == tz  For sane tzinfo subclasses, this expression yields the time zone\u2019s \u201cstandard offset\u201d, which should not depend on the date or the time, but only on geographic location.", "The implementation of datetime.astimezone() relies on this, but cannot detect violations; it\u2019s the programmer\u2019s responsibility to ensure it.", "If a tzinfo subclass cannot guarantee this, it may be able to override the default implementation of tzinfo.fromutc() to work correctly with astimezone() regardless.", "Most implementations of dst() will probably look like one of these two:", "or", "The default implementation of dst() raises NotImplementedError."]}
{"index": 1442, "name": "datetime.tzinfo.tzname", "module": "datetime", "doc": ["Return the time zone name corresponding to the datetime object dt, as a string.", "Nothing about string names is defined by the datetime module, and there\u2019s no requirement that it mean anything in particular.", "For example, \u201cGMT\u201d, \u201cUTC\u201d, \u201c-500\u201d, \u201c-5:00\u201d, \u201cEDT\u201d, \u201cUS/Eastern\u201d, \u201cAmerica/New York\u201d are all valid replies.", "Return None if a string name isn\u2019t known.", "Note that this is a method rather than a fixed string primarily because some tzinfo subclasses will wish to return different names depending on the specific value of dt passed, especially if the tzinfo class is accounting for daylight time.", "The default implementation of tzname() raises NotImplementedError."]}
{"index": 1443, "name": "datetime.tzinfo.fromutc", "module": "datetime", "doc": ["This is called from the default datetime.astimezone() implementation.", "When called from that, dt.tzinfo is self, and dt\u2019s date and time data are to be viewed as expressing a UTC time.", "The purpose of fromutc() is to adjust the date and time data, returning an equivalent datetime in self\u2019s local time.", "Most tzinfo subclasses should be able to inherit the default fromutc() implementation without problems.", "It\u2019s strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years.", "An example of a time zone the default fromutc() implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons.", "The default implementations of astimezone() and fromutc() may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes.", "Skipping code for error cases, the default fromutc() implementation acts like:"]}
{"index": 1444, "name": "datetime.timezone", "module": "datetime", "doc": ["The offset argument must be specified as a timedelta object representing the difference between the local time and UTC.", "It must be strictly between -timedelta(hours=24) and timedelta(hours=24), otherwise ValueError is raised.", "The name argument is optional.", "If specified it must be a string that will be used as the value returned by the datetime.tzname() method."]}
{"index": 1445, "name": "datetime.timezone.utcoffset", "module": "datetime", "doc": ["Return the fixed value specified when the timezone instance is constructed.", "The dt argument is ignored.", "The return value is a timedelta instance equal to the difference between the local time and UTC."]}
{"index": 1446, "name": "datetime.timezone.tzname", "module": "datetime", "doc": ["Return the fixed value specified when the timezone instance is constructed.", "If name is not provided in the constructor, the name returned by tzname(dt) is generated from the value of the offset as follows.", "If offset is timedelta(0), the name is \u201cUTC\u201d, otherwise it is a string \u2018UTC\u00b1HH:MM\u2019, where \u00b1 is the sign of offset, HH and MM are two digits of offset.hours and offset.minutes respectively."]}
{"index": 1447, "name": "datetime.timezone.dst", "module": "datetime", "doc": ["Always returns None."]}
{"index": 1448, "name": "datetime.timezone.fromutc", "module": "datetime", "doc": ["Return dt + offset.", "The dt argument must be an aware datetime instance, with tzinfo set to self."]}
{"index": 1449, "name": "datetime.timezone.utc", "module": "datetime", "doc": ["The UTC timezone, timezone(timedelta(0))."]}
{"index": 1450, "name": "id3", "module": "datetime", "doc": ["If, that is, we ignore the effects of Relativity"]}
{"index": 1451, "name": "id4", "module": "datetime", "doc": ["If, that is, we ignore the effects of Relativity"]}
{"index": 1452, "name": "dbm.error", "module": "dbm", "doc": ["A tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named dbm.error as the first item \u2014 the latter is used when dbm.error is raised."]}
{"index": 1453, "name": "dbm.whichdb", "module": "dbm", "doc": ["This function attempts to guess which of the several simple database modules available \u2014 dbm.gnu, dbm.ndbm or dbm.dumb \u2014 should be used to open a given file.", "Returns one of the following values: None if the file can\u2019t be opened because it\u2019s unreadable or doesn\u2019t exist; the empty string ('') if the file\u2019s format can\u2019t be guessed; or a string containing the required module name, such as 'dbm.ndbm' or 'dbm.gnu'."]}
{"index": 1454, "name": "dbm.open", "module": "dbm", "doc": ["Open the database file file and return a corresponding object.", "If the database file already exists, the whichdb() function is used to determine its type and the appropriate module is used; if it does not exist, the first module listed above that can be imported is used.", "The optional flag argument can be:", "The optional mode argument is the Unix mode of the file, used only when the database has to be created.", "It defaults to octal 0o666 (and will be modified by the prevailing umask)."]}
{"index": 1455, "name": "dbm.gnu.error", "module": "dbm", "doc": ["Raised on dbm.gnu-specific errors, such as I/O errors.", "KeyError is raised for general mapping errors like specifying an incorrect key."]}
{"index": 1456, "name": "dbm.gnu.open", "module": "dbm", "doc": ["Open a gdbm database and return a gdbm object.", "The filename argument is the name of the database file.", "The optional flag argument can be:", "The following additional characters may be appended to the flag to control how the database is opened:", "Not all flags are valid for all versions of gdbm.", "The module constant open_flags is a string of supported flag characters.", "The exception error is raised if an invalid flag is specified.", "The optional mode argument is the Unix mode of the file, used only when the database has to be created.", "It defaults to octal 0o666.", "In addition to the dictionary-like methods, gdbm objects have the following methods:"]}
{"index": 1457, "name": "dbm.gnu.gdbm.firstkey", "module": "dbm", "doc": ["It\u2019s possible to loop over every key in the database using this method  and the nextkey() method.", "The traversal is ordered by gdbm\u2019s internal hash values, and won\u2019t be sorted by the key values.", "This method returns the starting key."]}
{"index": 1458, "name": "dbm.gnu.gdbm.nextkey", "module": "dbm", "doc": ["Returns the key that follows key in the traversal.", "The following code prints every key in the database db, without having to create a list in memory that contains them all:"]}
{"index": 1459, "name": "dbm.gnu.gdbm.reorganize", "module": "dbm", "doc": ["If you have carried out a lot of deletions and would like to shrink the space used by the gdbm file, this routine will reorganize the database.", "gdbm objects will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added."]}
{"index": 1460, "name": "dbm.gnu.gdbm.sync", "module": "dbm", "doc": ["When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk."]}
{"index": 1461, "name": "dbm.gnu.gdbm.close", "module": "dbm", "doc": ["Close the gdbm database."]}
{"index": 1462, "name": "dbm.ndbm.error", "module": "dbm", "doc": ["Raised on dbm.ndbm-specific errors, such as I/O errors.", "KeyError is raised for general mapping errors like specifying an incorrect key."]}
{"index": 1463, "name": "dbm.ndbm.library", "module": "dbm", "doc": ["Name of the ndbm implementation library used."]}
{"index": 1464, "name": "dbm.ndbm.open", "module": "dbm", "doc": ["Open a dbm database and return a ndbm object.", "The filename argument is the name of the database file (without the .dir or .pag extensions).", "The optional flag argument must be one of these values:", "The optional mode argument is the Unix mode of the file, used only when the database has to be created.", "It defaults to octal 0o666 (and will be modified by the prevailing umask).", "In addition to the dictionary-like methods, ndbm objects provide the following method:"]}
{"index": 1465, "name": "dbm.ndbm.ndbm.close", "module": "dbm", "doc": ["Close the ndbm database."]}
{"index": 1466, "name": "dbm.dumb.error", "module": "dbm", "doc": ["Raised on dbm.dumb-specific errors, such as I/O errors.", "KeyError is raised for general mapping errors like specifying an incorrect key."]}
{"index": 1467, "name": "dbm.dumb.open", "module": "dbm", "doc": ["Open a dumbdbm database and return a dumbdbm object.", "The filename argument is the basename of the database file (without any specific extensions).", "When a dumbdbm database is created, files with .dat and .dir extensions are created.", "The optional flag argument supports only the semantics of 'c' and 'n' values.", "Other values will default to database being always opened for update, and will be created if it does not exist.", "The optional mode argument is the Unix mode of the file, used only when the database has to be created.", "It defaults to octal 0o666 (and will be modified by the prevailing umask).", "In addition to the methods provided by the collections.abc.MutableMapping class, dumbdbm objects provide the following methods:"]}
{"index": 1468, "name": "dbm.dumb.dumbdbm.sync", "module": "dbm", "doc": ["Synchronize the on-disk directory and data files.", "This method is called by the Shelve.sync() method."]}
{"index": 1469, "name": "dbm.dumb.dumbdbm.close", "module": "dbm", "doc": ["Close the dumbdbm database."]}
{"index": 1470, "name": "decimal.Decimal", "module": "decimal", "doc": ["Construct a new Decimal object based from value.", "value can be an integer, string, tuple, float, or another Decimal object.", "If no value is given, returns Decimal('0').", "If value is a string, it should conform to the decimal numeric string syntax after leading and trailing whitespace characters, as well as underscores throughout, are removed:", "Other Unicode decimal digits are also permitted where digit appears above.", "These include decimal digits from various other alphabets (for example, Arabic-Indic and Devan\u0101gar\u012b digits) along with the fullwidth digits '\\uff10' through '\\uff19'.", "If value is a tuple, it should have three components, a sign (0 for positive or 1 for negative), a tuple of digits, and an integer exponent.", "For example, Decimal((0, (1, 4, 1, 4), -3)) returns Decimal('1.414').", "If value is a float, the binary floating point value is losslessly converted to its exact decimal equivalent.", "This conversion can often require 53 or more digits of precision.", "For example, Decimal(float('1.1')) converts to Decimal('1.100000000000000088817841970012523233890533447265625').", "The context precision does not affect how many digits are stored.", "That is determined exclusively by the number of digits in value.", "For example, Decimal('3.00000') records all five zeros even if the context precision is only three.", "The purpose of the context argument is determining what to do if value is a malformed string.", "If the context traps InvalidOperation, an exception is raised; otherwise, the constructor returns a new Decimal with the value of NaN.", "Once constructed, Decimal objects are immutable.", "Decimal floating point objects share many properties with the other built-in numeric types such as float and int.", "All of the usual math operations and special methods apply.", "Likewise, decimal objects can be copied, pickled, printed, used as dictionary keys, used as set elements, compared, sorted, and coerced to another type (such as float or int).", "There are some small differences between arithmetic on Decimal objects and arithmetic on integers and floats.", "When the remainder operator % is applied to Decimal objects, the sign of the result is the sign of the dividend rather than the sign of the divisor:", "The integer division operator // behaves analogously, returning the integer part of the true quotient (truncating towards zero) rather than its floor, so as to preserve the usual identity x == (x // y) * y + x % y:", "The % and // operators implement the remainder and divide-integer operations (respectively) as described in the specification.", "Decimal objects cannot generally be combined with floats or instances of fractions.Fraction in arithmetic operations: an attempt to add a Decimal to a float, for example, will raise a TypeError.", "However, it is possible to use Python\u2019s comparison operators to compare a Decimal instance x with another number y.", "This avoids confusing results when doing equality comparisons between numbers of different types.", "In addition to the standard numeric properties, decimal floating point objects also have a number of specialized methods:"]}
{"index": 1471, "name": "decimal.Decimal.adjusted", "module": "decimal", "doc": ["Return the adjusted exponent after shifting out the coefficient\u2019s rightmost digits until only the lead digit remains: Decimal('321e+5').adjusted() returns seven.", "Used for determining the position of the most significant digit with respect to the decimal point."]}
{"index": 1472, "name": "decimal.Decimal.as_integer_ratio", "module": "decimal", "doc": ["Return a pair (n, d) of integers that represent the given Decimal instance as a fraction, in lowest terms and with a positive denominator:", "The conversion is exact.", "Raise OverflowError on infinities and ValueError on NaNs."]}
{"index": 1473, "name": "decimal.Decimal.as_tuple", "module": "decimal", "doc": ["Return a named tuple representation of the number: DecimalTuple(sign, digits, exponent)."]}
{"index": 1474, "name": "decimal.Decimal.canonical", "module": "decimal", "doc": ["Return the canonical encoding of the argument.", "Currently, the encoding of a Decimal instance is always canonical, so this operation returns its argument unchanged."]}
{"index": 1475, "name": "decimal.Decimal.compare", "module": "decimal", "doc": ["Compare the values of two Decimal instances.", "compare() returns a Decimal instance, and if either operand is a NaN then the result is a NaN:"]}
{"index": 1476, "name": "decimal.Decimal.compare_signal", "module": "decimal", "doc": ["This operation is identical to the compare() method, except that all NaNs signal.", "That is, if neither operand is a signaling NaN then any quiet NaN operand is treated as though it were a signaling NaN."]}
{"index": 1477, "name": "decimal.Decimal.compare_total", "module": "decimal", "doc": ["Compare two operands using their abstract representation rather than their numerical value.", "Similar to the compare() method, but the result gives a total ordering on Decimal instances.", "Two Decimal instances with the same numeric value but different representations compare unequal in this ordering:", "Quiet and signaling NaNs are also included in the total ordering.", "The result of this function is Decimal('0') if both operands have the same representation, Decimal('-1') if the first operand is lower in the total order than the second, and Decimal('1') if the first operand is higher in the total order than the second operand.", "See the specification for details of the total order.", "This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed.", "As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly."]}
{"index": 1478, "name": "decimal.Decimal.compare_total_mag", "module": "decimal", "doc": ["Compare two operands using their abstract representation rather than their value as in compare_total(), but ignoring the sign of each operand.", "x.compare_total_mag(y) is equivalent to x.copy_abs().compare_total(y.copy_abs()).", "This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed.", "As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly."]}
{"index": 1479, "name": "decimal.Decimal.conjugate", "module": "decimal", "doc": ["Just returns self, this method is only to comply with the Decimal Specification."]}
{"index": 1480, "name": "decimal.Decimal.copy_abs", "module": "decimal", "doc": ["Return the absolute value of the argument.", "This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed."]}
{"index": 1481, "name": "decimal.Decimal.copy_negate", "module": "decimal", "doc": ["Return the negation of the argument.", "This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed."]}
{"index": 1482, "name": "decimal.Decimal.copy_sign", "module": "decimal", "doc": ["Return a copy of the first operand with the sign set to be the same as the sign of the second operand.", "For example:", "This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed.", "As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly."]}
{"index": 1483, "name": "decimal.Decimal.exp", "module": "decimal", "doc": ["Return the value of the (natural) exponential function e**x at the given number.", "The result is correctly rounded using the ROUND_HALF_EVEN rounding mode."]}
{"index": 1484, "name": "decimal.Decimal.from_float", "module": "decimal", "doc": ["Classmethod that converts a float to a decimal number, exactly.", "Note Decimal.from_float(0.1) is not the same as Decimal(\u20180.1\u2019).", "Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is 0x1.999999999999ap-4.", "That equivalent value in decimal is 0.1000000000000000055511151231257827021181583404541015625."]}
{"index": 1485, "name": "decimal.Decimal.fma", "module": "decimal", "doc": ["Fused multiply-add.", "Return self*other+third with no rounding of the intermediate product self*other."]}
{"index": 1486, "name": "decimal.Decimal.is_canonical", "module": "decimal", "doc": ["Return True if the argument is canonical and False otherwise.", "Currently, a Decimal instance is always canonical, so this operation always returns True."]}
{"index": 1487, "name": "decimal.Decimal.is_finite", "module": "decimal", "doc": ["Return True if the argument is a finite number, and False if the argument is an infinity or a NaN."]}
{"index": 1488, "name": "decimal.Decimal.is_infinite", "module": "decimal", "doc": ["Return True if the argument is either positive or negative infinity and False otherwise."]}
{"index": 1489, "name": "decimal.Decimal.is_nan", "module": "decimal", "doc": ["Return True if the argument is a (quiet or signaling) NaN and False otherwise."]}
{"index": 1490, "name": "decimal.Decimal.is_normal", "module": "decimal", "doc": ["Return True if the argument is a normal finite number.", "Return False if the argument is zero, subnormal, infinite or a NaN."]}
{"index": 1491, "name": "decimal.Decimal.is_qnan", "module": "decimal", "doc": ["Return True if the argument is a quiet NaN, and False otherwise."]}
{"index": 1492, "name": "decimal.Decimal.is_signed", "module": "decimal", "doc": ["Return True if the argument has a negative sign and False otherwise.", "Note that zeros and NaNs can both carry signs."]}
{"index": 1493, "name": "decimal.Decimal.is_snan", "module": "decimal", "doc": ["Return True if the argument is a signaling NaN and False otherwise."]}
{"index": 1494, "name": "decimal.Decimal.is_subnormal", "module": "decimal", "doc": ["Return True if the argument is subnormal, and False otherwise."]}
{"index": 1495, "name": "decimal.Decimal.is_zero", "module": "decimal", "doc": ["Return True if the argument is a (positive or negative) zero and False otherwise."]}
{"index": 1496, "name": "decimal.Decimal.ln", "module": "decimal", "doc": ["Return the natural (base e) logarithm of the operand.", "The result is correctly rounded using the ROUND_HALF_EVEN rounding mode."]}
{"index": 1497, "name": "decimal.Decimal.log10", "module": "decimal", "doc": ["Return the base ten logarithm of the operand.", "The result is correctly rounded using the ROUND_HALF_EVEN rounding mode."]}
{"index": 1498, "name": "decimal.Decimal.logb", "module": "decimal", "doc": ["For a nonzero number, return the adjusted exponent of its operand as a Decimal instance.", "If the operand is a zero then Decimal('-Infinity') is returned and the DivisionByZero flag is raised.", "If the operand is an infinity then Decimal('Infinity') is returned."]}
{"index": 1499, "name": "decimal.Decimal.logical_and", "module": "decimal", "doc": ["logical_and() is a logical operation which takes two logical operands (see Logical operands).", "The result is the digit-wise and of the two operands."]}
{"index": 1500, "name": "decimal.Decimal.logical_invert", "module": "decimal", "doc": ["logical_invert() is a logical operation.", "The result is the digit-wise inversion of the operand."]}
{"index": 1501, "name": "decimal.Decimal.logical_or", "module": "decimal", "doc": ["logical_or() is a logical operation which takes two logical operands (see Logical operands).", "The result is the digit-wise or of the two operands."]}
{"index": 1502, "name": "decimal.Decimal.logical_xor", "module": "decimal", "doc": ["logical_xor() is a logical operation which takes two logical operands (see Logical operands).", "The result is the digit-wise exclusive or of the two operands."]}
{"index": 1503, "name": "decimal.Decimal.max", "module": "decimal", "doc": ["Like max(self, other) except that the context rounding rule is applied before returning and that NaN values are either signaled or ignored (depending on the context and whether they are signaling or quiet)."]}
{"index": 1504, "name": "decimal.Decimal.max_mag", "module": "decimal", "doc": ["Similar to the max() method, but the comparison is done using the absolute values of the operands."]}
{"index": 1505, "name": "decimal.Decimal.min", "module": "decimal", "doc": ["Like min(self, other) except that the context rounding rule is applied before returning and that NaN values are either signaled or ignored (depending on the context and whether they are signaling or quiet)."]}
{"index": 1506, "name": "decimal.Decimal.min_mag", "module": "decimal", "doc": ["Similar to the min() method, but the comparison is done using the absolute values of the operands."]}
{"index": 1507, "name": "decimal.Decimal.next_minus", "module": "decimal", "doc": ["Return the largest number representable in the given context (or in the current thread\u2019s context if no context is given) that is smaller than the given operand."]}
{"index": 1508, "name": "decimal.Decimal.next_plus", "module": "decimal", "doc": ["Return the smallest number representable in the given context (or in the current thread\u2019s context if no context is given) that is larger than the given operand."]}
{"index": 1509, "name": "decimal.Decimal.next_toward", "module": "decimal", "doc": ["If the two operands are unequal, return the number closest to the first operand in the direction of the second operand.", "If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand."]}
{"index": 1510, "name": "decimal.Decimal.normalize", "module": "decimal", "doc": ["Normalize the number by stripping the rightmost trailing zeros and converting any result equal to Decimal('0') to Decimal('0e0').", "Used for producing canonical values for attributes of an equivalence class.", "For example, Decimal('32.100') and Decimal('0.321000e+2') both normalize to the equivalent value Decimal('32.1')."]}
{"index": 1511, "name": "decimal.Decimal.number_class", "module": "decimal", "doc": ["Return a string describing the class of the operand.", "The returned value is one of the following ten strings."]}
{"index": 1512, "name": "decimal.Decimal.quantize", "module": "decimal", "doc": ["Return a value equal to the first operand after rounding and having the exponent of the second operand.", "Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an InvalidOperation is signaled.", "This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand.", "Also unlike other operations, quantize never signals Underflow, even if the result is subnormal and inexact.", "If the exponent of the second operand is larger than that of the first then rounding may be necessary.", "In this case, the rounding mode is determined by the rounding argument if given, else by the given context argument; if neither argument is given the rounding mode of the current thread\u2019s context is used.", "An error is returned whenever the resulting exponent is greater than Emax or less than Etiny."]}
{"index": 1513, "name": "decimal.Decimal.radix", "module": "decimal", "doc": ["Return Decimal(10), the radix (base) in which the Decimal class does all its arithmetic.", "Included for compatibility with the specification."]}
{"index": 1514, "name": "decimal.Decimal.remainder_near", "module": "decimal", "doc": ["Return the remainder from dividing self by other.", "This differs from self % other in that the sign of the remainder is chosen so as to minimize its absolute value.", "More precisely, the return value is self - n * other where n is the integer nearest to the exact value of self / other, and if two integers are equally near then the even one is chosen.", "If the result is zero then its sign will be the sign of self."]}
{"index": 1515, "name": "decimal.Decimal.rotate", "module": "decimal", "doc": ["Return the result of rotating the digits of the first operand by an amount specified by the second operand.", "The second operand must be an integer in the range -precision through precision.", "The absolute value of the second operand gives the number of places to rotate.", "If the second operand is positive then rotation is to the left; otherwise rotation is to the right.", "The coefficient of the first operand is padded on the left with zeros to length precision if necessary.", "The sign and exponent of the first operand are unchanged."]}
{"index": 1516, "name": "decimal.Decimal.same_quantum", "module": "decimal", "doc": ["Test whether self and other have the same exponent or whether both are NaN.", "This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed.", "As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly."]}
{"index": 1517, "name": "decimal.Decimal.scaleb", "module": "decimal", "doc": ["Return the first operand with exponent adjusted by the second.", "Equivalently, return the first operand multiplied by 10**other.", "The second operand must be an integer."]}
{"index": 1518, "name": "decimal.Decimal.shift", "module": "decimal", "doc": ["Return the result of shifting the digits of the first operand by an amount specified by the second operand.", "The second operand must be an integer in the range -precision through precision.", "The absolute value of the second operand gives the number of places to shift.", "If the second operand is positive then the shift is to the left; otherwise the shift is to the right.", "Digits shifted into the coefficient are zeros.", "The sign and exponent of the first operand are unchanged."]}
{"index": 1519, "name": "decimal.Decimal.sqrt", "module": "decimal", "doc": ["Return the square root of the argument to full precision."]}
{"index": 1520, "name": "decimal.Decimal.to_eng_string", "module": "decimal", "doc": ["Convert to a string, using engineering notation if an exponent is needed.", "Engineering notation has an exponent which is a multiple of 3.", "This can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros.", "For example, this converts Decimal('123E+1') to Decimal('1.23E+3')."]}
{"index": 1521, "name": "decimal.Decimal.to_integral", "module": "decimal", "doc": ["Identical to the to_integral_value() method.", "The to_integral name has been kept for compatibility with older versions."]}
{"index": 1522, "name": "decimal.Decimal.to_integral_exact", "module": "decimal", "doc": ["Round to the nearest integer, signaling Inexact or Rounded as appropriate if rounding occurs.", "The rounding mode is determined by the rounding parameter if given, else by the given context.", "If neither parameter is given then the rounding mode of the current context is used."]}
{"index": 1523, "name": "decimal.Decimal.to_integral_value", "module": "decimal", "doc": ["Round to the nearest integer without signaling Inexact or Rounded.", "If given, applies rounding; otherwise, uses the rounding method in either the supplied context or the current context."]}
{"index": 1524, "name": "decimal.getcontext", "module": "decimal", "doc": ["Return the current context for the active thread."]}
{"index": 1525, "name": "decimal.setcontext", "module": "decimal", "doc": ["Set the current context for the active thread to c."]}
{"index": 1526, "name": "decimal.localcontext", "module": "decimal", "doc": ["Return a context manager that will set the current context for the active thread to a copy of ctx on entry to the with-statement and restore the previous context when exiting the with-statement.", "If no context is specified, a copy of the current context is used.", "For example, the following code sets the current decimal precision to 42 places, performs a calculation, and then automatically restores the previous context:"]}
{"index": 1527, "name": "decimal.BasicContext", "module": "decimal", "doc": ["This is a standard context defined by the General Decimal Arithmetic Specification.", "Precision is set to nine.", "Rounding is set to ROUND_HALF_UP.", "All flags are cleared.", "All traps are enabled (treated as exceptions) except Inexact, Rounded, and Subnormal.", "Because many of the traps are enabled, this context is useful for debugging."]}
{"index": 1528, "name": "decimal.ExtendedContext", "module": "decimal", "doc": ["This is a standard context defined by the General Decimal Arithmetic Specification.", "Precision is set to nine.", "Rounding is set to ROUND_HALF_EVEN.", "All flags are cleared.", "No traps are enabled (so that exceptions are not raised during computations).", "Because the traps are disabled, this context is useful for applications that prefer to have result value of NaN or Infinity instead of raising exceptions.", "This allows an application to complete a run in the presence of conditions that would otherwise halt the program."]}
{"index": 1529, "name": "decimal.DefaultContext", "module": "decimal", "doc": ["This context is used by the Context constructor as a prototype for new contexts.", "Changing a field (such a precision) has the effect of changing the default for new contexts created by the Context constructor.", "This context is most useful in multi-threaded environments.", "Changing one of the fields before threads are started has the effect of setting system-wide defaults.", "Changing the fields after threads have started is not recommended as it would require thread synchronization to prevent race conditions.", "In single threaded environments, it is preferable to not use this context at all.", "Instead, simply create contexts explicitly as described below.", "The default values are prec=28, rounding=ROUND_HALF_EVEN, and enabled traps for Overflow, InvalidOperation, and DivisionByZero."]}
{"index": 1530, "name": "decimal.Context", "module": "decimal", "doc": ["Creates a new context.", "If a field is not specified or is None, the default values are copied from the DefaultContext.", "If the flags field is not specified or is None, all flags are cleared.", "prec is an integer in the range [1, MAX_PREC] that sets the precision for arithmetic operations in the context.", "The rounding option is one of the constants listed in the section Rounding Modes.", "The traps and flags fields list any signals to be set.", "Generally, new contexts should only set traps and leave the flags clear.", "The Emin and Emax fields are integers specifying the outer limits allowable for exponents.", "Emin must be in the range [MIN_EMIN, 0], Emax in the range [0, MAX_EMAX].", "The capitals field is either 0 or 1 (the default).", "If set to 1, exponents are printed with a capital E; otherwise, a lowercase e is used: Decimal('6.02e+23').", "The clamp field is either 0 (the default) or 1.", "If set to 1, the exponent e of a Decimal instance representable in this context is strictly limited to the range Emin - prec + 1 <= e <= Emax - prec + 1.", "If clamp is 0 then a weaker condition holds: the adjusted exponent of the Decimal instance is at most Emax.", "When clamp is 1, a large normal number will, where possible, have its exponent reduced and a corresponding number of zeros added to its coefficient, in order to fit the exponent constraints; this preserves the value of the number but loses information about significant trailing zeros.", "For example:", "A clamp value of 1 allows compatibility with the fixed-width decimal interchange formats specified in IEEE 754.", "The Context class defines several general purpose methods as well as a large number of methods for doing arithmetic directly in a given context.", "In addition, for each of the Decimal methods described above (with the exception of the adjusted() and as_tuple() methods) there is a corresponding Context method.", "For example, for a Context instance C and Decimal instance x, C.exp(x) is equivalent to x.exp(context=C).", "Each Context method accepts a Python integer (an instance of int) anywhere that a Decimal instance is accepted.", "The usual approach to working with decimals is to create Decimal instances and then apply arithmetic operations which take place within the current context for the active thread.", "An alternative approach is to use context methods for calculating within a specific context.", "The methods are similar to those for the Decimal class and are only briefly recounted here."]}
{"index": 1531, "name": "decimal.Context.clear_flags", "module": "decimal", "doc": ["Resets all of the flags to 0."]}
{"index": 1532, "name": "decimal.Context.clear_traps", "module": "decimal", "doc": ["Resets all of the traps to 0."]}
{"index": 1533, "name": "decimal.Context.copy", "module": "decimal", "doc": ["Return a duplicate of the context."]}
{"index": 1534, "name": "decimal.Context.copy_decimal", "module": "decimal", "doc": ["Return a copy of the Decimal instance num."]}
{"index": 1535, "name": "decimal.Context.create_decimal", "module": "decimal", "doc": ["Creates a new Decimal instance from num but using self as context.", "Unlike the Decimal constructor, the context precision, rounding method, flags, and traps are applied to the conversion.", "This is useful because constants are often given to a greater precision than is needed by the application.", "Another benefit is that rounding immediately eliminates unintended effects from digits beyond the current precision.", "In the following example, using unrounded inputs means that adding zero to a sum can change the result:", "This method implements the to-number operation of the IBM specification.", "If the argument is a string, no leading or trailing whitespace or underscores are permitted."]}
{"index": 1536, "name": "decimal.Context.create_decimal_from_float", "module": "decimal", "doc": ["Creates a new Decimal instance from a float f but rounding using self as the context.", "Unlike the Decimal.from_float() class method, the context precision, rounding method, flags, and traps are applied to the conversion."]}
{"index": 1537, "name": "decimal.Context.Etiny", "module": "decimal", "doc": ["Returns a value equal to Emin - prec + 1 which is the minimum exponent value for subnormal results.", "When underflow occurs, the exponent is set to Etiny."]}
{"index": 1538, "name": "decimal.Context.Etop", "module": "decimal", "doc": ["Returns a value equal to Emax - prec + 1."]}
{"index": 1539, "name": "decimal.Context.abs", "module": "decimal", "doc": ["Returns the absolute value of x."]}
{"index": 1540, "name": "decimal.Context.add", "module": "decimal", "doc": ["Return the sum of x and y."]}
{"index": 1541, "name": "decimal.Context.canonical", "module": "decimal", "doc": ["Returns the same Decimal object x."]}
{"index": 1542, "name": "decimal.Context.compare", "module": "decimal", "doc": ["Compares x and y numerically."]}
{"index": 1543, "name": "decimal.Context.compare_signal", "module": "decimal", "doc": ["Compares the values of the two operands numerically."]}
{"index": 1544, "name": "decimal.Context.compare_total", "module": "decimal", "doc": ["Compares two operands using their abstract representation."]}
{"index": 1545, "name": "decimal.Context.compare_total_mag", "module": "decimal", "doc": ["Compares two operands using their abstract representation, ignoring sign."]}
{"index": 1546, "name": "decimal.Context.copy_abs", "module": "decimal", "doc": ["Returns a copy of x with the sign set to 0."]}
{"index": 1547, "name": "decimal.Context.copy_negate", "module": "decimal", "doc": ["Returns a copy of x with the sign inverted."]}
{"index": 1548, "name": "decimal.Context.copy_sign", "module": "decimal", "doc": ["Copies the sign from y to x."]}
{"index": 1549, "name": "decimal.Context.divide", "module": "decimal", "doc": ["Return x divided by y."]}
{"index": 1550, "name": "decimal.Context.divide_int", "module": "decimal", "doc": ["Return x divided by y, truncated to an integer."]}
{"index": 1551, "name": "decimal.Context.divmod", "module": "decimal", "doc": ["Divides two numbers and returns the integer part of the result."]}
{"index": 1552, "name": "decimal.Context.exp", "module": "decimal", "doc": ["Returns e ** x."]}
{"index": 1553, "name": "decimal.Context.fma", "module": "decimal", "doc": ["Returns x multiplied by y, plus z."]}
{"index": 1554, "name": "decimal.Context.is_canonical", "module": "decimal", "doc": ["Returns True if x is canonical; otherwise returns False."]}
{"index": 1555, "name": "decimal.Context.is_finite", "module": "decimal", "doc": ["Returns True if x is finite; otherwise returns False."]}
{"index": 1556, "name": "decimal.Context.is_infinite", "module": "decimal", "doc": ["Returns True if x is infinite; otherwise returns False."]}
{"index": 1557, "name": "decimal.Context.is_nan", "module": "decimal", "doc": ["Returns True if x is a qNaN or sNaN; otherwise returns False."]}
{"index": 1558, "name": "decimal.Context.is_normal", "module": "decimal", "doc": ["Returns True if x is a normal number; otherwise returns False."]}
{"index": 1559, "name": "decimal.Context.is_qnan", "module": "decimal", "doc": ["Returns True if x is a quiet NaN; otherwise returns False."]}
{"index": 1560, "name": "decimal.Context.is_signed", "module": "decimal", "doc": ["Returns True if x is negative; otherwise returns False."]}
{"index": 1561, "name": "decimal.Context.is_snan", "module": "decimal", "doc": ["Returns True if x is a signaling NaN; otherwise returns False."]}
{"index": 1562, "name": "decimal.Context.is_subnormal", "module": "decimal", "doc": ["Returns True if x is subnormal; otherwise returns False."]}
{"index": 1563, "name": "decimal.Context.is_zero", "module": "decimal", "doc": ["Returns True if x is a zero; otherwise returns False."]}
{"index": 1564, "name": "decimal.Context.ln", "module": "decimal", "doc": ["Returns the natural (base e) logarithm of x."]}
{"index": 1565, "name": "decimal.Context.log10", "module": "decimal", "doc": ["Returns the base 10 logarithm of x."]}
{"index": 1566, "name": "decimal.Context.logb", "module": "decimal", "doc": ["Returns the exponent of the magnitude of the operand\u2019s MSD."]}
{"index": 1567, "name": "decimal.Context.logical_and", "module": "decimal", "doc": ["Applies the logical operation and between each operand\u2019s digits."]}
{"index": 1568, "name": "decimal.Context.logical_invert", "module": "decimal", "doc": ["Invert all the digits in x."]}
{"index": 1569, "name": "decimal.Context.logical_or", "module": "decimal", "doc": ["Applies the logical operation or between each operand\u2019s digits."]}
{"index": 1570, "name": "decimal.Context.logical_xor", "module": "decimal", "doc": ["Applies the logical operation xor between each operand\u2019s digits."]}
{"index": 1571, "name": "decimal.Context.max", "module": "decimal", "doc": ["Compares two values numerically and returns the maximum."]}
{"index": 1572, "name": "decimal.Context.max_mag", "module": "decimal", "doc": ["Compares the values numerically with their sign ignored."]}
{"index": 1573, "name": "decimal.Context.min", "module": "decimal", "doc": ["Compares two values numerically and returns the minimum."]}
{"index": 1574, "name": "decimal.Context.min_mag", "module": "decimal", "doc": ["Compares the values numerically with their sign ignored."]}
{"index": 1575, "name": "decimal.Context.minus", "module": "decimal", "doc": ["Minus corresponds to the unary prefix minus operator in Python."]}
{"index": 1576, "name": "decimal.Context.multiply", "module": "decimal", "doc": ["Return the product of x and y."]}
{"index": 1577, "name": "decimal.Context.next_minus", "module": "decimal", "doc": ["Returns the largest representable number smaller than x."]}
{"index": 1578, "name": "decimal.Context.next_plus", "module": "decimal", "doc": ["Returns the smallest representable number larger than x."]}
{"index": 1579, "name": "decimal.Context.next_toward", "module": "decimal", "doc": ["Returns the number closest to x, in direction towards y."]}
{"index": 1580, "name": "decimal.Context.normalize", "module": "decimal", "doc": ["Reduces x to its simplest form."]}
{"index": 1581, "name": "decimal.Context.number_class", "module": "decimal", "doc": ["Returns an indication of the class of x."]}
{"index": 1582, "name": "decimal.Context.plus", "module": "decimal", "doc": ["Plus corresponds to the unary prefix plus operator in Python.", "This operation applies the context precision and rounding, so it is not an identity operation."]}
{"index": 1583, "name": "decimal.Context.power", "module": "decimal", "doc": ["Return x to the power of y, reduced modulo modulo if given.", "With two arguments, compute x**y.", "If x is negative then y must be integral.", "The result will be inexact unless y is integral and the result is finite and can be expressed exactly in \u2018precision\u2019 digits.", "The rounding mode of the context is used.", "Results are always correctly-rounded in the Python version.", "With three arguments, compute (x**y) % modulo.", "For the three argument form, the following restrictions on the arguments hold:", "The value resulting from Context.power(x, y, modulo) is equal to the value that would be obtained by computing (x**y) % modulo with unbounded precision, but is computed more efficiently.", "The exponent of the result is zero, regardless of the exponents of x, y and modulo.", "The result is always exact."]}
{"index": 1584, "name": "decimal.Context.quantize", "module": "decimal", "doc": ["Returns a value equal to x (rounded), having the exponent of y."]}
{"index": 1585, "name": "decimal.Context.radix", "module": "decimal", "doc": ["Just returns 10, as this is Decimal, :)"]}
{"index": 1586, "name": "decimal.Context.remainder", "module": "decimal", "doc": ["Returns the remainder from integer division.", "The sign of the result, if non-zero, is the same as that of the original dividend."]}
{"index": 1587, "name": "decimal.Context.remainder_near", "module": "decimal", "doc": ["Returns x - y * n, where n is the integer nearest the exact value of x / y (if the result is 0 then its sign will be the sign of x)."]}
{"index": 1588, "name": "decimal.Context.rotate", "module": "decimal", "doc": ["Returns a rotated copy of x, y times."]}
{"index": 1589, "name": "decimal.Context.same_quantum", "module": "decimal", "doc": ["Returns True if the two operands have the same exponent."]}
{"index": 1590, "name": "decimal.Context.scaleb", "module": "decimal", "doc": ["Returns the first operand after adding the second value its exp."]}
{"index": 1591, "name": "decimal.Context.shift", "module": "decimal", "doc": ["Returns a shifted copy of x, y times."]}
{"index": 1592, "name": "decimal.Context.sqrt", "module": "decimal", "doc": ["Square root of a non-negative number to context precision."]}
{"index": 1593, "name": "decimal.Context.subtract", "module": "decimal", "doc": ["Return the difference between x and y."]}
{"index": 1594, "name": "decimal.Context.to_eng_string", "module": "decimal", "doc": ["Convert to a string, using engineering notation if an exponent is needed.", "Engineering notation has an exponent which is a multiple of 3.", "This can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros."]}
{"index": 1595, "name": "decimal.Context.to_integral_exact", "module": "decimal", "doc": ["Rounds to an integer."]}
{"index": 1596, "name": "decimal.Context.to_sci_string", "module": "decimal", "doc": ["Converts a number to a string using scientific notation."]}
{"index": 1597, "name": "decimal.HAVE_THREADS", "module": "decimal", "doc": ["The default value is True.", "If Python is compiled without threads, the C version automatically disables the expensive thread local context machinery.", "In this case, the value is False."]}
{"index": 1598, "name": "decimal.ROUND_CEILING", "module": "decimal", "doc": ["Round towards Infinity."]}
{"index": 1599, "name": "decimal.ROUND_DOWN", "module": "decimal", "doc": ["Round towards zero."]}
{"index": 1600, "name": "decimal.ROUND_FLOOR", "module": "decimal", "doc": ["Round towards -Infinity."]}
{"index": 1601, "name": "decimal.ROUND_HALF_DOWN", "module": "decimal", "doc": ["Round to nearest with ties going towards zero."]}
{"index": 1602, "name": "decimal.ROUND_HALF_EVEN", "module": "decimal", "doc": ["Round to nearest with ties going to nearest even integer."]}
{"index": 1603, "name": "decimal.ROUND_HALF_UP", "module": "decimal", "doc": ["Round to nearest with ties going away from zero."]}
{"index": 1604, "name": "decimal.ROUND_UP", "module": "decimal", "doc": ["Round away from zero."]}
{"index": 1605, "name": "decimal.ROUND_05UP", "module": "decimal", "doc": ["Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero."]}
{"index": 1606, "name": "decimal.Clamped", "module": "decimal", "doc": ["Altered an exponent to fit representation constraints.", "Typically, clamping occurs when an exponent falls outside the context\u2019s Emin and Emax limits.", "If possible, the exponent is reduced to fit by adding zeros to the coefficient."]}
{"index": 1607, "name": "decimal.DecimalException", "module": "decimal", "doc": ["Base class for other signals and a subclass of ArithmeticError."]}
{"index": 1608, "name": "decimal.DivisionByZero", "module": "decimal", "doc": ["Signals the division of a non-infinite number by zero.", "Can occur with division, modulo division, or when raising a number to a negative power.", "If this signal is not trapped, returns Infinity or -Infinity with the sign determined by the inputs to the calculation."]}
{"index": 1609, "name": "decimal.Inexact", "module": "decimal", "doc": ["Indicates that rounding occurred and the result is not exact.", "Signals when non-zero digits were discarded during rounding.", "The rounded result is returned.", "The signal flag or trap is used to detect when results are inexact."]}
{"index": 1610, "name": "decimal.InvalidOperation", "module": "decimal", "doc": ["An invalid operation was performed.", "Indicates that an operation was requested that does not make sense.", "If not trapped, returns NaN.", "Possible causes include:"]}
{"index": 1611, "name": "decimal.Overflow", "module": "decimal", "doc": ["Numerical overflow.", "Indicates the exponent is larger than Emax after rounding has occurred.", "If not trapped, the result depends on the rounding mode, either pulling inward to the largest representable finite number or rounding outward to Infinity.", "In either case, Inexact and Rounded are also signaled."]}
{"index": 1612, "name": "decimal.Rounded", "module": "decimal", "doc": ["Rounding occurred though possibly no information was lost.", "Signaled whenever rounding discards digits; even if those digits are zero (such as rounding 5.00 to 5.0).", "If not trapped, returns the result unchanged.", "This signal is used to detect loss of significant digits."]}
{"index": 1613, "name": "decimal.Subnormal", "module": "decimal", "doc": ["Exponent was lower than Emin prior to rounding.", "Occurs when an operation result is subnormal (the exponent is too small).", "If not trapped, returns the result unchanged."]}
{"index": 1614, "name": "decimal.Underflow", "module": "decimal", "doc": ["Numerical underflow with result rounded to zero.", "Occurs when a subnormal result is pushed to zero by rounding.", "Inexact and Subnormal are also signaled."]}
{"index": 1615, "name": "decimal.FloatOperation", "module": "decimal", "doc": ["Enable stricter semantics for mixing floats and Decimals.", "If the signal is not trapped (default), mixing floats and Decimals is permitted in the Decimal constructor, create_decimal() and all comparison operators.", "Both conversion and comparisons are exact.", "Any occurrence of a mixed operation is silently recorded by setting FloatOperation in the context flags.", "Explicit conversions with from_float() or create_decimal_from_float() do not set the flag.", "Otherwise (the signal is trapped), only equality comparisons and explicit conversions are silent.", "All other mixed operations raise FloatOperation."]}
{"index": 1616, "name": "difflib.SequenceMatcher", "module": "difflib", "doc": ["This is a flexible class for comparing pairs of sequences of any type, so long as the sequence elements are hashable.", "The basic algorithm predates, and is a little fancier than, an algorithm published in the late 1980\u2019s by Ratcliff and Obershelp under the hyperbolic name \u201cgestalt pattern matching.\u201d  The idea is to find the longest contiguous matching subsequence that contains no \u201cjunk\u201d elements; these \u201cjunk\u201d elements are ones that are uninteresting in some sense, such as blank lines or whitespace.", "(Handling junk is an extension to the Ratcliff and Obershelp algorithm.)", "The same idea is then applied recursively to the pieces of the sequences to the left and to the right of the matching subsequence.", "This does not yield minimal edit sequences, but does tend to yield matches that \u201clook right\u201d to people.", "Timing: The basic Ratcliff-Obershelp algorithm is cubic time in the worst case and quadratic time in the expected case.", "SequenceMatcher is quadratic time for the worst case and has expected-case behavior dependent in a complicated way on how many elements the sequences have in common; best case time is linear.", "Automatic junk heuristic: SequenceMatcher supports a heuristic that automatically treats certain sequence items as junk.", "The heuristic counts how many times each individual item appears in the sequence.", "If an item\u2019s duplicates (after the first one) account for more than 1% of the sequence and the sequence is at least 200 items long, this item is marked as \u201cpopular\u201d and is treated as junk for the purpose of sequence matching.", "This heuristic can be turned off by setting the autojunk argument to False when creating the SequenceMatcher."]}
{"index": 1617, "name": "difflib.Differ", "module": "difflib", "doc": ["This is a class for comparing sequences of lines of text, and producing human-readable differences or deltas.", "Differ uses SequenceMatcher both to compare sequences of lines, and to compare sequences of characters within similar (near-matching) lines.", "Each line of a Differ delta begins with a two-letter code:", "Lines beginning with \u2018?\u2019 attempt to guide the eye to intraline differences, and were not present in either input sequence.", "These lines can be confusing if the sequences contain tab characters."]}
{"index": 1618, "name": "difflib.HtmlDiff", "module": "difflib", "doc": ["This class can be used to create an HTML table (or a complete HTML file containing the table) showing a side by side, line by line comparison of text with inter-line and intra-line change highlights.", "The table can be generated in either full or contextual difference mode.", "The constructor for this class is:", "The following methods are public:", "Tools/scripts/diff.py is a command-line front-end to this class and contains a good example of its use."]}
{"index": 1619, "name": "difflib.HtmlDiff.__init__", "module": "difflib", "doc": ["Initializes instance of HtmlDiff.", "tabsize is an optional keyword argument to specify tab stop spacing and defaults to 8.", "wrapcolumn is an optional keyword to specify column number where lines are broken and wrapped, defaults to None where lines are not wrapped.", "linejunk and charjunk are optional keyword arguments passed into ndiff() (used by HtmlDiff to generate the side by side HTML differences).", "See ndiff() documentation for argument default values and descriptions."]}
{"index": 1620, "name": "difflib.HtmlDiff.make_file", "module": "difflib", "doc": ["Compares fromlines and tolines (lists of strings) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted.", "fromdesc and todesc are optional keyword arguments to specify from/to file column header strings (both default to an empty string).", "context and numlines are both optional keyword arguments.", "Set context to True when contextual differences are to be shown, else the default is False to show the full files.", "numlines defaults to 5.", "When context is True numlines controls the number of context lines which surround the difference highlights.", "When context is False numlines controls the number of lines which are shown before a difference highlight when using the \u201cnext\u201d hyperlinks (setting to zero would cause the \u201cnext\u201d hyperlinks to place the next difference highlight at the top of the browser without any leading context)."]}
{"index": 1621, "name": "difflib.HtmlDiff.make_table", "module": "difflib", "doc": ["Compares fromlines and tolines (lists of strings) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted.", "The arguments for this method are the same as those for the make_file() method."]}
{"index": 1622, "name": "difflib.context_diff", "module": "difflib", "doc": ["Compare a and b (lists of strings); return a delta (a generator generating the delta lines) in context diff format.", "Context diffs are a compact way of showing just the lines that have changed plus a few lines of context.", "The changes are shown in a before/after style.", "The number of context lines is set by n which defaults to three.", "By default, the diff control lines (those with *** or ---) are created with a trailing newline.", "This is helpful so that inputs created from io.IOBase.readlines() result in diffs that are suitable for use with io.IOBase.writelines() since both the inputs and outputs have trailing newlines.", "For inputs that do not have trailing newlines, set the lineterm argument to \"\" so that the output will be uniformly newline free.", "The context diff format normally has a header for filenames and modification times.", "Any or all of these may be specified using strings for fromfile, tofile, fromfiledate, and tofiledate.", "The modification times are normally expressed in the ISO 8601 format.", "If not specified, the strings default to blanks.", "See A command-line interface to difflib for a more detailed example."]}
{"index": 1623, "name": "difflib.get_close_matches", "module": "difflib", "doc": ["Return a list of the best \u201cgood enough\u201d matches.", "word is a sequence for which close matches are desired (typically a string), and possibilities is a list of sequences against which to match word (typically a list of strings).", "Optional argument n (default 3) is the maximum number of close matches to return; n must be greater than 0.", "Optional argument cutoff (default 0.6) is a float in the range [0, 1].", "Possibilities that don\u2019t score at least that similar to word are ignored.", "The best (no more than n) matches among the possibilities are returned in a list, sorted by similarity score, most similar first."]}
{"index": 1624, "name": "difflib.ndiff", "module": "difflib", "doc": ["Compare a and b (lists of strings); return a Differ-style delta (a generator generating the delta lines).", "Optional keyword parameters linejunk and charjunk are filtering functions (or None):", "linejunk: A function that accepts a single string argument, and returns true if the string is junk, or false if not.", "The default is None.", "There is also a module-level function IS_LINE_JUNK(), which filters out lines without visible characters, except for at most one pound character ('#') \u2013 however the underlying SequenceMatcher class does a dynamic analysis of which lines are so frequent as to constitute noise, and this usually works better than using this function.", "charjunk: A function that accepts a character (a string of length 1), and returns if the character is junk, or false if not.", "The default is module-level function IS_CHARACTER_JUNK(), which filters out whitespace characters (a blank or tab; it\u2019s a bad idea to include newline in this!", ").", "Tools/scripts/ndiff.py is a command-line front-end to this function."]}
{"index": 1625, "name": "difflib.restore", "module": "difflib", "doc": ["Return one of the two sequences that generated a delta.", "Given a sequence produced by Differ.compare() or ndiff(), extract lines originating from file 1 or 2 (parameter which), stripping off line prefixes.", "Example:"]}
{"index": 1626, "name": "difflib.unified_diff", "module": "difflib", "doc": ["Compare a and b (lists of strings); return a delta (a generator generating the delta lines) in unified diff format.", "Unified diffs are a compact way of showing just the lines that have changed plus a few lines of context.", "The changes are shown in an inline style (instead of separate before/after blocks).", "The number of context lines is set by n which defaults to three.", "By default, the diff control lines (those with ---, +++, or @@) are created with a trailing newline.", "This is helpful so that inputs created from io.IOBase.readlines() result in diffs that are suitable for use with io.IOBase.writelines() since both the inputs and outputs have trailing newlines.", "For inputs that do not have trailing newlines, set the lineterm argument to \"\" so that the output will be uniformly newline free.", "The context diff format normally has a header for filenames and modification times.", "Any or all of these may be specified using strings for fromfile, tofile, fromfiledate, and tofiledate.", "The modification times are normally expressed in the ISO 8601 format.", "If not specified, the strings default to blanks.", "See A command-line interface to difflib for a more detailed example."]}
{"index": 1627, "name": "difflib.diff_bytes", "module": "difflib", "doc": ["Compare a and b (lists of bytes objects) using dfunc; yield a sequence of delta lines (also bytes) in the format returned by dfunc.", "dfunc must be a callable, typically either unified_diff() or context_diff().", "Allows you to compare data with unknown or inconsistent encoding.", "All inputs except n must be bytes objects, not str.", "Works by losslessly converting all inputs (except n) to str, and calling dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm).", "The output of dfunc is then converted back to bytes, so the delta lines that you receive have the same unknown/inconsistent encodings as a and b."]}
{"index": 1628, "name": "difflib.IS_LINE_JUNK", "module": "difflib", "doc": ["Return true for ignorable lines.", "The line line is ignorable if line is blank or contains a single '#', otherwise it is not ignorable.", "Used as a default for parameter linejunk in ndiff() in older versions."]}
{"index": 1629, "name": "difflib.IS_CHARACTER_JUNK", "module": "difflib", "doc": ["Return true for ignorable characters.", "The character ch is ignorable if ch is a space or tab, otherwise it is not ignorable.", "Used as a default for parameter charjunk in ndiff()."]}
{"index": 1630, "name": "id0", "module": "difflib", "doc": ["Optional argument isjunk must be None (the default) or a one-argument function that takes a sequence element and returns true if and only if the element is \u201cjunk\u201d and should be ignored.", "Passing None for isjunk is equivalent to passing lambda x: 0; in other words, no elements are ignored.", "For example, pass:", "if you\u2019re comparing lines as sequences of characters, and don\u2019t want to synch up on blanks or hard tabs.", "The optional arguments a and b are sequences to be compared; both default to empty strings.", "The elements of both sequences must be hashable.", "The optional argument autojunk can be used to disable the automatic junk heuristic.", "SequenceMatcher objects get three data attributes: bjunk is the set of elements of b for which isjunk is True; bpopular is the set of non-junk elements considered popular by the heuristic (if it is not disabled); b2j is a dict mapping the remaining elements of b to a list of positions where they occur.", "All three are reset whenever b is reset with set_seqs() or set_seq2().", "SequenceMatcher objects have the following methods:", "SequenceMatcher computes and caches detailed information about the second sequence, so if you want to compare one sequence against many sequences, use set_seq2() to set the commonly used sequence once and call set_seq1() repeatedly, once for each of the other sequences."]}
{"index": 1631, "name": "difflib.SequenceMatcher.set_seqs", "module": "difflib", "doc": ["Set the two sequences to be compared."]}
{"index": 1632, "name": "difflib.SequenceMatcher.set_seq1", "module": "difflib", "doc": ["Set the first sequence to be compared.", "The second sequence to be compared is not changed."]}
{"index": 1633, "name": "difflib.SequenceMatcher.set_seq2", "module": "difflib", "doc": ["Set the second sequence to be compared.", "The first sequence to be compared is not changed."]}
{"index": 1634, "name": "difflib.SequenceMatcher.find_longest_match", "module": "difflib", "doc": ["Find longest matching block in a[alo:ahi] and b[blo:bhi].", "If isjunk was omitted or None, find_longest_match() returns (i, j, k) such that a[i:i+k] is equal to b[j:j+k], where alo <= i <= i+k <= ahi and blo <= j <= j+k <= bhi.", "For all (i', j', k') meeting those conditions, the additional conditions k >= k', i <= i', and if i == i', j <= j' are also met.", "In other words, of all maximal matching blocks, return one that starts earliest in a, and of all those maximal matching blocks that start earliest in a, return the one that starts earliest in b.", "If isjunk was provided, first the longest matching block is determined as above, but with the additional restriction that no junk element appears in the block.", "Then that block is extended as far as possible by matching (only) junk elements on both sides.", "So the resulting block never matches on junk except as identical junk happens to be adjacent to an interesting match.", "Here\u2019s the same example as before, but considering blanks to be junk.", "That prevents ' abcd' from matching the ' abcd' at the tail end of the second sequence directly.", "Instead only the 'abcd' can match, and matches the leftmost 'abcd' in the second sequence:", "If no blocks match, this returns (alo, blo, 0).", "This method returns a named tuple Match(a, b, size)."]}
{"index": 1635, "name": "difflib.SequenceMatcher.get_matching_blocks", "module": "difflib", "doc": ["Return list of triples describing non-overlapping matching subsequences.", "Each triple is of the form (i, j, n), and means that a[i:i+n] == b[j:j+n].", "The triples are monotonically increasing in i and j.", "The last triple is a dummy, and has the value (len(a), len(b), 0).", "It is the only triple with n == 0.", "If (i, j, n) and (i', j', n') are adjacent triples in the list, and the second is not the last triple in the list, then i+n < i' or j+n < j'; in other words, adjacent triples always describe non-adjacent equal blocks."]}
{"index": 1636, "name": "difflib.SequenceMatcher.get_opcodes", "module": "difflib", "doc": ["Return list of 5-tuples describing how to turn a into b.", "Each tuple is of the form (tag, i1, i2, j1, j2).", "The first tuple has i1 == j1 == 0, and remaining tuples have i1 equal to the i2 from the preceding tuple, and, likewise, j1 equal to the previous j2.", "The tag values are strings, with these meanings:", "For example:"]}
{"index": 1637, "name": "difflib.SequenceMatcher.get_grouped_opcodes", "module": "difflib", "doc": ["Return a generator of groups with up to n lines of context.", "Starting with the groups returned by get_opcodes(), this method splits out smaller change clusters and eliminates intervening ranges which have no changes.", "The groups are returned in the same format as get_opcodes()."]}
{"index": 1638, "name": "difflib.SequenceMatcher.ratio", "module": "difflib", "doc": ["Return a measure of the sequences\u2019 similarity as a float in the range [0, 1].", "Where T is the total number of elements in both sequences, and M is the number of matches, this is 2.0*M / T. Note that this is 1.0 if the sequences are identical, and 0.0 if they have nothing in common.", "This is expensive to compute if get_matching_blocks() or get_opcodes() hasn\u2019t already been called, in which case you may want to try quick_ratio() or real_quick_ratio() first to get an upper bound."]}
{"index": 1639, "name": "difflib.SequenceMatcher.quick_ratio", "module": "difflib", "doc": ["Return an upper bound on ratio() relatively quickly."]}
{"index": 1640, "name": "difflib.SequenceMatcher.real_quick_ratio", "module": "difflib", "doc": ["Return an upper bound on ratio() very quickly."]}
{"index": 1641, "name": "id3", "module": "difflib", "doc": ["Optional keyword parameters linejunk and charjunk are for filter functions (or None):", "linejunk: A function that accepts a single string argument, and returns true if the string is junk.", "The default is None, meaning that no line is considered junk.", "charjunk: A function that accepts a single character argument (a string of length 1), and returns true if the character is junk.", "The default is None, meaning that no character is considered junk.", "These junk-filtering functions speed up matching to find differences and do not cause any differing lines or characters to be ignored.", "Read the description of the find_longest_match() method\u2019s isjunk parameter for an explanation.", "Differ objects are used (deltas generated) via a single method:"]}
{"index": 1642, "name": "difflib.Differ.compare", "module": "difflib", "doc": ["Compare two sequences of lines, and generate the delta (a sequence of lines).", "Each sequence must contain individual single-line strings ending with newlines.", "Such sequences can be obtained from the readlines() method of file-like objects.", "The delta generated also consists of newline-terminated strings, ready to be printed as-is via the writelines() method of a file-like object."]}
{"index": 1643, "name": "dis.Bytecode", "module": "dis", "doc": ["Analyse the bytecode corresponding to a function, generator, asynchronous generator, coroutine, method, string of source code, or a code object (as returned by compile()).", "This is a convenience wrapper around many of the functions listed below, most notably get_instructions(), as iterating over a Bytecode instance yields the bytecode operations as Instruction instances.", "If first_line is not None, it indicates the line number that should be reported for the first source line in the disassembled code.", "Otherwise, the source line information (if any) is taken directly from the disassembled code object.", "If current_offset is not None, it refers to an instruction offset in the disassembled code.", "Setting this means dis() will display a \u201ccurrent instruction\u201d marker against the specified opcode."]}
{"index": 1644, "name": "dis.Bytecode.from_traceback", "module": "dis", "doc": ["Construct a Bytecode instance from the given traceback, setting current_offset to the instruction responsible for the exception."]}
{"index": 1645, "name": "dis.Bytecode.codeobj", "module": "dis", "doc": ["The compiled code object."]}
{"index": 1646, "name": "dis.Bytecode.first_line", "module": "dis", "doc": ["The first source line of the code object (if available)"]}
{"index": 1647, "name": "dis.Bytecode.dis", "module": "dis", "doc": ["Return a formatted view of the bytecode operations (the same as printed by dis.dis(), but returned as a multi-line string)."]}
{"index": 1648, "name": "dis.Bytecode.info", "module": "dis", "doc": ["Return a formatted multi-line string with detailed information about the code object, like code_info()."]}
{"index": 1649, "name": "dis.code_info", "module": "dis", "doc": ["Return a formatted multi-line string with detailed code object information for the supplied function, generator, asynchronous generator, coroutine, method, source code string or code object.", "Note that the exact contents of code info strings are highly implementation dependent and they may change arbitrarily across Python VMs or Python releases."]}
{"index": 1650, "name": "dis.show_code", "module": "dis", "doc": ["Print detailed code object information for the supplied function, method, source code string or code object to file (or sys.stdout if file is not specified).", "This is a convenient shorthand for print(code_info(x), file=file), intended for interactive exploration at the interpreter prompt."]}
{"index": 1651, "name": "dis.dis", "module": "dis", "doc": ["Disassemble the x object.", "x can denote either a module, a class, a method, a function, a generator, an asynchronous generator, a coroutine, a code object, a string of source code or a byte sequence of raw bytecode.", "For a module, it disassembles all functions.", "For a class, it disassembles all methods (including class and static methods).", "For a code object or sequence of raw bytecode, it prints one line per bytecode instruction.", "It also recursively disassembles nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes).", "Strings are first compiled to code objects with the compile() built-in function before being disassembled.", "If no object is provided, this function disassembles the last traceback.", "The disassembly is written as text to the supplied file argument if provided and to sys.stdout otherwise.", "The maximal depth of recursion is limited by depth unless it is None.", "depth=0 means no recursion."]}
{"index": 1652, "name": "dis.distb", "module": "dis", "doc": ["Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed.", "The instruction causing the exception is indicated.", "The disassembly is written as text to the supplied file argument if provided and to sys.stdout otherwise."]}
{"index": 1653, "name": "dis.disassemble", "module": "dis", "doc": ["Disassemble a code object, indicating the last instruction if lasti was provided.", "The output is divided in the following columns:", "The parameter interpretation recognizes local and global variable names, constant values, branch targets, and compare operators.", "The disassembly is written as text to the supplied file argument if provided and to sys.stdout otherwise."]}
{"index": 1654, "name": "dis.disco", "module": "dis", "doc": ["Disassemble a code object, indicating the last instruction if lasti was provided.", "The output is divided in the following columns:", "The parameter interpretation recognizes local and global variable names, constant values, branch targets, and compare operators.", "The disassembly is written as text to the supplied file argument if provided and to sys.stdout otherwise."]}
{"index": 1655, "name": "dis.get_instructions", "module": "dis", "doc": ["Return an iterator over the instructions in the supplied function, method, source code string or code object.", "The iterator generates a series of Instruction named tuples giving the details of each operation in the supplied code.", "If first_line is not None, it indicates the line number that should be reported for the first source line in the disassembled code.", "Otherwise, the source line information (if any) is taken directly from the disassembled code object."]}
{"index": 1656, "name": "dis.findlinestarts", "module": "dis", "doc": ["This generator function uses the co_firstlineno and co_lnotab attributes of the code object code to find the offsets which are starts of lines in the source code.", "They are generated as (offset, lineno) pairs.", "See Objects/lnotab_notes.txt for the co_lnotab format and how to decode it."]}
{"index": 1657, "name": "dis.findlabels", "module": "dis", "doc": ["Detect all offsets in the code object code which are jump targets, and return a list of these offsets."]}
{"index": 1658, "name": "dis.stack_effect", "module": "dis", "doc": ["Compute the stack effect of opcode with argument oparg."]}
{"index": 1659, "name": "dis.Instruction", "module": "dis", "doc": ["Details for a bytecode operation"]}
{"index": 1660, "name": "dis.Instruction.opcode", "module": "dis", "doc": ["numeric code for operation, corresponding to the opcode values listed below and the bytecode values in the Opcode collections."]}
{"index": 1661, "name": "dis.Instruction.opname", "module": "dis", "doc": ["human readable name for operation"]}
{"index": 1662, "name": "dis.Instruction.arg", "module": "dis", "doc": ["numeric argument to operation (if any), otherwise None"]}
{"index": 1663, "name": "dis.Instruction.argval", "module": "dis", "doc": ["resolved arg value (if known), otherwise same as arg"]}
{"index": 1664, "name": "dis.Instruction.argrepr", "module": "dis", "doc": ["human readable description of operation argument"]}
{"index": 1665, "name": "dis.Instruction.offset", "module": "dis", "doc": ["start index of operation within bytecode sequence"]}
{"index": 1666, "name": "dis.Instruction.starts_line", "module": "dis", "doc": ["line started by this opcode (if any), otherwise None"]}
{"index": 1667, "name": "dis.Instruction.is_jump_target", "module": "dis", "doc": ["True if other code jumps to here, otherwise False"]}
{"index": 1668, "name": "opcode-NOP", "module": "dis", "doc": ["Do nothing code.", "Used as a placeholder by the bytecode optimizer."]}
{"index": 1669, "name": "opcode-POP_TOP", "module": "dis", "doc": ["Removes the top-of-stack (TOS) item."]}
{"index": 1670, "name": "opcode-ROT_TWO", "module": "dis", "doc": ["Swaps the two top-most stack items."]}
{"index": 1671, "name": "opcode-ROT_THREE", "module": "dis", "doc": ["Lifts second and third stack item one position up, moves top down to position three."]}
{"index": 1672, "name": "opcode-DUP_TOP", "module": "dis", "doc": ["Duplicates the reference on top of the stack."]}
{"index": 1673, "name": "opcode-DUP_TOP_TWO", "module": "dis", "doc": ["Duplicates the two references on top of the stack, leaving them in the same order."]}
{"index": 1674, "name": "opcode-UNARY_POSITIVE", "module": "dis", "doc": ["Implements TOS = +TOS."]}
{"index": 1675, "name": "opcode-UNARY_NEGATIVE", "module": "dis", "doc": ["Implements TOS = -TOS."]}
{"index": 1676, "name": "opcode-UNARY_NOT", "module": "dis", "doc": ["Implements TOS = not TOS."]}
{"index": 1677, "name": "opcode-UNARY_INVERT", "module": "dis", "doc": ["Implements TOS = ~TOS."]}
{"index": 1678, "name": "opcode-GET_ITER", "module": "dis", "doc": ["Implements TOS = iter(TOS)."]}
{"index": 1679, "name": "opcode-GET_YIELD_FROM_ITER", "module": "dis", "doc": ["If TOS is a generator iterator or coroutine object it is left as is.", "Otherwise, implements TOS = iter(TOS)."]}
{"index": 1680, "name": "opcode-BINARY_POWER", "module": "dis", "doc": ["Implements TOS = TOS1 ** TOS."]}
{"index": 1681, "name": "opcode-BINARY_MULTIPLY", "module": "dis", "doc": ["Implements TOS = TOS1 * TOS."]}
{"index": 1682, "name": "opcode-BINARY_MATRIX_MULTIPLY", "module": "dis", "doc": ["Implements TOS = TOS1 @ TOS."]}
{"index": 1683, "name": "opcode-BINARY_FLOOR_DIVIDE", "module": "dis", "doc": ["Implements TOS = TOS1 // TOS."]}
{"index": 1684, "name": "opcode-BINARY_TRUE_DIVIDE", "module": "dis", "doc": ["Implements TOS = TOS1 / TOS."]}
{"index": 1685, "name": "opcode-BINARY_MODULO", "module": "dis", "doc": ["Implements TOS = TOS1 % TOS."]}
{"index": 1686, "name": "opcode-BINARY_ADD", "module": "dis", "doc": ["Implements TOS = TOS1 + TOS."]}
{"index": 1687, "name": "opcode-BINARY_SUBTRACT", "module": "dis", "doc": ["Implements TOS = TOS1 - TOS."]}
{"index": 1688, "name": "opcode-BINARY_SUBSCR", "module": "dis", "doc": ["Implements TOS = TOS1[TOS]."]}
{"index": 1689, "name": "opcode-BINARY_LSHIFT", "module": "dis", "doc": ["Implements TOS = TOS1 << TOS."]}
{"index": 1690, "name": "opcode-BINARY_RSHIFT", "module": "dis", "doc": ["Implements TOS = TOS1 >> TOS."]}
{"index": 1691, "name": "opcode-BINARY_AND", "module": "dis", "doc": ["Implements TOS = TOS1 & TOS."]}
{"index": 1692, "name": "opcode-BINARY_XOR", "module": "dis", "doc": ["Implements TOS = TOS1 ^ TOS."]}
{"index": 1693, "name": "opcode-BINARY_OR", "module": "dis", "doc": ["Implements TOS = TOS1 | TOS."]}
{"index": 1694, "name": "opcode-INPLACE_POWER", "module": "dis", "doc": ["Implements in-place TOS = TOS1 ** TOS."]}
{"index": 1695, "name": "opcode-INPLACE_MULTIPLY", "module": "dis", "doc": ["Implements in-place TOS = TOS1 * TOS."]}
{"index": 1696, "name": "opcode-INPLACE_MATRIX_MULTIPLY", "module": "dis", "doc": ["Implements in-place TOS = TOS1 @ TOS."]}
{"index": 1697, "name": "opcode-INPLACE_FLOOR_DIVIDE", "module": "dis", "doc": ["Implements in-place TOS = TOS1 // TOS."]}
{"index": 1698, "name": "opcode-INPLACE_TRUE_DIVIDE", "module": "dis", "doc": ["Implements in-place TOS = TOS1 / TOS."]}
{"index": 1699, "name": "opcode-INPLACE_MODULO", "module": "dis", "doc": ["Implements in-place TOS = TOS1 % TOS."]}
{"index": 1700, "name": "opcode-INPLACE_ADD", "module": "dis", "doc": ["Implements in-place TOS = TOS1 + TOS."]}
{"index": 1701, "name": "opcode-INPLACE_SUBTRACT", "module": "dis", "doc": ["Implements in-place TOS = TOS1 - TOS."]}
{"index": 1702, "name": "opcode-INPLACE_LSHIFT", "module": "dis", "doc": ["Implements in-place TOS = TOS1 << TOS."]}
{"index": 1703, "name": "opcode-INPLACE_RSHIFT", "module": "dis", "doc": ["Implements in-place TOS = TOS1 >> TOS."]}
{"index": 1704, "name": "opcode-INPLACE_AND", "module": "dis", "doc": ["Implements in-place TOS = TOS1 & TOS."]}
{"index": 1705, "name": "opcode-INPLACE_XOR", "module": "dis", "doc": ["Implements in-place TOS = TOS1 ^ TOS."]}
{"index": 1706, "name": "opcode-INPLACE_OR", "module": "dis", "doc": ["Implements in-place TOS = TOS1 | TOS."]}
{"index": 1707, "name": "opcode-STORE_SUBSCR", "module": "dis", "doc": ["Implements TOS1[TOS] = TOS2."]}
{"index": 1708, "name": "opcode-DELETE_SUBSCR", "module": "dis", "doc": ["Implements del TOS1[TOS]."]}
{"index": 1709, "name": "opcode-GET_AWAITABLE", "module": "dis", "doc": ["Implements TOS = get_awaitable(TOS), where get_awaitable(o) returns o if o is a coroutine object or a generator object with the CO_ITERABLE_COROUTINE flag, or resolves o.__await__."]}
{"index": 1710, "name": "opcode-GET_AITER", "module": "dis", "doc": ["Implements TOS = TOS.__aiter__()."]}
{"index": 1711, "name": "opcode-GET_ANEXT", "module": "dis", "doc": ["Implements PUSH(get_awaitable(TOS.__anext__())).", "See GET_AWAITABLE for details about get_awaitable"]}
{"index": 1712, "name": "opcode-BEFORE_ASYNC_WITH", "module": "dis", "doc": ["Resolves __aenter__ and __aexit__ from the object on top of the stack.", "Pushes __aexit__ and result of __aenter__() to the stack."]}
{"index": 1713, "name": "opcode-SETUP_ASYNC_WITH", "module": "dis", "doc": ["Creates a new frame object."]}
{"index": 1714, "name": "opcode-PRINT_EXPR", "module": "dis", "doc": ["Implements the expression statement for the interactive mode.", "TOS is removed from the stack and printed.", "In non-interactive mode, an expression statement is terminated with POP_TOP."]}
{"index": 1715, "name": "opcode-BREAK_LOOP", "module": "dis", "doc": ["Terminates a loop due to a break statement."]}
{"index": 1716, "name": "opcode-CONTINUE_LOOP", "module": "dis", "doc": ["Continues a loop due to a continue statement.", "target is the address to jump to (which should be a FOR_ITER instruction)."]}
{"index": 1717, "name": "opcode-SET_ADD", "module": "dis", "doc": ["Calls set.add(TOS1[-i], TOS).", "Used to implement set comprehensions."]}
{"index": 1718, "name": "opcode-LIST_APPEND", "module": "dis", "doc": ["Calls list.append(TOS[-i], TOS).", "Used to implement list comprehensions."]}
{"index": 1719, "name": "opcode-MAP_ADD", "module": "dis", "doc": ["Calls dict.setitem(TOS1[-i], TOS, TOS1).", "Used to implement dict comprehensions."]}
{"index": 1720, "name": "opcode-RETURN_VALUE", "module": "dis", "doc": ["Returns with TOS to the caller of the function."]}
{"index": 1721, "name": "opcode-YIELD_VALUE", "module": "dis", "doc": ["Pops TOS and yields it from a generator."]}
{"index": 1722, "name": "opcode-YIELD_FROM", "module": "dis", "doc": ["Pops TOS and delegates to it as a subiterator from a generator."]}
{"index": 1723, "name": "opcode-SETUP_ANNOTATIONS", "module": "dis", "doc": ["Checks whether __annotations__ is defined in locals(), if not it is set up to an empty dict.", "This opcode is only emitted if a class or module body contains variable annotations statically."]}
{"index": 1724, "name": "opcode-IMPORT_STAR", "module": "dis", "doc": ["Loads all symbols not starting with '_' directly from the module TOS to the local namespace.", "The module is popped after loading all names.", "This opcode implements from module import *."]}
{"index": 1725, "name": "opcode-POP_BLOCK", "module": "dis", "doc": ["Removes one block from the block stack.", "Per frame, there is a stack of blocks, denoting nested loops, try statements, and such."]}
{"index": 1726, "name": "opcode-POP_EXCEPT", "module": "dis", "doc": ["Removes one block from the block stack.", "The popped block must be an exception handler block, as implicitly created when entering an except handler.", "In addition to popping extraneous values from the frame stack, the last three popped values are used to restore the exception state."]}
{"index": 1727, "name": "opcode-END_FINALLY", "module": "dis", "doc": ["Terminates a finally clause.", "The interpreter recalls whether the exception has to be re-raised, or whether the function returns, and continues with the outer-next block."]}
{"index": 1728, "name": "opcode-LOAD_BUILD_CLASS", "module": "dis", "doc": ["Pushes builtins.__build_class__() onto the stack.", "It is later called by CALL_FUNCTION to construct a class."]}
{"index": 1729, "name": "opcode-SETUP_WITH", "module": "dis", "doc": ["This opcode performs several operations before a with block starts.", "First, it loads __exit__() from the context manager and pushes it onto the stack for later use by WITH_CLEANUP.", "Then, __enter__() is called, and a finally block pointing to delta is pushed.", "Finally, the result of calling the enter method is pushed onto the stack.", "The next opcode will either ignore it (POP_TOP), or store it in (a) variable(s) (STORE_FAST, STORE_NAME, or UNPACK_SEQUENCE)."]}
{"index": 1730, "name": "opcode-WITH_CLEANUP_START", "module": "dis", "doc": ["Cleans up the stack when a with statement block exits.", "TOS is the context manager\u2019s __exit__() bound method.", "Below TOS are 1\u20133 values indicating how/why the finally clause was entered:", "In the last case, TOS(SECOND, THIRD, FOURTH) is called, otherwise TOS(None, None, None).", "Pushes SECOND and result of the call to the stack."]}
{"index": 1731, "name": "opcode-WITH_CLEANUP_FINISH", "module": "dis", "doc": ["Pops exception type and result of \u2018exit\u2019 function call from the stack.", "If the stack represents an exception, and the function call returns a \u2018true\u2019 value, this information is \u201czapped\u201d and replaced with a single WHY_SILENCED to prevent END_FINALLY from re-raising the exception.", "(But non-local gotos will still be resumed.)"]}
{"index": 1732, "name": "opcode-STORE_NAME", "module": "dis", "doc": ["Implements name = TOS.", "namei is the index of name in the attribute co_names of the code object.", "The compiler tries to use STORE_FAST or STORE_GLOBAL if possible."]}
{"index": 1733, "name": "opcode-DELETE_NAME", "module": "dis", "doc": ["Implements del name, where namei is the index into co_names attribute of the code object."]}
{"index": 1734, "name": "opcode-UNPACK_SEQUENCE", "module": "dis", "doc": ["Unpacks TOS into count individual values, which are put onto the stack right-to-left."]}
{"index": 1735, "name": "opcode-UNPACK_EX", "module": "dis", "doc": ["Implements assignment with a starred target: Unpacks an iterable in TOS into individual values, where the total number of values can be smaller than the number of items in the iterable: one of the new values will be a list of all leftover items.", "The low byte of counts is the number of values before the list value, the high byte of counts the number of values after it.", "The resulting values are put onto the stack right-to-left."]}
{"index": 1736, "name": "opcode-STORE_ATTR", "module": "dis", "doc": ["Implements TOS.name = TOS1, where namei is the index of name in co_names."]}
{"index": 1737, "name": "opcode-DELETE_ATTR", "module": "dis", "doc": ["Implements del TOS.name, using namei as index into co_names."]}
{"index": 1738, "name": "opcode-STORE_GLOBAL", "module": "dis", "doc": ["Works as STORE_NAME, but stores the name as a global."]}
{"index": 1739, "name": "opcode-DELETE_GLOBAL", "module": "dis", "doc": ["Works as DELETE_NAME, but deletes a global name."]}
{"index": 1740, "name": "opcode-LOAD_CONST", "module": "dis", "doc": ["Pushes co_consts[consti] onto the stack."]}
{"index": 1741, "name": "opcode-LOAD_NAME", "module": "dis", "doc": ["Pushes the value associated with co_names[namei] onto the stack."]}
{"index": 1742, "name": "opcode-BUILD_TUPLE", "module": "dis", "doc": ["Creates a tuple consuming count items from the stack, and pushes the resulting tuple onto the stack."]}
{"index": 1743, "name": "opcode-BUILD_LIST", "module": "dis", "doc": ["Works as BUILD_TUPLE, but creates a list."]}
{"index": 1744, "name": "opcode-BUILD_SET", "module": "dis", "doc": ["Works as BUILD_TUPLE, but creates a set."]}
{"index": 1745, "name": "opcode-BUILD_MAP", "module": "dis", "doc": ["Pushes a new dictionary object onto the stack.", "Pops 2 * count items so that the dictionary holds count entries: {..., TOS3: TOS2, TOS1: TOS}."]}
{"index": 1746, "name": "opcode-BUILD_CONST_KEY_MAP", "module": "dis", "doc": ["The version of BUILD_MAP specialized for constant keys.", "count values are consumed from the stack.", "The top element on the stack contains a tuple of keys."]}
{"index": 1747, "name": "opcode-BUILD_STRING", "module": "dis", "doc": ["Concatenates count strings from the stack and pushes the resulting string onto the stack."]}
{"index": 1748, "name": "opcode-BUILD_TUPLE_UNPACK", "module": "dis", "doc": ["Pops count iterables from the stack, joins them in a single tuple, and pushes the result.", "Implements iterable unpacking in tuple displays (*x, *y, *z)."]}
{"index": 1749, "name": "opcode-BUILD_TUPLE_UNPACK_WITH_CALL", "module": "dis", "doc": ["This is similar to BUILD_TUPLE_UNPACK, but is used for f(*x, *y, *z) call syntax.", "The stack item at position count + 1 should be the corresponding callable f."]}
{"index": 1750, "name": "opcode-BUILD_LIST_UNPACK", "module": "dis", "doc": ["This is similar to BUILD_TUPLE_UNPACK, but pushes a list instead of tuple.", "Implements iterable unpacking in list displays [*x, *y, *z]."]}
{"index": 1751, "name": "opcode-BUILD_SET_UNPACK", "module": "dis", "doc": ["This is similar to BUILD_TUPLE_UNPACK, but pushes a set instead of tuple.", "Implements iterable unpacking in set displays {*x, *y, *z}."]}
{"index": 1752, "name": "opcode-BUILD_MAP_UNPACK", "module": "dis", "doc": ["Pops count mappings from the stack, merges them into a single dictionary, and pushes the result.", "Implements dictionary unpacking in dictionary displays {**x, **y, **z}."]}
{"index": 1753, "name": "opcode-BUILD_MAP_UNPACK_WITH_CALL", "module": "dis", "doc": ["This is similar to BUILD_MAP_UNPACK, but is used for f(**x, **y, **z) call syntax.", "The stack item at position count + 2 should be the corresponding callable f."]}
{"index": 1754, "name": "opcode-LOAD_ATTR", "module": "dis", "doc": ["Replaces TOS with getattr(TOS, co_names[namei])."]}
{"index": 1755, "name": "opcode-COMPARE_OP", "module": "dis", "doc": ["Performs a Boolean operation.", "The operation name can be found in cmp_op[opname]."]}
{"index": 1756, "name": "opcode-IMPORT_NAME", "module": "dis", "doc": ["Imports the module co_names[namei].", "TOS and TOS1 are popped and provide the fromlist and level arguments of __import__().", "The module object is pushed onto the stack.", "The current namespace is not affected: for a proper import statement, a subsequent STORE_FAST instruction modifies the namespace."]}
{"index": 1757, "name": "opcode-IMPORT_FROM", "module": "dis", "doc": ["Loads the attribute co_names[namei] from the module found in TOS.", "The resulting object is pushed onto the stack, to be subsequently stored by a STORE_FAST instruction."]}
{"index": 1758, "name": "opcode-JUMP_FORWARD", "module": "dis", "doc": ["Increments bytecode counter by delta."]}
{"index": 1759, "name": "opcode-POP_JUMP_IF_TRUE", "module": "dis", "doc": ["If TOS is true, sets the bytecode counter to target.", "TOS is popped."]}
{"index": 1760, "name": "opcode-POP_JUMP_IF_FALSE", "module": "dis", "doc": ["If TOS is false, sets the bytecode counter to target.", "TOS is popped."]}
{"index": 1761, "name": "opcode-JUMP_IF_TRUE_OR_POP", "module": "dis", "doc": ["If TOS is true, sets the bytecode counter to target and leaves TOS on the stack.", "Otherwise (TOS is false), TOS is popped."]}
{"index": 1762, "name": "opcode-JUMP_IF_FALSE_OR_POP", "module": "dis", "doc": ["If TOS is false, sets the bytecode counter to target and leaves TOS on the stack.", "Otherwise (TOS is true), TOS is popped."]}
{"index": 1763, "name": "opcode-JUMP_ABSOLUTE", "module": "dis", "doc": ["Set bytecode counter to target."]}
{"index": 1764, "name": "opcode-FOR_ITER", "module": "dis", "doc": ["TOS is an iterator.", "Call its __next__() method.", "If this yields a new value, push it on the stack (leaving the iterator below it).", "If the iterator indicates it is exhausted TOS is popped, and the byte code counter is incremented by delta."]}
{"index": 1765, "name": "opcode-LOAD_GLOBAL", "module": "dis", "doc": ["Loads the global named co_names[namei] onto the stack."]}
{"index": 1766, "name": "opcode-SETUP_LOOP", "module": "dis", "doc": ["Pushes a block for a loop onto the block stack.", "The block spans from the current instruction with a size of delta bytes."]}
{"index": 1767, "name": "opcode-SETUP_EXCEPT", "module": "dis", "doc": ["Pushes a try block from a try-except clause onto the block stack.", "delta points to the first except block."]}
{"index": 1768, "name": "opcode-SETUP_FINALLY", "module": "dis", "doc": ["Pushes a try block from a try-except clause onto the block stack.", "delta points to the finally block."]}
{"index": 1769, "name": "opcode-LOAD_FAST", "module": "dis", "doc": ["Pushes a reference to the local co_varnames[var_num] onto the stack."]}
{"index": 1770, "name": "opcode-STORE_FAST", "module": "dis", "doc": ["Stores TOS into the local co_varnames[var_num]."]}
{"index": 1771, "name": "opcode-DELETE_FAST", "module": "dis", "doc": ["Deletes local co_varnames[var_num]."]}
{"index": 1772, "name": "opcode-LOAD_CLOSURE", "module": "dis", "doc": ["Pushes a reference to the cell contained in slot i of the cell and free variable storage.", "The name of the variable is co_cellvars[i] if i is less than the length of co_cellvars.", "Otherwise it is co_freevars[i - len(co_cellvars)]."]}
{"index": 1773, "name": "opcode-LOAD_DEREF", "module": "dis", "doc": ["Loads the cell contained in slot i of the cell and free variable storage.", "Pushes a reference to the object the cell contains on the stack."]}
{"index": 1774, "name": "opcode-LOAD_CLASSDEREF", "module": "dis", "doc": ["Much like LOAD_DEREF but first checks the locals dictionary before consulting the cell.", "This is used for loading free variables in class bodies."]}
{"index": 1775, "name": "opcode-STORE_DEREF", "module": "dis", "doc": ["Stores TOS into the cell contained in slot i of the cell and free variable storage."]}
{"index": 1776, "name": "opcode-DELETE_DEREF", "module": "dis", "doc": ["Empties the cell contained in slot i of the cell and free variable storage.", "Used by the del statement."]}
{"index": 1777, "name": "opcode-RAISE_VARARGS", "module": "dis", "doc": ["Raises an exception using one of the 3 forms of the raise statement, depending on the value of argc:"]}
{"index": 1778, "name": "opcode-CALL_FUNCTION", "module": "dis", "doc": ["Calls a callable object with positional arguments.", "argc indicates the number of positional arguments.", "The top of the stack contains positional arguments, with the right-most argument on top.", "Below the arguments is a callable object to call.", "CALL_FUNCTION pops all arguments and the callable object off the stack, calls the callable object with those arguments, and pushes the return value returned by the callable object."]}
{"index": 1779, "name": "opcode-CALL_FUNCTION_KW", "module": "dis", "doc": ["Calls a callable object with positional (if any) and keyword arguments.", "argc indicates the total number of positional and keyword arguments.", "The top element on the stack contains a tuple of keyword argument names.", "Below that are keyword arguments in the order corresponding to the tuple.", "Below that are positional arguments, with the right-most parameter on top.", "Below the arguments is a callable object to call.", "CALL_FUNCTION_KW pops all arguments and the callable object off the stack, calls the callable object with those arguments, and pushes the return value returned by the callable object."]}
{"index": 1780, "name": "opcode-CALL_FUNCTION_EX", "module": "dis", "doc": ["Calls a callable object with variable set of positional and keyword arguments.", "If the lowest bit of flags is set, the top of the stack contains a mapping object containing additional keyword arguments.", "Below that is an iterable object containing positional arguments and a callable object to call.", "BUILD_MAP_UNPACK_WITH_CALL and BUILD_TUPLE_UNPACK_WITH_CALL can be used for merging multiple mapping objects and iterables containing arguments.", "Before the callable is called, the mapping object and iterable object are each \u201cunpacked\u201d and their contents passed in as keyword and positional arguments respectively.", "CALL_FUNCTION_EX pops all arguments and the callable object off the stack, calls the callable object with those arguments, and pushes the return value returned by the callable object."]}
{"index": 1781, "name": "opcode-LOAD_METHOD", "module": "dis", "doc": ["Loads a method named co_names[namei] from TOS object.", "TOS is popped and method and TOS are pushed when interpreter can call unbound method directly.", "TOS will be used as the first argument (self) by CALL_METHOD.", "Otherwise, NULL and  method is pushed (method is bound method or something else)."]}
{"index": 1782, "name": "opcode-CALL_METHOD", "module": "dis", "doc": ["Calls a method.", "argc is number of positional arguments.", "Keyword arguments are not supported.", "This opcode is designed to be used with LOAD_METHOD.", "Positional arguments are on top of the stack.", "Below them, two items described in LOAD_METHOD on the stack.", "All of them are popped and return value is pushed."]}
{"index": 1783, "name": "opcode-MAKE_FUNCTION", "module": "dis", "doc": ["Pushes a new function object on the stack.", "From bottom to top, the consumed stack must consist of values if the argument carries a specified flag value"]}
{"index": 1784, "name": "opcode-BUILD_SLICE", "module": "dis", "doc": ["Pushes a slice object on the stack.", "argc must be 2 or 3.", "If it is 2, slice(TOS1, TOS) is pushed; if it is 3, slice(TOS2, TOS1, TOS) is pushed.", "See the slice() built-in function for more information."]}
{"index": 1785, "name": "opcode-EXTENDED_ARG", "module": "dis", "doc": ["Prefixes any opcode which has an argument too big to fit into the default one byte.", "ext holds an additional byte which act as higher bits in the argument.", "For each opcode, at most three prefixal EXTENDED_ARG are allowed, forming an argument from two-byte to four-byte."]}
{"index": 1786, "name": "opcode-FORMAT_VALUE", "module": "dis", "doc": ["Used for implementing formatted literal strings (f-strings).", "Pops an optional fmt_spec from the stack, then a required value.", "flags is interpreted as follows:", "Formatting is performed using PyObject_Format().", "The result is pushed on the stack."]}
{"index": 1787, "name": "opcode-HAVE_ARGUMENT", "module": "dis", "doc": ["This is not really an opcode.", "It identifies the dividing line between opcodes which don\u2019t use their argument and those that do (< HAVE_ARGUMENT and >= HAVE_ARGUMENT, respectively)."]}
{"index": 1788, "name": "dis.opname", "module": "dis", "doc": ["Sequence of operation names, indexable using the bytecode."]}
{"index": 1789, "name": "dis.opmap", "module": "dis", "doc": ["Dictionary mapping operation names to bytecodes."]}
{"index": 1790, "name": "dis.cmp_op", "module": "dis", "doc": ["Sequence of all compare operation names."]}
{"index": 1791, "name": "dis.hasconst", "module": "dis", "doc": ["Sequence of bytecodes that access a constant."]}
{"index": 1792, "name": "dis.hasfree", "module": "dis", "doc": ["Sequence of bytecodes that access a free variable (note that \u2018free\u2019 in this context refers to names in the current scope that are referenced by inner scopes or names in outer scopes that are referenced from this scope.", "It does not include references to global or builtin scopes)."]}
{"index": 1793, "name": "dis.hasname", "module": "dis", "doc": ["Sequence of bytecodes that access an attribute by name."]}
{"index": 1794, "name": "dis.hasjrel", "module": "dis", "doc": ["Sequence of bytecodes that have a relative jump target."]}
{"index": 1795, "name": "dis.hasjabs", "module": "dis", "doc": ["Sequence of bytecodes that have an absolute jump target."]}
{"index": 1796, "name": "dis.haslocal", "module": "dis", "doc": ["Sequence of bytecodes that access a local variable."]}
{"index": 1797, "name": "dis.hascompare", "module": "dis", "doc": ["Sequence of bytecodes of Boolean operations."]}
{"index": 1798, "name": "doctest.DONT_ACCEPT_TRUE_FOR_1", "module": "doctest", "doc": ["By default, if an expected output block contains just 1, an actual output block containing just 1 or just True is considered to be a match, and similarly for 0 versus False.", "When DONT_ACCEPT_TRUE_FOR_1 is specified, neither substitution is allowed.", "The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting \u201clittle integer\u201d output still work in these cases.", "This option will probably go away, but not for several years."]}
{"index": 1799, "name": "doctest.DONT_ACCEPT_BLANKLINE", "module": "doctest", "doc": ["By default, if an expected output block contains a line containing only the string <BLANKLINE>, then that line will match a blank line in the actual output.", "Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected.", "When DONT_ACCEPT_BLANKLINE is specified, this substitution is not allowed."]}
{"index": 1800, "name": "doctest.NORMALIZE_WHITESPACE", "module": "doctest", "doc": ["When specified, all sequences of whitespace (blanks and newlines) are treated as equal.", "Any sequence of whitespace within the expected output will match any sequence of whitespace within the actual output.", "By default, whitespace must match exactly.", "NORMALIZE_WHITESPACE is especially useful when a line of expected output is very long, and you want to wrap it across multiple lines in your source."]}
{"index": 1801, "name": "doctest.ELLIPSIS", "module": "doctest", "doc": ["When specified, an ellipsis marker (...) in the expected output can match any substring in the actual output.", "This includes substrings that span line boundaries, and empty substrings, so it\u2019s best to keep usage of this simple.", "Complicated uses can lead to the same kinds of \u201coops, it matched too much!\u201d surprises that .", "* is prone to in regular expressions."]}
{"index": 1802, "name": "doctest.IGNORE_EXCEPTION_DETAIL", "module": "doctest", "doc": ["When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match.", "For example, an example expecting ValueError: 42 will pass if the actual exception raised is ValueError: 3*14, but will fail, e.g., if TypeError is raised.", "It will also ignore the module name used in Python 3 doctest reports.", "Hence both of these variations will work with the flag specified, regardless of whether the test is run under Python 2.7 or Python 3.2 (or later versions):", "Note that ELLIPSIS can also be used to ignore the details of the exception message, but such a test may still fail based on whether or not the module details are printed as part of the exception name.", "Using IGNORE_EXCEPTION_DETAIL and the details from Python 2.3 is also the only clear way to write a doctest that doesn\u2019t care about the exception detail yet continues to pass under Python 2.3 or earlier (those releases do not support doctest directives and ignore them as irrelevant comments).", "For example:", "passes under Python 2.3 and later Python versions with the flag specified, even though the detail changed in Python 2.4 to say \u201cdoes not\u201d instead of \u201cdoesn\u2019t\u201d."]}
{"index": 1803, "name": "doctest.SKIP", "module": "doctest", "doc": ["When specified, do not run the example at all.", "This can be useful in contexts where doctest examples serve as both documentation and test cases, and an example should be included for documentation purposes, but should not be checked.", "E.g., the example\u2019s output might be random; or the example might depend on resources which would be unavailable to the test driver.", "The SKIP flag can also be used for temporarily \u201ccommenting out\u201d examples."]}
{"index": 1804, "name": "doctest.COMPARISON_FLAGS", "module": "doctest", "doc": ["A bitmask or\u2019ing together all the comparison flags above."]}
{"index": 1805, "name": "doctest.REPORT_UDIFF", "module": "doctest", "doc": ["When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff."]}
{"index": 1806, "name": "doctest.REPORT_CDIFF", "module": "doctest", "doc": ["When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff."]}
{"index": 1807, "name": "doctest.REPORT_NDIFF", "module": "doctest", "doc": ["When specified, differences are computed by difflib.Differ, using the same algorithm as the popular ndiff.py utility.", "This is the only method that marks differences within lines as well as across lines.", "For example, if a line of expected output contains digit 1 where actual output contains letter l, a line is inserted with a caret marking the mismatching column positions."]}
{"index": 1808, "name": "doctest.REPORT_ONLY_FIRST_FAILURE", "module": "doctest", "doc": ["When specified, display the first failing example in each doctest, but suppress output for all remaining examples.", "This will prevent doctest from reporting correct examples that break because of earlier failures; but it might also hide incorrect examples that fail independently of the first failure.", "When REPORT_ONLY_FIRST_FAILURE is specified, the remaining examples are still run, and still count towards the total number of failures reported; only the output is suppressed."]}
{"index": 1809, "name": "doctest.FAIL_FAST", "module": "doctest", "doc": ["When specified, exit after the first failing example and don\u2019t attempt to run the remaining examples.", "Thus, the number of failures reported will be at most 1.", "This flag may be useful during debugging, since examples after the first failure won\u2019t even produce debugging output.", "The doctest command line accepts the option -f as a shorthand for -o FAIL_FAST."]}
{"index": 1810, "name": "doctest.REPORTING_FLAGS", "module": "doctest", "doc": ["A bitmask or\u2019ing together all the reporting flags above."]}
{"index": 1811, "name": "doctest.register_optionflag", "module": "doctest", "doc": ["Create a new option flag with a given name, and return the new flag\u2019s integer value.", "register_optionflag() can be used when subclassing OutputChecker or DocTestRunner to create new options that are supported by your subclasses.", "register_optionflag() should always be called using the following idiom:"]}
{"index": 1812, "name": "doctest.testfile", "module": "doctest", "doc": ["All arguments except filename are optional, and should be specified in keyword form.", "Test examples in the file named filename.", "Return (failure_count, test_count).", "Optional argument module_relative specifies how the filename should be interpreted:", "Optional argument name gives the name of the test; by default, or if None, os.path.basename(filename) is used.", "Optional argument package is a Python package or the name of a Python package whose directory should be used as the base directory for a module-relative filename.", "If no package is specified, then the calling module\u2019s directory is used as the base directory for module-relative filenames.", "It is an error to specify package if module_relative is False.", "Optional argument globs gives a dict to be used as the globals when executing examples.", "A new shallow copy of this dict is created for the doctest, so its examples start with a clean slate.", "By default, or if None, a new empty dict is used.", "Optional argument extraglobs gives a dict merged into the globals used to execute examples.", "This works like dict.update():  if globs and extraglobs have a common key, the associated value in extraglobs appears in the combined dict.", "By default, or if None, no extra globals are used.", "This is an advanced feature that allows parameterization of doctests.", "For example, a doctest can be written for a base class, using a generic name for the class, then reused to test any number of subclasses by passing an extraglobs dict mapping the generic name to the subclass to be tested.", "Optional argument verbose prints lots of stuff if true, and prints only failures if false; by default, or if None, it\u2019s true if and only if '-v' is in sys.argv.", "Optional argument report prints a summary at the end when true, else prints nothing at the end.", "In verbose mode, the summary is detailed, else the summary is very brief (in fact, empty if all tests passed).", "Optional argument optionflags (default value 0) takes the bitwise OR of option flags.", "See section Option Flags.", "Optional argument raise_on_error defaults to false.", "If true, an exception is raised upon the first failure or unexpected exception in an example.", "This allows failures to be post-mortem debugged.", "Default behavior is to continue running examples.", "Optional argument parser specifies a DocTestParser (or subclass) that should be used to extract tests from the files.", "It defaults to a normal parser (i.e., DocTestParser()).", "Optional argument encoding specifies an encoding that should be used to convert the file to unicode."]}
{"index": 1813, "name": "doctest.testmod", "module": "doctest", "doc": ["All arguments are optional, and all except for m should be specified in keyword form.", "Test examples in docstrings in functions and classes reachable from module m (or module __main__ if m is not supplied or is None), starting with m.__doc__.", "Also test examples reachable from dict m.__test__, if it exists and is not None.", "m.__test__ maps names (strings) to functions, classes and strings; function and class docstrings are searched for examples; strings are searched directly, as if they were docstrings.", "Only docstrings attached to objects belonging to module m are searched.", "Return (failure_count, test_count).", "Optional argument name gives the name of the module; by default, or if None, m.__name__ is used.", "Optional argument exclude_empty defaults to false.", "If true, objects for which no doctests are found are excluded from consideration.", "The default is a backward compatibility hack, so that code still using doctest.master.summarize() in conjunction with testmod() continues to get output for objects with no tests.", "The exclude_empty argument to the newer DocTestFinder constructor defaults to true.", "Optional arguments extraglobs, verbose, report, optionflags, raise_on_error, and globs are the same as for function testfile() above, except that globs defaults to m.__dict__."]}
{"index": 1814, "name": "doctest.run_docstring_examples", "module": "doctest", "doc": ["Test examples associated with object f; for example, f may be a string, a module, a function, or a class object.", "A shallow copy of dictionary argument globs is used for the execution context.", "Optional argument name is used in failure messages, and defaults to \"NoName\".", "If optional argument verbose is true, output is generated even if there are no failures.", "By default, output is generated only in case of an example failure.", "Optional argument compileflags gives the set of flags that should be used by the Python compiler when running the examples.", "By default, or if None, flags are deduced corresponding to the set of future features found in globs.", "Optional argument optionflags works as for function testfile() above."]}
{"index": 1815, "name": "doctest.DocFileSuite", "module": "doctest", "doc": ["Convert doctest tests from one or more text files to a unittest.TestSuite.", "The returned unittest.TestSuite is to be run by the unittest framework and runs the interactive examples in each file.", "If an example in any file fails, then the synthesized unit test fails, and a failureException exception is raised showing the name of the file containing the test and a (sometimes approximate) line number.", "Pass one or more paths (as strings) to text files to be examined.", "Options may be provided as keyword arguments:", "Optional argument module_relative specifies how the filenames in paths should be interpreted:", "Optional argument package is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in paths.", "If no package is specified, then the calling module\u2019s directory is used as the base directory for module-relative filenames.", "It is an error to specify package if module_relative is False.", "Optional argument setUp specifies a set-up function for the test suite.", "This is called before running the tests in each file.", "The setUp function will be passed a DocTest object.", "The setUp function can access the test globals as the globs attribute of the test passed.", "Optional argument tearDown specifies a tear-down function for the test suite.", "This is called after running the tests in each file.", "The tearDown function will be passed a DocTest object.", "The setUp function can access the test globals as the globs attribute of the test passed.", "Optional argument globs is a dictionary containing the initial global variables for the tests.", "A new copy of this dictionary is created for each test.", "By default, globs is a new empty dictionary.", "Optional argument optionflags specifies the default doctest options for the tests, created by or-ing together individual option flags.", "See section Option Flags.", "See function set_unittest_reportflags() below for a better way to set reporting options.", "Optional argument parser specifies a DocTestParser (or subclass) that should be used to extract tests from the files.", "It defaults to a normal parser (i.e., DocTestParser()).", "Optional argument encoding specifies an encoding that should be used to convert the file to unicode.", "The global __file__ is added to the globals provided to doctests loaded from a text file using DocFileSuite()."]}
{"index": 1816, "name": "doctest.DocTestSuite", "module": "doctest", "doc": ["Convert doctest tests for a module to a unittest.TestSuite.", "The returned unittest.TestSuite is to be run by the unittest framework and runs each doctest in the module.", "If any of the doctests fail, then the synthesized unit test fails, and a failureException exception is raised showing the name of the file containing the test and a (sometimes approximate) line number.", "Optional argument module provides the module to be tested.", "It can be a module object or a (possibly dotted) module name.", "If not specified, the module calling this function is used.", "Optional argument globs is a dictionary containing the initial global variables for the tests.", "A new copy of this dictionary is created for each test.", "By default, globs is a new empty dictionary.", "Optional argument extraglobs specifies an extra set of global variables, which is merged into globs.", "By default, no extra globals are used.", "Optional argument test_finder is the DocTestFinder object (or a drop-in replacement) that is used to extract doctests from the module.", "Optional arguments setUp, tearDown, and optionflags are the same as for function DocFileSuite() above.", "This function uses the same search technique as testmod()."]}
{"index": 1817, "name": "doctest.set_unittest_reportflags", "module": "doctest", "doc": ["Set the doctest reporting flags to use.", "Argument flags takes the bitwise OR of option flags.", "See section Option Flags.", "Only \u201creporting flags\u201d can be used.", "This is a module-global setting, and affects all future doctests run by module unittest:  the runTest() method of DocTestCase looks at the option flags specified for the test case when the DocTestCase instance was constructed.", "If no reporting flags were specified (which is the typical and expected case), doctest\u2019s unittest reporting flags are bitwise ORed into the option flags, and the option flags so augmented are passed to the DocTestRunner instance created to run the doctest.", "If any reporting flags were specified when the DocTestCase instance was constructed, doctest\u2019s unittest reporting flags are ignored.", "The value of the unittest reporting flags in effect before the function was called is returned by the function."]}
{"index": 1818, "name": "doctest.DocTest", "module": "doctest", "doc": ["A collection of doctest examples that should be run in a single namespace.", "The constructor arguments are used to initialize the attributes of the same names.", "DocTest defines the following attributes.", "They are initialized by the constructor, and should not be modified directly."]}
{"index": 1819, "name": "doctest.DocTest.examples", "module": "doctest", "doc": ["A list of Example objects encoding the individual interactive Python examples that should be run by this test."]}
{"index": 1820, "name": "doctest.DocTest.globs", "module": "doctest", "doc": ["The namespace (aka globals) that the examples should be run in.", "This is a dictionary mapping names to values.", "Any changes to the namespace made by the examples (such as binding new variables) will be reflected in globs after the test is run."]}
{"index": 1821, "name": "doctest.DocTest.name", "module": "doctest", "doc": ["A string name identifying the DocTest.", "Typically, this is the name of the object or file that the test was extracted from."]}
{"index": 1822, "name": "doctest.DocTest.filename", "module": "doctest", "doc": ["The name of the file that this DocTest was extracted from; or None if the filename is unknown, or if the DocTest was not extracted from a file."]}
{"index": 1823, "name": "doctest.DocTest.lineno", "module": "doctest", "doc": ["The line number within filename where this DocTest begins, or None if the line number is unavailable.", "This line number is zero-based with respect to the beginning of the file."]}
{"index": 1824, "name": "doctest.DocTest.docstring", "module": "doctest", "doc": ["The string that the test was extracted from, or None if the string is unavailable, or if the test was not extracted from a string."]}
{"index": 1825, "name": "doctest.Example", "module": "doctest", "doc": ["A single interactive example, consisting of a Python statement and its expected output.", "The constructor arguments are used to initialize the attributes of the same names.", "Example defines the following attributes.", "They are initialized by the constructor, and should not be modified directly."]}
{"index": 1826, "name": "doctest.Example.source", "module": "doctest", "doc": ["A string containing the example\u2019s source code.", "This source code consists of a single Python statement, and always ends with a newline; the constructor adds a newline when necessary."]}
{"index": 1827, "name": "doctest.Example.want", "module": "doctest", "doc": ["The expected output from running the example\u2019s source code (either from stdout, or a traceback in case of exception).", "want ends with a newline unless no output is expected, in which case it\u2019s an empty string.", "The constructor adds a newline when necessary."]}
{"index": 1828, "name": "doctest.Example.exc_msg", "module": "doctest", "doc": ["The exception message generated by the example, if the example is expected to generate an exception; or None if it is not expected to generate an exception.", "This exception message is compared against the return value of traceback.format_exception_only().", "exc_msg ends with a newline unless it\u2019s None.", "The constructor adds a newline if needed."]}
{"index": 1829, "name": "doctest.Example.lineno", "module": "doctest", "doc": ["The line number within the string containing this example where the example begins.", "This line number is zero-based with respect to the beginning of the containing string."]}
{"index": 1830, "name": "doctest.Example.indent", "module": "doctest", "doc": ["The example\u2019s indentation in the containing string, i.e., the number of space characters that precede the example\u2019s first prompt."]}
{"index": 1831, "name": "doctest.Example.options", "module": "doctest", "doc": ["A dictionary mapping from option flags to True or False, which is used to override default options for this example.", "Any option flags not contained in this dictionary are left at their default value (as specified by the DocTestRunner\u2019s optionflags).", "By default, no options are set."]}
{"index": 1832, "name": "doctest.DocTestFinder", "module": "doctest", "doc": ["A processing class used to extract the DocTests that are relevant to a given object, from its docstring and the docstrings of its contained objects.", "DocTests can be extracted from modules, classes, functions, methods, staticmethods, classmethods, and properties.", "The optional argument verbose can be used to display the objects searched by the finder.", "It defaults to False (no output).", "The optional argument parser specifies the DocTestParser object (or a drop-in replacement) that is used to extract doctests from docstrings.", "If the optional argument recurse is false, then DocTestFinder.find() will only examine the given object, and not any contained objects.", "If the optional argument exclude_empty is false, then DocTestFinder.find() will include tests for objects with empty docstrings.", "DocTestFinder defines the following method:"]}
{"index": 1833, "name": "doctest.DocTestFinder.find", "module": "doctest", "doc": ["Return a list of the DocTests that are defined by obj\u2019s docstring, or by any of its contained objects\u2019 docstrings.", "The optional argument name specifies the object\u2019s name; this name will be used to construct names for the returned DocTests.", "If name is not specified, then obj.__name__ is used.", "The optional parameter module is the module that contains the given object.", "If the module is not specified or is None, then the test finder will attempt to automatically determine the correct module.", "The object\u2019s module is used:", "If module is False, no attempt to find the module will be made.", "This is obscure, of use mostly in testing doctest itself: if module is False, or is None but cannot be found automatically, then all objects are considered to belong to the (non-existent) module, so all contained objects will (recursively) be searched for doctests.", "The globals for each DocTest is formed by combining globs and extraglobs (bindings in extraglobs override bindings in globs).", "A new shallow copy of the globals dictionary is created for each DocTest.", "If globs is not specified, then it defaults to the module\u2019s __dict__, if specified, or {} otherwise.", "If extraglobs is not specified, then it defaults to {}."]}
{"index": 1834, "name": "doctest.DocTestParser", "module": "doctest", "doc": ["A processing class used to extract interactive examples from a string, and use them to create a DocTest object.", "DocTestParser defines the following methods:"]}
{"index": 1835, "name": "doctest.DocTestParser.get_doctest", "module": "doctest", "doc": ["Extract all doctest examples from the given string, and collect them into a DocTest object.", "globs, name, filename, and lineno are attributes for the new DocTest object.", "See the documentation for DocTest for more information."]}
{"index": 1836, "name": "doctest.DocTestParser.get_examples", "module": "doctest", "doc": ["Extract all doctest examples from the given string, and return them as a list of Example objects.", "Line numbers are 0-based.", "The optional argument name is a name identifying this string, and is only used for error messages."]}
{"index": 1837, "name": "doctest.DocTestParser.parse", "module": "doctest", "doc": ["Divide the given string into examples and intervening text, and return them as a list of alternating Examples and strings.", "Line numbers for the Examples are 0-based.", "The optional argument name is a name identifying this string, and is only used for error messages."]}
{"index": 1838, "name": "doctest.DocTestRunner", "module": "doctest", "doc": ["A processing class used to execute and verify the interactive examples in a DocTest.", "The comparison between expected outputs and actual outputs is done by an OutputChecker.", "This comparison may be customized with a number of option flags; see section Option Flags for more information.", "If the option flags are insufficient, then the comparison may also be customized by passing a subclass of OutputChecker to the constructor.", "The test runner\u2019s display output can be controlled in two ways.", "First, an output function can be passed to TestRunner.run(); this function will be called with strings that should be displayed.", "It defaults to sys.stdout.write.", "If capturing the output is not sufficient, then the display output can be also customized by subclassing DocTestRunner, and overriding the methods report_start(), report_success(), report_unexpected_exception(), and report_failure().", "The optional keyword argument checker specifies the OutputChecker object (or drop-in replacement) that should be used to compare the expected outputs to the actual outputs of doctest examples.", "The optional keyword argument verbose controls the DocTestRunner\u2019s verbosity.", "If verbose is True, then information is printed about each example, as it is run.", "If verbose is False, then only failures are printed.", "If verbose is unspecified, or None, then verbose output is used iff the command-line switch -v is used.", "The optional keyword argument optionflags can be used to control how the test runner compares expected output to actual output, and how it displays failures.", "For more information, see section Option Flags.", "DocTestParser defines the following methods:"]}
{"index": 1839, "name": "doctest.DocTestRunner.report_start", "module": "doctest", "doc": ["Report that the test runner is about to process the given example.", "This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.", "example is the example about to be processed.", "test is the test containing example.", "out is the output function that was passed to DocTestRunner.run()."]}
{"index": 1840, "name": "doctest.DocTestRunner.report_success", "module": "doctest", "doc": ["Report that the given example ran successfully.", "This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.", "example is the example about to be processed.", "got is the actual output from the example.", "test is the test containing example.", "out is the output function that was passed to DocTestRunner.run()."]}
{"index": 1841, "name": "doctest.DocTestRunner.report_failure", "module": "doctest", "doc": ["Report that the given example failed.", "This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.", "example is the example about to be processed.", "got is the actual output from the example.", "test is the test containing example.", "out is the output function that was passed to DocTestRunner.run()."]}
{"index": 1842, "name": "doctest.DocTestRunner.report_unexpected_exception", "module": "doctest", "doc": ["Report that the given example raised an unexpected exception.", "This method is provided to allow subclasses of DocTestRunner to customize their output; it should not be called directly.", "example is the example about to be processed.", "exc_info is a tuple containing information about the unexpected exception (as returned by sys.exc_info()).", "test is the test containing example.", "out is the output function that was passed to DocTestRunner.run()."]}
{"index": 1843, "name": "doctest.DocTestRunner.run", "module": "doctest", "doc": ["Run the examples in test (a DocTest object), and display the results using the writer function out.", "The examples are run in the namespace test.globs.", "If clear_globs is true (the default), then this namespace will be cleared after the test runs, to help with garbage collection.", "If you would like to examine the namespace after the test completes, then use clear_globs=False.", "compileflags gives the set of flags that should be used by the Python compiler when running the examples.", "If not specified, then it will default to the set of future-import flags that apply to globs.", "The output of each example is checked using the DocTestRunner\u2019s output checker, and the results are formatted by the DocTestRunner.report_*() methods."]}
{"index": 1844, "name": "doctest.DocTestRunner.summarize", "module": "doctest", "doc": ["Print a summary of all the test cases that have been run by this DocTestRunner, and return a named tuple TestResults(failed, attempted).", "The optional verbose argument controls how detailed the summary is.", "If the verbosity is not specified, then the DocTestRunner\u2019s verbosity is used."]}
{"index": 1845, "name": "doctest.OutputChecker", "module": "doctest", "doc": ["A class used to check the whether the actual output from a doctest example matches the expected output.", "OutputChecker defines two methods: check_output(), which compares a given pair of outputs, and returns true if they match; and output_difference(), which returns a string describing the differences between two outputs.", "OutputChecker defines the following methods:"]}
{"index": 1846, "name": "doctest.OutputChecker.check_output", "module": "doctest", "doc": ["Return True iff the actual output from an example (got) matches the expected output (want).", "These strings are always considered to match if they are identical; but depending on what option flags the test runner is using, several non-exact match types are also possible.", "See section Option Flags for more information about option flags."]}
{"index": 1847, "name": "doctest.OutputChecker.output_difference", "module": "doctest", "doc": ["Return a string describing the differences between the expected output for a given example (example) and the actual output (got).", "optionflags is the set of option flags used to compare want and got."]}
{"index": 1848, "name": "doctest.script_from_examples", "module": "doctest", "doc": ["Convert text with examples to a script.", "Argument s is a string containing doctest examples.", "The string is converted to a Python script, where doctest examples in s are converted to regular code, and everything else is converted to Python comments.", "The generated script is returned as a string.", "For example,", "displays:", "This function is used internally by other functions (see below), but can also be useful when you want to transform an interactive Python session into a Python script."]}
{"index": 1849, "name": "doctest.testsource", "module": "doctest", "doc": ["Convert the doctest for an object to a script.", "Argument module is a module object, or dotted name of a module, containing the object whose doctests are of interest.", "Argument name is the name (within the module) of the object with the doctests of interest.", "The result is a string, containing the object\u2019s docstring converted to a Python script, as described for script_from_examples() above.", "For example, if module a.py contains a top-level function f(), then", "prints a script version of function f()\u2019s docstring, with doctests converted to code, and the rest placed in comments."]}
{"index": 1850, "name": "doctest.debug", "module": "doctest", "doc": ["Debug the doctests for an object.", "The module and name arguments are the same as for function testsource() above.", "The synthesized Python script for the named object\u2019s docstring is written to a temporary file, and then that file is run under the control of the Python debugger, pdb.", "A shallow copy of module.__dict__ is used for both local and global execution context.", "Optional argument pm controls whether post-mortem debugging is used.", "If pm has a true value, the script file is run directly, and the debugger gets involved only if the script terminates via raising an unhandled exception.", "If it does, then post-mortem debugging is invoked, via pdb.post_mortem(), passing the traceback object from the unhandled exception.", "If pm is not specified, or is false, the script is run under the debugger from the start, via passing an appropriate exec() call to pdb.run()."]}
{"index": 1851, "name": "doctest.debug_src", "module": "doctest", "doc": ["Debug the doctests in a string.", "This is like function debug() above, except that a string containing doctest examples is specified directly, via the src argument.", "Optional argument pm has the same meaning as in function debug() above.", "Optional argument globs gives a dictionary to use as both local and global execution context.", "If not specified, or None, an empty dictionary is used.", "If specified, a shallow copy of the dictionary is used."]}
{"index": 1852, "name": "doctest.DebugRunner", "module": "doctest", "doc": ["A subclass of DocTestRunner that raises an exception as soon as a failure is encountered.", "If an unexpected exception occurs, an UnexpectedException exception is raised, containing the test, the example, and the original exception.", "If the output doesn\u2019t match, then a DocTestFailure exception is raised, containing the test, the example, and the actual output.", "For information about the constructor parameters and methods, see the documentation for DocTestRunner in section Advanced API."]}
{"index": 1853, "name": "doctest.DocTestFailure", "module": "doctest", "doc": ["An exception raised by DocTestRunner to signal that a doctest example\u2019s actual output did not match its expected output.", "The constructor arguments are used to initialize the attributes of the same names."]}
{"index": 1854, "name": "doctest.DocTestFailure.test", "module": "doctest", "doc": ["The DocTest object that was being run when the example failed."]}
{"index": 1855, "name": "doctest.DocTestFailure.example", "module": "doctest", "doc": ["The Example that failed."]}
{"index": 1856, "name": "doctest.DocTestFailure.got", "module": "doctest", "doc": ["The example\u2019s actual output."]}
{"index": 1857, "name": "doctest.UnexpectedException", "module": "doctest", "doc": ["An exception raised by DocTestRunner to signal that a doctest example raised an unexpected exception.", "The constructor arguments are used to initialize the attributes of the same names."]}
{"index": 1858, "name": "doctest.UnexpectedException.test", "module": "doctest", "doc": ["The DocTest object that was being run when the example failed."]}
{"index": 1859, "name": "doctest.UnexpectedException.example", "module": "doctest", "doc": ["The Example that failed."]}
{"index": 1860, "name": "doctest.UnexpectedException.exc_info", "module": "doctest", "doc": ["A tuple containing information about the unexpected exception, as returned by sys.exc_info()."]}
{"index": 1861, "name": "id2", "module": "doctest", "doc": ["Examples containing both expected output and an exception are not supported.", "Trying to guess where one ends and the other begins is too error-prone, and that also makes for a confusing test."]}
{"index": 1862, "name": "email.charset.Charset", "module": "email", "doc": ["Map character sets to their email properties.", "This class provides information about the requirements imposed on email for a specific character set.", "It also provides convenience routines for converting between character sets, given the availability of the applicable codecs.", "Given a character set, it will do its best to provide information on how to use that character set in an email message in an RFC-compliant way.", "Certain character sets must be encoded with quoted-printable or base64 when used in email headers or bodies.", "Certain character sets must be converted outright, and are not allowed in email.", "Optional input_charset is as described below; it is always coerced to lower case.", "After being alias normalized it is also used as a lookup into the registry of character sets to find out the header encoding, body encoding, and output conversion codec to be used for the character set.", "For example, if input_charset is iso-8859-1, then headers and bodies will be encoded using quoted-printable and no output conversion codec is necessary.", "If input_charset is euc-jp, then headers will be encoded with base64, bodies will not be encoded, but output text will be converted from the euc-jp character set to the iso-2022-jp character set.", "Charset instances have the following data attributes:", "Charset instances also have the following methods:", "The Charset class also provides a number of methods to support standard operations and built-in functions."]}
{"index": 1863, "name": "email.charset.Charset.input_charset", "module": "email", "doc": ["The initial character set specified.", "Common aliases are converted to their official email names (e.g.", "latin_1 is converted to iso-8859-1).", "Defaults to 7-bit us-ascii."]}
{"index": 1864, "name": "email.charset.Charset.header_encoding", "module": "email", "doc": ["If the character set must be encoded before it can be used in an email header, this attribute will be set to Charset.QP (for quoted-printable), Charset.BASE64 (for base64 encoding), or Charset.SHORTEST for the shortest of QP or BASE64 encoding.", "Otherwise, it will be None."]}
{"index": 1865, "name": "email.charset.Charset.body_encoding", "module": "email", "doc": ["Same as header_encoding, but describes the encoding for the mail message\u2019s body, which indeed may be different than the header encoding.", "Charset.SHORTEST is not allowed for body_encoding."]}
{"index": 1866, "name": "email.charset.Charset.output_charset", "module": "email", "doc": ["Some character sets must be converted before they can be used in email headers or bodies.", "If the input_charset is one of them, this attribute will contain the name of the character set output will be converted to.", "Otherwise, it will be None."]}
{"index": 1867, "name": "email.charset.Charset.input_codec", "module": "email", "doc": ["The name of the Python codec used to convert the input_charset to Unicode.", "If no conversion codec is necessary, this attribute will be None."]}
{"index": 1868, "name": "email.charset.Charset.output_codec", "module": "email", "doc": ["The name of the Python codec used to convert Unicode to the output_charset.", "If no conversion codec is necessary, this attribute will have the same value as the input_codec."]}
{"index": 1869, "name": "email.charset.Charset.get_body_encoding", "module": "email", "doc": ["Return the content transfer encoding used for body encoding.", "This is either the string quoted-printable or base64 depending on the encoding used, or it is a function, in which case you should call the function with a single argument, the Message object being encoded.", "The function should then set the Content-Transfer-Encoding header itself to whatever is appropriate.", "Returns the string quoted-printable if body_encoding is QP, returns the string base64 if body_encoding is BASE64, and returns the string 7bit otherwise."]}
{"index": 1870, "name": "email.charset.Charset.get_output_charset", "module": "email", "doc": ["Return the output character set.", "This is the output_charset attribute if that is not None, otherwise it is input_charset."]}
{"index": 1871, "name": "email.charset.Charset.header_encode", "module": "email", "doc": ["Header-encode the string string.", "The type of encoding (base64 or quoted-printable) will be based on the header_encoding attribute."]}
{"index": 1872, "name": "email.charset.Charset.header_encode_lines", "module": "email", "doc": ["Header-encode a string by converting it first to bytes.", "This is similar to header_encode() except that the string is fit into maximum line lengths as given by the argument maxlengths, which must be an iterator: each element returned from this iterator will provide the next maximum line length."]}
{"index": 1873, "name": "email.charset.Charset.body_encode", "module": "email", "doc": ["Body-encode the string string.", "The type of encoding (base64 or quoted-printable) will be based on the body_encoding attribute."]}
{"index": 1874, "name": "email.charset.Charset.__str__", "module": "email", "doc": ["Returns input_charset as a string coerced to lower case.", "__repr__() is an alias for __str__()."]}
{"index": 1875, "name": "email.charset.Charset.__eq__", "module": "email", "doc": ["This method allows you to compare two Charset instances for equality."]}
{"index": 1876, "name": "email.charset.Charset.__ne__", "module": "email", "doc": ["This method allows you to compare two Charset instances for inequality."]}
{"index": 1877, "name": "email.charset.add_charset", "module": "email", "doc": ["Add character properties to the global registry.", "charset is the input character set, and must be the canonical name of a character set.", "Optional header_enc and body_enc is either Charset.QP for quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for the shortest of quoted-printable or base64 encoding, or None for no encoding.", "SHORTEST is only valid for header_enc.", "The default is None for no encoding.", "Optional output_charset is the character set that the output should be in.", "Conversions will proceed from input charset, to Unicode, to the output charset when the method Charset.convert() is called.", "The default is to output in the same character set as the input.", "Both input_charset and output_charset must have Unicode codec entries in the module\u2019s character set-to-codec mapping; use add_codec() to add codecs the module does not know about.", "See the codecs module\u2019s documentation for more information.", "The global character set registry is kept in the module global dictionary CHARSETS."]}
{"index": 1878, "name": "email.charset.add_alias", "module": "email", "doc": ["Add a character set alias.", "alias is the alias name, e.g.", "latin-1.", "canonical is the character set\u2019s canonical name, e.g.", "iso-8859-1.", "The global charset alias registry is kept in the module global dictionary ALIASES."]}
{"index": 1879, "name": "email.charset.add_codec", "module": "email", "doc": ["Add a codec that map characters in the given character set to and from Unicode.", "charset is the canonical name of a character set.", "codecname is the name of a Python codec, as appropriate for the second argument to the str\u2019s encode() method."]}
{"index": 1880, "name": "email.message.Message", "module": "email", "doc": ["If policy is specified (it must be an instance of a policy class) use the rules it specifies to update and serialize the representation of the message.", "If policy is not set, use the compat32 policy, which maintains backward compatibility with the Python 3.2 version of the email package.", "For more information see the policy documentation.", "The following methods implement a mapping-like interface for accessing the message\u2019s RFC 2822 headers.", "Note that there are some semantic differences between these methods and a normal mapping (i.e.", "dictionary) interface.", "For example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers.", "Also, in dictionaries there is no guaranteed order to the keys returned by keys(), but in a Message object, headers are always returned in the order they appeared in the original message, or were added to the message later.", "Any header deleted and then re-added are always appended to the end of the header list.", "These semantic differences are intentional and are biased toward maximal convenience.", "Note that in all cases, any envelope header present in the message is not included in the mapping interface.", "In a model generated from bytes, any header values that (in contravention of the RFCs) contain non-ASCII bytes will, when retrieved through this interface, be represented as Header objects with a charset of unknown-8bit.", "Here are some additional useful methods:", "Message objects can also optionally contain two instance attributes, which can be used when generating the plain text of a MIME message."]}
{"index": 1881, "name": "email.message.Message.as_string", "module": "email", "doc": ["Return the entire message flattened as a string.", "When optional unixfrom is true, the envelope header is included in the returned string.", "unixfrom defaults to False.", "For backward compatibility reasons, maxheaderlen defaults to 0, so if you want a different value you must override it explicitly (the value specified for max_line_length in the policy will be ignored by this method).", "The policy argument may be used to override the default policy obtained from the message instance.", "This can be used to control some of the formatting produced by the method, since the specified policy will be passed to the Generator.", "Flattening the message may trigger changes to the Message if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).", "Note that this method is provided as a convenience and may not always format the message the way you want.", "For example, by default it does not do the mangling of lines that begin with From that is required by the unix mbox format.", "For more flexibility, instantiate a Generator instance and use its flatten() method directly.", "For example:", "If the message object contains binary data that is not encoded according to RFC standards, the non-compliant data will be replaced by unicode \u201cunknown character\u201d code points.", "(See also as_bytes() and BytesGenerator.)"]}
{"index": 1882, "name": "email.message.Message.__str__", "module": "email", "doc": ["Equivalent to as_string().", "Allows str(msg) to produce a string containing the formatted message."]}
{"index": 1883, "name": "email.message.Message.as_bytes", "module": "email", "doc": ["Return the entire message flattened as a bytes object.", "When optional unixfrom is true, the envelope header is included in the returned string.", "unixfrom defaults to False.", "The policy argument may be used to override the default policy obtained from the message instance.", "This can be used to control some of the formatting produced by the method, since the specified policy will be passed to the BytesGenerator.", "Flattening the message may trigger changes to the Message if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).", "Note that this method is provided as a convenience and may not always format the message the way you want.", "For example, by default it does not do the mangling of lines that begin with From that is required by the unix mbox format.", "For more flexibility, instantiate a BytesGenerator instance and use its flatten() method directly.", "For example:"]}
{"index": 1884, "name": "email.message.Message.__bytes__", "module": "email", "doc": ["Equivalent to as_bytes().", "Allows bytes(msg) to produce a bytes object containing the formatted message."]}
{"index": 1885, "name": "email.message.Message.is_multipart", "module": "email", "doc": ["Return True if the message\u2019s payload is a list of sub-Message objects, otherwise return False.", "When is_multipart() returns False, the payload should be a string object (which might be a CTE encoded binary payload).", "(Note that is_multipart() returning True does not necessarily mean that \u201cmsg.get_content_maintype() == \u2018multipart\u2019\u201d will return the True.", "For example, is_multipart will return True when the Message is of type message/rfc822.)"]}
{"index": 1886, "name": "email.message.Message.set_unixfrom", "module": "email", "doc": ["Set the message\u2019s envelope header to unixfrom, which should be a string."]}
{"index": 1887, "name": "email.message.Message.get_unixfrom", "module": "email", "doc": ["Return the message\u2019s envelope header.", "Defaults to None if the envelope header was never set."]}
{"index": 1888, "name": "email.message.Message.attach", "module": "email", "doc": ["Add the given payload to the current payload, which must be None or a list of Message objects before the call.", "After the call, the payload will always be a list of Message objects.", "If you want to set the payload to a scalar object (e.g.", "a string), use set_payload() instead.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by set_content() and the related make and add methods."]}
{"index": 1889, "name": "email.message.Message.get_payload", "module": "email", "doc": ["Return the current payload, which will be a list of Message objects when is_multipart() is True, or a string when is_multipart() is False.", "If the payload is a list and you mutate the list object, you modify the message\u2019s payload in place.", "With optional argument i, get_payload() will return the i-th element of the payload, counting from zero, if is_multipart() is True.", "An IndexError will be raised if i is less than 0 or greater than or equal to the number of items in the payload.", "If the payload is a string (i.e.", "is_multipart() is False) and i is given, a TypeError is raised.", "Optional decode is a flag indicating whether the payload should be decoded or not, according to the Content-Transfer-Encoding header.", "When True and the message is not a multipart, the payload will be decoded if this header\u2019s value is quoted-printable or base64.", "If some other encoding is used, or Content-Transfer-Encoding header is missing, the payload is returned as-is (undecoded).", "In all cases the returned value is binary data.", "If the message is a multipart and the decode flag is True, then None is returned.", "If the payload is base64 and it was not perfectly formed (missing padding, characters outside the base64 alphabet), then an appropriate defect will be added to the message\u2019s defect property (InvalidBase64PaddingDefect or InvalidBase64CharactersDefect, respectively).", "When decode is False (the default) the body is returned as a string without decoding the Content-Transfer-Encoding.", "However, for a Content-Transfer-Encoding of 8bit, an attempt is made to decode the original bytes using the charset specified by the Content-Type header, using the replace error handler.", "If no charset is specified, or if the charset given is not recognized by the email package, the body is decoded using the default ASCII charset.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by get_content() and iter_parts()."]}
{"index": 1890, "name": "email.message.Message.set_payload", "module": "email", "doc": ["Set the entire message object\u2019s payload to payload.", "It is the client\u2019s responsibility to ensure the payload invariants.", "Optional charset sets the message\u2019s default character set; see set_charset() for details.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by set_content()."]}
{"index": 1891, "name": "email.message.Message.set_charset", "module": "email", "doc": ["Set the character set of the payload to charset, which can either be a Charset instance (see email.charset), a string naming a character set, or None.", "If it is a string, it will be converted to a Charset instance.", "If charset is None, the charset parameter will be removed from the Content-Type header (the message will not be otherwise modified).", "Anything else will generate a TypeError.", "If there is no existing MIME-Version header one will be added.", "If there is no existing Content-Type header, one will be added with a value of text/plain.", "Whether the Content-Type header already exists or not, its charset parameter will be set to charset.output_charset.", "If charset.input_charset and charset.output_charset differ, the payload will be re-encoded to the output_charset.", "If there is no existing Content-Transfer-Encoding header, then the payload will be transfer-encoded, if needed, using the specified Charset, and a header with the appropriate value will be added.", "If a Content-Transfer-Encoding header already exists, the payload is assumed to already be correctly encoded using that Content-Transfer-Encoding and is not modified.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by the charset parameter of the email.emailmessage.EmailMessage.set_content() method."]}
{"index": 1892, "name": "email.message.Message.get_charset", "module": "email", "doc": ["Return the Charset instance associated with the message\u2019s payload.", "This is a legacy method.", "On the EmailMessage class it always returns None."]}
{"index": 1893, "name": "email.message.Message.__len__", "module": "email", "doc": ["Return the total number of headers, including duplicates."]}
{"index": 1894, "name": "email.message.Message.__contains__", "module": "email", "doc": ["Return true if the message object has a field named name.", "Matching is done case-insensitively and name should not include the trailing colon.", "Used for the in operator, e.g.", ":"]}
{"index": 1895, "name": "email.message.Message.__getitem__", "module": "email", "doc": ["Return the value of the named header field.", "name should not include the colon field separator.", "If the header is missing, None is returned; a KeyError is never raised.", "Note that if the named field appears more than once in the message\u2019s headers, exactly which of those field values will be returned is undefined.", "Use the get_all() method to get the values of all the extant named headers."]}
{"index": 1896, "name": "email.message.Message.__setitem__", "module": "email", "doc": ["Add a header to the message with field name name and value val.", "The field is appended to the end of the message\u2019s existing fields.", "Note that this does not overwrite or delete any existing header with the same name.", "If you want to ensure that the new header is the only one present in the message with field name name, delete the field first, e.g.", ":"]}
{"index": 1897, "name": "email.message.Message.__delitem__", "module": "email", "doc": ["Delete all occurrences of the field with name name from the message\u2019s headers.", "No exception is raised if the named field isn\u2019t present in the headers."]}
{"index": 1898, "name": "email.message.Message.keys", "module": "email", "doc": ["Return a list of all the message\u2019s header field names."]}
{"index": 1899, "name": "email.message.Message.values", "module": "email", "doc": ["Return a list of all the message\u2019s field values."]}
{"index": 1900, "name": "email.message.Message.items", "module": "email", "doc": ["Return a list of 2-tuples containing all the message\u2019s field headers and values."]}
{"index": 1901, "name": "email.message.Message.get", "module": "email", "doc": ["Return the value of the named header field.", "This is identical to __getitem__() except that optional failobj is returned if the named header is missing (defaults to None)."]}
{"index": 1902, "name": "email.message.Message.get_all", "module": "email", "doc": ["Return a list of all the values for the field named name.", "If there are no such named headers in the message, failobj is returned (defaults to None)."]}
{"index": 1903, "name": "email.message.Message.add_header", "module": "email", "doc": ["Extended header setting.", "This method is similar to __setitem__() except that additional header parameters can be provided as keyword arguments.", "_name is the header field to add and _value is the primary value for the header.", "For each item in the keyword argument dictionary _params, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers).", "Normally, the parameter will be added as key=\"value\" unless the value is None, in which case only the key will be added.", "If the value contains non-ASCII characters, it can be specified as a three tuple in the format (CHARSET, LANGUAGE, VALUE), where CHARSET is a string naming the charset to be used to encode the value, LANGUAGE can usually be set to None or the empty string (see RFC 2231 for other possibilities), and VALUE is the string value containing non-ASCII code points.", "If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in RFC 2231 format using a CHARSET of utf-8 and a LANGUAGE of None.", "Here\u2019s an example:", "This will add a header that looks like", "An example with non-ASCII characters:", "Which produces"]}
{"index": 1904, "name": "email.message.Message.replace_header", "module": "email", "doc": ["Replace a header.", "Replace the first header found in the message that matches _name, retaining header order and field name case.", "If no matching header was found, a KeyError is raised."]}
{"index": 1905, "name": "email.message.Message.get_content_type", "module": "email", "doc": ["Return the message\u2019s content type.", "The returned string is coerced to lower case of the form maintype/subtype.", "If there was no Content-Type header in the message the default type as given by get_default_type() will be returned.", "Since according to RFC 2045, messages always have a default type, get_content_type() will always return a value.", "RFC 2045 defines a message\u2019s default type to be text/plain unless it appears inside a multipart/digest container, in which case it would be message/rfc822.", "If the Content-Type header has an invalid type specification, RFC 2045 mandates that the default type be text/plain."]}
{"index": 1906, "name": "email.message.Message.get_content_maintype", "module": "email", "doc": ["Return the message\u2019s main content type.", "This is the maintype part of the string returned by get_content_type()."]}
{"index": 1907, "name": "email.message.Message.get_content_subtype", "module": "email", "doc": ["Return the message\u2019s sub-content type.", "This is the subtype part of the string returned by get_content_type()."]}
{"index": 1908, "name": "email.message.Message.get_default_type", "module": "email", "doc": ["Return the default content type.", "Most messages have a default content type of text/plain, except for messages that are subparts of multipart/digest containers.", "Such subparts have a default content type of message/rfc822."]}
{"index": 1909, "name": "email.message.Message.set_default_type", "module": "email", "doc": ["Set the default content type.", "ctype should either be text/plain or message/rfc822, although this is not enforced.", "The default content type is not stored in the Content-Type header."]}
{"index": 1910, "name": "email.message.Message.get_params", "module": "email", "doc": ["Return the message\u2019s Content-Type parameters, as a list.", "The elements of the returned list are 2-tuples of key/value pairs, as split on the '=' sign.", "The left hand side of the '=' is the key, while the right hand side is the value.", "If there is no '=' sign in the parameter the value is the empty string, otherwise the value is as described in get_param() and is unquoted if optional unquote is True (the default).", "Optional failobj is the object to return if there is no Content-Type header.", "Optional header is the header to search instead of Content-Type.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by the params property of the individual header objects returned by the header access methods."]}
{"index": 1911, "name": "email.message.Message.get_param", "module": "email", "doc": ["Return the value of the Content-Type header\u2019s parameter param as a string.", "If the message has no Content-Type header or if there is no such parameter, then failobj is returned (defaults to None).", "Optional header if given, specifies the message header to use instead of Content-Type.", "Parameter keys are always compared case insensitively.", "The return value can either be a string, or a 3-tuple if the parameter was RFC 2231 encoded.", "When it\u2019s a 3-tuple, the elements of the value are of the form (CHARSET, LANGUAGE, VALUE).", "Note that both CHARSET and LANGUAGE can be None, in which case you should consider VALUE to be encoded in the us-ascii charset.", "You can usually ignore LANGUAGE.", "If your application doesn\u2019t care whether the parameter was encoded as in RFC 2231, you can collapse the parameter value by calling email.utils.collapse_rfc2231_value(), passing in the return value from get_param().", "This will return a suitably decoded Unicode string when the value is a tuple, or the original string unquoted if it isn\u2019t.", "For example:", "In any case, the parameter value (either the returned string, or the VALUE item in the 3-tuple) is always unquoted, unless unquote is set to False.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by the params property of the individual header objects returned by the header access methods."]}
{"index": 1912, "name": "email.message.Message.set_param", "module": "email", "doc": ["Set a parameter in the Content-Type header.", "If the parameter already exists in the header, its value will be replaced with value.", "If the Content-Type header as not yet been defined for this message, it will be set to text/plain and the new parameter value will be appended as per RFC 2045.", "Optional header specifies an alternative header to Content-Type, and all parameters will be quoted as necessary unless optional requote is False (the default is True).", "If optional charset is specified, the parameter will be encoded according to RFC 2231.", "Optional language specifies the RFC 2231 language, defaulting to the empty string.", "Both charset and language should be strings.", "If replace is False (the default) the header is moved to the end of the list of headers.", "If replace is True, the header will be updated in place."]}
{"index": 1913, "name": "email.message.Message.del_param", "module": "email", "doc": ["Remove the given parameter completely from the Content-Type header.", "The header will be re-written in place without the parameter or its value.", "All values will be quoted as necessary unless requote is False (the default is True).", "Optional header specifies an alternative to Content-Type."]}
{"index": 1914, "name": "email.message.Message.set_type", "module": "email", "doc": ["Set the main type and subtype for the Content-Type header.", "type must be a string in the form maintype/subtype, otherwise a ValueError is raised.", "This method replaces the Content-Type header, keeping all the parameters in place.", "If requote is False, this leaves the existing header\u2019s quoting as is, otherwise the parameters will be quoted (the default).", "An alternative header can be specified in the header argument.", "When the Content-Type header is set a MIME-Version header is also added.", "This is a legacy method.", "On the EmailMessage class its functionality is replaced by the make_ and add_ methods."]}
{"index": 1915, "name": "email.message.Message.get_filename", "module": "email", "doc": ["Return the value of the filename parameter of the Content-Disposition header of the message.", "If the header does not have a filename parameter, this method falls back to looking for the name parameter on the Content-Type header.", "If neither is found, or the header is missing, then failobj is returned.", "The returned string will always be unquoted as per email.utils.unquote()."]}
{"index": 1916, "name": "email.message.Message.get_boundary", "module": "email", "doc": ["Return the value of the boundary parameter of the Content-Type header of the message, or failobj if either the header is missing, or has no boundary parameter.", "The returned string will always be unquoted as per email.utils.unquote()."]}
{"index": 1917, "name": "email.message.Message.set_boundary", "module": "email", "doc": ["Set the boundary parameter of the Content-Type header to boundary.", "set_boundary() will always quote boundary if necessary.", "A HeaderParseError is raised if the message object has no Content-Type header.", "Note that using this method is subtly different than deleting the old Content-Type header and adding a new one with the new boundary via add_header(), because set_boundary() preserves the order of the Content-Type header in the list of headers.", "However, it does not preserve any continuation lines which may have been present in the original Content-Type header."]}
{"index": 1918, "name": "email.message.Message.get_content_charset", "module": "email", "doc": ["Return the charset parameter of the Content-Type header, coerced to lower case.", "If there is no Content-Type header, or if that header has no charset parameter, failobj is returned.", "Note that this method differs from get_charset() which returns the Charset instance for the default encoding of the message body."]}
{"index": 1919, "name": "email.message.Message.get_charsets", "module": "email", "doc": ["Return a list containing the character set names in the message.", "If the message is a multipart, then the list will contain one element for each subpart in the payload, otherwise, it will be a list of length 1.", "Each item in the list will be a string which is the value of the charset parameter in the Content-Type header for the represented subpart.", "However, if the subpart has no Content-Type header, no charset parameter, or is not of the text main MIME type, then that item in the returned list will be failobj."]}
{"index": 1920, "name": "email.message.Message.get_content_disposition", "module": "email", "doc": ["Return the lowercased value (without parameters) of the message\u2019s Content-Disposition header if it has one, or None.", "The possible values for this method are inline, attachment or None if the message follows RFC 2183."]}
{"index": 1921, "name": "email.message.Message.walk", "module": "email", "doc": ["The walk() method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree, in depth-first traversal order.", "You will typically use walk() as the iterator in a for loop; each iteration returns the next subpart.", "Here\u2019s an example that prints the MIME type of every part of a multipart message structure:", "walk iterates over the subparts of any part where is_multipart() returns True, even though msg.get_content_maintype() == 'multipart' may return False.", "We can see this in our example by making use of the _structure debug helper function:", "Here the message parts are not multiparts, but they do contain subparts.", "is_multipart() returns True and walk descends into the subparts."]}
{"index": 1922, "name": "email.message.Message.preamble", "module": "email", "doc": ["The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "Normally, this text is never visible in a MIME-aware mail reader because it falls outside the standard MIME armor.", "However, when viewing the raw text of the message, or when viewing the message in a non-MIME aware reader, this text can become visible.", "The preamble attribute contains this leading extra-armor text for MIME documents.", "When the Parser discovers some text after the headers but before the first boundary string, it assigns this text to the message\u2019s preamble attribute.", "When the Generator is writing out the plain text representation of a MIME message, and it finds the message has a preamble attribute, it will write this text in the area between the headers and the first boundary.", "See email.parser and email.generator for details.", "Note that if the message object has no preamble, the preamble attribute will be None."]}
{"index": 1923, "name": "email.message.Message.epilogue", "module": "email", "doc": ["The epilogue attribute acts the same way as the preamble attribute, except that it contains text that appears between the last boundary and the end of the message.", "You do not need to set the epilogue to the empty string in order for the Generator to print a newline at the end of the file."]}
{"index": 1924, "name": "email.message.Message.defects", "module": "email", "doc": ["The defects attribute contains a list of all the problems found when parsing this message.", "See email.errors for a detailed description of the possible parsing defects."]}
{"index": 1925, "name": "email.contentmanager.ContentManager", "module": "email", "doc": ["Base class for content managers.", "Provides the standard registry mechanisms to register converters between MIME content and other representations, as well as the get_content and set_content dispatch methods."]}
{"index": 1926, "name": "email.contentmanager.ContentManager.get_content", "module": "email", "doc": ["Look up a handler function based on the mimetype of msg (see next paragraph), call it, passing through all arguments, and return the result of the call.", "The expectation is that the handler will extract the payload from msg and return an object that encodes information about the extracted data.", "To find the handler, look for the following keys in the registry, stopping with the first one found:", "If none of these keys produce a handler, raise a KeyError for the full MIME type."]}
{"index": 1927, "name": "email.contentmanager.ContentManager.set_content", "module": "email", "doc": ["If the maintype is multipart, raise a TypeError; otherwise look up a handler function based on the type of obj (see next paragraph), call clear_content() on the msg, and call the handler function, passing through all arguments.", "The expectation is that the handler will transform and store obj into msg, possibly making other changes to msg as well, such as adding various MIME headers to encode information needed to interpret the stored data.", "To find the handler, obtain the type of obj (typ = type(obj)), and look for the following keys in the registry, stopping with the first one found:", "If none of the above match, repeat all of the checks above for each of the types in the MRO (typ.__mro__).", "Finally, if no other key yields a handler, check for a handler for the key None.", "If there is no handler for None, raise a KeyError for the fully qualified name of the type.", "Also add a MIME-Version header if one is not present (see also MIMEPart)."]}
{"index": 1928, "name": "email.contentmanager.ContentManager.add_get_handler", "module": "email", "doc": ["Record the function handler as the handler for key.", "For the possible values of key, see get_content()."]}
{"index": 1929, "name": "email.contentmanager.ContentManager.add_set_handler", "module": "email", "doc": ["Record handler as the function to call when an object of a type matching typekey is passed to set_content().", "For the possible values of typekey, see set_content()."]}
{"index": 1930, "name": "email.contentmanager.raw_data_manager", "module": "email", "doc": ["This content manager provides only a minimum interface beyond that provided by Message itself:  it deals only with text, raw byte strings, and Message objects.", "Nevertheless, it provides significant advantages compared to the base API: get_content on a text part will return a unicode string without the application needing to manually decode it, set_content provides a rich set of options for controlling the headers added to a part and controlling the content transfer encoding, and it enables the use of the various add_ methods, thereby simplifying the creation of multipart messages."]}
{"index": 1931, "name": "email.contentmanager.get_content", "module": "email", "doc": ["Return the payload of the part as either a string (for text parts), an EmailMessage object (for message/rfc822 parts), or a bytes object (for all other non-multipart types).", "Raise a KeyError if called on a multipart.", "If the part is a text part and errors is specified, use it as the error handler when decoding the payload to unicode.", "The default error handler is replace."]}
{"index": 1932, "name": "email.contentmanager.set_content", "module": "email", "doc": ["Add headers and payload to msg:", "Add a Content-Type header with a maintype/subtype value.", "If charset is provided (which is valid only for str), encode the string to bytes using the specified character set.", "The default is utf-8.", "If the specified charset is a known alias for a standard MIME charset name, use the standard charset instead.", "If cte is set, encode the payload using the specified content transfer encoding, and set the Content-Transfer-Encoding header to that value.", "Possible values for cte are quoted-printable, base64, 7bit, 8bit, and binary.", "If the input cannot be encoded in the specified encoding (for example, specifying a cte of 7bit for an input that contains non-ASCII values), raise a ValueError.", "If disposition is set, use it as the value of the Content-Disposition header.", "If not specified, and filename is specified, add the header with the value attachment.", "If disposition is not specified and filename is also not specified, do not add the header.", "The only valid values for disposition are attachment and inline.", "If filename is specified, use it as the value of the filename parameter of the Content-Disposition header.", "If cid is specified, add a Content-ID header with cid as its value.", "If params is specified, iterate its items method and use the resulting (key, value) pairs to set additional parameters on the Content-Type header.", "If headers is specified and is a list of strings of the form headername: headervalue or a list of header objects (distinguished from strings by having a name attribute), add the headers to msg."]}
{"index": 1933, "name": "id2", "module": "email", "doc": ["Originally added in 3.4 as a provisional module"]}
{"index": 1934, "name": "email.encoders.encode_quopri", "module": "email", "doc": ["Encodes the payload into quoted-printable form and sets the Content-Transfer-Encoding header to quoted-printable 1.", "This is a good encoding to use when most of your payload is normal printable data, but contains a few unprintable characters."]}
{"index": 1935, "name": "email.encoders.encode_base64", "module": "email", "doc": ["Encodes the payload into base64 form and sets the Content-Transfer-Encoding header to base64.", "This is a good encoding to use when most of your payload is unprintable data since it is a more compact form than quoted-printable.", "The drawback of base64 encoding is that it renders the text non-human readable."]}
{"index": 1936, "name": "email.encoders.encode_7or8bit", "module": "email", "doc": ["This doesn\u2019t actually modify the message\u2019s payload, but it does set the Content-Transfer-Encoding header to either 7bit or 8bit as appropriate, based on the payload data."]}
{"index": 1937, "name": "email.encoders.encode_noop", "module": "email", "doc": ["This does nothing; it doesn\u2019t even set the Content-Transfer-Encoding header."]}
{"index": 1938, "name": "id2", "module": "email", "doc": ["Note that encoding with encode_quopri() also encodes all tabs and space characters in the data."]}
{"index": 1939, "name": "email.errors.MessageError", "module": "email", "doc": ["This is the base class for all exceptions that the email package can raise.", "It is derived from the standard Exception class and defines no additional methods."]}
{"index": 1940, "name": "email.errors.MessageParseError", "module": "email", "doc": ["This is the base class for exceptions raised by the Parser class.", "It is derived from MessageError.", "This class is also used internally by the parser used by headerregistry."]}
{"index": 1941, "name": "email.errors.HeaderParseError", "module": "email", "doc": ["Raised under some error conditions when parsing the RFC 5322 headers of a message, this class is derived from MessageParseError.", "The set_boundary() method will raise this error if the content type is unknown when the method is called.", "Header may raise this error for certain base64 decoding errors, and when an attempt is made to create a header that appears to contain an embedded header (that is, there is what is supposed to be a continuation line that has no leading whitespace and looks like a header)."]}
{"index": 1942, "name": "email.errors.BoundaryError", "module": "email", "doc": ["Deprecated and no longer used."]}
{"index": 1943, "name": "email.errors.MultipartConversionError", "module": "email", "doc": ["Raised when a payload is added to a Message object using add_payload(), but the payload is already a scalar and the message\u2019s Content-Type main type is not either multipart or missing.", "MultipartConversionError multiply inherits from MessageError and the built-in TypeError.", "Since Message.add_payload() is deprecated, this exception is rarely raised in practice.", "However the exception may also be raised if the attach() method is called on an instance of a class derived from MIMENonMultipart (e.g.", "MIMEImage)."]}
{"index": 1944, "name": "id3", "module": "email", "doc": ["Thanks to Matthew Dixon Cowles for the original inspiration and examples."]}
{"index": 1945, "name": "email.generator.BytesGenerator", "module": "email", "doc": ["Return a BytesGenerator object that will write any message provided to the flatten() method, or any surrogateescape encoded text provided to the write() method, to the file-like object outfp.", "outfp must support a write method that accepts binary data.", "If optional mangle_from_ is True, put a > character in front of any line in the body that starts with the exact string \"From \", that is From followed by a space at the beginning of a line.", "mangle_from_ defaults to the value of the mangle_from_ setting of the policy (which is True for the compat32 policy and False for all others).", "mangle_from_ is intended for use when messages are stored in unix mbox format (see mailbox and WHY THE CONTENT-LENGTH FORMAT IS BAD).", "If maxheaderlen is not None, refold any header lines that are longer than maxheaderlen, or if 0, do not rewrap any headers.", "If manheaderlen is None (the default), wrap headers and other message lines according to the policy settings.", "If policy is specified, use that policy to control message generation.", "If policy is None (the default), use the policy associated with the Message or EmailMessage object passed to flatten to control the message generation.", "See email.policy for details on what policy controls."]}
{"index": 1946, "name": "email.generator.BytesGenerator.flatten", "module": "email", "doc": ["Print the textual representation of the message object structure rooted at msg to the output file specified when the BytesGenerator instance was created.", "If the policy option cte_type is 8bit (the default), copy any headers in the original parsed message that have not been modified to the output with any bytes with the high bit set reproduced as in the original, and preserve the non-ASCII Content-Transfer-Encoding of any body parts that have them.", "If cte_type is 7bit, convert the bytes with the high bit set as needed using an ASCII-compatible Content-Transfer-Encoding.", "That is, transform parts with non-ASCII Content-Transfer-Encoding (Content-Transfer-Encoding: 8bit) to an ASCII compatible Content-Transfer-Encoding, and encode RFC-invalid non-ASCII bytes in headers using the MIME unknown-8bit character set, thus rendering them RFC-compliant.", "If unixfrom is True, print the envelope header delimiter used by the Unix mailbox format (see mailbox) before the first of the RFC 5322 headers of the root message object.", "If the root object has no envelope header, craft a standard one.", "The default is False.", "Note that for subparts, no envelope header is ever printed.", "If linesep is not None, use it as the separator character between all the lines of the flattened message.", "If linesep is None (the default), use the value specified in the policy."]}
{"index": 1947, "name": "email.generator.BytesGenerator.clone", "module": "email", "doc": ["Return an independent clone of this BytesGenerator instance with the exact same option settings, and fp as the new outfp."]}
{"index": 1948, "name": "email.generator.BytesGenerator.write", "module": "email", "doc": ["Encode s using the ASCII codec and the surrogateescape error handler, and pass it to the write method of the outfp passed to the BytesGenerator\u2019s constructor."]}
{"index": 1949, "name": "email.generator.Generator", "module": "email", "doc": ["Return a Generator object that will write any message provided to the flatten() method, or any text provided to the write() method, to the file-like object outfp.", "outfp must support a write method that accepts string data.", "If optional mangle_from_ is True, put a > character in front of any line in the body that starts with the exact string \"From \", that is From followed by a space at the beginning of a line.", "mangle_from_ defaults to the value of the mangle_from_ setting of the policy (which is True for the compat32 policy and False for all others).", "mangle_from_ is intended for use when messages are stored in unix mbox format (see mailbox and WHY THE CONTENT-LENGTH FORMAT IS BAD).", "If maxheaderlen is not None, refold any header lines that are longer than maxheaderlen, or if 0, do not rewrap any headers.", "If manheaderlen is None (the default), wrap headers and other message lines according to the policy settings.", "If policy is specified, use that policy to control message generation.", "If policy is None (the default), use the policy associated with the Message or EmailMessage object passed to flatten to control the message generation.", "See email.policy for details on what policy controls."]}
{"index": 1950, "name": "email.generator.Generator.flatten", "module": "email", "doc": ["Print the textual representation of the message object structure rooted at msg to the output file specified when the Generator instance was created.", "If the policy option cte_type is 8bit, generate the message as if the option were set to 7bit.", "(This is required because strings cannot represent non-ASCII bytes.)", "Convert any bytes with the high bit set as needed using an ASCII-compatible Content-Transfer-Encoding.", "That is, transform parts with non-ASCII Content-Transfer-Encoding (Content-Transfer-Encoding: 8bit) to an ASCII compatible Content-Transfer-Encoding, and encode RFC-invalid non-ASCII bytes in headers using the MIME unknown-8bit character set, thus rendering them RFC-compliant.", "If unixfrom is True, print the envelope header delimiter used by the Unix mailbox format (see mailbox) before the first of the RFC 5322 headers of the root message object.", "If the root object has no envelope header, craft a standard one.", "The default is False.", "Note that for subparts, no envelope header is ever printed.", "If linesep is not None, use it as the separator character between all the lines of the flattened message.", "If linesep is None (the default), use the value specified in the policy."]}
{"index": 1951, "name": "email.generator.Generator.clone", "module": "email", "doc": ["Return an independent clone of this Generator instance with the exact same options, and fp as the new outfp."]}
{"index": 1952, "name": "email.generator.Generator.write", "module": "email", "doc": ["Write s to the write method of the outfp passed to the Generator\u2019s constructor.", "This provides just enough file-like API for Generator instances to be used in the print() function."]}
{"index": 1953, "name": "email.generator.DecodedGenerator", "module": "email", "doc": ["Act like Generator, except that for any subpart of the message passed to Generator.flatten(), if the subpart is of main type text, print the decoded payload of the subpart, and if the main type is not text, instead of printing it fill in the string fmt using information from the part and print the resulting filled-in string.", "To fill in fmt, execute fmt % part_info, where part_info is a dictionary composed of the following keys and values:", "If fmt is None, use the following default fmt:", "Optional _mangle_from_ and maxheaderlen are as with the Generator base class."]}
{"index": 1954, "name": "id3", "module": "email", "doc": ["This statement assumes that you use the appropriate setting for unixfrom, and that there are no policy settings calling for automatic adjustments (for example, refold_source must be none, which is not the default).", "It is also not 100% true, since if the message does not conform to the RFC standards occasionally information about the exact original text is lost during parsing error recovery.", "It is a goal to fix these latter edge cases when possible."]}
{"index": 1955, "name": "email.header.Header", "module": "email", "doc": ["Create a MIME-compliant header that can contain strings in different character sets.", "Optional s is the initial header value.", "If None (the default), the initial header value is not set.", "You can later append to the header with append() method calls.", "s may be an instance of bytes or str, but see the append() documentation for semantics.", "Optional charset serves two purposes: it has the same meaning as the charset argument to the append() method.", "It also sets the default character set for all subsequent append() calls that omit the charset argument.", "If charset is not provided in the constructor (the default), the us-ascii character set is used both as s\u2019s initial charset and as the default for subsequent append() calls.", "The maximum line length can be specified explicitly via maxlinelen.", "For splitting the first line to a shorter value (to account for the field header which isn\u2019t included in s, e.g.", "Subject) pass in the name of the field in header_name.", "The default maxlinelen is 76, and the default value for header_name is None, meaning it is not taken into account for the first line of a long, split header.", "Optional continuation_ws must be RFC 2822-compliant folding whitespace, and is usually either a space or a hard tab character.", "This character will be prepended to continuation lines.", "continuation_ws defaults to a single space character.", "Optional errors is passed straight through to the append() method.", "The Header class also provides a number of methods to support standard operators and built-in functions."]}
{"index": 1956, "name": "email.header.Header.append", "module": "email", "doc": ["Append the string s to the MIME header.", "Optional charset, if given, should be a Charset instance (see email.charset) or the name of a character set, which will be converted to a Charset instance.", "A value of None (the default) means that the charset given in the constructor is used.", "s may be an instance of bytes or str.", "If it is an instance of bytes, then charset is the encoding of that byte string, and a UnicodeError will be raised if the string cannot be decoded with that character set.", "If s is an instance of str, then charset is a hint specifying the character set of the characters in the string.", "In either case, when producing an RFC 2822-compliant header using RFC 2047 rules, the string will be encoded using the output codec of the charset.", "If the string cannot be encoded using the output codec, a UnicodeError will be raised.", "Optional errors is passed as the errors argument to the decode call if s is a byte string."]}
{"index": 1957, "name": "email.header.Header.encode", "module": "email", "doc": ["Encode a message header into an RFC-compliant format, possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings.", "Optional splitchars is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping.", "This is in very rough support of RFC 2822\u2019s \u2018higher level syntactic breaks\u2019:  split points preceded by a splitchar are preferred during line splitting, with the characters preferred in the order in which they appear in the string.", "Space and tab may be included in the string to indicate whether preference should be given to one over the other as a split point when other split chars do not appear in the line being split.", "Splitchars does not affect RFC 2047 encoded lines.", "maxlinelen, if given, overrides the instance\u2019s value for the maximum line length.", "linesep specifies the characters used to separate the lines of the folded header.", "It defaults to the most useful value for Python application code (\\n), but \\r\\n can be specified in order to produce headers with RFC-compliant line separators."]}
{"index": 1958, "name": "email.header.Header.__str__", "module": "email", "doc": ["Returns an approximation of the Header as a string, using an unlimited line length.", "All pieces are converted to unicode using the specified encoding and joined together appropriately.", "Any pieces with a charset of 'unknown-8bit' are decoded as ASCII using the 'replace' error handler."]}
{"index": 1959, "name": "email.header.Header.__eq__", "module": "email", "doc": ["This method allows you to compare two Header instances for equality."]}
{"index": 1960, "name": "email.header.Header.__ne__", "module": "email", "doc": ["This method allows you to compare two Header instances for inequality."]}
{"index": 1961, "name": "email.header.decode_header", "module": "email", "doc": ["Decode a message header value without converting the character set.", "The header value is in header.", "This function returns a list of (decoded_string, charset) pairs containing each of the decoded parts of the header.", "charset is None for non-encoded parts of the header, otherwise a lower case string containing the name of the character set specified in the encoded string.", "Here\u2019s an example:"]}
{"index": 1962, "name": "email.header.make_header", "module": "email", "doc": ["Create a Header instance from a sequence of pairs as returned by decode_header().", "decode_header() takes a header value string and returns a sequence of pairs of the format (decoded_string, charset) where charset is the name of the character set.", "This function takes one of those sequence of pairs and returns a Header instance.", "Optional maxlinelen, header_name, and continuation_ws are as in the Header constructor."]}
{"index": 1963, "name": "email.headerregistry.BaseHeader", "module": "email", "doc": ["name and value are passed to BaseHeader from the header_factory call.", "The string value of any header object is the value fully decoded to unicode.", "This base class defines the following read-only properties:", "BaseHeader also provides the following method, which is called by the email library code and should not in general be called by application programs:", "BaseHeader by itself cannot be used to create a header object.", "It defines a protocol that each specialized header cooperates with in order to produce the header object.", "Specifically, BaseHeader requires that the specialized class provide a classmethod() named parse.", "This method is called as follows:", "kwds is a dictionary containing one pre-initialized key, defects.", "defects is an empty list.", "The parse method should append any detected defects to this list.", "On return, the kwds dictionary must contain values for at least the keys decoded and defects.", "decoded should be the string value for the header (that is, the header value fully decoded to unicode).", "The parse method should assume that string may contain content-transfer-encoded parts, but should correctly handle all valid unicode characters as well so that it can parse un-encoded header values.", "BaseHeader\u2019s __new__ then creates the header instance, and calls its init method.", "The specialized class only needs to provide an init method if it wishes to set additional attributes beyond those provided by BaseHeader itself.", "Such an init method should look like this:", "That is, anything extra that the specialized class puts in to the kwds dictionary should be removed and handled, and the remaining contents of kw (and args) passed to the BaseHeader init method."]}
{"index": 1964, "name": "email.headerregistry.BaseHeader.name", "module": "email", "doc": ["The name of the header (the portion of the field before the \u2018:\u2019).", "This is exactly the value passed in the header_factory call for name; that is, case is preserved."]}
{"index": 1965, "name": "email.headerregistry.BaseHeader.defects", "module": "email", "doc": ["A tuple of HeaderDefect instances reporting any RFC compliance problems found during parsing.", "The email package tries to be complete about detecting compliance issues.", "See the errors module for a discussion of the types of defects that may be reported."]}
{"index": 1966, "name": "email.headerregistry.BaseHeader.max_count", "module": "email", "doc": ["The maximum number of headers of this type that can have the same name.", "A value of None means unlimited.", "The BaseHeader value for this attribute is None; it is expected that specialized header classes will override this value as needed."]}
{"index": 1967, "name": "email.headerregistry.BaseHeader.fold", "module": "email", "doc": ["Return a string containing linesep characters as required to correctly fold the header according to policy.", "A cte_type of 8bit will be treated as if it were 7bit, since headers may not contain arbitrary binary data.", "If utf8 is False, non-ASCII data will be RFC 2047 encoded."]}
{"index": 1968, "name": "email.headerregistry.UnstructuredHeader", "module": "email", "doc": ["An \u201cunstructured\u201d header is the default type of header in RFC 5322.", "Any header that does not have a specified syntax is treated as unstructured.", "The classic example of an unstructured header is the Subject header.", "In RFC 5322, an unstructured header is a run of arbitrary text in the ASCII character set.", "RFC 2047, however, has an RFC 5322 compatible mechanism for encoding non-ASCII text as ASCII characters within a header value.", "When a value containing encoded words is passed to the constructor, the UnstructuredHeader parser converts such encoded words into unicode, following the RFC 2047 rules for unstructured text.", "The parser uses heuristics to attempt to decode certain non-compliant encoded words.", "Defects are registered in such cases, as well as defects for issues such as invalid characters within the encoded words or the non-encoded text.", "This header type provides no additional attributes."]}
{"index": 1969, "name": "email.headerregistry.DateHeader", "module": "email", "doc": ["RFC 5322 specifies a very specific format for dates within email headers.", "The DateHeader parser recognizes that date format, as well as recognizing a number of variant forms that are sometimes found \u201cin the wild\u201d.", "This header type provides the following additional attributes:", "The decoded value of the header is determined by formatting the datetime according to the RFC 5322 rules; that is, it is set to:", "When creating a DateHeader, value may be datetime instance.", "This means, for example, that the following code is valid and does what one would expect:", "Because this is a naive datetime it will be interpreted as a UTC timestamp, and the resulting value will have a timezone of -0000.", "Much more useful is to use the localtime() function from the utils module:", "This example sets the date header to the current time and date using the current timezone offset."]}
{"index": 1970, "name": "email.headerregistry.DateHeader.datetime", "module": "email", "doc": ["If the header value can be recognized as a valid date of one form or another, this attribute will contain a datetime instance representing that date.", "If the timezone of the input date is specified as -0000 (indicating it is in UTC but contains no information about the source timezone), then datetime will be a naive datetime.", "If a specific timezone offset is found (including +0000), then datetime will contain an aware datetime that uses datetime.timezone to record the timezone offset."]}
{"index": 1971, "name": "email.headerregistry.AddressHeader", "module": "email", "doc": ["Address headers are one of the most complex structured header types.", "The AddressHeader class provides a generic interface to any address header.", "This header type provides the following additional attributes:", "The decoded value of the header will have all encoded words decoded to unicode.", "idna encoded domain names are also decoded to unicode.", "The decoded value is set by joining the str value of the elements of the groups attribute with ', '.", "A list of Address and Group objects in any combination may be used to set the value of an address header.", "Group objects whose display_name is None will be interpreted as single addresses, which allows an address list to be copied with groups intact by using the list obtained from the groups attribute of the source header."]}
{"index": 1972, "name": "email.headerregistry.AddressHeader.groups", "module": "email", "doc": ["A tuple of Group objects encoding the addresses and groups found in the header value.", "Addresses that are not part of a group are represented in this list as single-address Groups whose display_name is None."]}
{"index": 1973, "name": "email.headerregistry.AddressHeader.addresses", "module": "email", "doc": ["A tuple of Address objects encoding all of the individual addresses from the header value.", "If the header value contains any groups, the individual addresses from the group are included in the list at the point where the group occurs in the value (that is, the list of addresses is \u201cflattened\u201d into a one dimensional list)."]}
{"index": 1974, "name": "email.headerregistry.SingleAddressHeader", "module": "email", "doc": ["A subclass of AddressHeader that adds one additional attribute:"]}
{"index": 1975, "name": "email.headerregistry.SingleAddressHeader.address", "module": "email", "doc": ["The single address encoded by the header value.", "If the header value actually contains more than one address (which would be a violation of the RFC under the default policy), accessing this attribute will result in a ValueError."]}
{"index": 1976, "name": "email.headerregistry.MIMEVersionHeader", "module": "email", "doc": ["There is really only one valid value for the MIME-Version header, and that is 1.0.", "For future proofing, this header class supports other valid version numbers.", "If a version number has a valid value per RFC 2045, then the header object will have non-None values for the following attributes:"]}
{"index": 1977, "name": "email.headerregistry.MIMEVersionHeader.version", "module": "email", "doc": ["The version number as a string, with any whitespace and/or comments removed."]}
{"index": 1978, "name": "email.headerregistry.MIMEVersionHeader.major", "module": "email", "doc": ["The major version number as an integer"]}
{"index": 1979, "name": "email.headerregistry.MIMEVersionHeader.minor", "module": "email", "doc": ["The minor version number as an integer"]}
{"index": 1980, "name": "email.headerregistry.ParameterizedMIMEHeader", "module": "email", "doc": ["MIME headers all start with the prefix \u2018Content-\u2018.", "Each specific header has a certain value, described under the class for that header.", "Some can also take a list of supplemental parameters, which have a common format.", "This class serves as a base for all the MIME headers that take parameters."]}
{"index": 1981, "name": "email.headerregistry.ParameterizedMIMEHeader.params", "module": "email", "doc": ["A dictionary mapping parameter names to parameter values."]}
{"index": 1982, "name": "email.headerregistry.ContentTypeHeader", "module": "email", "doc": ["A ParameterizedMIMEHeader class that handles the Content-Type header."]}
{"index": 1983, "name": "email.headerregistry.ContentTypeHeader.content_type", "module": "email", "doc": ["The content type string, in the form maintype/subtype."]}
{"index": 1984, "name": "email.headerregistry.ContentDispositionHeader", "module": "email", "doc": ["A ParameterizedMIMEHeader class that handles the Content-Disposition header."]}
{"index": 1985, "name": "email.headerregistry.ContentTransferEncoding", "module": "email", "doc": ["Handles the Content-Transfer-Encoding header."]}
{"index": 1986, "name": "email.headerregistry.ContentTransferEncoding.cte", "module": "email", "doc": ["Valid values are 7bit, 8bit, base64, and quoted-printable.", "See RFC 2045 for more information."]}
{"index": 1987, "name": "email.headerregistry.HeaderRegistry", "module": "email", "doc": ["This is the factory used by EmailPolicy by default.", "HeaderRegistry builds the class used to create a header instance dynamically, using base_class and a specialized class retrieved from a registry that it holds.", "When a given header name does not appear in the registry, the class specified by default_class is used as the specialized class.", "When use_default_map is True (the default), the standard mapping of header names to classes is copied in to the registry during initialization.", "base_class is always the last class in the generated class\u2019s __bases__ list.", "The default mappings are:", "HeaderRegistry has the following methods:"]}
{"index": 1988, "name": "email.headerregistry.HeaderRegistry.map_to_type", "module": "email", "doc": ["name is the name of the header to be mapped.", "It will be converted to lower case in the registry.", "cls is the specialized class to be used, along with base_class, to create the class used to instantiate headers that match name."]}
{"index": 1989, "name": "email.headerregistry.HeaderRegistry.__getitem__", "module": "email", "doc": ["Construct and return a class to handle creating a name header."]}
{"index": 1990, "name": "email.headerregistry.HeaderRegistry.__call__", "module": "email", "doc": ["Retrieves the specialized header associated with name from the registry (using default_class if name does not appear in the registry) and composes it with base_class to produce a class, calls the constructed class\u2019s constructor, passing it the same argument list, and finally returns the class instance created thereby."]}
{"index": 1991, "name": "email.headerregistry.Address", "module": "email", "doc": ["The class used to represent an email address.", "The general form of an address is:", "or:", "where each part must conform to specific syntax rules spelled out in RFC 5322.", "As a convenience addr_spec can be specified instead of username and domain, in which case username and domain will be parsed from the addr_spec.", "An addr_spec must be a properly RFC quoted string; if it is not Address will raise an error.", "Unicode characters are allowed and will be property encoded when serialized.", "However, per the RFCs, unicode is not allowed in the username portion of the address.", "To support SMTP (RFC 5321), Address handles one special case: if username and domain are both the empty string (or None), then the string value of the Address is <>."]}
{"index": 1992, "name": "email.headerregistry.Address.display_name", "module": "email", "doc": ["The display name portion of the address, if any, with all quoting removed.", "If the address does not have a display name, this attribute will be an empty string."]}
{"index": 1993, "name": "email.headerregistry.Address.username", "module": "email", "doc": ["The username portion of the address, with all quoting removed."]}
{"index": 1994, "name": "email.headerregistry.Address.domain", "module": "email", "doc": ["The domain portion of the address."]}
{"index": 1995, "name": "email.headerregistry.Address.addr_spec", "module": "email", "doc": ["The username@domain portion of the address, correctly quoted for use as a bare address (the second form shown above).", "This attribute is not mutable."]}
{"index": 1996, "name": "email.headerregistry.Address.__str__", "module": "email", "doc": ["The str value of the object is the address quoted according to RFC 5322 rules, but with no Content Transfer Encoding of any non-ASCII characters."]}
{"index": 1997, "name": "email.headerregistry.Group", "module": "email", "doc": ["The class used to represent an address group.", "The general form of an address group is:", "As a convenience for processing lists of addresses that consist of a mixture of groups and single addresses, a Group may also be used to represent single addresses that are not part of a group by setting display_name to None and providing a list of the single address as addresses."]}
{"index": 1998, "name": "email.headerregistry.Group.display_name", "module": "email", "doc": ["The display_name of the group.", "If it is None and there is exactly one Address in addresses, then the Group represents a single address that is not in a group."]}
{"index": 1999, "name": "email.headerregistry.Group.addresses", "module": "email", "doc": ["A possibly empty tuple of Address objects representing the addresses in the group."]}
{"index": 2000, "name": "email.headerregistry.Group.__str__", "module": "email", "doc": ["The str value of a Group is formatted according to RFC 5322, but with no Content Transfer Encoding of any non-ASCII characters.", "If display_name is none and there is a single Address in the addresses list, the str value will be the same as the str of that single Address."]}
{"index": 2001, "name": "id2", "module": "email", "doc": ["Originally added in 3.3 as a provisional module"]}
{"index": 2002, "name": "email.iterators.body_line_iterator", "module": "email", "doc": ["This iterates over all the payloads in all the subparts of msg, returning the string payloads line-by-line.", "It skips over all the subpart headers, and it skips over any subpart with a payload that isn\u2019t a Python string.", "This is somewhat equivalent to reading the flat text representation of the message from a file using readline(), skipping over all the intervening headers.", "Optional decode is passed through to Message.get_payload."]}
{"index": 2003, "name": "email.iterators.typed_subpart_iterator", "module": "email", "doc": ["This iterates over all the subparts of msg, returning only those subparts that match the MIME type specified by maintype and subtype.", "Note that subtype is optional; if omitted, then subpart MIME type matching is done only with the main type.", "maintype is optional too; it defaults to text.", "Thus, by default typed_subpart_iterator() returns each subpart that has a MIME type of text/*."]}
{"index": 2004, "name": "email.iterators._structure", "module": "email", "doc": ["Prints an indented representation of the content types of the message object structure.", "For example:", "Optional fp is a file-like object to print the output to.", "It must be suitable for Python\u2019s print() function.", "level is used internally.", "include_default, if true, prints the default type as well."]}
{"index": 2005, "name": "email.message.EmailMessage", "module": "email", "doc": ["If policy is specified use the rules it specifies to update and serialize the representation of the message.", "If policy is not set, use the default policy, which follows the rules of the email RFCs except for line endings (instead of the RFC mandated \\r\\n, it uses the Python standard \\n line endings).", "For more information see the policy documentation.", "The following methods implement the mapping-like interface for accessing the message\u2019s headers.", "Note that there are some semantic differences between these methods and a normal mapping (i.e.", "dictionary) interface.", "For example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers.", "Also, in dictionaries there is no guaranteed order to the keys returned by keys(), but in an EmailMessage object, headers are always returned in the order they appeared in the original message, or in which they were added to the message later.", "Any header deleted and then re-added is always appended to the end of the header list.", "These semantic differences are intentional and are biased toward convenience in the most common use cases.", "Note that in all cases, any envelope header present in the message is not included in the mapping interface.", "Here are some additional useful header related methods:", "The following methods relate to interrogating and manipulating the content (payload) of the message.", "EmailMessage objects have the following instance attributes:"]}
{"index": 2006, "name": "email.message.EmailMessage.as_string", "module": "email", "doc": ["Return the entire message flattened as a string.", "When optional unixfrom is true, the envelope header is included in the returned string.", "unixfrom defaults to False.", "For backward compatibility with the base Message class maxheaderlen is accepted, but defaults to None, which means that by default the line length is controlled by the max_line_length of the policy.", "The policy argument may be used to override the default policy obtained from the message instance.", "This can be used to control some of the formatting produced by the method, since the specified policy will be passed to the Generator.", "Flattening the message may trigger changes to the EmailMessage if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).", "Note that this method is provided as a convenience and may not be the most useful way to serialize messages in your application, especially if you are dealing with multiple messages.", "See email.generator.Generator for a more flexible API for serializing messages.", "Note also that this method is restricted to producing messages serialized as \u201c7 bit clean\u201d when utf8 is False, which is the default."]}
{"index": 2007, "name": "email.message.EmailMessage.__str__", "module": "email", "doc": ["Equivalent to as_string(policy=self.policy.clone(utf8=True)).", "Allows str(msg) to produce a string containing the serialized message in a readable format."]}
{"index": 2008, "name": "email.message.EmailMessage.as_bytes", "module": "email", "doc": ["Return the entire message flattened as a bytes object.", "When optional unixfrom is true, the envelope header is included in the returned string.", "unixfrom defaults to False.", "The policy argument may be used to override the default policy obtained from the message instance.", "This can be used to control some of the formatting produced by the method, since the specified policy will be passed to the BytesGenerator.", "Flattening the message may trigger changes to the EmailMessage if defaults need to be filled in to complete the transformation to a string (for example, MIME boundaries may be generated or modified).", "Note that this method is provided as a convenience and may not be the most useful way to serialize messages in your application, especially if you are dealing with multiple messages.", "See email.generator.BytesGenerator for a more flexible API for serializing messages."]}
{"index": 2009, "name": "email.message.EmailMessage.__bytes__", "module": "email", "doc": ["Equivalent to as_bytes().", "Allows bytes(msg) to produce a bytes object containing the serialized message."]}
{"index": 2010, "name": "email.message.EmailMessage.is_multipart", "module": "email", "doc": ["Return True if the message\u2019s payload is a list of sub-EmailMessage objects, otherwise return False.", "When is_multipart() returns False, the payload should be a string object (which might be a CTE encoded binary payload).", "Note that is_multipart() returning True does not necessarily mean that \u201cmsg.get_content_maintype() == \u2018multipart\u2019\u201d will return the True.", "For example, is_multipart will return True when the EmailMessage is of type message/rfc822."]}
{"index": 2011, "name": "email.message.EmailMessage.set_unixfrom", "module": "email", "doc": ["Set the message\u2019s envelope header to unixfrom, which should be a string.", "(See mboxMessage for a brief description of this header.)"]}
{"index": 2012, "name": "email.message.EmailMessage.get_unixfrom", "module": "email", "doc": ["Return the message\u2019s envelope header.", "Defaults to None if the envelope header was never set."]}
{"index": 2013, "name": "email.message.EmailMessage.__len__", "module": "email", "doc": ["Return the total number of headers, including duplicates."]}
{"index": 2014, "name": "email.message.EmailMessage.__contains__", "module": "email", "doc": ["Return true if the message object has a field named name.", "Matching is done without regard to case and name does not include the trailing colon.", "Used for the in operator.", "For example:"]}
{"index": 2015, "name": "email.message.EmailMessage.__getitem__", "module": "email", "doc": ["Return the value of the named header field.", "name does not include the colon field separator.", "If the header is missing, None is returned; a KeyError is never raised.", "Note that if the named field appears more than once in the message\u2019s headers, exactly which of those field values will be returned is undefined.", "Use the get_all() method to get the values of all the extant headers named name.", "Using the standard (non-compat32) policies, the returned value is an instance of a subclass of email.headerregistry.BaseHeader."]}
{"index": 2016, "name": "email.message.EmailMessage.__setitem__", "module": "email", "doc": ["Add a header to the message with field name name and value val.", "The field is appended to the end of the message\u2019s existing headers.", "Note that this does not overwrite or delete any existing header with the same name.", "If you want to ensure that the new header is the only one present in the message with field name name, delete the field first, e.g.", ":", "If the policy defines certain headers to be unique (as the standard policies do), this method may raise a ValueError when an attempt is made to assign a value to such a header when one already exists.", "This behavior is intentional for consistency\u2019s sake, but do not depend on it as we may choose to make such assignments do an automatic deletion of the existing header in the future."]}
{"index": 2017, "name": "email.message.EmailMessage.__delitem__", "module": "email", "doc": ["Delete all occurrences of the field with name name from the message\u2019s headers.", "No exception is raised if the named field isn\u2019t present in the headers."]}
{"index": 2018, "name": "email.message.EmailMessage.keys", "module": "email", "doc": ["Return a list of all the message\u2019s header field names."]}
{"index": 2019, "name": "email.message.EmailMessage.values", "module": "email", "doc": ["Return a list of all the message\u2019s field values."]}
{"index": 2020, "name": "email.message.EmailMessage.items", "module": "email", "doc": ["Return a list of 2-tuples containing all the message\u2019s field headers and values."]}
{"index": 2021, "name": "email.message.EmailMessage.get", "module": "email", "doc": ["Return the value of the named header field.", "This is identical to __getitem__() except that optional failobj is returned if the named header is missing (failobj defaults to None)."]}
{"index": 2022, "name": "email.message.EmailMessage.get_all", "module": "email", "doc": ["Return a list of all the values for the field named name.", "If there are no such named headers in the message, failobj is returned (defaults to None)."]}
{"index": 2023, "name": "email.message.EmailMessage.add_header", "module": "email", "doc": ["Extended header setting.", "This method is similar to __setitem__() except that additional header parameters can be provided as keyword arguments.", "_name is the header field to add and _value is the primary value for the header.", "For each item in the keyword argument dictionary _params, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers).", "Normally, the parameter will be added as key=\"value\" unless the value is None, in which case only the key will be added.", "If the value contains non-ASCII characters, the charset and language may be explicitly controlled by specifying the value as a three tuple in the format (CHARSET, LANGUAGE, VALUE), where CHARSET is a string naming the charset to be used to encode the value, LANGUAGE can usually be set to None or the empty string (see RFC 2231 for other possibilities), and VALUE is the string value containing non-ASCII code points.", "If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in RFC 2231 format using a CHARSET of utf-8 and a LANGUAGE of None.", "Here is an example:", "This will add a header that looks like", "An example of the extended interface with non-ASCII characters:"]}
{"index": 2024, "name": "email.message.EmailMessage.replace_header", "module": "email", "doc": ["Replace a header.", "Replace the first header found in the message that matches _name, retaining header order and field name case of the original header.", "If no matching header is found, raise a KeyError."]}
{"index": 2025, "name": "email.message.EmailMessage.get_content_type", "module": "email", "doc": ["Return the message\u2019s content type, coerced to lower case of the form maintype/subtype.", "If there is no Content-Type header in the message return the value returned by get_default_type().", "If the Content-Type header is invalid, return text/plain.", "(According to RFC 2045, messages always have a default type, get_content_type() will always return a value.", "RFC 2045 defines a message\u2019s default type to be text/plain unless it appears inside a multipart/digest container, in which case it would be message/rfc822.", "If the Content-Type header has an invalid type specification, RFC 2045 mandates that the default type be text/plain.)"]}
{"index": 2026, "name": "email.message.EmailMessage.get_content_maintype", "module": "email", "doc": ["Return the message\u2019s main content type.", "This is the maintype part of the string returned by get_content_type()."]}
{"index": 2027, "name": "email.message.EmailMessage.get_content_subtype", "module": "email", "doc": ["Return the message\u2019s sub-content type.", "This is the subtype part of the string returned by get_content_type()."]}
{"index": 2028, "name": "email.message.EmailMessage.get_default_type", "module": "email", "doc": ["Return the default content type.", "Most messages have a default content type of text/plain, except for messages that are subparts of multipart/digest containers.", "Such subparts have a default content type of message/rfc822."]}
{"index": 2029, "name": "email.message.EmailMessage.set_default_type", "module": "email", "doc": ["Set the default content type.", "ctype should either be text/plain or message/rfc822, although this is not enforced.", "The default content type is not stored in the Content-Type header, so it only affects the return value of the get_content_type methods when no Content-Type header is present in the message."]}
{"index": 2030, "name": "email.message.EmailMessage.set_param", "module": "email", "doc": ["Set a parameter in the Content-Type header.", "If the parameter already exists in the header, replace its value with value.", "When header is Content-Type (the default) and the header does not yet exist in the message, add it, set its value to text/plain, and append the new parameter value.", "Optional header specifies an alternative header to Content-Type.", "If the value contains non-ASCII characters, the charset and language may be explicitly specified using the optional charset and language parameters.", "Optional language specifies the RFC 2231 language, defaulting to the empty string.", "Both charset and language should be strings.", "The default is to use the utf8 charset and None for the language.", "If replace is False (the default) the header is moved to the end of the list of headers.", "If replace is True, the header will be updated in place.", "Use of the requote parameter with EmailMessage objects is deprecated.", "Note that existing parameter values of headers may be accessed through the params attribute of the header value (for example, msg['Content-Type'].params['charset'])."]}
{"index": 2031, "name": "email.message.EmailMessage.del_param", "module": "email", "doc": ["Remove the given parameter completely from the Content-Type header.", "The header will be re-written in place without the parameter or its value.", "Optional header specifies an alternative to Content-Type.", "Use of the requote parameter with EmailMessage objects is deprecated."]}
{"index": 2032, "name": "email.message.EmailMessage.get_filename", "module": "email", "doc": ["Return the value of the filename parameter of the Content-Disposition header of the message.", "If the header does not have a filename parameter, this method falls back to looking for the name parameter on the Content-Type header.", "If neither is found, or the header is missing, then failobj is returned.", "The returned string will always be unquoted as per email.utils.unquote()."]}
{"index": 2033, "name": "email.message.EmailMessage.get_boundary", "module": "email", "doc": ["Return the value of the boundary parameter of the Content-Type header of the message, or failobj if either the header is missing, or has no boundary parameter.", "The returned string will always be unquoted as per email.utils.unquote()."]}
{"index": 2034, "name": "email.message.EmailMessage.set_boundary", "module": "email", "doc": ["Set the boundary parameter of the Content-Type header to boundary.", "set_boundary() will always quote boundary if necessary.", "A HeaderParseError is raised if the message object has no Content-Type header.", "Note that using this method is subtly different from deleting the old Content-Type header and adding a new one with the new boundary via add_header(), because set_boundary() preserves the order of the Content-Type header in the list of headers."]}
{"index": 2035, "name": "email.message.EmailMessage.get_content_charset", "module": "email", "doc": ["Return the charset parameter of the Content-Type header, coerced to lower case.", "If there is no Content-Type header, or if that header has no charset parameter, failobj is returned."]}
{"index": 2036, "name": "email.message.EmailMessage.get_charsets", "module": "email", "doc": ["Return a list containing the character set names in the message.", "If the message is a multipart, then the list will contain one element for each subpart in the payload, otherwise, it will be a list of length 1.", "Each item in the list will be a string which is the value of the charset parameter in the Content-Type header for the represented subpart.", "If the subpart has no Content-Type header, no charset parameter, or is not of the text main MIME type, then that item in the returned list will be failobj."]}
{"index": 2037, "name": "email.message.EmailMessage.is_attachment", "module": "email", "doc": ["Return True if there is a Content-Disposition header and its (case insensitive) value is attachment, False otherwise."]}
{"index": 2038, "name": "email.message.EmailMessage.get_content_disposition", "module": "email", "doc": ["Return the lowercased value (without parameters) of the message\u2019s Content-Disposition header if it has one, or None.", "The possible values for this method are inline, attachment or None if the message follows RFC 2183."]}
{"index": 2039, "name": "email.message.EmailMessage.walk", "module": "email", "doc": ["The walk() method is an all-purpose generator which can be used to iterate over all the parts and subparts of a message object tree, in depth-first traversal order.", "You will typically use walk() as the iterator in a for loop; each iteration returns the next subpart.", "Here\u2019s an example that prints the MIME type of every part of a multipart message structure:", "walk iterates over the subparts of any part where is_multipart() returns True, even though msg.get_content_maintype() == 'multipart' may return False.", "We can see this in our example by making use of the _structure debug helper function:", "Here the message parts are not multiparts, but they do contain subparts.", "is_multipart() returns True and walk descends into the subparts."]}
{"index": 2040, "name": "email.message.EmailMessage.get_body", "module": "email", "doc": ["Return the MIME part that is the best candidate to be the \u201cbody\u201d of the message.", "preferencelist must be a sequence of strings from the set related, html, and plain, and indicates the order of preference for the content type of the part returned.", "Start looking for candidate matches with the object on which the get_body method is called.", "If related is not included in preferencelist, consider the root part (or subpart of the root part) of any related encountered as a candidate if the (sub-)part matches a preference.", "When encountering a multipart/related, check the start parameter and if a part with a matching Content-ID is found, consider only it when looking for candidate matches.", "Otherwise consider only the first (default root) part of the multipart/related.", "If a part has a Content-Disposition header, only consider the part a candidate match if the value of the header is inline.", "If none of the candidates matches any of the preferences in preferencelist, return None.", "Notes: (1) For most applications the only preferencelist combinations that really make sense are ('plain',), ('html', 'plain'), and the default ('related', 'html', 'plain').", "(2) Because matching starts with the object on which get_body is called, calling get_body on a multipart/related will return the object itself unless preferencelist has a non-default value.", "(3) Messages (or message parts) that do not specify a Content-Type or whose Content-Type header is invalid will be treated as if they are of type text/plain, which may occasionally cause get_body to return unexpected results."]}
{"index": 2041, "name": "email.message.EmailMessage.iter_attachments", "module": "email", "doc": ["Return an iterator over all of the immediate sub-parts of the message that are not candidate \u201cbody\u201d parts.", "That is, skip the first occurrence of each of text/plain, text/html, multipart/related, or multipart/alternative (unless they are explicitly marked as attachments via Content-Disposition: attachment), and return all remaining parts.", "When applied directly to a multipart/related, return an iterator over the all the related parts except the root part (ie: the part pointed to by the start parameter, or the first part if there is no start parameter or the start parameter doesn\u2019t match the Content-ID of any of the parts).", "When applied directly to a multipart/alternative or a non-multipart, return an empty iterator."]}
{"index": 2042, "name": "email.message.EmailMessage.iter_parts", "module": "email", "doc": ["Return an iterator over all of the immediate sub-parts of the message, which will be empty for a non-multipart.", "(See also walk().)"]}
{"index": 2043, "name": "email.message.EmailMessage.get_content", "module": "email", "doc": ["Call the get_content() method of the content_manager, passing self as the message object, and passing along any other arguments or keywords as additional arguments.", "If content_manager is not specified, use the content_manager specified by the current policy."]}
{"index": 2044, "name": "email.message.EmailMessage.set_content", "module": "email", "doc": ["Call the set_content() method of the content_manager, passing self as the message object, and passing along any other arguments or keywords as additional arguments.", "If content_manager is not specified, use the content_manager specified by the current policy."]}
{"index": 2045, "name": "email.message.EmailMessage.make_related", "module": "email", "doc": ["Convert a non-multipart message into a multipart/related message, moving any existing Content- headers and payload into a (new) first part of the multipart.", "If boundary is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized)."]}
{"index": 2046, "name": "email.message.EmailMessage.make_alternative", "module": "email", "doc": ["Convert a non-multipart or a multipart/related into a multipart/alternative, moving any existing Content- headers and payload into a (new) first part of the multipart.", "If boundary is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized)."]}
{"index": 2047, "name": "email.message.EmailMessage.make_mixed", "module": "email", "doc": ["Convert a non-multipart, a multipart/related, or a multipart-alternative into a multipart/mixed, moving any existing Content- headers and payload into a (new) first part of the multipart.", "If boundary is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized)."]}
{"index": 2048, "name": "email.message.EmailMessage.add_related", "module": "email", "doc": ["If the message is a multipart/related, create a new message object, pass all of the arguments to its set_content() method, and attach() it to the multipart.", "If the message is a non-multipart, call make_related() and then proceed as above.", "If the message is any other type of multipart, raise a TypeError.", "If content_manager is not specified, use the content_manager specified by the current policy.", "If the added part has no Content-Disposition header, add one with the value inline."]}
{"index": 2049, "name": "email.message.EmailMessage.add_alternative", "module": "email", "doc": ["If the message is a multipart/alternative, create a new message object, pass all of the arguments to its set_content() method, and attach() it to the multipart.", "If the message is a non-multipart or multipart/related, call make_alternative() and then proceed as above.", "If the message is any other type of multipart, raise a TypeError.", "If content_manager is not specified, use the content_manager specified by the current policy."]}
{"index": 2050, "name": "email.message.EmailMessage.add_attachment", "module": "email", "doc": ["If the message is a multipart/mixed, create a new message object, pass all of the arguments to its set_content() method, and attach() it to the multipart.", "If the message is a non-multipart, multipart/related, or multipart/alternative, call make_mixed() and then proceed as above.", "If content_manager is not specified, use the content_manager specified by the current policy.", "If the added part has no Content-Disposition header, add one with the value attachment.", "This method can be used both for explicit attachments (Content-Disposition: attachment) and inline attachments (Content-Disposition: inline), by passing appropriate options to the content_manager."]}
{"index": 2051, "name": "email.message.EmailMessage.clear", "module": "email", "doc": ["Remove the payload and all of the headers."]}
{"index": 2052, "name": "email.message.EmailMessage.clear_content", "module": "email", "doc": ["Remove the payload and all of the Content- headers, leaving all other headers intact and in their original order."]}
{"index": 2053, "name": "email.message.EmailMessage.preamble", "module": "email", "doc": ["The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string.", "Normally, this text is never visible in a MIME-aware mail reader because it falls outside the standard MIME armor.", "However, when viewing the raw text of the message, or when viewing the message in a non-MIME aware reader, this text can become visible.", "The preamble attribute contains this leading extra-armor text for MIME documents.", "When the Parser discovers some text after the headers but before the first boundary string, it assigns this text to the message\u2019s preamble attribute.", "When the Generator is writing out the plain text representation of a MIME message, and it finds the message has a preamble attribute, it will write this text in the area between the headers and the first boundary.", "See email.parser and email.generator for details.", "Note that if the message object has no preamble, the preamble attribute will be None."]}
{"index": 2054, "name": "email.message.EmailMessage.epilogue", "module": "email", "doc": ["The epilogue attribute acts the same way as the preamble attribute, except that it contains text that appears between the last boundary and the end of the message.", "As with the preamble, if there is no epilog text this attribute will be None."]}
{"index": 2055, "name": "email.message.EmailMessage.defects", "module": "email", "doc": ["The defects attribute contains a list of all the problems found when parsing this message.", "See email.errors for a detailed description of the possible parsing defects."]}
{"index": 2056, "name": "email.message.MIMEPart", "module": "email", "doc": ["This class represents a subpart of a MIME message.", "It is identical to EmailMessage, except that no MIME-Version headers are added when set_content() is called, since sub-parts do not need their own MIME-Version headers."]}
{"index": 2057, "name": "id2", "module": "email", "doc": ["Originally added in 3.4 as a provisional module.", "Docs for legacy message class moved to email.message.Message: Representing an email message using the compat32 API."]}
{"index": 2058, "name": "email.mime.base.MIMEBase", "module": "email", "doc": ["Module: email.mime.base", "This is the base class for all the MIME-specific subclasses of Message.", "Ordinarily you won\u2019t create instances specifically of MIMEBase, although you could.", "MIMEBase is provided primarily as a convenient base class for more specific MIME-aware subclasses.", "_maintype is the Content-Type major type (e.g.", "text or image), and _subtype is the Content-Type minor type  (e.g.", "plain or gif).", "_params is a parameter key/value dictionary and is passed directly to Message.add_header.", "If policy is specified, (defaults to the compat32 policy) it will be passed to Message.", "The MIMEBase class always adds a Content-Type header (based on _maintype, _subtype, and _params), and a MIME-Version header (always set to 1.0)."]}
{"index": 2059, "name": "email.mime.nonmultipart.MIMENonMultipart", "module": "email", "doc": ["Module: email.mime.nonmultipart", "A subclass of MIMEBase, this is an intermediate base class for MIME messages that are not multipart.", "The primary purpose of this class is to prevent the use of the attach() method, which only makes sense for multipart messages.", "If attach() is called, a MultipartConversionError exception is raised."]}
{"index": 2060, "name": "email.mime.multipart.MIMEMultipart", "module": "email", "doc": ["Module: email.mime.multipart", "A subclass of MIMEBase, this is an intermediate base class for MIME messages that are multipart.", "Optional _subtype defaults to mixed, but can be used to specify the subtype of the message.", "A Content-Type header of multipart/_subtype will be added to the message object.", "A MIME-Version header will also be added.", "Optional boundary is the multipart boundary string.", "When None (the default), the boundary is calculated when needed (for example, when the message is serialized).", "_subparts is a sequence of initial subparts for the payload.", "It must be possible to convert this sequence to a list.", "You can always attach new subparts to the message by using the Message.attach method.", "Optional policy argument defaults to compat32.", "Additional parameters for the Content-Type header are taken from the keyword arguments, or passed into the _params argument, which is a keyword dictionary."]}
{"index": 2061, "name": "email.mime.application.MIMEApplication", "module": "email", "doc": ["Module: email.mime.application", "A subclass of MIMENonMultipart, the MIMEApplication class is used to represent MIME message objects of major type application.", "_data is a string containing the raw byte data.", "Optional _subtype specifies the MIME subtype and defaults to octet-stream.", "Optional _encoder is a callable (i.e.", "function) which will perform the actual encoding of the data for transport.", "This callable takes one argument, which is the MIMEApplication instance.", "It should use get_payload() and set_payload() to change the payload to encoded form.", "It should also add any Content-Transfer-Encoding or other headers to the message object as necessary.", "The default encoding is base64.", "See the email.encoders module for a list of the built-in encoders.", "Optional policy argument defaults to compat32.", "_params are passed straight through to the base class constructor."]}
{"index": 2062, "name": "email.mime.audio.MIMEAudio", "module": "email", "doc": ["Module: email.mime.audio", "A subclass of MIMENonMultipart, the MIMEAudio class is used to create MIME message objects of major type audio.", "_audiodata is a string containing the raw audio data.", "If this data can be decoded by the standard Python module sndhdr, then the subtype will be automatically included in the Content-Type header.", "Otherwise you can explicitly specify the audio subtype via the _subtype argument.", "If the minor type could not be guessed and _subtype was not given, then TypeError is raised.", "Optional _encoder is a callable (i.e.", "function) which will perform the actual encoding of the audio data for transport.", "This callable takes one argument, which is the MIMEAudio instance.", "It should use get_payload() and set_payload() to change the payload to encoded form.", "It should also add any Content-Transfer-Encoding or other headers to the message object as necessary.", "The default encoding is base64.", "See the email.encoders module for a list of the built-in encoders.", "Optional policy argument defaults to compat32.", "_params are passed straight through to the base class constructor."]}
{"index": 2063, "name": "email.mime.image.MIMEImage", "module": "email", "doc": ["Module: email.mime.image", "A subclass of MIMENonMultipart, the MIMEImage class is used to create MIME message objects of major type image.", "_imagedata is a string containing the raw image data.", "If this data can be decoded by the standard Python module imghdr, then the subtype will be automatically included in the Content-Type header.", "Otherwise you can explicitly specify the image subtype via the _subtype argument.", "If the minor type could not be guessed and _subtype was not given, then TypeError is raised.", "Optional _encoder is a callable (i.e.", "function) which will perform the actual encoding of the image data for transport.", "This callable takes one argument, which is the MIMEImage instance.", "It should use get_payload() and set_payload() to change the payload to encoded form.", "It should also add any Content-Transfer-Encoding or other headers to the message object as necessary.", "The default encoding is base64.", "See the email.encoders module for a list of the built-in encoders.", "Optional policy argument defaults to compat32.", "_params are passed straight through to the MIMEBase constructor."]}
{"index": 2064, "name": "email.mime.message.MIMEMessage", "module": "email", "doc": ["Module: email.mime.message", "A subclass of MIMENonMultipart, the MIMEMessage class is used to create MIME objects of main type message.", "_msg is used as the payload, and must be an instance of class Message (or a subclass thereof), otherwise a TypeError is raised.", "Optional _subtype sets the subtype of the message; it defaults to rfc822.", "Optional policy argument defaults to compat32."]}
{"index": 2065, "name": "email.mime.text.MIMEText", "module": "email", "doc": ["Module: email.mime.text", "A subclass of MIMENonMultipart, the MIMEText class is used to create MIME objects of major type text.", "_text is the string for the payload.", "_subtype is the minor type and defaults to plain.", "_charset is the character set of the text and is passed as an argument to the MIMENonMultipart constructor; it defaults to us-ascii if the string contains only ascii code points, and utf-8 otherwise.", "The _charset parameter accepts either a string or a Charset instance.", "Unless the _charset argument is explicitly set to None, the MIMEText object created will have both a Content-Type header with a charset parameter, and a Content-Transfer-Encoding header.", "This means that a subsequent set_payload call will not result in an encoded payload, even if a charset is passed in the set_payload command.", "You can \u201creset\u201d this behavior by deleting the Content-Transfer-Encoding header, after which a set_payload call will automatically encode the new payload (and add a new Content-Transfer-Encoding header).", "Optional policy argument defaults to compat32."]}
{"index": 2066, "name": "email.parser.BytesFeedParser", "module": "email", "doc": ["Create a BytesFeedParser instance.", "Optional _factory is a no-argument callable; if not specified use the message_factory from the policy.", "Call _factory whenever a new message object is needed.", "If policy is specified use the rules it specifies to update the representation of the message.", "If policy is not set, use the compat32 policy, which maintains backward compatibility with the Python 3.2 version of the email package and provides Message as the default factory.", "All other policies provide EmailMessage as the default _factory.", "For more information on what else policy controls, see the policy documentation.", "Note: The policy keyword should always be specified; The default will change to email.policy.default in a future version of Python."]}
{"index": 2067, "name": "email.parser.BytesFeedParser.feed", "module": "email", "doc": ["Feed the parser some more data.", "data should be a bytes-like object containing one or more lines.", "The lines can be partial and the parser will stitch such partial lines together properly.", "The lines can have any of the three common line endings: carriage return, newline, or carriage return and newline (they can even be mixed)."]}
{"index": 2068, "name": "email.parser.BytesFeedParser.close", "module": "email", "doc": ["Complete the parsing of all previously fed data and return the root message object.", "It is undefined what happens if feed() is called after this method has been called."]}
{"index": 2069, "name": "email.parser.FeedParser", "module": "email", "doc": ["Works like BytesFeedParser except that the input to the feed() method must be a string.", "This is of limited utility, since the only way for such a message to be valid is for it to contain only ASCII text or, if utf8 is True, no binary attachments."]}
{"index": 2070, "name": "email.parser.BytesParser", "module": "email", "doc": ["Create a BytesParser instance.", "The _class and policy arguments have the same meaning and semantics as the _factory and policy arguments of BytesFeedParser.", "Note: The policy keyword should always be specified; The default will change to email.policy.default in a future version of Python."]}
{"index": 2071, "name": "email.parser.BytesParser.parse", "module": "email", "doc": ["Read all the data from the binary file-like object fp, parse the resulting bytes, and return the message object.", "fp must support both the readline() and the read() methods.", "The bytes contained in fp must be formatted as a block of RFC 5322 (or, if utf8 is True, RFC 6532) style headers and header continuation lines, optionally preceded by an envelope header.", "The header block is terminated either by the end of the data or by a blank line.", "Following the header block is the body of the message (which may contain MIME-encoded subparts, including subparts with a Content-Transfer-Encoding of 8bit).", "Optional headersonly is a flag specifying whether to stop parsing after reading the headers or not.", "The default is False, meaning it parses the entire contents of the file."]}
{"index": 2072, "name": "email.parser.BytesParser.parsebytes", "module": "email", "doc": ["Similar to the parse() method, except it takes a bytes-like object instead of a file-like object.", "Calling this method on a bytes-like object is equivalent to wrapping bytes in a BytesIO instance first and calling parse().", "Optional headersonly is as with the parse() method."]}
{"index": 2073, "name": "email.parser.BytesHeaderParser", "module": "email", "doc": ["Exactly like BytesParser, except that headersonly defaults to True."]}
{"index": 2074, "name": "email.parser.Parser", "module": "email", "doc": ["This class is parallel to BytesParser, but handles string input."]}
{"index": 2075, "name": "email.parser.Parser.parse", "module": "email", "doc": ["Read all the data from the text-mode file-like object fp, parse the resulting text, and return the root message object.", "fp must support both the readline() and the read() methods on file-like objects.", "Other than the text mode requirement, this method operates like BytesParser.parse()."]}
{"index": 2076, "name": "email.parser.Parser.parsestr", "module": "email", "doc": ["Similar to the parse() method, except it takes a string object instead of a file-like object.", "Calling this method on a string is equivalent to wrapping text in a StringIO instance first and calling parse().", "Optional headersonly is as with the parse() method."]}
{"index": 2077, "name": "email.parser.HeaderParser", "module": "email", "doc": ["Exactly like Parser, except that headersonly defaults to True."]}
{"index": 2078, "name": "email.message_from_bytes", "module": "email", "doc": ["Return a message object structure from a bytes-like object.", "This is equivalent to BytesParser().parsebytes(s).", "Optional _class and policy are interpreted as with the BytesParser class constructor."]}
{"index": 2079, "name": "email.message_from_binary_file", "module": "email", "doc": ["Return a message object structure tree from an open binary file object.", "This is equivalent to BytesParser().parse(fp).", "_class and policy are interpreted as with the BytesParser class constructor."]}
{"index": 2080, "name": "email.message_from_string", "module": "email", "doc": ["Return a message object structure from a string.", "This is equivalent to Parser().parsestr(s).", "_class and policy are interpreted as with the Parser class constructor."]}
{"index": 2081, "name": "email.message_from_file", "module": "email", "doc": ["Return a message object structure tree from an open file object.", "This is equivalent to Parser().parse(fp).", "_class and policy are interpreted as with the Parser class constructor."]}
{"index": 2082, "name": "email.policy.Policy", "module": "email", "doc": ["This is the abstract base class for all policy classes.", "It provides default implementations for a couple of trivial methods, as well as the implementation of the immutability property, the clone() method, and the constructor semantics.", "The constructor of a policy class can be passed various keyword arguments.", "The arguments that may be specified are any non-method properties on this class, plus any additional non-method properties on the concrete class.", "A value specified in the constructor will override the default value for the corresponding attribute.", "This class defines the following properties, and thus values for the following may be passed in the constructor of any policy class:", "The following Policy method is intended to be called by code using the email library to create policy instances with custom settings:", "The remaining Policy methods are called by the email package code, and are not intended to be called by an application using the email package.", "A custom policy must implement all of these methods."]}
{"index": 2083, "name": "email.policy.Policy.max_line_length", "module": "email", "doc": ["The maximum length of any line in the serialized output, not counting the end of line character(s).", "Default is 78, per RFC 5322.", "A value of 0 or None indicates that no line wrapping should be done at all."]}
{"index": 2084, "name": "email.policy.Policy.linesep", "module": "email", "doc": ["The string to be used to terminate lines in serialized output.", "The default is \\n because that\u2019s the internal end-of-line discipline used by Python, though \\r\\n is required by the RFCs."]}
{"index": 2085, "name": "email.policy.Policy.cte_type", "module": "email", "doc": ["Controls the type of Content Transfer Encodings that may be or are required to be used.", "The possible values are:", "A cte_type value of 8bit only works with BytesGenerator, not Generator, because strings cannot contain binary data.", "If a Generator is operating under a policy that specifies cte_type=8bit, it will act as if cte_type is 7bit."]}
{"index": 2086, "name": "email.policy.Policy.raise_on_defect", "module": "email", "doc": ["If True, any defects encountered will be raised as errors.", "If False (the default), defects will be passed to the register_defect() method."]}
{"index": 2087, "name": "email.policy.Policy.message_factory", "module": "email", "doc": ["A factory function for constructing a new empty message object.", "Used by the parser when building messages.", "Defaults to None, in which case Message is used."]}
{"index": 2088, "name": "email.policy.Policy.clone", "module": "email", "doc": ["Return a new Policy instance whose attributes have the same values as the current instance, except where those attributes are given new values by the keyword arguments."]}
{"index": 2089, "name": "email.policy.Policy.handle_defect", "module": "email", "doc": ["Handle a defect found on obj.", "When the email package calls this method, defect will always be a subclass of Defect.", "The default implementation checks the raise_on_defect flag.", "If it is True, defect is raised as an exception.", "If it is False (the default), obj and defect are passed to register_defect()."]}
{"index": 2090, "name": "email.policy.Policy.register_defect", "module": "email", "doc": ["Register a defect on obj.", "In the email package, defect will always be a subclass of Defect.", "The default implementation calls the append method of the defects attribute of obj.", "When the email package calls handle_defect, obj will normally have a defects attribute that has an append method.", "Custom object types used with the email package (for example, custom Message objects) should also provide such an attribute, otherwise defects in parsed messages will raise unexpected errors."]}
{"index": 2091, "name": "email.policy.Policy.header_max_count", "module": "email", "doc": ["Return the maximum allowed number of headers named name.", "Called when a header is added to an EmailMessage or Message object.", "If the returned value is not 0 or None, and there are already a number of headers with the name name greater than or equal to the value returned, a ValueError is raised.", "Because the default behavior of Message.__setitem__ is to append the value to the list of headers, it is easy to create duplicate headers without realizing it.", "This method allows certain headers to be limited in the number of instances of that header that may be added to a Message programmatically.", "(The limit is not observed by the parser, which will faithfully produce as many headers as exist in the message being parsed.)", "The default implementation returns None for all header names."]}
{"index": 2092, "name": "email.policy.Policy.header_source_parse", "module": "email", "doc": ["The email package calls this method with a list of strings, each string ending with the line separation characters found in the source being parsed.", "The first line includes the field header name and separator.", "All whitespace in the source is preserved.", "The method should return the (name, value) tuple that is to be stored in the Message to represent the parsed header.", "If an implementation wishes to retain compatibility with the existing email package policies, name should be the case preserved name (all characters up to the \u2018:\u2019 separator), while value should be the unfolded value (all line separator characters removed, but whitespace kept intact), stripped of leading whitespace.", "sourcelines may contain surrogateescaped binary data.", "There is no default implementation"]}
{"index": 2093, "name": "email.policy.Policy.header_store_parse", "module": "email", "doc": ["The email package calls this method with the name and value provided by the application program when the application program is modifying a Message programmatically (as opposed to a Message created by a parser).", "The method should return the (name, value) tuple that is to be stored in the Message to represent the header.", "If an implementation wishes to retain compatibility with the existing email package policies, the name and value should be strings or string subclasses that do not change the content of the passed in arguments.", "There is no default implementation"]}
{"index": 2094, "name": "email.policy.Policy.header_fetch_parse", "module": "email", "doc": ["The email package calls this method with the name and value currently stored in the Message when that header is requested by the application program, and whatever the method returns is what is passed back to the application as the value of the header being retrieved.", "Note that there may be more than one header with the same name stored in the Message; the method is passed the specific name and value of the header destined to be returned to the application.", "value may contain surrogateescaped binary data.", "There should be no surrogateescaped binary data in the value returned by the method.", "There is no default implementation"]}
{"index": 2095, "name": "email.policy.Policy.fold", "module": "email", "doc": ["The email package calls this method with the name and value currently stored in the Message for a given header.", "The method should return a string that represents that header \u201cfolded\u201d correctly (according to the policy settings) by composing the name with the value and inserting linesep characters at the appropriate places.", "See RFC 5322 for a discussion of the rules for folding email headers.", "value may contain surrogateescaped binary data.", "There should be no surrogateescaped binary data in the string returned by the method."]}
{"index": 2096, "name": "email.policy.Policy.fold_binary", "module": "email", "doc": ["The same as fold(), except that the returned value should be a bytes object rather than a string.", "value may contain surrogateescaped binary data.", "These could be converted back into binary data in the returned bytes object."]}
{"index": 2097, "name": "email.policy.EmailPolicy", "module": "email", "doc": ["This concrete Policy provides behavior that is intended to be fully compliant with the current email RFCs.", "These include (but are not limited to) RFC 5322, RFC 2047, and the current MIME RFCs.", "This policy adds new header parsing and folding algorithms.", "Instead of simple strings, headers are str subclasses with attributes that depend on the type of the field.", "The parsing and folding algorithm fully implement RFC 2047 and RFC 5322.", "The default value for the message_factory attribute is EmailMessage.", "In addition to the settable attributes listed above that apply to all policies, this policy adds the following additional attributes:", "The class provides the following concrete implementations of the abstract methods of Policy:"]}
{"index": 2098, "name": "email.policy.EmailPolicy.utf8", "module": "email", "doc": ["If False, follow RFC 5322, supporting non-ASCII characters in headers by encoding them as \u201cencoded words\u201d.", "If True, follow RFC 6532 and use utf-8 encoding for headers.", "Messages formatted in this way may be passed to SMTP servers that support the SMTPUTF8 extension (RFC 6531)."]}
{"index": 2099, "name": "email.policy.EmailPolicy.refold_source", "module": "email", "doc": ["If the value for a header in the Message object originated from a parser (as opposed to being set by a program), this attribute indicates whether or not a generator should refold that value when transforming the message back into serialized form.", "The possible values are:", "The default is long."]}
{"index": 2100, "name": "email.policy.EmailPolicy.header_factory", "module": "email", "doc": ["A callable that takes two arguments, name and value, where name is a header field name and value is an unfolded header field value, and returns a string subclass that represents that header.", "A default header_factory (see headerregistry) is provided that supports custom parsing for the various address and date RFC 5322 header field types, and the major MIME header field stypes.", "Support for additional custom parsing will be added in the future."]}
{"index": 2101, "name": "email.policy.EmailPolicy.content_manager", "module": "email", "doc": ["An object with at least two methods: get_content and set_content.", "When the get_content() or set_content() method of an EmailMessage object is called, it calls the corresponding method of this object, passing it the message object as its first argument, and any arguments or keywords that were passed to it as additional arguments.", "By default content_manager is set to raw_data_manager."]}
{"index": 2102, "name": "email.policy.EmailPolicy.header_max_count", "module": "email", "doc": ["Returns the value of the max_count attribute of the specialized class used to represent the header with the given name."]}
{"index": 2103, "name": "email.policy.EmailPolicy.header_source_parse", "module": "email", "doc": ["The name is parsed as everything up to the \u2018:\u2019 and returned unmodified.", "The value is determined by stripping leading whitespace off the remainder of the first line, joining all subsequent lines together, and stripping any trailing carriage return or linefeed characters."]}
{"index": 2104, "name": "email.policy.EmailPolicy.header_store_parse", "module": "email", "doc": ["The name is returned unchanged.", "If the input value has a name attribute and it matches name ignoring case, the value is returned unchanged.", "Otherwise the name and value are passed to header_factory, and the resulting header object is returned as the value.", "In this case a ValueError is raised if the input value contains CR or LF characters."]}
{"index": 2105, "name": "email.policy.EmailPolicy.header_fetch_parse", "module": "email", "doc": ["If the value has a name attribute, it is returned to unmodified.", "Otherwise the name, and the value with any CR or LF characters removed, are passed to the header_factory, and the resulting header object is returned.", "Any surrogateescaped bytes get turned into the unicode unknown-character glyph."]}
{"index": 2106, "name": "email.policy.EmailPolicy.fold", "module": "email", "doc": ["Header folding is controlled by the refold_source policy setting.", "A value is considered to be a \u2018source value\u2019 if and only if it does not have a name attribute (having a name attribute means it is a header object of some sort).", "If a source value needs to be refolded according to the policy, it is converted into a header object by passing the name and the value with any CR and LF characters removed to the header_factory.", "Folding of a header object is done by calling its fold method with the current policy.", "Source values are split into lines using splitlines().", "If the value is not to be refolded, the lines are rejoined using the linesep from the policy and returned.", "The exception is lines containing non-ascii binary data.", "In that case the value is refolded regardless of the refold_source setting, which causes the binary data to be CTE encoded using the unknown-8bit charset."]}
{"index": 2107, "name": "email.policy.EmailPolicy.fold_binary", "module": "email", "doc": ["The same as fold() if cte_type is 7bit, except that the returned value is bytes.", "If cte_type is 8bit, non-ASCII binary data is converted back into bytes.", "Headers with binary data are not refolded, regardless of the refold_header setting, since there is no way to know whether the binary data consists of single byte characters or multibyte characters."]}
{"index": 2108, "name": "email.policy.default", "module": "email", "doc": ["An instance of EmailPolicy with all defaults unchanged.", "This policy uses the standard Python \\n line endings rather than the RFC-correct \\r\\n."]}
{"index": 2109, "name": "email.policy.SMTP", "module": "email", "doc": ["Suitable for serializing messages in conformance with the email RFCs.", "Like default, but with linesep set to \\r\\n, which is RFC compliant."]}
{"index": 2110, "name": "email.policy.SMTPUTF8", "module": "email", "doc": ["The same as SMTP except that utf8 is True.", "Useful for serializing messages to a message store without using encoded words in the headers.", "Should only be used for SMTP transmission if the sender or recipient addresses have non-ASCII characters (the smtplib.SMTP.send_message() method handles this automatically)."]}
{"index": 2111, "name": "email.policy.HTTP", "module": "email", "doc": ["Suitable for serializing headers with for use in HTTP traffic.", "Like SMTP except that max_line_length is set to None (unlimited)."]}
{"index": 2112, "name": "email.policy.strict", "module": "email", "doc": ["Convenience instance.", "The same as default except that raise_on_defect is set to True.", "This allows any policy to be made strict by writing:"]}
{"index": 2113, "name": "email.policy.Compat32", "module": "email", "doc": ["This concrete Policy is the backward compatibility policy.", "It replicates the behavior of the email package in Python 3.2.", "The policy module also defines an instance of this class, compat32, that is used as the default policy.", "Thus the default behavior of the email package is to maintain compatibility with Python 3.2.", "The following attributes have values that are different from the Policy default:", "The class provides the following concrete implementations of the abstract methods of Policy:"]}
{"index": 2114, "name": "email.policy.Compat32.mangle_from_", "module": "email", "doc": ["The default is True."]}
{"index": 2115, "name": "email.policy.Compat32.header_source_parse", "module": "email", "doc": ["The name is parsed as everything up to the \u2018:\u2019 and returned unmodified.", "The value is determined by stripping leading whitespace off the remainder of the first line, joining all subsequent lines together, and stripping any trailing carriage return or linefeed characters."]}
{"index": 2116, "name": "email.policy.Compat32.header_store_parse", "module": "email", "doc": ["The name and value are returned unmodified."]}
{"index": 2117, "name": "email.policy.Compat32.header_fetch_parse", "module": "email", "doc": ["If the value contains binary data, it is converted into a Header object using the unknown-8bit charset.", "Otherwise it is returned unmodified."]}
{"index": 2118, "name": "email.policy.Compat32.fold", "module": "email", "doc": ["Headers are folded using the Header folding algorithm, which preserves existing line breaks in the value, and wraps each resulting line to the max_line_length.", "Non-ASCII binary data are CTE encoded using the unknown-8bit charset."]}
{"index": 2119, "name": "email.policy.Compat32.fold_binary", "module": "email", "doc": ["Headers are folded using the Header folding algorithm, which preserves existing line breaks in the value, and wraps each resulting line to the max_line_length.", "If cte_type is 7bit, non-ascii binary data is CTE encoded using the unknown-8bit charset.", "Otherwise the original source header is used, with its existing line breaks and any (RFC invalid) binary data it may contain."]}
{"index": 2120, "name": "email.policy.compat32", "module": "email", "doc": ["An instance of Compat32, providing  backward compatibility with the behavior of the email package in Python 3.2."]}
{"index": 2121, "name": "id2", "module": "email", "doc": ["Originally added in 3.3 as a provisional feature."]}
{"index": 2122, "name": "email.utils.localtime", "module": "email", "doc": ["Return local time as an aware datetime object.", "If called without arguments, return current time.", "Otherwise dt argument should be a datetime instance, and it is converted to the local time zone according to the system time zone database.", "If dt is naive (that is, dt.tzinfo is None), it is assumed to be in local time.", "In this case, a positive or zero value for isdst causes localtime to presume initially that summer time (for example, Daylight Saving Time) is or is not (respectively) in effect for the specified time.", "A negative value for isdst causes the localtime to attempt to divine whether summer time is in effect for the specified time."]}
{"index": 2123, "name": "email.utils.make_msgid", "module": "email", "doc": ["Returns a string suitable for an RFC 2822-compliant Message-ID header.", "Optional idstring if given, is a string used to strengthen the uniqueness of the message id.", "Optional domain if given provides the portion of the msgid after the \u2018@\u2019.", "The default is the local hostname.", "It is not normally necessary to override this default, but may be useful certain cases, such as a constructing distributed system that uses a consistent domain name across multiple hosts."]}
{"index": 2124, "name": "email.utils.quote", "module": "email", "doc": ["Return a new string with backslashes in str replaced by two backslashes, and double quotes replaced by backslash-double quote."]}
{"index": 2125, "name": "email.utils.unquote", "module": "email", "doc": ["Return a new string which is an unquoted version of str.", "If str ends and begins with double quotes, they are stripped off.", "Likewise if str ends and begins with angle brackets, they are stripped off."]}
{"index": 2126, "name": "email.utils.parseaddr", "module": "email", "doc": ["Parse address \u2013 which should be the value of some address-containing field such as To or Cc \u2013 into its constituent realname and email address parts.", "Returns a tuple of that information, unless the parse fails, in which case a 2-tuple of ('', '') is returned."]}
{"index": 2127, "name": "email.utils.formataddr", "module": "email", "doc": ["The inverse of parseaddr(), this takes a 2-tuple of the form (realname, email_address) and returns the string value suitable for a To or Cc header.", "If the first element of pair is false, then the second element is returned unmodified.", "Optional charset is the character set that will be used in the RFC 2047 encoding of the realname if the realname contains non-ASCII characters.", "Can be an instance of str or a Charset.", "Defaults to utf-8."]}
{"index": 2128, "name": "email.utils.getaddresses", "module": "email", "doc": ["This method returns a list of 2-tuples of the form returned by parseaddr().", "fieldvalues is a sequence of header field values as might be returned by Message.get_all.", "Here\u2019s a simple example that gets all the recipients of a message:"]}
{"index": 2129, "name": "email.utils.parsedate", "module": "email", "doc": ["Attempts to parse a date according to the rules in RFC 2822. however, some mailers don\u2019t follow that format as specified, so parsedate() tries to guess correctly in such cases.", "date is a string containing an RFC 2822 date, such as  \"Mon, 20 Nov 1995 19:12:08 -0500\".", "If it succeeds in parsing the date, parsedate() returns a 9-tuple that can be passed directly to time.mktime(); otherwise None will be returned.", "Note that indexes 6, 7, and 8 of the result tuple are not usable."]}
{"index": 2130, "name": "email.utils.parsedate_tz", "module": "email", "doc": ["Performs the same function as parsedate(), but returns either None or a 10-tuple; the first 9 elements make up a tuple that can be passed directly to time.mktime(), and the tenth is the offset of the date\u2019s timezone from UTC (which is the official term for Greenwich Mean Time) 1.", "If the input string has no timezone, the last element of the tuple returned is None.", "Note that indexes 6, 7, and 8 of the result tuple are not usable."]}
{"index": 2131, "name": "email.utils.parsedate_to_datetime", "module": "email", "doc": ["The inverse of format_datetime().", "Performs the same function as parsedate(), but on success returns a datetime.", "If the input date has a timezone of -0000, the datetime will be a naive datetime, and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from.", "If the input date has any other valid timezone offset, the datetime will be an aware datetime with the corresponding a timezone tzinfo."]}
{"index": 2132, "name": "email.utils.mktime_tz", "module": "email", "doc": ["Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp (seconds since the Epoch).", "If the timezone item in the tuple is None, assume local time."]}
{"index": 2133, "name": "email.utils.formatdate", "module": "email", "doc": ["Returns a date string as per RFC 2822, e.g.", ":", "Optional timeval if given is a floating point time value as accepted by time.gmtime() and time.localtime(), otherwise the current time is used.", "Optional localtime is a flag that when True, interprets timeval, and returns a date relative to the local timezone instead of UTC, properly taking daylight savings time into account.", "The default is False meaning UTC is used.", "Optional usegmt is a flag that when True, outputs a  date string with the timezone as an ascii string GMT, rather than a numeric -0000.", "This is needed for some protocols (such as HTTP).", "This only applies when localtime is False.", "The default is False."]}
{"index": 2134, "name": "email.utils.format_datetime", "module": "email", "doc": ["Like formatdate, but the input is a datetime instance.", "If it is a naive datetime, it is assumed to be \u201cUTC with no information about the source timezone\u201d, and the conventional -0000 is used for the timezone.", "If it is an aware datetime, then the numeric timezone offset is used.", "If it is an aware timezone with offset zero, then usegmt may be set to True, in which case the string GMT is used instead of the numeric timezone offset.", "This provides a way to generate standards conformant HTTP date headers."]}
{"index": 2135, "name": "email.utils.decode_rfc2231", "module": "email", "doc": ["Decode the string s according to RFC 2231."]}
{"index": 2136, "name": "email.utils.encode_rfc2231", "module": "email", "doc": ["Encode the string s according to RFC 2231.", "Optional charset and language, if given is the character set name and language name to use.", "If neither is given, s is returned as-is.", "If charset is given but language is not, the string is encoded using the empty string for language."]}
{"index": 2137, "name": "email.utils.collapse_rfc2231_value", "module": "email", "doc": ["When a header parameter is encoded in RFC 2231 format, Message.get_param may return a 3-tuple containing the character set, language, and value.", "collapse_rfc2231_value() turns this into a unicode string.", "Optional errors is passed to the errors argument of str\u2019s encode() method; it defaults to 'replace'.", "Optional fallback_charset specifies the character set to use if the one in the RFC 2231 header is not known by Python; it defaults to 'us-ascii'.", "For convenience, if the value passed to collapse_rfc2231_value() is not a tuple, it should be a string and it is returned unquoted."]}
{"index": 2138, "name": "email.utils.decode_params", "module": "email", "doc": ["Decode parameters list according to RFC 2231.  params is a sequence of 2-tuples containing elements of the form (content-type, string-value)."]}
{"index": 2139, "name": "id2", "module": "email", "doc": ["Note that the sign of the timezone offset is the opposite of the sign of the time.timezone variable for the same timezone; the latter variable follows the POSIX standard while this module follows RFC 2822."]}
{"index": 2140, "name": "ensurepip.version", "module": "ensurepip", "doc": ["Returns a string specifying the bundled version of pip that will be installed when bootstrapping an environment."]}
{"index": 2141, "name": "ensurepip.bootstrap", "module": "ensurepip", "doc": ["Bootstraps pip into the current or designated environment.", "root specifies an alternative root directory to install relative to.", "If root is None, then installation uses the default install location for the current environment.", "upgrade indicates whether or not to upgrade an existing installation of an earlier version of pip to the bundled version.", "user indicates whether to use the user scheme rather than installing globally.", "By default, the scripts pipX and pipX.Y will be installed (where X.Y stands for the current version of Python).", "If altinstall is set, then pipX will not be installed.", "If default_pip is set, then pip will be installed in addition to the two regular scripts.", "Setting both altinstall and default_pip will trigger ValueError.", "verbosity controls the level of output to sys.stdout from the bootstrapping operation."]}
{"index": 2142, "name": "enum.Enum", "module": "enum", "doc": ["Base class for creating enumerated constants.", "See section Functional API for an alternate construction syntax."]}
{"index": 2143, "name": "enum.IntEnum", "module": "enum", "doc": ["Base class for creating enumerated constants that are also subclasses of int."]}
{"index": 2144, "name": "enum.IntFlag", "module": "enum", "doc": ["Base class for creating enumerated constants that can be combined using the bitwise operators without losing their IntFlag membership.", "IntFlag members are also subclasses of int."]}
{"index": 2145, "name": "enum.Flag", "module": "enum", "doc": ["Base class for creating enumerated constants that can be combined using the bitwise operations without losing their Flag membership."]}
{"index": 2146, "name": "enum.unique", "module": "enum", "doc": ["Enum class decorator that ensures only one name is bound to any one value."]}
{"index": 2147, "name": "enum.auto", "module": "enum", "doc": ["Instances are replaced with an appropriate value for Enum members."]}
{"index": 2148, "name": "errno.errorcode", "module": "errno", "doc": ["Dictionary providing a mapping from the errno value to the string name in the underlying system.", "For instance, errno.errorcode[errno.EPERM] maps to 'EPERM'."]}
{"index": 2149, "name": "errno.EPERM", "module": "errno", "doc": ["Operation not permitted"]}
{"index": 2150, "name": "errno.ENOENT", "module": "errno", "doc": ["No such file or directory"]}
{"index": 2151, "name": "errno.ESRCH", "module": "errno", "doc": ["No such process"]}
{"index": 2152, "name": "errno.EINTR", "module": "errno", "doc": ["Interrupted system call."]}
{"index": 2153, "name": "errno.EIO", "module": "errno", "doc": ["I/O error"]}
{"index": 2154, "name": "errno.ENXIO", "module": "errno", "doc": ["No such device or address"]}
{"index": 2155, "name": "errno.E2BIG", "module": "errno", "doc": ["Arg list too long"]}
{"index": 2156, "name": "errno.ENOEXEC", "module": "errno", "doc": ["Exec format error"]}
{"index": 2157, "name": "errno.EBADF", "module": "errno", "doc": ["Bad file number"]}
{"index": 2158, "name": "errno.ECHILD", "module": "errno", "doc": ["No child processes"]}
{"index": 2159, "name": "errno.EAGAIN", "module": "errno", "doc": ["Try again"]}
{"index": 2160, "name": "errno.ENOMEM", "module": "errno", "doc": ["Out of memory"]}
{"index": 2161, "name": "errno.EACCES", "module": "errno", "doc": ["Permission denied"]}
{"index": 2162, "name": "errno.EFAULT", "module": "errno", "doc": ["Bad address"]}
{"index": 2163, "name": "errno.ENOTBLK", "module": "errno", "doc": ["Block device required"]}
{"index": 2164, "name": "errno.EBUSY", "module": "errno", "doc": ["Device or resource busy"]}
{"index": 2165, "name": "errno.EEXIST", "module": "errno", "doc": ["File exists"]}
{"index": 2166, "name": "errno.EXDEV", "module": "errno", "doc": ["Cross-device link"]}
{"index": 2167, "name": "errno.ENODEV", "module": "errno", "doc": ["No such device"]}
{"index": 2168, "name": "errno.ENOTDIR", "module": "errno", "doc": ["Not a directory"]}
{"index": 2169, "name": "errno.EISDIR", "module": "errno", "doc": ["Is a directory"]}
{"index": 2170, "name": "errno.EINVAL", "module": "errno", "doc": ["Invalid argument"]}
{"index": 2171, "name": "errno.ENFILE", "module": "errno", "doc": ["File table overflow"]}
{"index": 2172, "name": "errno.EMFILE", "module": "errno", "doc": ["Too many open files"]}
{"index": 2173, "name": "errno.ENOTTY", "module": "errno", "doc": ["Not a typewriter"]}
{"index": 2174, "name": "errno.ETXTBSY", "module": "errno", "doc": ["Text file busy"]}
{"index": 2175, "name": "errno.EFBIG", "module": "errno", "doc": ["File too large"]}
{"index": 2176, "name": "errno.ENOSPC", "module": "errno", "doc": ["No space left on device"]}
{"index": 2177, "name": "errno.ESPIPE", "module": "errno", "doc": ["Illegal seek"]}
{"index": 2178, "name": "errno.EROFS", "module": "errno", "doc": ["Read-only file system"]}
{"index": 2179, "name": "errno.EMLINK", "module": "errno", "doc": ["Too many links"]}
{"index": 2180, "name": "errno.EPIPE", "module": "errno", "doc": ["Broken pipe"]}
{"index": 2181, "name": "errno.EDOM", "module": "errno", "doc": ["Math argument out of domain of func"]}
{"index": 2182, "name": "errno.ERANGE", "module": "errno", "doc": ["Math result not representable"]}
{"index": 2183, "name": "errno.EDEADLK", "module": "errno", "doc": ["Resource deadlock would occur"]}
{"index": 2184, "name": "errno.ENAMETOOLONG", "module": "errno", "doc": ["File name too long"]}
{"index": 2185, "name": "errno.ENOLCK", "module": "errno", "doc": ["No record locks available"]}
{"index": 2186, "name": "errno.ENOSYS", "module": "errno", "doc": ["Function not implemented"]}
{"index": 2187, "name": "errno.ENOTEMPTY", "module": "errno", "doc": ["Directory not empty"]}
{"index": 2188, "name": "errno.ELOOP", "module": "errno", "doc": ["Too many symbolic links encountered"]}
{"index": 2189, "name": "errno.EWOULDBLOCK", "module": "errno", "doc": ["Operation would block"]}
{"index": 2190, "name": "errno.ENOMSG", "module": "errno", "doc": ["No message of desired type"]}
{"index": 2191, "name": "errno.EIDRM", "module": "errno", "doc": ["Identifier removed"]}
{"index": 2192, "name": "errno.ECHRNG", "module": "errno", "doc": ["Channel number out of range"]}
{"index": 2193, "name": "errno.EL2NSYNC", "module": "errno", "doc": ["Level 2 not synchronized"]}
{"index": 2194, "name": "errno.EL3HLT", "module": "errno", "doc": ["Level 3 halted"]}
{"index": 2195, "name": "errno.EL3RST", "module": "errno", "doc": ["Level 3 reset"]}
{"index": 2196, "name": "errno.ELNRNG", "module": "errno", "doc": ["Link number out of range"]}
{"index": 2197, "name": "errno.EUNATCH", "module": "errno", "doc": ["Protocol driver not attached"]}
{"index": 2198, "name": "errno.ENOCSI", "module": "errno", "doc": ["No CSI structure available"]}
{"index": 2199, "name": "errno.EL2HLT", "module": "errno", "doc": ["Level 2 halted"]}
{"index": 2200, "name": "errno.EBADE", "module": "errno", "doc": ["Invalid exchange"]}
{"index": 2201, "name": "errno.EBADR", "module": "errno", "doc": ["Invalid request descriptor"]}
{"index": 2202, "name": "errno.EXFULL", "module": "errno", "doc": ["Exchange full"]}
{"index": 2203, "name": "errno.ENOANO", "module": "errno", "doc": ["No anode"]}
{"index": 2204, "name": "errno.EBADRQC", "module": "errno", "doc": ["Invalid request code"]}
{"index": 2205, "name": "errno.EBADSLT", "module": "errno", "doc": ["Invalid slot"]}
{"index": 2206, "name": "errno.EDEADLOCK", "module": "errno", "doc": ["File locking deadlock error"]}
{"index": 2207, "name": "errno.EBFONT", "module": "errno", "doc": ["Bad font file format"]}
{"index": 2208, "name": "errno.ENOSTR", "module": "errno", "doc": ["Device not a stream"]}
{"index": 2209, "name": "errno.ENODATA", "module": "errno", "doc": ["No data available"]}
{"index": 2210, "name": "errno.ETIME", "module": "errno", "doc": ["Timer expired"]}
{"index": 2211, "name": "errno.ENOSR", "module": "errno", "doc": ["Out of streams resources"]}
{"index": 2212, "name": "errno.ENONET", "module": "errno", "doc": ["Machine is not on the network"]}
{"index": 2213, "name": "errno.ENOPKG", "module": "errno", "doc": ["Package not installed"]}
{"index": 2214, "name": "errno.EREMOTE", "module": "errno", "doc": ["Object is remote"]}
{"index": 2215, "name": "errno.ENOLINK", "module": "errno", "doc": ["Link has been severed"]}
{"index": 2216, "name": "errno.EADV", "module": "errno", "doc": ["Advertise error"]}
{"index": 2217, "name": "errno.ESRMNT", "module": "errno", "doc": ["Srmount error"]}
{"index": 2218, "name": "errno.ECOMM", "module": "errno", "doc": ["Communication error on send"]}
{"index": 2219, "name": "errno.EPROTO", "module": "errno", "doc": ["Protocol error"]}
{"index": 2220, "name": "errno.EMULTIHOP", "module": "errno", "doc": ["Multihop attempted"]}
{"index": 2221, "name": "errno.EDOTDOT", "module": "errno", "doc": ["RFS specific error"]}
{"index": 2222, "name": "errno.EBADMSG", "module": "errno", "doc": ["Not a data message"]}
{"index": 2223, "name": "errno.EOVERFLOW", "module": "errno", "doc": ["Value too large for defined data type"]}
{"index": 2224, "name": "errno.ENOTUNIQ", "module": "errno", "doc": ["Name not unique on network"]}
{"index": 2225, "name": "errno.EBADFD", "module": "errno", "doc": ["File descriptor in bad state"]}
{"index": 2226, "name": "errno.EREMCHG", "module": "errno", "doc": ["Remote address changed"]}
{"index": 2227, "name": "errno.ELIBACC", "module": "errno", "doc": ["Can not access a needed shared library"]}
{"index": 2228, "name": "errno.ELIBBAD", "module": "errno", "doc": ["Accessing a corrupted shared library"]}
{"index": 2229, "name": "errno.ELIBSCN", "module": "errno", "doc": [".lib section in a.out corrupted"]}
{"index": 2230, "name": "errno.ELIBMAX", "module": "errno", "doc": ["Attempting to link in too many shared libraries"]}
{"index": 2231, "name": "errno.ELIBEXEC", "module": "errno", "doc": ["Cannot exec a shared library directly"]}
{"index": 2232, "name": "errno.EILSEQ", "module": "errno", "doc": ["Illegal byte sequence"]}
{"index": 2233, "name": "errno.ERESTART", "module": "errno", "doc": ["Interrupted system call should be restarted"]}
{"index": 2234, "name": "errno.ESTRPIPE", "module": "errno", "doc": ["Streams pipe error"]}
{"index": 2235, "name": "errno.EUSERS", "module": "errno", "doc": ["Too many users"]}
{"index": 2236, "name": "errno.ENOTSOCK", "module": "errno", "doc": ["Socket operation on non-socket"]}
{"index": 2237, "name": "errno.EDESTADDRREQ", "module": "errno", "doc": ["Destination address required"]}
{"index": 2238, "name": "errno.EMSGSIZE", "module": "errno", "doc": ["Message too long"]}
{"index": 2239, "name": "errno.EPROTOTYPE", "module": "errno", "doc": ["Protocol wrong type for socket"]}
{"index": 2240, "name": "errno.ENOPROTOOPT", "module": "errno", "doc": ["Protocol not available"]}
{"index": 2241, "name": "errno.EPROTONOSUPPORT", "module": "errno", "doc": ["Protocol not supported"]}
{"index": 2242, "name": "errno.ESOCKTNOSUPPORT", "module": "errno", "doc": ["Socket type not supported"]}
{"index": 2243, "name": "errno.EOPNOTSUPP", "module": "errno", "doc": ["Operation not supported on transport endpoint"]}
{"index": 2244, "name": "errno.EPFNOSUPPORT", "module": "errno", "doc": ["Protocol family not supported"]}
{"index": 2245, "name": "errno.EAFNOSUPPORT", "module": "errno", "doc": ["Address family not supported by protocol"]}
{"index": 2246, "name": "errno.EADDRINUSE", "module": "errno", "doc": ["Address already in use"]}
{"index": 2247, "name": "errno.EADDRNOTAVAIL", "module": "errno", "doc": ["Cannot assign requested address"]}
{"index": 2248, "name": "errno.ENETDOWN", "module": "errno", "doc": ["Network is down"]}
{"index": 2249, "name": "errno.ENETUNREACH", "module": "errno", "doc": ["Network is unreachable"]}
{"index": 2250, "name": "errno.ENETRESET", "module": "errno", "doc": ["Network dropped connection because of reset"]}
{"index": 2251, "name": "errno.ECONNABORTED", "module": "errno", "doc": ["Software caused connection abort"]}
{"index": 2252, "name": "errno.ECONNRESET", "module": "errno", "doc": ["Connection reset by peer"]}
{"index": 2253, "name": "errno.ENOBUFS", "module": "errno", "doc": ["No buffer space available"]}
{"index": 2254, "name": "errno.EISCONN", "module": "errno", "doc": ["Transport endpoint is already connected"]}
{"index": 2255, "name": "errno.ENOTCONN", "module": "errno", "doc": ["Transport endpoint is not connected"]}
{"index": 2256, "name": "errno.ESHUTDOWN", "module": "errno", "doc": ["Cannot send after transport endpoint shutdown"]}
{"index": 2257, "name": "errno.ETOOMANYREFS", "module": "errno", "doc": ["Too many references: cannot splice"]}
{"index": 2258, "name": "errno.ETIMEDOUT", "module": "errno", "doc": ["Connection timed out"]}
{"index": 2259, "name": "errno.ECONNREFUSED", "module": "errno", "doc": ["Connection refused"]}
{"index": 2260, "name": "errno.EHOSTDOWN", "module": "errno", "doc": ["Host is down"]}
{"index": 2261, "name": "errno.EHOSTUNREACH", "module": "errno", "doc": ["No route to host"]}
{"index": 2262, "name": "errno.EALREADY", "module": "errno", "doc": ["Operation already in progress"]}
{"index": 2263, "name": "errno.EINPROGRESS", "module": "errno", "doc": ["Operation now in progress"]}
{"index": 2264, "name": "errno.ESTALE", "module": "errno", "doc": ["Stale NFS file handle"]}
{"index": 2265, "name": "errno.EUCLEAN", "module": "errno", "doc": ["Structure needs cleaning"]}
{"index": 2266, "name": "errno.ENOTNAM", "module": "errno", "doc": ["Not a XENIX named type file"]}
{"index": 2267, "name": "errno.ENAVAIL", "module": "errno", "doc": ["No XENIX semaphores available"]}
{"index": 2268, "name": "errno.EISNAM", "module": "errno", "doc": ["Is a named type file"]}
{"index": 2269, "name": "errno.EREMOTEIO", "module": "errno", "doc": ["Remote I/O error"]}
{"index": 2270, "name": "errno.EDQUOT", "module": "errno", "doc": ["Quota exceeded"]}
{"index": 2271, "name": "BaseException", "module": "exceptions", "doc": ["The base class for all built-in exceptions.", "It is not meant to be directly inherited by user-defined classes (for that, use Exception).", "If str() is called on an instance of this class, the representation of the argument(s) to the instance are returned, or the empty string when there were no arguments."]}
{"index": 2272, "name": "BaseException.args", "module": "BaseException", "doc": ["The tuple of arguments given to the exception constructor.", "Some built-in exceptions (like OSError) expect a certain number of arguments and assign a special meaning to the elements of this tuple, while others are usually called only with a single string giving an error message."]}
{"index": 2273, "name": "BaseException.with_traceback", "module": "BaseException", "doc": ["This method sets tb as the new traceback for the exception and returns the exception object.", "It is usually used in exception handling code like this:"]}
{"index": 2274, "name": "Exception", "module": "exceptions", "doc": ["All built-in, non-system-exiting exceptions are derived from this class.", "All user-defined exceptions should also be derived from this class."]}
{"index": 2275, "name": "ArithmeticError", "module": "exceptions", "doc": ["The base class for those built-in exceptions that are raised for various arithmetic errors: OverflowError, ZeroDivisionError, FloatingPointError."]}
{"index": 2276, "name": "BufferError", "module": "exceptions", "doc": ["Raised when a buffer related operation cannot be performed."]}
{"index": 2277, "name": "LookupError", "module": "exceptions", "doc": ["The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: IndexError, KeyError.", "This can be raised directly by codecs.lookup()."]}
{"index": 2278, "name": "AssertionError", "module": "exceptions", "doc": ["Raised when an assert statement fails."]}
{"index": 2279, "name": "AttributeError", "module": "exceptions", "doc": ["Raised when an attribute reference (see Attribute references) or assignment fails.", "(When an object does not support attribute references or attribute assignments at all, TypeError is raised.)"]}
{"index": 2280, "name": "EOFError", "module": "exceptions", "doc": ["Raised when the input() function hits an end-of-file condition (EOF) without reading any data.", "(N.B.", ": the io.IOBase.read() and io.IOBase.readline() methods return an empty string when they hit EOF.)"]}
{"index": 2281, "name": "FloatingPointError", "module": "exceptions", "doc": ["Not currently used."]}
{"index": 2282, "name": "GeneratorExit", "module": "exceptions", "doc": ["Raised when a generator or coroutine is closed; see generator.close() and coroutine.close().", "It directly inherits from BaseException instead of Exception since it is technically not an error."]}
{"index": 2283, "name": "ImportError", "module": "exceptions", "doc": ["Raised when the import statement has troubles trying to load a module.", "Also raised when the \u201cfrom list\u201d in from ... import has a name that cannot be found.", "The name and path attributes can be set using keyword-only arguments to the constructor.", "When set they represent the name of the module that was attempted to be imported and the path to any file which triggered the exception, respectively."]}
{"index": 2284, "name": "ModuleNotFoundError", "module": "exceptions", "doc": ["A subclass of ImportError which is raised by import when a module could not be located.", "It is also raised when None is found in sys.modules."]}
{"index": 2285, "name": "IndexError", "module": "exceptions", "doc": ["Raised when a sequence subscript is out of range.", "(Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, TypeError is raised.)"]}
{"index": 2286, "name": "KeyError", "module": "exceptions", "doc": ["Raised when a mapping (dictionary) key is not found in the set of existing keys."]}
{"index": 2287, "name": "KeyboardInterrupt", "module": "exceptions", "doc": ["Raised when the user hits the interrupt key (normally Control-C or Delete).", "During execution, a check for interrupts is made regularly.", "The exception inherits from BaseException so as to not be accidentally caught by code that catches Exception and thus prevent the interpreter from exiting."]}
{"index": 2288, "name": "MemoryError", "module": "exceptions", "doc": ["Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects).", "The associated value is a string indicating what kind of (internal) operation ran out of memory.", "Note that because of the underlying memory management architecture (C\u2019s malloc() function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause."]}
{"index": 2289, "name": "NameError", "module": "exceptions", "doc": ["Raised when a local or global name is not found.", "This applies only to unqualified names.", "The associated value is an error message that includes the name that could not be found."]}
{"index": 2290, "name": "NotImplementedError", "module": "exceptions", "doc": ["This exception is derived from RuntimeError.", "In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method, or while the class is being developed to indicate that the real implementation still needs to be added."]}
{"index": 2291, "name": "OSError", "module": "exceptions", "doc": ["This exception is raised when a system function returns a system-related error, including I/O failures such as \u201cfile not found\u201d or \u201cdisk full\u201d (not for illegal argument types or other incidental errors).", "The second form of the constructor sets the corresponding attributes, described below.", "The attributes default to None if not specified.", "For backwards compatibility, if three arguments are passed, the args attribute contains only a 2-tuple of the first two constructor arguments.", "The constructor often actually returns a subclass of OSError, as described in OS exceptions below.", "The particular subclass depends on the final errno value.", "This behaviour only occurs when constructing OSError directly or via an alias, and is not inherited when subclassing."]}
{"index": 2292, "name": "OSError.errno", "module": "OSError", "doc": ["A numeric error code from the C variable errno."]}
{"index": 2293, "name": "OSError.winerror", "module": "OSError", "doc": ["Under Windows, this gives you the native Windows error code.", "The errno attribute is then an approximate translation, in POSIX terms, of that native error code.", "Under Windows, if the winerror constructor argument is an integer, the errno attribute is determined from the Windows error code, and the errno argument is ignored.", "On other platforms, the winerror argument is ignored, and the winerror attribute does not exist."]}
{"index": 2294, "name": "OSError.strerror", "module": "OSError", "doc": ["The corresponding error message, as provided by the operating system.", "It is formatted by the C functions perror() under POSIX, and FormatMessage() under Windows."]}
{"index": 2295, "name": "OSError.filename", "module": "OSError", "doc": ["For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "For functions that involve two file system paths (such as os.rename()), filename2 corresponds to the second file name passed to the function."]}
{"index": 2296, "name": "OSError.filename2", "module": "OSError", "doc": ["For exceptions that involve a file system path (such as open() or os.unlink()), filename is the file name passed to the function.", "For functions that involve two file system paths (such as os.rename()), filename2 corresponds to the second file name passed to the function."]}
{"index": 2297, "name": "OverflowError", "module": "exceptions", "doc": ["Raised when the result of an arithmetic operation is too large to be represented.", "This cannot occur for integers (which would rather raise MemoryError than give up).", "However, for historical reasons, OverflowError is sometimes raised for integers that are outside a required range.", "Because of the lack of standardization of floating point exception handling in C, most floating point operations are not checked."]}
{"index": 2298, "name": "RecursionError", "module": "exceptions", "doc": ["This exception is derived from RuntimeError.", "It is raised when the interpreter detects that the maximum recursion depth (see sys.getrecursionlimit()) is exceeded."]}
{"index": 2299, "name": "ReferenceError", "module": "exceptions", "doc": ["This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected.", "For more information on weak references, see the weakref module."]}
{"index": 2300, "name": "RuntimeError", "module": "exceptions", "doc": ["Raised when an error is detected that doesn\u2019t fall in any of the other categories.", "The associated value is a string indicating what precisely went wrong."]}
{"index": 2301, "name": "StopIteration", "module": "exceptions", "doc": ["Raised by built-in function next() and an iterator\u2019s __next__() method to signal that there are no further items produced by the iterator.", "The exception object has a single attribute value, which is given as an argument when constructing the exception, and defaults to None.", "When a generator or coroutine function returns, a new StopIteration instance is raised, and the value returned by the function is used as the value parameter to the constructor of the exception.", "If a generator code directly or indirectly raises StopIteration, it is converted into a RuntimeError (retaining the StopIteration as the new exception\u2019s cause)."]}
{"index": 2302, "name": "StopAsyncIteration", "module": "exceptions", "doc": ["Must be raised by __anext__() method of an asynchronous iterator object to stop the iteration."]}
{"index": 2303, "name": "SyntaxError", "module": "exceptions", "doc": ["Raised when the parser encounters a syntax error.", "This may occur in an import statement, in a call to the built-in functions exec() or eval(), or when reading the initial script or standard input (also interactively).", "Instances of this class have attributes filename, lineno, offset and text for easier access to the details.", "str() of the exception instance returns only the message."]}
{"index": 2304, "name": "IndentationError", "module": "exceptions", "doc": ["Base class for syntax errors related to incorrect indentation.", "This is a subclass of SyntaxError."]}
{"index": 2305, "name": "TabError", "module": "exceptions", "doc": ["Raised when indentation contains an inconsistent use of tabs and spaces.", "This is a subclass of IndentationError."]}
{"index": 2306, "name": "SystemError", "module": "exceptions", "doc": ["Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope.", "The associated value is a string indicating what went wrong (in low-level terms).", "You should report this to the author or maintainer of your Python interpreter.", "Be sure to report the version of the Python interpreter (sys.version; it is also printed at the start of an interactive Python session), the exact error message (the exception\u2019s associated value) and if possible the source of the program that triggered the error."]}
{"index": 2307, "name": "SystemExit", "module": "exceptions", "doc": ["This exception is raised by the sys.exit() function.", "It inherits from BaseException instead of Exception so that it is not accidentally caught by code that catches Exception.", "This allows the exception to properly propagate up and cause the interpreter to exit.", "When it is not handled, the Python interpreter exits; no stack traceback is printed.", "The constructor accepts the same optional argument passed to sys.exit().", "If the value is an integer, it specifies the system exit status (passed to C\u2019s exit() function); if it is None, the exit status is zero; if it has another type (such as a string), the object\u2019s value is printed and the exit status is one.", "A call to sys.exit() is translated into an exception so that clean-up handlers (finally clauses of try statements) can be executed, and so that a debugger can execute a script without running the risk of losing control.", "The os._exit() function can be used if it is absolutely positively necessary to exit immediately (for example, in the child process after a call to os.fork())."]}
{"index": 2308, "name": "SystemExit.code", "module": "SystemExit", "doc": ["The exit status or error message that is passed to the constructor.", "(Defaults to None.)"]}
{"index": 2309, "name": "TypeError", "module": "exceptions", "doc": ["Raised when an operation or function is applied to an object of inappropriate type.", "The associated value is a string giving details about the type mismatch.", "This exception may be raised by user code to indicate that an attempted operation on an object is not supported, and is not meant to be.", "If an object is meant to support a given operation but has not yet provided an implementation, NotImplementedError is the proper exception to raise.", "Passing arguments of the wrong type (e.g.", "passing a list when an int is expected) should result in a TypeError, but passing arguments with the wrong value (e.g.", "a number outside expected boundaries) should result in a ValueError."]}
{"index": 2310, "name": "UnboundLocalError", "module": "exceptions", "doc": ["Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.", "This is a subclass of NameError."]}
{"index": 2311, "name": "UnicodeError", "module": "exceptions", "doc": ["Raised when a Unicode-related encoding or decoding error occurs.", "It is a subclass of ValueError.", "UnicodeError has attributes that describe the encoding or decoding error.", "For example, err.object[err.start:err.end] gives the particular invalid input that the codec failed on."]}
{"index": 2312, "name": "UnicodeError.encoding", "module": "UnicodeError", "doc": ["The name of the encoding that raised the error."]}
{"index": 2313, "name": "UnicodeError.reason", "module": "UnicodeError", "doc": ["A string describing the specific codec error."]}
{"index": 2314, "name": "UnicodeError.object", "module": "UnicodeError", "doc": ["The object the codec was attempting to encode or decode."]}
{"index": 2315, "name": "UnicodeError.start", "module": "UnicodeError", "doc": ["The first index of invalid data in object."]}
{"index": 2316, "name": "UnicodeError.end", "module": "UnicodeError", "doc": ["The index after the last invalid data in object."]}
{"index": 2317, "name": "UnicodeEncodeError", "module": "exceptions", "doc": ["Raised when a Unicode-related error occurs during encoding.", "It is a subclass of UnicodeError."]}
{"index": 2318, "name": "UnicodeDecodeError", "module": "exceptions", "doc": ["Raised when a Unicode-related error occurs during decoding.", "It is a subclass of UnicodeError."]}
{"index": 2319, "name": "UnicodeTranslateError", "module": "exceptions", "doc": ["Raised when a Unicode-related error occurs during translating.", "It is a subclass of UnicodeError."]}
{"index": 2320, "name": "ValueError", "module": "exceptions", "doc": ["Raised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError."]}
{"index": 2321, "name": "ZeroDivisionError", "module": "exceptions", "doc": ["Raised when the second argument of a division or modulo operation is zero.", "The associated value is a string indicating the type of the operands and the operation."]}
{"index": 2322, "name": "WindowsError", "module": "exceptions", "doc": ["Only available on Windows."]}
{"index": 2323, "name": "BlockingIOError", "module": "exceptions", "doc": ["Raised when an operation would block on an object (e.g.", "socket) set for non-blocking operation.", "Corresponds to errno EAGAIN, EALREADY, EWOULDBLOCK and EINPROGRESS.", "In addition to those of OSError, BlockingIOError can have one more attribute:"]}
{"index": 2324, "name": "BlockingIOError.characters_written", "module": "BlockingIOError", "doc": ["An integer containing the number of characters written to the stream before it blocked.", "This attribute is available when using the buffered I/O classes from the io module."]}
{"index": 2325, "name": "ChildProcessError", "module": "exceptions", "doc": ["Raised when an operation on a child process failed.", "Corresponds to errno ECHILD."]}
{"index": 2326, "name": "ConnectionError", "module": "exceptions", "doc": ["A base class for connection-related issues.", "Subclasses are BrokenPipeError, ConnectionAbortedError, ConnectionRefusedError and ConnectionResetError."]}
{"index": 2327, "name": "BrokenPipeError", "module": "exceptions", "doc": ["A subclass of ConnectionError, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing.", "Corresponds to errno EPIPE and ESHUTDOWN."]}
{"index": 2328, "name": "ConnectionAbortedError", "module": "exceptions", "doc": ["A subclass of ConnectionError, raised when a connection attempt is aborted by the peer.", "Corresponds to errno ECONNABORTED."]}
{"index": 2329, "name": "ConnectionRefusedError", "module": "exceptions", "doc": ["A subclass of ConnectionError, raised when a connection attempt is refused by the peer.", "Corresponds to errno ECONNREFUSED."]}
{"index": 2330, "name": "ConnectionResetError", "module": "exceptions", "doc": ["A subclass of ConnectionError, raised when a connection is reset by the peer.", "Corresponds to errno ECONNRESET."]}
{"index": 2331, "name": "FileExistsError", "module": "exceptions", "doc": ["Raised when trying to create a file or directory which already exists.", "Corresponds to errno EEXIST."]}
{"index": 2332, "name": "FileNotFoundError", "module": "exceptions", "doc": ["Raised when a file or directory is requested but doesn\u2019t exist.", "Corresponds to errno ENOENT."]}
{"index": 2333, "name": "InterruptedError", "module": "exceptions", "doc": ["Raised when a system call is interrupted by an incoming signal.", "Corresponds to errno EINTR."]}
{"index": 2334, "name": "IsADirectoryError", "module": "exceptions", "doc": ["Raised when a file operation (such as os.remove()) is requested on a directory.", "Corresponds to errno EISDIR."]}
{"index": 2335, "name": "NotADirectoryError", "module": "exceptions", "doc": ["Raised when a directory operation (such as os.listdir()) is requested on something which is not a directory.", "Corresponds to errno ENOTDIR."]}
{"index": 2336, "name": "PermissionError", "module": "exceptions", "doc": ["Raised when trying to run an operation without the adequate access rights - for example filesystem permissions.", "Corresponds to errno EACCES and EPERM."]}
{"index": 2337, "name": "ProcessLookupError", "module": "exceptions", "doc": ["Raised when a given process doesn\u2019t exist.", "Corresponds to errno ESRCH."]}
{"index": 2338, "name": "TimeoutError", "module": "exceptions", "doc": ["Raised when a system function timed out at the system level.", "Corresponds to errno ETIMEDOUT."]}
{"index": 2339, "name": "Warning", "module": "exceptions", "doc": ["Base class for warning categories."]}
{"index": 2340, "name": "UserWarning", "module": "exceptions", "doc": ["Base class for warnings generated by user code."]}
{"index": 2341, "name": "DeprecationWarning", "module": "exceptions", "doc": ["Base class for warnings about deprecated features when those warnings are intended for other Python developers."]}
{"index": 2342, "name": "PendingDeprecationWarning", "module": "exceptions", "doc": ["Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment.", "This class is rarely used as emitting a warning about a possible upcoming deprecation is unusual, and DeprecationWarning is preferred for already active deprecations."]}
{"index": 2343, "name": "SyntaxWarning", "module": "exceptions", "doc": ["Base class for warnings about dubious syntax."]}
{"index": 2344, "name": "RuntimeWarning", "module": "exceptions", "doc": ["Base class for warnings about dubious runtime behavior."]}
{"index": 2345, "name": "FutureWarning", "module": "exceptions", "doc": ["Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python."]}
{"index": 2346, "name": "ImportWarning", "module": "exceptions", "doc": ["Base class for warnings about probable mistakes in module imports."]}
{"index": 2347, "name": "UnicodeWarning", "module": "exceptions", "doc": ["Base class for warnings related to Unicode."]}
{"index": 2348, "name": "BytesWarning", "module": "exceptions", "doc": ["Base class for warnings related to bytes and bytearray."]}
{"index": 2349, "name": "ResourceWarning", "module": "exceptions", "doc": ["Base class for warnings related to resource usage.", "Ignored by the default warning filters."]}
{"index": 2350, "name": "faulthandler.dump_traceback", "module": "faulthandler", "doc": ["Dump the tracebacks of all threads into file.", "If all_threads is False, dump only the current thread."]}
{"index": 2351, "name": "faulthandler.enable", "module": "faulthandler", "doc": ["Enable the fault handler: install handlers for the SIGSEGV, SIGFPE, SIGABRT, SIGBUS and SIGILL signals to dump the Python traceback.", "If all_threads is True, produce tracebacks for every running thread.", "Otherwise, dump only the current thread.", "The file must be kept open until the fault handler is disabled: see issue with file descriptors."]}
{"index": 2352, "name": "faulthandler.disable", "module": "faulthandler", "doc": ["Disable the fault handler: uninstall the signal handlers installed by enable()."]}
{"index": 2353, "name": "faulthandler.is_enabled", "module": "faulthandler", "doc": ["Check if the fault handler is enabled."]}
{"index": 2354, "name": "faulthandler.dump_traceback_later", "module": "faulthandler", "doc": ["Dump the tracebacks of all threads, after a timeout of timeout seconds, or every timeout seconds if repeat is True.", "If exit is True, call _exit() with status=1 after dumping the tracebacks.", "(Note _exit() exits the process immediately, which means it doesn\u2019t do any cleanup like flushing file buffers.)", "If the function is called twice, the new call replaces previous parameters and resets the timeout.", "The timer has a sub-second resolution.", "The file must be kept open until the traceback is dumped or cancel_dump_traceback_later() is called: see issue with file descriptors.", "This function is implemented using a watchdog thread."]}
{"index": 2355, "name": "faulthandler.cancel_dump_traceback_later", "module": "faulthandler", "doc": ["Cancel the last call to dump_traceback_later()."]}
{"index": 2356, "name": "faulthandler.register", "module": "faulthandler", "doc": ["Register a user signal: install a handler for the signum signal to dump the traceback of all threads, or of the current thread if all_threads is False, into file.", "Call the previous handler if chain is True.", "The file must be kept open until the signal is unregistered by unregister(): see issue with file descriptors.", "Not available on Windows."]}
{"index": 2357, "name": "faulthandler.unregister", "module": "faulthandler", "doc": ["Unregister a user signal: uninstall the handler of the signum signal installed by register().", "Return True if the signal was registered, False otherwise.", "Not available on Windows."]}
{"index": 2358, "name": "fcntl.fcntl", "module": "fcntl", "doc": ["Perform the operation cmd on file descriptor fd (file objects providing a fileno() method are accepted as well).", "The values used for cmd are operating system dependent, and are available as constants in the fcntl module, using the same names as used in the relevant C header files.", "The argument arg can either be an integer value, or a bytes object.", "With an integer value, the return value of this function is the integer return value of the C fcntl() call.", "When the argument is bytes it represents a binary structure, e.g.", "created by struct.pack().", "The binary data is copied to a buffer whose address is passed to the C fcntl() call.", "The return value after a successful call is the contents of the buffer, converted to a bytes object.", "The length of the returned object will be the same as the length of the arg argument.", "This is limited to 1024 bytes.", "If the information returned in the buffer by the operating system is larger than 1024 bytes, this is most likely to result in a segmentation violation or a more subtle data corruption.", "If the fcntl() fails, an OSError is raised."]}
{"index": 2359, "name": "fcntl.ioctl", "module": "fcntl", "doc": ["This function is identical to the fcntl() function, except that the argument handling is even more complicated.", "The request parameter is limited to values that can fit in 32-bits.", "Additional constants of interest for use as the request argument can be found in the termios module, under the same names as used in the relevant C header files.", "The parameter arg can be one of an integer, an object supporting the read-only buffer interface (like bytes) or an object supporting the read-write buffer interface (like bytearray).", "In all but the last case, behaviour is as for the fcntl() function.", "If a mutable buffer is passed, then the behaviour is determined by the value of the mutate_flag parameter.", "If it is false, the buffer\u2019s mutability is ignored and behaviour is as for a read-only buffer, except that the 1024 byte limit mentioned above is avoided \u2013 so long as the buffer you pass is at least as long as what the operating system wants to put there, things should work.", "If mutate_flag is true (the default), then the buffer is (in effect) passed to the underlying ioctl() system call, the latter\u2019s return code is passed back to the calling Python, and the buffer\u2019s new contents reflect the action of the ioctl().", "This is a slight simplification, because if the supplied buffer is less than 1024 bytes long it is first copied into a static buffer 1024 bytes long which is then passed to ioctl() and copied back into the supplied buffer.", "If the ioctl() fails, an OSError exception is raised.", "An example:"]}
{"index": 2360, "name": "fcntl.flock", "module": "fcntl", "doc": ["Perform the lock operation operation on file descriptor fd (file objects providing a fileno() method are accepted as well).", "See the Unix manual flock(2) for details.", "(On some systems, this function is emulated using fcntl().)", "If the flock() fails, an OSError exception is raised."]}
{"index": 2361, "name": "fcntl.lockf", "module": "fcntl", "doc": ["This is essentially a wrapper around the fcntl() locking calls.", "fd is the file descriptor of the file to lock or unlock, and cmd is one of the following values:", "When cmd is LOCK_SH or LOCK_EX, it can also be bitwise ORed with LOCK_NB to avoid blocking on lock acquisition.", "If LOCK_NB is used and the lock cannot be acquired, an OSError will be raised and the exception will have an errno attribute set to EACCES or EAGAIN (depending on the operating system; for portability, check for both values).", "On at least some systems, LOCK_EX can only be used if the file descriptor refers to a file opened for writing.", "len is the number of bytes to lock, start is the byte offset at which the lock starts, relative to whence, and whence is as with io.IOBase.seek(), specifically:", "The default for start is 0, which means to start at the beginning of the file.", "The default for len is 0 which means to lock to the end of the file.", "The default for whence is also 0."]}
{"index": 2362, "name": "filecmp.cmp", "module": "filecmp", "doc": ["Compare the files named f1 and f2, returning True if they seem equal, False otherwise.", "If shallow is true, files with identical os.stat() signatures are taken to be equal.", "Otherwise, the contents of the files are compared.", "Note that no external programs are called from this function, giving it portability and efficiency.", "This function uses a cache for past comparisons and the results, with cache entries invalidated if the os.stat() information for the file changes.", "The entire cache may be cleared using clear_cache()."]}
{"index": 2363, "name": "filecmp.cmpfiles", "module": "filecmp", "doc": ["Compare the files in the two directories dir1 and dir2 whose names are given by common.", "Returns three lists of file names: match, mismatch, errors.", "match contains the list of files that match, mismatch contains the names of those that don\u2019t, and errors lists the names of files which could not be compared.", "Files are listed in errors if they don\u2019t exist in one of the directories, the user lacks permission to read them or if the comparison could not be done for some other reason.", "The shallow parameter has the same meaning and default value as for filecmp.cmp().", "For example, cmpfiles('a', 'b', ['c', 'd/e']) will compare a/c with b/c and a/d/e with b/d/e.", "'c' and 'd/e' will each be in one of the three returned lists."]}
{"index": 2364, "name": "filecmp.clear_cache", "module": "filecmp", "doc": ["Clear the filecmp cache.", "This may be useful if a file is compared so quickly after it is modified that it is within the mtime resolution of the underlying filesystem."]}
{"index": 2365, "name": "filecmp.dircmp", "module": "filecmp", "doc": ["Construct a new directory comparison object, to compare the directories a and b.  ignore is a list of names to ignore, and defaults to filecmp.DEFAULT_IGNORES.", "hide is a list of names to hide, and defaults to [os.curdir, os.pardir].", "The dircmp class compares files by doing shallow comparisons as described for filecmp.cmp().", "The dircmp class provides the following methods:", "The dircmp class offers a number of interesting attributes that may be used to get various bits of information about the directory trees being compared.", "Note that via __getattr__() hooks, all attributes are computed lazily, so there is no speed penalty if only those attributes which are lightweight to compute are used."]}
{"index": 2366, "name": "filecmp.dircmp.report", "module": "filecmp", "doc": ["Print (to sys.stdout) a comparison between a and b."]}
{"index": 2367, "name": "filecmp.dircmp.report_partial_closure", "module": "filecmp", "doc": ["Print a comparison between a and b and common immediate subdirectories."]}
{"index": 2368, "name": "filecmp.dircmp.report_full_closure", "module": "filecmp", "doc": ["Print a comparison between a and b and common subdirectories (recursively)."]}
{"index": 2369, "name": "filecmp.dircmp.left", "module": "filecmp", "doc": ["The directory a."]}
{"index": 2370, "name": "filecmp.dircmp.right", "module": "filecmp", "doc": ["The directory b."]}
{"index": 2371, "name": "filecmp.dircmp.left_list", "module": "filecmp", "doc": ["Files and subdirectories in a, filtered by hide and ignore."]}
{"index": 2372, "name": "filecmp.dircmp.right_list", "module": "filecmp", "doc": ["Files and subdirectories in b, filtered by hide and ignore."]}
{"index": 2373, "name": "filecmp.dircmp.common", "module": "filecmp", "doc": ["Files and subdirectories in both a and b."]}
{"index": 2374, "name": "filecmp.dircmp.left_only", "module": "filecmp", "doc": ["Files and subdirectories only in a."]}
{"index": 2375, "name": "filecmp.dircmp.right_only", "module": "filecmp", "doc": ["Files and subdirectories only in b."]}
{"index": 2376, "name": "filecmp.dircmp.common_dirs", "module": "filecmp", "doc": ["Subdirectories in both a and b."]}
{"index": 2377, "name": "filecmp.dircmp.common_files", "module": "filecmp", "doc": ["Files in both a and b."]}
{"index": 2378, "name": "filecmp.dircmp.common_funny", "module": "filecmp", "doc": ["Names in both a and b, such that the type differs between the directories, or names for which os.stat() reports an error."]}
{"index": 2379, "name": "filecmp.dircmp.same_files", "module": "filecmp", "doc": ["Files which are identical in both a and b, using the class\u2019s file comparison operator."]}
{"index": 2380, "name": "filecmp.dircmp.diff_files", "module": "filecmp", "doc": ["Files which are in both a and b, whose contents differ according to the class\u2019s file comparison operator."]}
{"index": 2381, "name": "filecmp.dircmp.funny_files", "module": "filecmp", "doc": ["Files which are in both a and b, but could not be compared."]}
{"index": 2382, "name": "filecmp.dircmp.subdirs", "module": "filecmp", "doc": ["A dictionary mapping names in common_dirs to dircmp objects."]}
{"index": 2383, "name": "filecmp.DEFAULT_IGNORES", "module": "filecmp", "doc": ["List of directories ignored by dircmp by default."]}
{"index": 2384, "name": "fileinput.input", "module": "fileinput", "doc": ["Create an instance of the FileInput class.", "The instance will be used as global state for the functions of this module, and is also returned to use during iteration.", "The parameters to this function will be passed along to the constructor of the FileInput class.", "The FileInput instance can be used as a context manager in the with statement.", "In this example, input is closed after the with statement is exited, even if an exception occurs:"]}
{"index": 2385, "name": "fileinput.filename", "module": "fileinput", "doc": ["Return the name of the file currently being read.", "Before the first line has been read, returns None."]}
{"index": 2386, "name": "fileinput.fileno", "module": "fileinput", "doc": ["Return the integer \u201cfile descriptor\u201d for the current file.", "When no file is opened (before the first line and between files), returns -1."]}
{"index": 2387, "name": "fileinput.lineno", "module": "fileinput", "doc": ["Return the cumulative line number of the line that has just been read.", "Before the first line has been read, returns 0.", "After the last line of the last file has been read, returns the line number of that line."]}
{"index": 2388, "name": "fileinput.filelineno", "module": "fileinput", "doc": ["Return the line number in the current file.", "Before the first line has been read, returns 0.", "After the last line of the last file has been read, returns the line number of that line within the file."]}
{"index": 2389, "name": "fileinput.isfirstline", "module": "fileinput", "doc": ["Returns true if the line just read is the first line of its file, otherwise returns false."]}
{"index": 2390, "name": "fileinput.isstdin", "module": "fileinput", "doc": ["Returns true if the last line was read from sys.stdin, otherwise returns false."]}
{"index": 2391, "name": "fileinput.nextfile", "module": "fileinput", "doc": ["Close the current file so that the next iteration will read the first line from the next file (if any); lines not read from the file will not count towards the cumulative line count.", "The filename is not changed until after the first line of the next file has been read.", "Before the first line has been read, this function has no effect; it cannot be used to skip the first file.", "After the last line of the last file has been read, this function has no effect."]}
{"index": 2392, "name": "fileinput.close", "module": "fileinput", "doc": ["Close the sequence."]}
{"index": 2393, "name": "fileinput.FileInput", "module": "fileinput", "doc": ["Class FileInput is the implementation; its methods filename(), fileno(), lineno(), filelineno(), isfirstline(), isstdin(), nextfile() and close() correspond to the functions of the same name in the module.", "In addition it has a readline() method which returns the next input line, and a __getitem__() method which implements the sequence behavior.", "The sequence must be accessed in strictly sequential order; random access and readline() cannot be mixed.", "With mode you can specify which file mode will be passed to open().", "It must be one of 'r', 'rU', 'U' and 'rb'.", "The openhook, when given, must be a function that takes two arguments, filename and mode, and returns an accordingly opened file-like object.", "You cannot use inplace and openhook together.", "A FileInput instance can be used as a context manager in the with statement.", "In this example, input is closed after the with statement is exited, even if an exception occurs:"]}
{"index": 2394, "name": "fileinput.hook_compressed", "module": "fileinput", "doc": ["Transparently opens files compressed with gzip and bzip2 (recognized by the extensions '.gz' and '.bz2') using the gzip and bz2 modules.", "If the filename extension is not '.gz' or '.bz2', the file is opened normally (ie, using open() without any decompression).", "Usage example:  fi = fileinput.FileInput(openhook=fileinput.hook_compressed)"]}
{"index": 2395, "name": "fileinput.hook_encoded", "module": "fileinput", "doc": ["Returns a hook which opens each file with open(), using the given encoding and errors to read the file.", "Usage example: fi = fileinput.FileInput(openhook=fileinput.hook_encoded(\"utf-8\", \"surrogateescape\"))"]}
{"index": 2396, "name": "fnmatch.fnmatch", "module": "fnmatch", "doc": ["Test whether the filename string matches the pattern string, returning True or False.", "Both parameters are case-normalized using os.path.normcase().", "fnmatchcase() can be used to perform a case-sensitive comparison, regardless of whether that\u2019s standard for the operating system.", "This example will print all file names in the current directory with the extension .txt:"]}
{"index": 2397, "name": "fnmatch.fnmatchcase", "module": "fnmatch", "doc": ["Test whether filename matches pattern, returning True or False; the comparison is case-sensitive and does not apply os.path.normcase()."]}
{"index": 2398, "name": "fnmatch.filter", "module": "fnmatch", "doc": ["Return the subset of the list of names that match pattern.", "It is the same as [n for n in names if fnmatch(n, pattern)], but implemented more efficiently."]}
{"index": 2399, "name": "fnmatch.translate", "module": "fnmatch", "doc": ["Return the shell-style pattern converted to a regular expression for using with re.match().", "Example:"]}
{"index": 2400, "name": "formatter.AS_IS", "module": "formatter", "doc": ["Value which can be used in the font specification passed to the push_font() method described below, or as the new value to any other push_property() method.", "Pushing the AS_IS value allows the corresponding pop_property() method to be called without having to track whether the property was changed."]}
{"index": 2401, "name": "formatter.formatter.writer", "module": "formatter", "doc": ["The writer instance with which the formatter interacts."]}
{"index": 2402, "name": "formatter.formatter.end_paragraph", "module": "formatter", "doc": ["Close any open paragraphs and insert at least blanklines before the next paragraph."]}
{"index": 2403, "name": "formatter.formatter.add_line_break", "module": "formatter", "doc": ["Add a hard line break if one does not already exist.", "This does not break the logical paragraph."]}
{"index": 2404, "name": "formatter.formatter.add_hor_rule", "module": "formatter", "doc": ["Insert a horizontal rule in the output.", "A hard break is inserted if there is data in the current paragraph, but the logical paragraph is not broken.", "The arguments and keywords are passed on to the writer\u2019s send_line_break() method."]}
{"index": 2405, "name": "formatter.formatter.add_flowing_data", "module": "formatter", "doc": ["Provide data which should be formatted with collapsed whitespace.", "Whitespace from preceding and successive calls to add_flowing_data() is considered as well when the whitespace collapse is performed.", "The data which is passed to this method is expected to be word-wrapped by the output device.", "Note that any word-wrapping still must be performed by the writer object due to the need to rely on device and font information."]}
{"index": 2406, "name": "formatter.formatter.add_literal_data", "module": "formatter", "doc": ["Provide data which should be passed to the writer unchanged.", "Whitespace, including newline and tab characters, are considered legal in the value of data."]}
{"index": 2407, "name": "formatter.formatter.add_label_data", "module": "formatter", "doc": ["Insert a label which should be placed to the left of the current left margin.", "This should be used for constructing bulleted or numbered lists.", "If the format value is a string, it is interpreted as a format specification for counter, which should be an integer.", "The result of this formatting becomes the value of the label; if format is not a string it is used as the label value directly.", "The label value is passed as the only argument to the writer\u2019s send_label_data() method.", "Interpretation of non-string label values is dependent on the associated writer.", "Format specifications are strings which, in combination with a counter value, are used to compute label values.", "Each character in the format string is copied to the label value, with some characters recognized to indicate a transform on the counter value.", "Specifically, the character '1' represents the counter value formatter as an Arabic number, the characters 'A' and 'a' represent alphabetic representations of the counter value in upper and lower case, respectively, and 'I' and 'i' represent the counter value in Roman numerals, in upper and lower case.", "Note that the alphabetic and roman transforms require that the counter value be greater than zero."]}
{"index": 2408, "name": "formatter.formatter.flush_softspace", "module": "formatter", "doc": ["Send any pending whitespace buffered from a previous call to add_flowing_data() to the associated writer object.", "This should be called before any direct manipulation of the writer object."]}
{"index": 2409, "name": "formatter.formatter.push_alignment", "module": "formatter", "doc": ["Push a new alignment setting onto the alignment stack.", "This may be AS_IS if no change is desired.", "If the alignment value is changed from the previous setting, the writer\u2019s new_alignment() method is called with the align value."]}
{"index": 2410, "name": "formatter.formatter.pop_alignment", "module": "formatter", "doc": ["Restore the previous alignment."]}
{"index": 2411, "name": "formatter.formatter.push_font", "module": "formatter", "doc": ["Change some or all font properties of the writer object.", "Properties which are not set to AS_IS are set to the values passed in while others are maintained at their current settings.", "The writer\u2019s new_font() method is called with the fully resolved font specification."]}
{"index": 2412, "name": "formatter.formatter.pop_font", "module": "formatter", "doc": ["Restore the previous font."]}
{"index": 2413, "name": "formatter.formatter.push_margin", "module": "formatter", "doc": ["Increase the number of left margin indentations by one, associating the logical tag margin with the new indentation.", "The initial margin level is 0.", "Changed values of the logical tag must be true values; false values other than AS_IS are not sufficient to change the margin."]}
{"index": 2414, "name": "formatter.formatter.pop_margin", "module": "formatter", "doc": ["Restore the previous margin."]}
{"index": 2415, "name": "formatter.formatter.push_style", "module": "formatter", "doc": ["Push any number of arbitrary style specifications.", "All styles are pushed onto the styles stack in order.", "A tuple representing the entire stack, including AS_IS values, is passed to the writer\u2019s new_styles() method."]}
{"index": 2416, "name": "formatter.formatter.pop_style", "module": "formatter", "doc": ["Pop the last n style specifications passed to push_style().", "A tuple representing the revised stack, including AS_IS values, is passed to the writer\u2019s new_styles() method."]}
{"index": 2417, "name": "formatter.formatter.set_spacing", "module": "formatter", "doc": ["Set the spacing style for the writer."]}
{"index": 2418, "name": "formatter.formatter.assert_line_data", "module": "formatter", "doc": ["Inform the formatter that data has been added to the current paragraph out-of-band.", "This should be used when the writer has been manipulated directly.", "The optional flag argument can be set to false if the writer manipulations produced a hard line break at the end of the output."]}
{"index": 2419, "name": "formatter.NullFormatter", "module": "formatter", "doc": ["A formatter which does nothing.", "If writer is omitted, a NullWriter instance is created.", "No methods of the writer are called by NullFormatter instances.", "Implementations should inherit from this class if implementing a writer interface but don\u2019t need to inherit any implementation."]}
{"index": 2420, "name": "formatter.AbstractFormatter", "module": "formatter", "doc": ["The standard formatter.", "This implementation has demonstrated wide applicability to many writers, and may be used directly in most circumstances.", "It has been used to implement a full-featured World Wide Web browser."]}
{"index": 2421, "name": "formatter.writer.flush", "module": "formatter", "doc": ["Flush any buffered output or device control events."]}
{"index": 2422, "name": "formatter.writer.new_alignment", "module": "formatter", "doc": ["Set the alignment style.", "The align value can be any object, but by convention is a string or None, where None indicates that the writer\u2019s \u201cpreferred\u201d alignment should be used.", "Conventional align values are 'left', 'center', 'right', and 'justify'."]}
{"index": 2423, "name": "formatter.writer.new_font", "module": "formatter", "doc": ["Set the font style.", "The value of font will be None, indicating that the device\u2019s default font should be used, or a tuple of the form (size, italic, bold, teletype).", "Size will be a string indicating the size of font that should be used; specific strings and their interpretation must be defined by the application.", "The italic, bold, and teletype values are Boolean values specifying which of those font attributes should be used."]}
{"index": 2424, "name": "formatter.writer.new_margin", "module": "formatter", "doc": ["Set the margin level to the integer level and the logical tag to margin.", "Interpretation of the logical tag is at the writer\u2019s discretion; the only restriction on the value of the logical tag is that it not be a false value for non-zero values of level."]}
{"index": 2425, "name": "formatter.writer.new_spacing", "module": "formatter", "doc": ["Set the spacing style to spacing."]}
{"index": 2426, "name": "formatter.writer.new_styles", "module": "formatter", "doc": ["Set additional styles.", "The styles value is a tuple of arbitrary values; the value AS_IS should be ignored.", "The styles tuple may be interpreted either as a set or as a stack depending on the requirements of the application and writer implementation."]}
{"index": 2427, "name": "formatter.writer.send_line_break", "module": "formatter", "doc": ["Break the current line."]}
{"index": 2428, "name": "formatter.writer.send_paragraph", "module": "formatter", "doc": ["Produce a paragraph separation of at least blankline blank lines, or the equivalent.", "The blankline value will be an integer.", "Note that the implementation will receive a call to send_line_break() before this call if a line break is needed;  this method should not include ending the last line of the paragraph.", "It is only responsible for vertical spacing between paragraphs."]}
{"index": 2429, "name": "formatter.writer.send_hor_rule", "module": "formatter", "doc": ["Display a horizontal rule on the output device.", "The arguments to this method are entirely application- and writer-specific, and should be interpreted with care.", "The method implementation may assume that a line break has already been issued via send_line_break()."]}
{"index": 2430, "name": "formatter.writer.send_flowing_data", "module": "formatter", "doc": ["Output character data which may be word-wrapped and re-flowed as needed.", "Within any sequence of calls to this method, the writer may assume that spans of multiple whitespace characters have been collapsed to single space characters."]}
{"index": 2431, "name": "formatter.writer.send_literal_data", "module": "formatter", "doc": ["Output character data which has already been formatted for display.", "Generally, this should be interpreted to mean that line breaks indicated by newline characters should be preserved and no new line breaks should be introduced.", "The data may contain embedded newline and tab characters, unlike data provided to the send_formatted_data() interface."]}
{"index": 2432, "name": "formatter.writer.send_label_data", "module": "formatter", "doc": ["Set data to the left of the current left margin, if possible.", "The value of data is not restricted; treatment of non-string values is entirely application- and writer-dependent.", "This method will only be called at the beginning of a line."]}
{"index": 2433, "name": "formatter.NullWriter", "module": "formatter", "doc": ["A writer which only provides the interface definition; no actions are taken on any methods.", "This should be the base class for all writers which do not need to inherit any implementation methods."]}
{"index": 2434, "name": "formatter.AbstractWriter", "module": "formatter", "doc": ["A writer which can be used in debugging formatters, but not much else.", "Each method simply announces itself by printing its name and arguments on standard output."]}
{"index": 2435, "name": "formatter.DumbWriter", "module": "formatter", "doc": ["Simple writer class which writes output on the file object passed in as file or, if file is omitted, on standard output.", "The output is simply word-wrapped to the number of columns specified by maxcol.", "This class is suitable for reflowing a sequence of paragraphs."]}
{"index": 2436, "name": "fractions.Fraction", "module": "fractions", "doc": ["The first version requires that numerator and denominator are instances of numbers.Rational and returns a new Fraction instance with value numerator/denominator.", "If denominator is 0, it raises a ZeroDivisionError.", "The second version requires that other_fraction is an instance of numbers.Rational and returns a Fraction instance with the same value.", "The next two versions accept either a float or a decimal.Decimal instance, and return a Fraction instance with exactly the same value.", "Note that due to the usual issues with binary floating-point (see Floating Point Arithmetic:  Issues and Limitations), the argument to Fraction(1.1) is not exactly equal to 11/10, and so Fraction(1.1) does not return Fraction(11, 10) as one might expect.", "(But see the documentation for the limit_denominator() method below.)", "The last version of the constructor expects a string or unicode instance.", "The usual form for this instance is:", "where the optional sign may be either \u2018+\u2019 or \u2018-\u2018 and numerator and denominator (if present) are strings of decimal digits.", "In addition, any string that represents a finite value and is accepted by the float constructor is also accepted by the Fraction constructor.", "In either form the input string may also have leading and/or trailing whitespace.", "Here are some examples:", "The Fraction class inherits from the abstract base class numbers.Rational, and implements all of the methods and operations from that class.", "Fraction instances are hashable, and should be treated as immutable.", "In addition, Fraction has the following properties and methods:"]}
{"index": 2437, "name": "fractions.Fraction.numerator", "module": "fractions", "doc": ["Numerator of the Fraction in lowest term."]}
{"index": 2438, "name": "fractions.Fraction.denominator", "module": "fractions", "doc": ["Denominator of the Fraction in lowest term."]}
{"index": 2439, "name": "fractions.Fraction.from_float", "module": "fractions", "doc": ["This class method constructs a Fraction representing the exact value of flt, which must be a float.", "Beware that Fraction.from_float(0.3) is not the same value as Fraction(3, 10)."]}
{"index": 2440, "name": "fractions.Fraction.from_decimal", "module": "fractions", "doc": ["This class method constructs a Fraction representing the exact value of dec, which must be a decimal.Decimal instance."]}
{"index": 2441, "name": "fractions.Fraction.limit_denominator", "module": "fractions", "doc": ["Finds and returns the closest Fraction to self that has denominator at most max_denominator.", "This method is useful for finding rational approximations to a given floating-point number:", "or for recovering a rational number that\u2019s represented as a float:"]}
{"index": 2442, "name": "fractions.Fraction.__floor__", "module": "fractions", "doc": ["Returns the greatest int <= self.", "This method can also be accessed through the math.floor() function:"]}
{"index": 2443, "name": "fractions.Fraction.__ceil__", "module": "fractions", "doc": ["Returns the least int >= self.", "This method can also be accessed through the math.ceil() function."]}
{"index": 2444, "name": "fractions.Fraction.__round__", "module": "fractions", "doc": ["The first version returns the nearest int to self, rounding half to even.", "The second version rounds self to the nearest multiple of Fraction(1, 10**ndigits) (logically, if ndigits is negative), again rounding half toward even.", "This method can also be accessed through the round() function."]}
{"index": 2445, "name": "fractions.gcd", "module": "fractions", "doc": ["Return the greatest common divisor of the integers a and b.", "If either a or b is nonzero, then the absolute value of gcd(a, b) is the largest integer that divides both a and b.  gcd(a,b) has the same sign as b if b is nonzero; otherwise it takes the sign of a.  gcd(0, 0) returns 0."]}
{"index": 2446, "name": "ftplib.FTP", "module": "ftplib", "doc": ["Return a new instance of the FTP class.", "When host is given, the method call connect(host) is made.", "When user is given, additionally the method call login(user, passwd, acct) is made (where passwd and acct default to the empty string when not given).", "The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if is not specified, the global default timeout setting will be used).", "source_address is a 2-tuple (host, port) for the socket to bind to as its source address before connecting.", "The FTP class supports the with statement, e.g.", ":"]}
{"index": 2447, "name": "ftplib.FTP_TLS", "module": "ftplib", "doc": ["A FTP subclass which adds TLS support to FTP as described in RFC 4217.", "Connect as usual to port 21 implicitly securing the FTP control connection before authenticating.", "Securing the data connection requires the user to explicitly ask for it by calling the prot_p() method.", "context is a ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.", "Please read Security considerations for best practices.", "keyfile and certfile are a legacy alternative to context \u2013 they can point to PEM-formatted private key and certificate chain files (respectively) for the SSL connection.", "Here\u2019s a sample session using the FTP_TLS class:"]}
{"index": 2448, "name": "ftplib.error_reply", "module": "ftplib", "doc": ["Exception raised when an unexpected reply is received from the server."]}
{"index": 2449, "name": "ftplib.error_temp", "module": "ftplib", "doc": ["Exception raised when an error code signifying a temporary error (response codes in the range 400\u2013499) is received."]}
{"index": 2450, "name": "ftplib.error_perm", "module": "ftplib", "doc": ["Exception raised when an error code signifying a permanent error (response codes in the range 500\u2013599) is received."]}
{"index": 2451, "name": "ftplib.error_proto", "module": "ftplib", "doc": ["Exception raised when a reply is received from the server that does not fit the response specifications of the File Transfer Protocol, i.e.", "begin with a digit in the range 1\u20135."]}
{"index": 2452, "name": "ftplib.all_errors", "module": "ftplib", "doc": ["The set of all exceptions (as a tuple) that methods of FTP instances may raise as a result of problems with the FTP connection (as opposed to programming errors made by the caller).", "This set includes the four exceptions listed above as well as OSError."]}
{"index": 2453, "name": "ftplib.FTP.set_debuglevel", "module": "ftplib", "doc": ["Set the instance\u2019s debugging level.", "This controls the amount of debugging output printed.", "The default, 0, produces no debugging output.", "A value of 1 produces a moderate amount of debugging output, generally a single line per request.", "A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection."]}
{"index": 2454, "name": "ftplib.FTP.connect", "module": "ftplib", "doc": ["Connect to the given host and port.", "The default port number is 21, as specified by the FTP protocol specification.", "It is rarely needed to specify a different port number.", "This function should be called only once for each instance; it should not be called at all if a host was given when the instance was created.", "All other methods can only be used after a connection has been made.", "The optional timeout parameter specifies a timeout in seconds for the connection attempt.", "If no timeout is passed, the global default timeout setting will be used.", "source_address is a 2-tuple (host, port) for the socket to bind to as its source address before connecting."]}
{"index": 2455, "name": "ftplib.FTP.getwelcome", "module": "ftplib", "doc": ["Return the welcome message sent by the server in reply to the initial connection.", "(This message sometimes contains disclaimers or help information that may be relevant to the user.)"]}
{"index": 2456, "name": "ftplib.FTP.login", "module": "ftplib", "doc": ["Log in as the given user.", "The passwd and acct parameters are optional and default to the empty string.", "If no user is specified, it defaults to 'anonymous'.", "If user is 'anonymous', the default passwd is 'anonymous@'.", "This function should be called only once for each instance, after a connection has been established; it should not be called at all if a host and user were given when the instance was created.", "Most FTP commands are only allowed after the client has logged in.", "The acct parameter supplies \u201caccounting information\u201d; few systems implement this."]}
{"index": 2457, "name": "ftplib.FTP.abort", "module": "ftplib", "doc": ["Abort a file transfer that is in progress.", "Using this does not always work, but it\u2019s worth a try."]}
{"index": 2458, "name": "ftplib.FTP.sendcmd", "module": "ftplib", "doc": ["Send a simple command string to the server and return the response string."]}
{"index": 2459, "name": "ftplib.FTP.voidcmd", "module": "ftplib", "doc": ["Send a simple command string to the server and handle the response.", "Return nothing if a response code corresponding to success (codes in the range 200\u2013299) is received.", "Raise error_reply otherwise."]}
{"index": 2460, "name": "ftplib.FTP.retrbinary", "module": "ftplib", "doc": ["Retrieve a file in binary transfer mode.", "cmd should be an appropriate RETR command: 'RETR filename'.", "The callback function is called for each block of data received, with a single bytes argument giving the data block.", "The optional blocksize argument specifies the maximum chunk size to read on the low-level socket object created to do the actual transfer (which will also be the largest size of the data blocks passed to callback).", "A reasonable default is chosen.", "rest means the same thing as in the transfercmd() method."]}
{"index": 2461, "name": "ftplib.FTP.retrlines", "module": "ftplib", "doc": ["Retrieve a file or directory listing in ASCII transfer mode.", "cmd should be an appropriate RETR command (see retrbinary()) or a command such as LIST or NLST (usually just the string 'LIST').", "LIST retrieves a list of files and information about those files.", "NLST retrieves a list of file names.", "The callback function is called for each line with a string argument containing the line with the trailing CRLF stripped.", "The default callback prints the line to sys.stdout."]}
{"index": 2462, "name": "ftplib.FTP.set_pasv", "module": "ftplib", "doc": ["Enable \u201cpassive\u201d mode if val is true, otherwise disable passive mode.", "Passive mode is on by default."]}
{"index": 2463, "name": "ftplib.FTP.storbinary", "module": "ftplib", "doc": ["Store a file in binary transfer mode.", "cmd should be an appropriate STOR command: \"STOR filename\".", "fp is a file object (opened in binary mode) which is read until EOF using its read() method in blocks of size blocksize to provide the data to be stored.", "The blocksize argument defaults to 8192.  callback is an optional single parameter callable that is called on each block of data after it is sent.", "rest means the same thing as in the transfercmd() method."]}
{"index": 2464, "name": "ftplib.FTP.storlines", "module": "ftplib", "doc": ["Store a file in ASCII transfer mode.", "cmd should be an appropriate STOR command (see storbinary()).", "Lines are read until EOF from the file object fp (opened in binary mode) using its readline() method to provide the data to be stored.", "callback is an optional single parameter callable that is called on each line after it is sent."]}
{"index": 2465, "name": "ftplib.FTP.transfercmd", "module": "ftplib", "doc": ["Initiate a transfer over the data connection.", "If the transfer is active, send an EPRT or  PORT command and the transfer command specified by cmd, and accept the connection.", "If the server is passive, send an EPSV or PASV command, connect to it, and start the transfer command.", "Either way, return the socket for the connection.", "If optional rest is given, a REST command is sent to the server, passing rest as an argument.", "rest is usually a byte offset into the requested file, telling the server to restart sending the file\u2019s bytes at the requested offset, skipping over the initial bytes.", "Note however that RFC 959 requires only that rest be a string containing characters in the printable range from ASCII code 33 to ASCII code 126.", "The transfercmd() method, therefore, converts rest to a string, but no check is performed on the string\u2019s contents.", "If the server does not recognize the REST command, an error_reply exception will be raised.", "If this happens, simply call transfercmd() without a rest argument."]}
{"index": 2466, "name": "ftplib.FTP.ntransfercmd", "module": "ftplib", "doc": ["Like transfercmd(), but returns a tuple of the data connection and the expected size of the data.", "If the expected size could not be computed, None will be returned as the expected size.", "cmd and rest means the same thing as in transfercmd()."]}
{"index": 2467, "name": "ftplib.FTP.mlsd", "module": "ftplib", "doc": ["List a directory in a standardized format by using MLSD command (RFC 3659).", "If path is omitted the current directory is assumed.", "facts is a list of strings representing the type of information desired (e.g.", "[\"type\", \"size\", \"perm\"]).", "Return a generator object yielding a tuple of two elements for every file found in path.", "First element is the file name, the second one is a dictionary containing facts about the file name.", "Content of this dictionary might be limited by the facts argument but server is not guaranteed to return all requested facts."]}
{"index": 2468, "name": "ftplib.FTP.nlst", "module": "ftplib", "doc": ["Return a list of file names as returned by the NLST command.", "The optional argument is a directory to list (default is the current server directory).", "Multiple arguments can be used to pass non-standard options to the NLST command."]}
{"index": 2469, "name": "ftplib.FTP.dir", "module": "ftplib", "doc": ["Produce a directory listing as returned by the LIST command, printing it to standard output.", "The optional argument is a directory to list (default is the current server directory).", "Multiple arguments can be used to pass non-standard options to the LIST command.", "If the last argument is a function, it is used as a callback function as for retrlines(); the default prints to sys.stdout.", "This method returns None."]}
{"index": 2470, "name": "ftplib.FTP.rename", "module": "ftplib", "doc": ["Rename file fromname on the server to toname."]}
{"index": 2471, "name": "ftplib.FTP.delete", "module": "ftplib", "doc": ["Remove the file named filename from the server.", "If successful, returns the text of the response, otherwise raises error_perm on permission errors or error_reply on other errors."]}
{"index": 2472, "name": "ftplib.FTP.cwd", "module": "ftplib", "doc": ["Set the current directory on the server."]}
{"index": 2473, "name": "ftplib.FTP.mkd", "module": "ftplib", "doc": ["Create a new directory on the server."]}
{"index": 2474, "name": "ftplib.FTP.pwd", "module": "ftplib", "doc": ["Return the pathname of the current directory on the server."]}
{"index": 2475, "name": "ftplib.FTP.rmd", "module": "ftplib", "doc": ["Remove the directory named dirname on the server."]}
{"index": 2476, "name": "ftplib.FTP.size", "module": "ftplib", "doc": ["Request the size of the file named filename on the server.", "On success, the size of the file is returned as an integer, otherwise None is returned.", "Note that the SIZE command is not  standardized, but is supported by many common server implementations."]}
{"index": 2477, "name": "ftplib.FTP.quit", "module": "ftplib", "doc": ["Send a QUIT command to the server and close the connection.", "This is the \u201cpolite\u201d way to close a connection, but it may raise an exception if the server responds with an error to the QUIT command.", "This implies a call to the close() method which renders the FTP instance useless for subsequent calls (see below)."]}
{"index": 2478, "name": "ftplib.FTP.close", "module": "ftplib", "doc": ["Close the connection unilaterally.", "This should not be applied to an already closed connection such as after a successful call to quit().", "After this call the FTP instance should not be used any more (after a call to close() or quit() you cannot reopen the connection by issuing another login() method)."]}
{"index": 2479, "name": "ftplib.FTP_TLS.ssl_version", "module": "ftplib", "doc": ["The SSL version to use (defaults to ssl.PROTOCOL_SSLv23)."]}
{"index": 2480, "name": "ftplib.FTP_TLS.auth", "module": "ftplib", "doc": ["Set up a secure control connection by using TLS or SSL, depending on what is specified in the ssl_version attribute."]}
{"index": 2481, "name": "ftplib.FTP_TLS.ccc", "module": "ftplib", "doc": ["Revert control channel back to plaintext.", "This can be useful to take advantage of firewalls that know how to handle NAT with non-secure FTP without opening fixed ports."]}
{"index": 2482, "name": "ftplib.FTP_TLS.prot_p", "module": "ftplib", "doc": ["Set up secure data connection."]}
{"index": 2483, "name": "ftplib.FTP_TLS.prot_c", "module": "ftplib", "doc": ["Set up clear text data connection."]}
{"index": 2484, "name": "abs", "module": "functions", "doc": ["Return the absolute value of a number.", "The argument may be an integer or a floating point number.", "If the argument is a complex number, its magnitude is returned."]}
{"index": 2485, "name": "all", "module": "functions", "doc": ["Return True if all elements of the iterable are true (or if the iterable is empty).", "Equivalent to:"]}
{"index": 2486, "name": "any", "module": "functions", "doc": ["Return True if any element of the iterable is true.", "If the iterable is empty, return False.", "Equivalent to:"]}
{"index": 2487, "name": "ascii", "module": "functions", "doc": ["As repr(), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr() using \\x, \\u or \\U escapes.", "This generates a string similar to that returned by repr() in Python 2."]}
{"index": 2488, "name": "bin", "module": "functions", "doc": ["Convert an integer number to a binary string prefixed with \u201c0b\u201d.", "The result is a valid Python expression.", "If x is not a Python int object, it has to define an __index__() method that returns an integer.", "Some examples:", "If prefix \u201c0b\u201d is desired or not, you can use either of the following ways.", "See also format() for more information."]}
{"index": 2489, "name": "bool", "module": "functions", "doc": ["Return a Boolean value, i.e.", "one of True or False.", "x is converted using the standard truth testing procedure.", "If x is false or omitted, this returns False; otherwise it returns True.", "The bool class is a subclass of int (see Numeric Types \u2014 int, float, complex).", "It cannot be subclassed further.", "Its only instances are False and True (see Boolean Values)."]}
{"index": 2490, "name": "breakpoint", "module": "functions", "doc": ["This function drops you into the debugger at the call site.", "Specifically, it calls sys.breakpointhook(), passing args and kws straight through.", "By default, sys.breakpointhook() calls pdb.set_trace() expecting no arguments.", "In this case, it is purely a convenience function so you don\u2019t have to explicitly import pdb or type as much code to enter the debugger.", "However, sys.breakpointhook() can be set to some other function and breakpoint() will automatically call that, allowing you to drop into the debugger of choice."]}
{"index": 2491, "name": "callable", "module": "functions", "doc": ["Return True if the object argument appears callable, False if not.", "If this returns true, it is still possible that a call fails, but if it is false, calling object will never succeed.", "Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a __call__() method."]}
{"index": 2492, "name": "chr", "module": "functions", "doc": ["Return the string representing a character whose Unicode code point is the integer i.", "For example, chr(97) returns the string 'a', while chr(8364) returns the string '\u20ac'.", "This is the inverse of ord().", "The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16).", "ValueError will be raised if i is outside that range."]}
{"index": 2493, "name": "classmethod", "module": "functions", "doc": ["Transform a method into a class method.", "A class method receives the class as implicit first argument, just like an instance method receives the instance.", "To declare a class method, use this idiom:", "The @classmethod form is a function decorator \u2013 see Function definitions for details.", "A class method can be called either on the class (such as C.f()) or on an instance (such as C().f()).", "The instance is ignored except for its class.", "If a class method is called for a derived class, the derived class object is passed as the implied first argument.", "Class methods are different than C++ or Java static methods.", "If you want those, see staticmethod().", "For more information on class methods, see The standard type hierarchy."]}
{"index": 2494, "name": "compile", "module": "functions", "doc": ["Compile the source into a code or AST object.", "Code objects can be executed by exec() or eval().", "source can either be a normal string, a byte string, or an AST object.", "Refer to the ast module documentation for information on how to work with AST objects.", "The filename argument should give the file from which the code was read; pass some recognizable value if it wasn\u2019t read from a file ('<string>' is commonly used).", "The mode argument specifies what kind of code must be compiled; it can be 'exec' if source consists of a sequence of statements, 'eval' if it consists of a single expression, or 'single' if it consists of a single interactive statement (in the latter case, expression statements that evaluate to something other than None will be printed).", "The optional arguments flags and dont_inherit control which future statements affect the compilation of source.", "If neither is present (or both are zero) the code is compiled with those future statements that are in effect in the code that is calling compile().", "If the flags argument is given and dont_inherit is not (or is zero) then the future statements specified by the flags argument are used in addition to those that would be used anyway.", "If dont_inherit is a non-zero integer then the flags argument is it \u2013 the future statements in effect around the call to compile are ignored.", "Future statements are specified by bits which can be bitwise ORed together to specify multiple statements.", "The bitfield required to specify a given feature can be found as the compiler_flag attribute on the _Feature instance in the __future__ module.", "The argument optimize specifies the optimization level of the compiler; the default value of -1 selects the optimization level of the interpreter as given by -O options.", "Explicit levels are 0 (no optimization; __debug__ is true), 1 (asserts are removed, __debug__ is false) or 2 (docstrings are removed too).", "This function raises SyntaxError if the compiled source is invalid, and ValueError if the source contains null bytes.", "If you want to parse Python code into its AST representation, see ast.parse()."]}
{"index": 2495, "name": "complex", "module": "functions", "doc": ["Return a complex number with the value real + imag*1j or convert a string or number to a complex number.", "If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter.", "The second parameter can never be a string.", "Each argument may be any numeric type (including complex).", "If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float.", "If both arguments are omitted, returns 0j.", "The complex type is described in Numeric Types \u2014 int, float, complex."]}
{"index": 2496, "name": "delattr", "module": "functions", "doc": ["This is a relative of setattr().", "The arguments are an object and a string.", "The string must be the name of one of the object\u2019s attributes.", "The function deletes the named attribute, provided the object allows it.", "For example, delattr(x, 'foobar') is equivalent to del x.foobar."]}
{"index": 2497, "name": "dir", "module": "functions", "doc": ["Without arguments, return the list of names in the current local scope.", "With an argument, attempt to return a list of valid attributes for that object.", "If the object has a method named __dir__(), this method will be called and must return the list of attributes.", "This allows objects that implement a custom __getattr__() or __getattribute__() function to customize the way dir() reports their attributes.", "If the object does not provide __dir__(), the function tries its best to gather information from the object\u2019s __dict__ attribute, if defined, and from its type object.", "The resulting list is not necessarily complete, and may be inaccurate when the object has a custom __getattr__().", "The default dir() mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information:", "The resulting list is sorted alphabetically.", "For example:"]}
{"index": 2498, "name": "divmod", "module": "functions", "doc": ["Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division.", "With mixed operand types, the rules for binary arithmetic operators apply.", "For integers, the result is the same as (a // b, a % b).", "For floating point numbers the result is (q, a % b), where q is usually math.floor(a / b) but may be 1 less than that.", "In any case q * b + a % b is very close to a, if a % b is non-zero it has the same sign as b, and 0 <= abs(a % b) < abs(b)."]}
{"index": 2499, "name": "enumerate", "module": "functions", "doc": ["Return an enumerate object.", "iterable must be a sequence, an iterator, or some other object which supports iteration.", "The __next__() method of the iterator returned by enumerate() returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable.", "Equivalent to:"]}
{"index": 2500, "name": "eval", "module": "functions", "doc": ["The arguments are a string and optional globals and locals.", "If provided, globals must be a dictionary.", "If provided, locals can be any mapping object.", "The expression argument is parsed and evaluated as a Python expression (technically speaking, a condition list) using the globals and locals dictionaries as global and local namespace.", "If the globals dictionary is present and does not contain a value for the key __builtins__, a reference to the dictionary of the built-in module builtins is inserted under that key before expression is parsed.", "This means that expression normally has full access to the standard builtins module and restricted environments are propagated.", "If the locals dictionary is omitted it defaults to the globals dictionary.", "If both dictionaries are omitted, the expression is executed in the environment where eval() is called.", "The return value is the result of the evaluated expression.", "Syntax errors are reported as exceptions.", "Example:", "This function can also be used to execute arbitrary code objects (such as those created by compile()).", "In this case pass a code object instead of a string.", "If the code object has been compiled with 'exec' as the mode argument, eval()\u2019s return value will be None.", "Hints: dynamic execution of statements is supported by the exec() function.", "The globals() and locals() functions returns the current global and local dictionary, respectively, which may be useful to pass around for use by eval() or exec().", "See ast.literal_eval() for a function that can safely evaluate strings with expressions containing only literals."]}
{"index": 2501, "name": "exec", "module": "functions", "doc": ["This function supports dynamic execution of Python code.", "object must be either a string or a code object.", "If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs).", "1 If it is a code object, it is simply executed.", "In all cases, the code that\u2019s executed is expected to be valid as file input (see the section \u201cFile input\u201d in the Reference Manual).", "Be aware that the return and yield statements may not be used outside of function definitions even within the context of code passed to the exec() function.", "The return value is None.", "In all cases, if the optional parts are omitted, the code is executed in the current scope.", "If only globals is provided, it must be a dictionary, which will be used for both the global and the local variables.", "If globals and locals are given, they are used for the global and local variables, respectively.", "If provided, locals can be any mapping object.", "Remember that at module level, globals and locals are the same dictionary.", "If exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition.", "If the globals dictionary does not contain a value for the key __builtins__, a reference to the dictionary of the built-in module builtins is inserted under that key.", "That way you can control what builtins are available to the executed code by inserting your own __builtins__ dictionary into globals before passing it to exec()."]}
{"index": 2502, "name": "filter", "module": "functions", "doc": ["Construct an iterator from those elements of iterable for which function returns true.", "iterable may be either a sequence, a container which supports iteration, or an iterator.", "If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.", "Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None and (item for item in iterable if item) if function is None.", "See itertools.filterfalse() for the complementary function that returns elements of iterable for which function returns false."]}
{"index": 2503, "name": "float", "module": "functions", "doc": ["Return a floating point number constructed from a number or string x.", "If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace.", "The optional sign may be '+' or '-'; a '+' sign has no effect on the value produced.", "The argument may also be a string representing a NaN (not-a-number), or a positive or negative infinity.", "More precisely, the input must conform to the following grammar after leading and trailing whitespace characters are removed:", "Here floatnumber is the form of a Python floating-point literal, described in Floating point literals.", "Case is not significant, so, for example, \u201cinf\u201d, \u201cInf\u201d, \u201cINFINITY\u201d and \u201ciNfINity\u201d are all acceptable spellings for positive infinity.", "Otherwise, if the argument is an integer or a floating point number, a floating point number with the same value (within Python\u2019s floating point precision) is returned.", "If the argument is outside the range of a Python float, an OverflowError will be raised.", "For a general Python object x, float(x) delegates to x.__float__().", "If no argument is given, 0.0 is returned.", "Examples:", "The float type is described in Numeric Types \u2014 int, float, complex."]}
{"index": 2504, "name": "format", "module": "functions", "doc": ["Convert a value to a \u201cformatted\u201d representation, as controlled by format_spec.", "The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: Format Specification Mini-Language.", "The default format_spec is an empty string which usually gives the same effect as calling str(value).", "A call to format(value, format_spec) is translated to type(value).__format__(value, format_spec) which bypasses the instance dictionary when searching for the value\u2019s __format__() method.", "A TypeError exception is raised if the method search reaches object and the format_spec is non-empty, or if either the format_spec or the return value are not strings."]}
{"index": 2505, "name": "getattr", "module": "functions", "doc": ["Return the value of the named attribute of object.", "name must be a string.", "If the string is the name of one of the object\u2019s attributes, the result is the value of that attribute.", "For example, getattr(x, 'foobar') is equivalent to x.foobar.", "If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised."]}
{"index": 2506, "name": "globals", "module": "functions", "doc": ["Return a dictionary representing the current global symbol table.", "This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called)."]}
{"index": 2507, "name": "hasattr", "module": "functions", "doc": ["The arguments are an object and a string.", "The result is True if the string is the name of one of the object\u2019s attributes, False if not.", "(This is implemented by calling getattr(object, name) and seeing whether it raises an AttributeError or not.)"]}
{"index": 2508, "name": "hash", "module": "functions", "doc": ["Return the hash value of the object (if it has one).", "Hash values are integers.", "They are used to quickly compare dictionary keys during a dictionary lookup.", "Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0)."]}
{"index": 2509, "name": "help", "module": "functions", "doc": ["Invoke the built-in help system.", "(This function is intended for interactive use.)", "If no argument is given, the interactive help system starts on the interpreter console.", "If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console.", "If the argument is any other kind of object, a help page on the object is generated.", "Note that if a slash(/) appears in the parameter list of a function, when invoking help(), it means that the parameters prior to the slash are positional-only.", "For more info, see the FAQ entry on positional-only parameters.", "This function is added to the built-in namespace by the site module."]}
{"index": 2510, "name": "hex", "module": "functions", "doc": ["Convert an integer number to a lowercase hexadecimal string prefixed with \u201c0x\u201d.", "If x is not a Python int object, it has to define an __index__() method that returns an integer.", "Some examples:", "If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways:", "See also format() for more information.", "See also int() for converting a hexadecimal string to an integer using a base of 16."]}
{"index": 2511, "name": "id", "module": "functions", "doc": ["Return the \u201cidentity\u201d of an object.", "This is an integer which is guaranteed to be unique and constant for this object during its lifetime.", "Two objects with non-overlapping lifetimes may have the same id() value."]}
{"index": 2512, "name": "input", "module": "functions", "doc": ["If the prompt argument is present, it is written to standard output without a trailing newline.", "The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that.", "When EOF is read, EOFError is raised.", "Example:", "If the readline module was loaded, then input() will use it to provide elaborate line editing and history features."]}
{"index": 2513, "name": "int", "module": "functions", "doc": ["Return an integer object constructed from a number or string x, or return 0 if no arguments are given.", "If x defines __int__(), int(x) returns x.__int__().", "If x defines __trunc__(), it returns x.__trunc__().", "For floating point numbers, this truncates towards zero.", "If x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in radix base.", "Optionally, the literal can be preceded by + or - (with no space in between) and surrounded by whitespace.", "A base-n literal consists of the digits 0 to n-1, with a to z (or A to Z) having values 10 to 35.", "The default base is 10.", "The allowed values are 0 and 2\u201336.", "Base-2, -8, and -16 literals can be optionally prefixed with 0b/0B, 0o/0O, or 0x/0X, as with integer literals in code.", "Base 0 means to interpret exactly as a code literal, so that the actual base is 2, 8, 10, or 16, and so that int('010', 0) is not legal, while int('010') is, as well as int('010', 8).", "The integer type is described in Numeric Types \u2014 int, float, complex."]}
{"index": 2514, "name": "isinstance", "module": "functions", "doc": ["Return true if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual) subclass thereof.", "If object is not an object of the given type, the function always returns false.", "If classinfo is a tuple of type objects (or recursively, other such tuples), return true if object is an instance of any of the types.", "If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised."]}
{"index": 2515, "name": "issubclass", "module": "functions", "doc": ["Return true if class is a subclass (direct, indirect or virtual) of classinfo.", "A class is considered a subclass of itself.", "classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked.", "In any other case, a TypeError exception is raised."]}
{"index": 2516, "name": "iter", "module": "functions", "doc": ["Return an iterator object.", "The first argument is interpreted very differently depending on the presence of the second argument.", "Without a second argument, object must be a collection object which supports the iteration protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0).", "If it does not support either of those protocols, TypeError is raised.", "If the second argument, sentinel, is given, then object must be a callable object.", "The iterator created in this case will call object with no arguments for each call to its __next__() method; if the value returned is equal to sentinel, StopIteration will be raised, otherwise the value will be returned.", "See also Iterator Types.", "One useful application of the second form of iter() is to build a block-reader.", "For example, reading fixed-width blocks from a binary database file until the end of file is reached:"]}
{"index": 2517, "name": "len", "module": "functions", "doc": ["Return the length (the number of items) of an object.", "The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set)."]}
{"index": 2518, "name": "locals", "module": "functions", "doc": ["Update and return a dictionary representing the current local symbol table.", "Free variables are returned by locals() when it is called in function blocks, but not in class blocks.", "Note that at the module level, locals() and globals() are the same dictionary."]}
{"index": 2519, "name": "map", "module": "functions", "doc": ["Return an iterator that applies function to every item of iterable, yielding the results.", "If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel.", "With multiple iterables, the iterator stops when the shortest iterable is exhausted.", "For cases where the function inputs are already arranged into argument tuples, see itertools.starmap()."]}
{"index": 2520, "name": "max", "module": "functions", "doc": ["Return the largest item in an iterable or the largest of two or more arguments.", "If one positional argument is provided, it should be an iterable.", "The largest item in the iterable is returned.", "If two or more positional arguments are provided, the largest of the positional arguments is returned.", "There are two optional keyword-only arguments.", "The key argument specifies a one-argument ordering function like that used for list.sort().", "The default argument specifies an object to return if the provided iterable is empty.", "If the iterable is empty and default is not provided, a ValueError is raised.", "If multiple items are maximal, the function returns the first one encountered.", "This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and heapq.nlargest(1, iterable, key=keyfunc)."]}
{"index": 2521, "name": "min", "module": "functions", "doc": ["Return the smallest item in an iterable or the smallest of two or more arguments.", "If one positional argument is provided, it should be an iterable.", "The smallest item in the iterable is returned.", "If two or more positional arguments are provided, the smallest of the positional arguments is returned.", "There are two optional keyword-only arguments.", "The key argument specifies a one-argument ordering function like that used for list.sort().", "The default argument specifies an object to return if the provided iterable is empty.", "If the iterable is empty and default is not provided, a ValueError is raised.", "If multiple items are minimal, the function returns the first one encountered.", "This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc)[0] and heapq.nsmallest(1, iterable, key=keyfunc)."]}
{"index": 2522, "name": "next", "module": "functions", "doc": ["Retrieve the next item from the iterator by calling its __next__() method.", "If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised."]}
{"index": 2523, "name": "object", "module": "functions", "doc": ["Return a new featureless object.", "object is a base for all classes.", "It has the methods that are common to all instances of Python classes.", "This function does not accept any arguments."]}
{"index": 2524, "name": "oct", "module": "functions", "doc": ["Convert an integer number to an octal string prefixed with \u201c0o\u201d.", "The result is a valid Python expression.", "If x is not a Python int object, it has to define an __index__() method that returns an integer.", "For example:", "If you want to convert an integer number to octal string either with prefix \u201c0o\u201d or not, you can use either of the following ways.", "See also format() for more information."]}
{"index": 2525, "name": "open", "module": "functions", "doc": ["Open file and return a corresponding file object.", "If the file cannot be opened, an OSError is raised.", "file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped.", "(If a file descriptor is given, it is closed when the returned I/O object is closed, unless closefd is set to False.)", "mode is an optional string that specifies the mode in which the file is opened.", "It defaults to 'r' which means open for reading in text mode.", "Other common values are 'w' for writing (truncating the file if it already exists), 'x' for exclusive creation and 'a' for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position).", "In text mode, if encoding is not specified the encoding used is platform dependent: locale.getpreferredencoding(False) is called to get the current locale encoding.", "(For reading and writing raw bytes use binary mode and leave encoding unspecified.)", "The available modes are:", "The default mode is 'r' (open for reading text, synonym of 'rt').", "For binary read-write access, the mode 'w+b' opens and truncates the file to 0 bytes.", "'r+b' opens the file without truncation.", "As mentioned in the Overview, Python distinguishes between binary and text I/O.", "Files opened in binary mode (including 'b' in the mode argument) return contents as bytes objects without any decoding.", "In text mode (the default, or when 't' is included in the mode argument), the contents of the file are returned as str, the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given.", "There is an additional mode character permitted, 'U', which no longer has any effect, and is considered deprecated.", "It previously enabled universal newlines in text mode, which became the default behaviour in Python 3.0.", "Refer to the documentation of the newline parameter for further details.", "buffering is an optional integer used to set the buffering policy.", "Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer.", "When no buffering argument is given, the default buffering policy works as follows:", "encoding is the name of the encoding used to decode or encode the file.", "This should only be used in text mode.", "The default encoding is platform dependent (whatever locale.getpreferredencoding() returns), but any text encoding supported by Python can be used.", "See the codecs module for the list of supported encodings.", "errors is an optional string that specifies how encoding and decoding errors are to be handled\u2014this cannot be used in binary mode.", "A variety of standard error handlers are available (listed under Error Handlers), though any error handling name that has been registered with codecs.register_error() is also valid.", "The standard names include:", "newline controls how universal newlines mode works (it only applies to text mode).", "It can be None, '', '\\n', '\\r', and '\\r\\n'.", "It works as follows:", "If closefd is False and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed.", "If a filename is given closefd must be True (the default) otherwise an error will be raised.", "A custom opener can be used by passing a callable as opener.", "The underlying file descriptor for the file object is then obtained by calling opener with (file, flags).", "opener must return an open file descriptor (passing os.open as opener results in functionality similar to passing None).", "The newly created file is non-inheritable.", "The following example uses the dir_fd parameter of the os.open() function to open a file relative to a given directory:", "The type of file object returned by the open() function depends on the mode.", "When open() is used to open a file in a text mode ('w', 'r', 'wt', 'rt', etc.", "), it returns a subclass of io.TextIOBase (specifically io.TextIOWrapper).", "When used to open a file in a binary mode with buffering, the returned class is a subclass of io.BufferedIOBase.", "The exact class varies: in read binary mode, it returns an io.BufferedReader; in write binary and append binary modes, it returns an io.BufferedWriter, and in read/write mode, it returns an io.BufferedRandom.", "When buffering is disabled, the raw stream, a subclass of io.RawIOBase, io.FileIO, is returned.", "See also the file handling modules, such as, fileinput, io (where open() is declared), os, os.path, tempfile, and shutil."]}
{"index": 2526, "name": "ord", "module": "functions", "doc": ["Given a string representing one Unicode character, return an integer representing the Unicode code point of that character.", "For example, ord('a') returns the integer 97 and ord('\u20ac') (Euro sign) returns 8364.", "This is the inverse of chr()."]}
{"index": 2527, "name": "pow", "module": "functions", "doc": ["Return x to the power y; if z is present, return x to the power y, modulo z (computed more efficiently than pow(x, y) % z).", "The two-argument form pow(x, y) is equivalent to using the power operator: x**y.", "The arguments must have numeric types.", "With mixed operand types, the coercion rules for binary arithmetic operators apply.", "For int operands, the result has the same type as the operands (after coercion) unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered.", "For example, 10**2 returns 100, but 10**-2 returns 0.01.", "If the second argument is negative, the third argument must be omitted.", "If z is present, x and y must be of integer types, and y must be non-negative."]}
{"index": 2528, "name": "print", "module": "functions", "doc": ["Print objects to the text stream file, separated by sep and followed by end.", "sep, end, file and flush, if present, must be given as keyword arguments.", "All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end.", "Both sep and end must be strings; they can also be None, which means to use the default values.", "If no objects are given, print() will just write end.", "The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used.", "Since printed arguments are converted to text strings, print() cannot be used with binary mode file objects.", "For these, use file.write(...) instead.", "Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed."]}
{"index": 2529, "name": "", "module": "functions", "doc": ["Return a property attribute.", "fget is a function for getting an attribute value.", "fset is a function for setting an attribute value.", "fdel is a function for deleting an attribute value.", "And doc creates a docstring for the attribute.", "A typical use is to define a managed attribute x:", "If c is an instance of C, c.x will invoke the getter, c.x = value will invoke the setter and del c.x the deleter.", "If given, doc will be the docstring of the property attribute.", "Otherwise, the property will copy fget\u2019s docstring (if it exists).", "This makes it possible to create read-only properties easily using property() as a decorator:", "The @property decorator turns the voltage() method into a \u201cgetter\u201d for a read-only attribute with the same name, and it sets the docstring for voltage to \u201cGet the current voltage.\u201d", "A property object has getter, setter, and deleter methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function.", "This is best explained with an example:", "This code is exactly equivalent to the first example.", "Be sure to give the additional functions the same name as the original property (x in this case.)", "The returned property object also has the attributes fget, fset, and fdel corresponding to the constructor arguments."]}
{"index": 2530, "name": "repr", "module": "functions", "doc": ["Return a string containing a printable representation of an object.", "For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object.", "A class can control what this function returns for its instances by defining a __repr__() method."]}
{"index": 2531, "name": "reversed", "module": "functions", "doc": ["Return a reverse iterator.", "seq must be an object which has a __reversed__() method or supports the sequence protocol (the __len__() method and the __getitem__() method with integer arguments starting at 0)."]}
{"index": 2532, "name": "round", "module": "functions", "doc": ["Return number rounded to ndigits precision after the decimal point.", "If ndigits is omitted or is None, it returns the nearest integer to its input.", "For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus ndigits; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2).", "Any integer value is valid for ndigits (positive, zero, or negative).", "The return value is an integer if ndigits is omitted or None.", "Otherwise the return value has the same type as number.", "For a general Python object number, round delegates to number.__round__."]}
{"index": 2533, "name": "setattr", "module": "functions", "doc": ["This is the counterpart of getattr().", "The arguments are an object, a string and an arbitrary value.", "The string may name an existing attribute or a new attribute.", "The function assigns the value to the attribute, provided the object allows it.", "For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123."]}
{"index": 2534, "name": "slice", "module": "functions", "doc": ["Return a slice object representing the set of indices specified by range(start, stop, step).", "The start and step arguments default to None.", "Slice objects have read-only data attributes start, stop and step which merely return the argument values (or their default).", "They have no other explicit functionality; however they are used by Numerical Python and other third party extensions.", "Slice objects are also generated when extended indexing syntax is used.", "For example: a[start:stop:step] or a[start:stop, i].", "See itertools.islice() for an alternate version that returns an iterator."]}
{"index": 2535, "name": "sorted", "module": "functions", "doc": ["Return a new sorted list from the items in iterable.", "Has two optional arguments which must be specified as keyword arguments.", "key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower).", "The default value is None (compare the elements directly).", "reverse is a boolean value.", "If set to True, then the list elements are sorted as if each comparison were reversed.", "Use functools.cmp_to_key() to convert an old-style cmp function to a key function.", "The built-in sorted() function is guaranteed to be stable.", "A sort is stable if it guarantees not to change the relative order of elements that compare equal \u2014 this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).", "For sorting examples and a brief sorting tutorial, see Sorting HOW TO."]}
{"index": 2536, "name": "staticmethod", "module": "functions", "doc": ["Transform a method into a static method.", "A static method does not receive an implicit first argument.", "To declare a static method, use this idiom:", "The @staticmethod form is a function decorator \u2013 see Function definitions for details.", "A static method can be called either on the class (such as C.f()) or on an instance (such as C().f()).", "Static methods in Python are similar to those found in Java or C++.", "Also see classmethod() for a variant that is useful for creating alternate class constructors.", "Like all decorators, it is also possible to call staticmethod as a regular function and do something with its result.", "This is needed in some cases where you need a reference to a function from a class body and you want to avoid the automatic transformation to instance method.", "For these cases, use this idiom:", "For more information on static methods, see The standard type hierarchy."]}
{"index": 2537, "name": "sum", "module": "functions", "doc": ["Sums start and the items of an iterable from left to right and returns the total.", "start defaults to 0.", "The iterable\u2019s items are normally numbers, and the start value is not allowed to be a string.", "For some use cases, there are good alternatives to sum().", "The preferred, fast way to concatenate a sequence of strings is by calling ''.join(sequence).", "To add floating point values with extended precision, see math.fsum().", "To concatenate a series of iterables, consider using itertools.chain()."]}
{"index": 2538, "name": "super", "module": "functions", "doc": ["Return a proxy object that delegates method calls to a parent or sibling class of type.", "This is useful for accessing inherited methods that have been overridden in a class.", "The search order is same as that used by getattr() except that the type itself is skipped.", "The __mro__ attribute of the type lists the method resolution search order used by both getattr() and super().", "The attribute is dynamic and can change whenever the inheritance hierarchy is updated.", "If the second argument is omitted, the super object returned is unbound.", "If the second argument is an object, isinstance(obj, type) must be true.", "If the second argument is a type, issubclass(type2, type) must be true (this is useful for classmethods).", "There are two typical use cases for super.", "In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable.", "This use closely parallels the use of super in other programming languages.", "The second use case is to support cooperative multiple inheritance in a dynamic execution environment.", "This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance.", "This makes it possible to implement \u201cdiamond diagrams\u201d where multiple base classes implement the same method.", "Good design dictates that this method have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime).", "For both use cases, a typical superclass call looks like this:", "In addition to method lookups, super() also works for attribute lookups.", "One possible use case for this is calling descriptors in a parent or sibling class.", "Note that super() is implemented as part of the binding process for explicit dotted attribute lookups such as super().__getitem__(name).", "It does so by implementing its own __getattribute__() method for searching classes in a predictable order that supports cooperative multiple inheritance.", "Accordingly, super() is undefined for implicit lookups using statements or operators such as super()[name].", "Also note that, aside from the zero argument form, super() is not limited to use inside methods.", "The two argument form specifies the arguments exactly and makes the appropriate references.", "The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.", "For practical suggestions on how to design cooperative classes using super(), see guide to using super()."]}
{"index": 2539, "name": "type", "module": "functions", "doc": ["With one argument, return the type of an object.", "The return value is a type object and generally the same object as returned by object.__class__.", "The isinstance() built-in function is recommended for testing the type of an object, because it takes subclasses into account.", "With three arguments, return a new type object.", "This is essentially a dynamic form of the class statement.", "The name string is the class name and becomes the __name__ attribute; the bases tuple itemizes the base classes and becomes the __bases__ attribute; and the dict dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the __dict__ attribute.", "For example, the following two statements create identical type objects:", "See also Type Objects."]}
{"index": 2540, "name": "vars", "module": "functions", "doc": ["Return the __dict__ attribute for a module, class, instance, or any other object with a __dict__ attribute.", "Objects such as modules and instances have an updateable __dict__ attribute; however, other objects may have write restrictions on their __dict__ attributes (for example, classes use a types.MappingProxyType to prevent direct dictionary updates).", "Without an argument, vars() acts like locals().", "Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored."]}
{"index": 2541, "name": "zip", "module": "functions", "doc": ["Make an iterator that aggregates elements from each of the iterables.", "Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.", "The iterator stops when the shortest input iterable is exhausted.", "With a single iterable argument, it returns an iterator of 1-tuples.", "With no arguments, it returns an empty iterator.", "Equivalent to:", "The left-to-right evaluation order of the iterables is guaranteed.", "This makes possible an idiom for clustering a data series into n-length groups using zip(*[iter(s)]*n).", "This repeats the same iterator n times so that each output tuple has the result of n calls to the iterator.", "This has the effect of dividing the input into n-length chunks.", "zip() should only be used with unequal length inputs when you don\u2019t care about trailing, unmatched values from the longer iterables.", "If those values are important, use itertools.zip_longest() instead.", "zip() in conjunction with the * operator can be used to unzip a list:"]}
{"index": 2542, "name": "import__", "module": "functions", "doc": ["This function is invoked by the import statement.", "It can be replaced (by importing the builtins module and assigning to builtins.__import__) in order to change semantics of the import statement, but doing so is strongly discouraged as it is usually simpler to use import hooks (see PEP 302) to attain the same goals and does not cause issues with code which assumes the default import implementation is in use.", "Direct use of __import__() is also discouraged in favor of importlib.import_module().", "The function imports the module name, potentially using the given globals and locals to determine how to interpret the name in a package context.", "The fromlist gives the names of objects or submodules that should be imported from the module given by name.", "The standard implementation does not use its locals argument at all, and uses its globals only to determine the package context of the import statement.", "level specifies whether to use absolute or relative imports.", "0 (the default) means only perform absolute imports.", "Positive values for level indicate the number of parent directories to search relative to the directory of the module calling __import__() (see PEP 328 for the details).", "When the name variable is of the form package.module, normally, the top-level package (the name up till the first dot) is returned, not the module named by name.", "However, when a non-empty fromlist argument is given, the module named by name is returned.", "For example, the statement import spam results in bytecode resembling the following code:", "The statement import spam.ham results in this call:", "Note how __import__() returns the toplevel module here because this is the object that is bound to a name by the import statement.", "On the other hand, the statement from spam.ham import eggs, sausage as saus results in", "Here, the spam.ham module is returned from __import__().", "From this object, the names to import are retrieved and assigned to their respective names.", "If you simply want to import a module (potentially within a package) by name, use importlib.import_module()."]}
{"index": 2543, "name": "id2", "module": "functions", "doc": ["Note that the parser only accepts the Unix-style end of line convention.", "If you are reading the code from a file, make sure to use newline conversion mode to convert Windows or Mac-style newlines."]}
{"index": 2544, "name": "functools.cmp_to_key", "module": "functools", "doc": ["Transform an old-style comparison function to a key function.", "Used with tools that accept key functions (such as sorted(), min(), max(), heapq.nlargest(), heapq.nsmallest(), itertools.groupby()).", "This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.", "A comparison function is any callable that accept two arguments, compares them, and returns a negative number for less-than, zero for equality, or a positive number for greater-than.", "A key function is a callable that accepts one argument and returns another value to be used as the sort key.", "Example:", "For sorting examples and a brief sorting tutorial, see Sorting HOW TO."]}
{"index": 2545, "name": "functools.lru_cache", "module": "functools", "doc": ["Decorator to wrap a function with a memoizing callable that saves up to the maxsize most recent calls.", "It can save time when an expensive or I/O bound function is periodically called with the same arguments.", "Since a dictionary is used to cache results, the positional and keyword arguments to the function must be hashable.", "Distinct argument patterns may be considered to be distinct calls with separate cache entries.", "For example, f(a=1, b=2) and f(b=2, a=1) differ in their keyword argument order and may have two separate cache entries.", "If maxsize is set to None, the LRU feature is disabled and the cache can grow without bound.", "The LRU feature performs best when maxsize is a power-of-two.", "If typed is set to true, function arguments of different types will be cached separately.", "For example, f(3) and f(3.0) will be treated as distinct calls with distinct results.", "To help measure the effectiveness of the cache and tune the maxsize parameter, the wrapped function is instrumented with a cache_info() function that returns a named tuple showing hits, misses, maxsize and currsize.", "In a multi-threaded environment, the hits and misses are approximate.", "The decorator also provides a cache_clear() function for clearing or invalidating the cache.", "The original underlying function is accessible through the __wrapped__ attribute.", "This is useful for introspection, for bypassing the cache, or for rewrapping the function with a different cache.", "An LRU (least recently used) cache works best when the most recent calls are the best predictors of upcoming calls (for example, the most popular articles on a news server tend to change each day).", "The cache\u2019s size limit assures that the cache does not grow without bound on long-running processes such as web servers.", "In general, the LRU cache should only be used when you want to reuse previously computed values.", "Accordingly, it doesn\u2019t make sense to cache functions with side-effects, functions that need to create distinct mutable objects on each call, or impure functions such as time() or random().", "Example of an LRU cache for static web content:", "Example of efficiently computing Fibonacci numbers using a cache to implement a dynamic programming technique:"]}
{"index": 2546, "name": "functools.total_ordering", "module": "functools", "doc": ["Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest.", "This simplifies the effort involved in specifying all of the possible rich comparison operations:", "The class must define one of __lt__(), __le__(), __gt__(), or __ge__().", "In addition, the class should supply an __eq__() method.", "For example:"]}
{"index": 2547, "name": "functools.partial", "module": "functools", "doc": ["Return a new partial object which when called will behave like func called with the positional arguments args and keyword arguments keywords.", "If more arguments are supplied to the call, they are appended to args.", "If additional keyword arguments are supplied, they extend and override keywords.", "Roughly equivalent to:", "The partial() is used for partial function application which \u201cfreezes\u201d some portion of a function\u2019s arguments and/or keywords resulting in a new object with a simplified signature.", "For example, partial() can be used to create a callable that behaves like the int() function where the base argument defaults to two:"]}
{"index": 2548, "name": "functools.partialmethod", "module": "functools", "doc": ["Return a new partialmethod descriptor which behaves like partial except that it is designed to be used as a method definition rather than being directly callable.", "func must be a descriptor or a callable (objects which are both, like normal functions, are handled as descriptors).", "When func is a descriptor (such as a normal Python function, classmethod(), staticmethod(), abstractmethod() or another instance of partialmethod), calls to __get__ are delegated to the underlying descriptor, and an appropriate partial object returned as the result.", "When func is a non-descriptor callable, an appropriate bound method is created dynamically.", "This behaves like a normal Python function when used as a method: the self argument will be inserted as the first positional argument, even before the args and keywords supplied to the partialmethod constructor.", "Example:"]}
{"index": 2549, "name": "functools.reduce", "module": "functools", "doc": ["Apply function of two arguments cumulatively to the items of sequence, from left to right, so as to reduce the sequence to a single value.", "For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5).", "The left argument, x, is the accumulated value and the right argument, y, is the update value from the sequence.", "If the optional initializer is present, it is placed before the items of the sequence in the calculation, and serves as a default when the sequence is empty.", "If initializer is not given and sequence contains only one item, the first item is returned.", "Roughly equivalent to:"]}
{"index": 2550, "name": "functools.singledispatch", "module": "functools", "doc": ["Transform a function into a single-dispatch generic function.", "To define a generic function, decorate it with the @singledispatch decorator.", "Note that the dispatch happens on the type of the first argument, create your function accordingly:", "To add overloaded implementations to the function, use the register() attribute of the generic function.", "It is a decorator.", "For functions annotated with types, the decorator will infer the type of the first argument automatically:", "For code which doesn\u2019t use type annotations, the appropriate type argument can be passed explicitly to the decorator itself:", "To enable registering lambdas and pre-existing functions, the register() attribute can be used in a functional form:", "The register() attribute returns the undecorated function which enables decorator stacking, pickling, as well as creating unit tests for each variant independently:", "When called, the generic function dispatches on the type of the first argument:", "Where there is no registered implementation for a specific type, its method resolution order is used to find a more generic implementation.", "The original function decorated with @singledispatch is registered for the base object type, which means it is used if no better implementation is found.", "To check which implementation will the generic function choose for a given type, use the dispatch() attribute:", "To access all registered implementations, use the read-only registry attribute:"]}
{"index": 2551, "name": "functools.update_wrapper", "module": "functools", "doc": ["Update a wrapper function to look like the wrapped function.", "The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function.", "The default values for these arguments are the module level constants WRAPPER_ASSIGNMENTS (which assigns to the wrapper function\u2019s __module__, __name__, __qualname__, __annotations__ and __doc__, the documentation string) and WRAPPER_UPDATES (which updates the wrapper function\u2019s __dict__, i.e.", "the instance dictionary).", "To allow access to the original function for introspection and other purposes (e.g.", "bypassing a caching decorator such as lru_cache()), this function automatically adds a __wrapped__ attribute to the wrapper that refers to the function being wrapped.", "The main intended use for this function is in decorator functions which wrap the decorated function and return the wrapper.", "If the wrapper function is not updated, the metadata of the returned function will reflect the wrapper definition rather than the original function definition, which is typically less than helpful.", "update_wrapper() may be used with callables other than functions.", "Any attributes named in assigned or updated that are missing from the object being wrapped are ignored (i.e.", "this function will not attempt to set them on the wrapper function).", "AttributeError is still raised if the wrapper function itself is missing any attributes named in updated."]}
{"index": 2552, "name": "functools.wraps", "module": "functools", "doc": ["This is a convenience function for invoking update_wrapper() as a function decorator when defining a wrapper function.", "It is equivalent to partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated).", "For example:", "Without the use of this decorator factory, the name of the example function would have been 'wrapper', and the docstring of the original example() would have been lost."]}
{"index": 2553, "name": "functools.partial.func", "module": "functools", "doc": ["A callable object or function.", "Calls to the partial object will be forwarded to func with new arguments and keywords."]}
{"index": 2554, "name": "functools.partial.args", "module": "functools", "doc": ["The leftmost positional arguments that will be prepended to the positional arguments provided to a partial object call."]}
{"index": 2555, "name": "functools.partial.keywords", "module": "functools", "doc": ["The keyword arguments that will be supplied when the partial object is called."]}
{"index": 2556, "name": "gc.enable", "module": "gc", "doc": ["Enable automatic garbage collection."]}
{"index": 2557, "name": "gc.disable", "module": "gc", "doc": ["Disable automatic garbage collection."]}
{"index": 2558, "name": "gc.isenabled", "module": "gc", "doc": ["Returns true if automatic collection is enabled."]}
{"index": 2559, "name": "gc.collect", "module": "gc", "doc": ["With no arguments, run a full collection.", "The optional argument generation may be an integer specifying which generation to collect (from 0 to 2).", "A ValueError is raised if the generation number  is invalid.", "The number of unreachable objects found is returned.", "The free lists maintained for a number of built-in types are cleared whenever a full collection or collection of the highest generation (2) is run.", "Not all items in some free lists may be freed due to the particular implementation, in particular float."]}
{"index": 2560, "name": "gc.set_debug", "module": "gc", "doc": ["Set the garbage collection debugging flags.", "Debugging information will be written to sys.stderr.", "See below for a list of debugging flags which can be combined using bit operations to control debugging."]}
{"index": 2561, "name": "gc.get_debug", "module": "gc", "doc": ["Return the debugging flags currently set."]}
{"index": 2562, "name": "gc.get_objects", "module": "gc", "doc": ["Returns a list of all objects tracked by the collector, excluding the list returned."]}
{"index": 2563, "name": "gc.get_stats", "module": "gc", "doc": ["Return a list of three per-generation dictionaries containing collection statistics since interpreter start.", "The number of keys may change in the future, but currently each dictionary will contain the following items:"]}
{"index": 2564, "name": "gc.set_threshold", "module": "gc", "doc": ["Set the garbage collection thresholds (the collection frequency).", "Setting threshold0 to zero disables collection.", "The GC classifies objects into three generations depending on how many collection sweeps they have survived.", "New objects are placed in the youngest generation (generation 0).", "If an object survives a collection it is moved into the next older generation.", "Since generation 2 is the oldest generation, objects in that generation remain there after a collection.", "In order to decide when to run, the collector keeps track of the number object allocations and deallocations since the last collection.", "When the number of allocations minus the number of deallocations exceeds threshold0, collection starts.", "Initially only generation 0 is examined.", "If generation 0 has been examined more than threshold1 times since generation 1 has been examined, then generation 1 is examined as well.", "Similarly, threshold2 controls the number of collections of generation 1 before collecting generation 2."]}
{"index": 2565, "name": "gc.get_count", "module": "gc", "doc": ["Return the current collection  counts as a tuple of (count0, count1, count2)."]}
{"index": 2566, "name": "gc.get_threshold", "module": "gc", "doc": ["Return the current collection thresholds as a tuple of (threshold0, threshold1, threshold2)."]}
{"index": 2567, "name": "gc.get_referrers", "module": "gc", "doc": ["Return the list of objects that directly refer to any of objs.", "This function will only locate those containers which support garbage collection; extension types which do refer to other objects but do not support garbage collection will not be found.", "Note that objects which have already been dereferenced, but which live in cycles and have not yet been collected by the garbage collector can be listed among the resulting referrers.", "To get only currently live objects, call collect() before calling get_referrers().", "Care must be taken when using objects returned by get_referrers() because some of them could still be under construction and hence in a temporarily invalid state.", "Avoid using get_referrers() for any purpose other than debugging."]}
{"index": 2568, "name": "gc.get_referents", "module": "gc", "doc": ["Return a list of objects directly referred to by any of the arguments.", "The referents returned are those objects visited by the arguments\u2019 C-level tp_traverse methods (if any), and may not be all objects actually directly reachable.", "tp_traverse methods are supported only by objects that support garbage collection, and are only required to visit objects that may be involved in a cycle.", "So, for example, if an integer is directly reachable from an argument, that integer object may or may not appear in the result list."]}
{"index": 2569, "name": "gc.is_tracked", "module": "gc", "doc": ["Returns True if the object is currently tracked by the garbage collector, False otherwise.", "As a general rule, instances of atomic types aren\u2019t tracked and instances of non-atomic types (containers, user-defined objects\u2026) are.", "However, some type-specific optimizations can be present in order to suppress the garbage collector footprint of simple instances (e.g.", "dicts containing only atomic keys and values):"]}
{"index": 2570, "name": "gc.freeze", "module": "gc", "doc": ["Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections.", "This can be used before a POSIX fork() call to make the gc copy-on-write friendly or to speed up collection.", "Also collection before a POSIX fork() call may free pages for future allocation which can cause copy-on-write too so it\u2019s advised to disable gc in master process and freeze before fork and enable gc in child process."]}
{"index": 2571, "name": "gc.unfreeze", "module": "gc", "doc": ["Unfreeze the objects in the permanent generation, put them back into the oldest generation."]}
{"index": 2572, "name": "gc.get_freeze_count", "module": "gc", "doc": ["Return the number of objects in the permanent generation."]}
{"index": 2573, "name": "gc.garbage", "module": "gc", "doc": ["A list of objects which the collector found to be unreachable but could not be freed (uncollectable objects).", "Starting with Python 3.4, this list should be empty most of the time, except when using instances of C extension types with a non-NULL tp_del slot.", "If DEBUG_SAVEALL is set, then all unreachable objects will be added to this list rather than freed."]}
{"index": 2574, "name": "gc.callbacks", "module": "gc", "doc": ["A list of callbacks that will be invoked by the garbage collector before and after collection.", "The callbacks will be called with two arguments, phase and info.", "phase can be one of two values:", "info is a dict providing more information for the callback.", "The following keys are currently defined:", "Applications can add their own callbacks to this list.", "The primary use cases are:"]}
{"index": 2575, "name": "gc.DEBUG_STATS", "module": "gc", "doc": ["Print statistics during collection.", "This information can be useful when tuning the collection frequency."]}
{"index": 2576, "name": "gc.DEBUG_COLLECTABLE", "module": "gc", "doc": ["Print information on collectable objects found."]}
{"index": 2577, "name": "gc.DEBUG_UNCOLLECTABLE", "module": "gc", "doc": ["Print information of uncollectable objects found (objects which are not reachable but cannot be freed by the collector).", "These objects will be added to the garbage list."]}
{"index": 2578, "name": "gc.DEBUG_SAVEALL", "module": "gc", "doc": ["When set, all unreachable objects found will be appended to garbage rather than being freed.", "This can be useful for debugging a leaking program."]}
{"index": 2579, "name": "gc.DEBUG_LEAK", "module": "gc", "doc": ["The debugging flags necessary for the collector to print information about a leaking program (equal to DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL)."]}
{"index": 2580, "name": "getopt.getopt", "module": "getopt", "doc": ["Parses command line options and parameter list.", "args is the argument list to be parsed, without the leading reference to the running program.", "Typically, this means sys.argv[1:].", "shortopts is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (':'; i.e., the same format that Unix getopt() uses).", "longopts, if specified, must be a list of strings with the names of the long options which should be supported.", "The leading '--' characters should not be included in the option name.", "Long options which require an argument should be followed by an equal sign ('=').", "Optional arguments are not supported.", "To accept only long options, shortopts should be an empty string.", "Long options on the command line can be recognized so long as they provide a prefix of the option name that matches exactly one of the accepted options.", "For example, if longopts is ['foo', 'frob'], the option --fo will match as --foo, but --f will not match uniquely, so GetoptError will be raised.", "The return value consists of two elements: the first is a list of (option, value) pairs; the second is the list of program arguments left after the option list was stripped (this is a trailing slice of args).", "Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., '-x') or two hyphens for long options (e.g., '--long-option'), and the option argument as its second element, or an empty string if the option has no argument.", "The options occur in the list in the same order in which they were found, thus allowing multiple occurrences.", "Long and short options may be mixed."]}
{"index": 2581, "name": "getopt.gnu_getopt", "module": "getopt", "doc": ["This function works like getopt(), except that GNU style scanning mode is used by default.", "This means that option and non-option arguments may be intermixed.", "The getopt() function stops processing options as soon as a non-option argument is encountered.", "If the first character of the option string is '+', or if the environment variable POSIXLY_CORRECT is set, then option processing stops as soon as a non-option argument is encountered."]}
{"index": 2582, "name": "getopt.GetoptError", "module": "getopt", "doc": ["This is raised when an unrecognized option is found in the argument list or when an option requiring an argument is given none.", "The argument to the exception is a string indicating the cause of the error.", "For long options, an argument given to an option which does not require one will also cause this exception to be raised.", "The attributes msg and opt give the error message and related option; if there is no specific option to which the exception relates, opt is an empty string."]}
{"index": 2583, "name": "getopt.error", "module": "getopt", "doc": ["Alias for GetoptError; for backward compatibility."]}
{"index": 2584, "name": "getpass.getpass", "module": "getpass", "doc": ["Prompt the user for a password without echoing.", "The user is prompted using the string prompt, which defaults to 'Password: '.", "On Unix, the prompt is written to the file-like object stream using the replace error handler if needed.", "stream defaults to the controlling terminal (/dev/tty) or if that is unavailable to sys.stderr (this argument is ignored on Windows).", "If echo free input is unavailable getpass() falls back to printing a warning message to stream and reading from sys.stdin and issuing a GetPassWarning."]}
{"index": 2585, "name": "getpass.GetPassWarning", "module": "getpass", "doc": ["A UserWarning subclass issued when password input may be echoed."]}
{"index": 2586, "name": "getpass.getuser", "module": "getpass", "doc": ["Return the \u201clogin name\u201d of the user.", "This function checks the environment variables LOGNAME, USER, LNAME and USERNAME, in order, and returns the value of the first one which is set to a non-empty string.", "If none are set, the login name from the password database is returned on systems which support the pwd module, otherwise, an exception is raised.", "In general, this function should be preferred over os.getlogin()."]}
{"index": 2587, "name": "gettext.bindtextdomain", "module": "gettext", "doc": ["Bind the domain to the locale directory localedir.", "More concretely, gettext will look for binary .mo files for the given domain using the path (on Unix): localedir/language/LC_MESSAGES/domain.mo, where languages is searched for in the environment variables LANGUAGE, LC_ALL, LC_MESSAGES, and LANG respectively.", "If localedir is omitted or None, then the current binding for domain is returned.", "1"]}
{"index": 2588, "name": "gettext.bind_textdomain_codeset", "module": "gettext", "doc": ["Bind the domain to codeset, changing the encoding of byte strings returned by the lgettext(), ldgettext(), lngettext() and ldngettext() functions.", "If codeset is omitted, then the current binding is returned."]}
{"index": 2589, "name": "gettext.textdomain", "module": "gettext", "doc": ["Change or query the current global domain.", "If domain is None, then the current global domain is returned, otherwise the global domain is set to domain, which is returned."]}
{"index": 2590, "name": "gettext.gettext", "module": "gettext", "doc": ["Return the localized translation of message, based on the current global domain, language, and locale directory.", "This function is usually aliased as _() in the local namespace (see examples below)."]}
{"index": 2591, "name": "gettext.dgettext", "module": "gettext", "doc": ["Like gettext(), but look the message up in the specified domain."]}
{"index": 2592, "name": "gettext.ngettext", "module": "gettext", "doc": ["Like gettext(), but consider plural forms.", "If a translation is found, apply the plural formula to n, and return the resulting message (some languages have more than two plural forms).", "If no translation is found, return singular if n is 1; return plural otherwise.", "The Plural formula is taken from the catalog header.", "It is a C or Python expression that has a free variable n; the expression evaluates to the index of the plural in the catalog.", "See the GNU gettext documentation for the precise syntax to be used in .po files and the formulas for a variety of languages."]}
{"index": 2593, "name": "gettext.dngettext", "module": "gettext", "doc": ["Like ngettext(), but look the message up in the specified domain."]}
{"index": 2594, "name": "gettext.ldngettext", "module": "gettext", "doc": ["Equivalent to the corresponding functions without the l prefix (gettext(), dgettext(), ngettext() and dngettext()), but the translation is returned as a byte string encoded in the preferred system encoding if no other encoding was explicitly set with bind_textdomain_codeset()."]}
{"index": 2595, "name": "gettext.find", "module": "gettext", "doc": ["This function implements the standard .mo file search algorithm.", "It takes a domain, identical to what textdomain() takes.", "Optional localedir is as in bindtextdomain().", "Optional languages is a list of strings, where each string is a language code.", "If localedir is not given, then the default system locale directory is used.", "2  If languages is not given, then the following environment variables are searched: LANGUAGE, LC_ALL, LC_MESSAGES, and LANG.", "The first one returning a non-empty value is used for the languages variable.", "The environment variables should contain a colon separated list of languages, which will be split on the colon to produce the expected list of language code strings.", "find() then expands and normalizes the languages, and then iterates through them, searching for an existing file built of these components:", "localedir/language/LC_MESSAGES/domain.mo", "The first such file name that exists is returned by find().", "If no such file is found, then None is returned.", "If all is given, it returns a list of all file names, in the order in which they appear in the languages list or the environment variables."]}
{"index": 2596, "name": "gettext.translation", "module": "gettext", "doc": ["Return a *Translations instance based on the domain, localedir, and languages, which are first passed to find() to get a list of the associated .mo file paths.", "Instances with identical .mo file names are cached.", "The actual class instantiated is class_ if provided, otherwise GNUTranslations.", "The class\u2019s constructor must take a single file object argument.", "If provided, codeset will change the charset used to encode translated strings in the lgettext() and lngettext() methods.", "If multiple files are found, later files are used as fallbacks for earlier ones.", "To allow setting the fallback, copy.copy() is used to clone each translation object from the cache; the actual instance data is still shared with the cache.", "If no .mo file is found, this function raises OSError if fallback is false (which is the default), and returns a NullTranslations instance if fallback is true."]}
{"index": 2597, "name": "gettext.install", "module": "gettext", "doc": ["This installs the function _() in Python\u2019s builtins namespace, based on domain, localedir, and codeset which are passed to the function translation().", "For the names parameter, please see the description of the translation object\u2019s install() method.", "As seen below, you usually mark the strings in your application that are candidates for translation, by wrapping them in a call to the _() function, like this:", "For convenience, you want the _() function to be installed in Python\u2019s builtins namespace, so it is easily accessible in all modules of your application."]}
{"index": 2598, "name": "gettext.NullTranslations", "module": "gettext", "doc": ["Takes an optional file object fp, which is ignored by the base class.", "Initializes \u201cprotected\u201d instance variables _info and _charset which are set by derived classes, as well as _fallback, which is set through add_fallback().", "It then calls self._parse(fp) if fp is not None."]}
{"index": 2599, "name": "gettext.NullTranslations._parse", "module": "gettext", "doc": ["No-op in the base class, this method takes file object fp, and reads the data from the file, initializing its message catalog.", "If you have an unsupported message catalog file format, you should override this method to parse your format."]}
{"index": 2600, "name": "gettext.NullTranslations.add_fallback", "module": "gettext", "doc": ["Add fallback as the fallback object for the current translation object.", "A translation object should consult the fallback if it cannot provide a translation for a given message."]}
{"index": 2601, "name": "gettext.NullTranslations.gettext", "module": "gettext", "doc": ["If a fallback has been set, forward gettext() to the fallback.", "Otherwise, return message.", "Overridden in derived classes."]}
{"index": 2602, "name": "gettext.NullTranslations.ngettext", "module": "gettext", "doc": ["If a fallback has been set, forward ngettext() to the fallback.", "Otherwise, return singular if n is 1; return plural otherwise.", "Overridden in derived classes."]}
{"index": 2603, "name": "gettext.NullTranslations.lngettext", "module": "gettext", "doc": ["Equivalent to gettext() and ngettext(), but the translation is returned as a byte string encoded in the preferred system encoding if no encoding was explicitly set with set_output_charset().", "Overridden in derived classes."]}
{"index": 2604, "name": "gettext.NullTranslations.info", "module": "gettext", "doc": ["Return the \u201cprotected\u201d _info variable, a dictionary containing the metadata found in the message catalog file."]}
{"index": 2605, "name": "gettext.NullTranslations.charset", "module": "gettext", "doc": ["Return the encoding of the message catalog file."]}
{"index": 2606, "name": "gettext.NullTranslations.output_charset", "module": "gettext", "doc": ["Return the encoding used to return translated messages in lgettext() and lngettext()."]}
{"index": 2607, "name": "gettext.NullTranslations.set_output_charset", "module": "gettext", "doc": ["Change the encoding used to return translated messages."]}
{"index": 2608, "name": "gettext.NullTranslations.install", "module": "gettext", "doc": ["This method installs gettext() into the built-in namespace, binding it to _.", "If the names parameter is given, it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to _().", "Supported names are 'gettext', 'ngettext', 'lgettext' and 'lngettext'.", "Note that this is only one way, albeit the most convenient way, to make the _() function available to your application.", "Because it affects the entire application globally, and specifically the built-in namespace, localized modules should never install _().", "Instead, they should use this code to make _() available to their module:", "This puts _() only in the module\u2019s global namespace and so only affects calls within this module."]}
{"index": 2609, "name": "gettext.GNUTranslations", "module": "gettext", "doc": ["The following methods are overridden from the base class implementation:"]}
{"index": 2610, "name": "gettext.GNUTranslations.gettext", "module": "gettext", "doc": ["Look up the message id in the catalog and return the corresponding message string, as a Unicode string.", "If there is no entry in the catalog for the message id, and a fallback has been set, the look up is forwarded to the fallback\u2019s gettext() method.", "Otherwise, the message id is returned."]}
{"index": 2611, "name": "gettext.GNUTranslations.ngettext", "module": "gettext", "doc": ["Do a plural-forms lookup of a message id.", "singular is used as the message id for purposes of lookup in the catalog, while n is used to determine which plural form to use.", "The returned message string is a Unicode string.", "If the message id is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback\u2019s ngettext() method.", "Otherwise, when n is 1 singular is returned, and plural is returned in all other cases.", "Here is an example:"]}
{"index": 2612, "name": "gettext.GNUTranslations.lngettext", "module": "gettext", "doc": ["Equivalent to gettext() and ngettext(), but the translation is returned as a byte string encoded in the preferred system encoding if no encoding  was explicitly set with set_output_charset()."]}
{"index": 2613, "name": "id3", "module": "gettext", "doc": ["The default locale directory is system dependent; for example, on RedHat Linux it is /usr/share/locale, but on Solaris it is /usr/lib/locale.", "The gettext module does not try to support these system dependent defaults; instead its default is sys.prefix/share/locale (see sys.prefix).", "For this reason, it is always best to call bindtextdomain() with an explicit absolute path at the start of your application."]}
{"index": 2614, "name": "id4", "module": "gettext", "doc": ["The default locale directory is system dependent; for example, on RedHat Linux it is /usr/share/locale, but on Solaris it is /usr/lib/locale.", "The gettext module does not try to support these system dependent defaults; instead its default is sys.prefix/share/locale (see sys.prefix).", "For this reason, it is always best to call bindtextdomain() with an explicit absolute path at the start of your application."]}
{"index": 2615, "name": "glob.glob", "module": "glob", "doc": ["Return a possibly-empty list of path names that match pathname, which must be a string containing a path specification.", "pathname can be either absolute (like /usr/src/Python-1.5/Makefile) or relative (like ../../Tools/*/*.gif), and can contain shell-style wildcards.", "Broken symlinks are included in the results (as in the shell).", "If recursive is true, the pattern \u201c**\u201d will match any files and zero or more directories, subdirectories and symbolic links to directories.", "If the pattern is followed by an os.sep or os.altsep then files will not match."]}
{"index": 2616, "name": "glob.iglob", "module": "glob", "doc": ["Return an iterator which yields the same values as glob() without actually storing them all simultaneously."]}
{"index": 2617, "name": "glob.escape", "module": "glob", "doc": ["Escape all special characters ('?", "', '*' and '[').", "This is useful if you want to match an arbitrary literal string that may have special characters in it.", "Special characters in drive/UNC sharepoints are not escaped, e.g.", "on Windows escape('//?/c:/Quo vadis?.txt') returns '//?/c:/Quo vadis[?", "].txt'."]}
{"index": 2618, "name": "grp.getgrgid", "module": "grp", "doc": ["Return the group database entry for the given numeric group ID.", "KeyError is raised if the entry asked for cannot be found."]}
{"index": 2619, "name": "grp.getgrnam", "module": "grp", "doc": ["Return the group database entry for the given group name.", "KeyError is raised if the entry asked for cannot be found."]}
{"index": 2620, "name": "grp.getgrall", "module": "grp", "doc": ["Return a list of all available group entries, in arbitrary order."]}
{"index": 2621, "name": "gzip.open", "module": "gzip", "doc": ["Open a gzip-compressed file in binary or text mode, returning a file object.", "The filename argument can be an actual filename (a str or bytes object), or an existing file object to read from or write to.", "The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x' or 'xb' for binary mode, or 'rt', 'at', 'wt', or 'xt' for text mode.", "The default is 'rb'.", "The compresslevel argument is an integer from 0 to 9, as for the GzipFile constructor.", "For binary mode, this function is equivalent to the GzipFile constructor: GzipFile(filename, mode, compresslevel).", "In this case, the encoding, errors and newline arguments must not be provided.", "For text mode, a GzipFile object is created, and wrapped in an io.TextIOWrapper instance with the specified encoding, error handling behavior, and line ending(s)."]}
{"index": 2622, "name": "gzip.GzipFile", "module": "gzip", "doc": ["Constructor for the GzipFile class, which simulates most of the methods of a file object, with the exception of the truncate() method.", "At least one of fileobj and filename must be given a non-trivial value.", "The new class instance is based on fileobj, which can be a regular file, an io.BytesIO object, or any other object which simulates a file.", "It defaults to None, in which case filename is opened to provide a file object.", "When fileobj is not None, the filename argument is only used to be included in the gzip file header, which may include the original filename of the uncompressed file.", "It defaults to the filename of fileobj, if discernible; otherwise, it defaults to the empty string, and in this case the original filename is not included in the header.", "The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x', or 'xb', depending on whether the file will be read or written.", "The default is the mode of fileobj if discernible; otherwise, the default is 'rb'.", "Note that the file is always opened in binary mode.", "To open a compressed file in text mode, use open() (or wrap your GzipFile with an io.TextIOWrapper).", "The compresslevel argument is an integer from 0 to 9 controlling the level of compression; 1 is fastest and produces the least compression, and 9 is slowest and produces the most compression.", "0 is no compression.", "The default is 9.", "The mtime argument is an optional numeric timestamp to be written to the last modification time field in the stream when compressing.", "It should only be provided in compression mode.", "If omitted or None, the current time is used.", "See the mtime attribute for more details.", "Calling a GzipFile object\u2019s close() method does not close fileobj, since you might wish to append more material after the compressed data.", "This also allows you to pass an io.BytesIO object opened for writing as fileobj, and retrieve the resulting memory buffer using the io.BytesIO object\u2019s getvalue() method.", "GzipFile supports the io.BufferedIOBase interface, including iteration and the with statement.", "Only the truncate() method isn\u2019t implemented.", "GzipFile also provides the following method and attribute:"]}
{"index": 2623, "name": "gzip.GzipFile.peek", "module": "gzip", "doc": ["Read n uncompressed bytes without advancing the file position.", "At most one single read on the compressed stream is done to satisfy the call.", "The number of bytes returned may be more or less than requested."]}
{"index": 2624, "name": "gzip.GzipFile.mtime", "module": "gzip", "doc": ["When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer.", "The initial value before reading any headers is None.", "All gzip compressed streams are required to contain this timestamp field.", "Some programs, such as gunzip, make use of the timestamp.", "The format is the same as the return value of time.time() and the st_mtime attribute of the object returned by os.stat()."]}
{"index": 2625, "name": "gzip.compress", "module": "gzip", "doc": ["Compress the data, returning a bytes object containing the compressed data.", "compresslevel has the same meaning as in the GzipFile constructor above."]}
{"index": 2626, "name": "gzip.decompress", "module": "gzip", "doc": ["Decompress the data, returning a bytes object containing the uncompressed data."]}
{"index": 2627, "name": "hashlib.new", "module": "hashlib", "doc": ["Is a generic constructor that takes the string name of the desired algorithm as its first parameter.", "It also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer.", "The named constructors are much faster than new() and should be preferred."]}
{"index": 2628, "name": "hashlib.algorithms_guaranteed", "module": "hashlib", "doc": ["A set containing the names of the hash algorithms guaranteed to be supported by this module on all platforms.", "Note that \u2018md5\u2019 is in this list despite some upstream vendors offering an odd \u201cFIPS compliant\u201d Python build that excludes it."]}
{"index": 2629, "name": "hashlib.algorithms_available", "module": "hashlib", "doc": ["A set containing the names of the hash algorithms that are available in the running Python interpreter.", "These names will be recognized when passed to new().", "algorithms_guaranteed will always be a subset.", "The same algorithm may appear multiple times in this set under different names (thanks to OpenSSL)."]}
{"index": 2630, "name": "hashlib.hash.digest_size", "module": "hashlib", "doc": ["The size of the resulting hash in bytes."]}
{"index": 2631, "name": "hashlib.hash.block_size", "module": "hashlib", "doc": ["The internal block size of the hash algorithm in bytes."]}
{"index": 2632, "name": "hashlib.hash.name", "module": "hashlib", "doc": ["The canonical name of this hash, always lowercase and always suitable as a parameter to new() to create another hash of this type."]}
{"index": 2633, "name": "hashlib.hash.update", "module": "hashlib", "doc": ["Update the hash object with the bytes-like object.", "Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a+b)."]}
{"index": 2634, "name": "hashlib.hash.digest", "module": "hashlib", "doc": ["Return the digest of the data passed to the update() method so far.", "This is a bytes object of size digest_size which may contain bytes in the whole range from 0 to 255."]}
{"index": 2635, "name": "hashlib.hash.hexdigest", "module": "hashlib", "doc": ["Like digest() except the digest is returned as a string object of double length, containing only hexadecimal digits.", "This may be used to exchange the value safely in email or other non-binary environments."]}
{"index": 2636, "name": "hashlib.hash.copy", "module": "hashlib", "doc": ["Return a copy (\u201cclone\u201d) of the hash object.", "This can be used to efficiently compute the digests of data sharing a common initial substring."]}
{"index": 2637, "name": "hashlib.shake.digest", "module": "hashlib", "doc": ["Return the digest of the data passed to the update() method so far.", "This is a bytes object of size length which may contain bytes in the whole range from 0 to 255."]}
{"index": 2638, "name": "hashlib.shake.hexdigest", "module": "hashlib", "doc": ["Like digest() except the digest is returned as a string object of double length, containing only hexadecimal digits.", "This may be used to exchange the value safely in email or other non-binary environments."]}
{"index": 2639, "name": "hashlib.pbkdf2_hmac", "module": "hashlib", "doc": ["The function provides PKCS#5 password-based key derivation function 2.", "It uses HMAC as pseudorandom function.", "The string hash_name is the desired name of the hash digest algorithm for HMAC, e.g.", "\u2018sha1\u2019 or \u2018sha256\u2019.", "password and salt are interpreted as buffers of bytes.", "Applications and libraries should limit password to a sensible length (e.g.", "1024).", "salt should be about 16 or more bytes from a proper source, e.g.", "os.urandom().", "The number of iterations should be chosen based on the hash algorithm and computing power.", "As of 2013, at least 100,000 iterations of SHA-256 are suggested.", "dklen is the length of the derived key.", "If dklen is None then the digest size of the hash algorithm hash_name is used, e.g.", "64 for SHA-512."]}
{"index": 2640, "name": "hashlib.scrypt", "module": "hashlib", "doc": ["The function provides scrypt password-based key derivation function as defined in RFC 7914.", "password and salt must be bytes-like objects.", "Applications and libraries should limit password to a sensible length (e.g.", "1024).", "salt should be about 16 or more bytes from a proper source, e.g.", "os.urandom().", "n is the CPU/Memory cost factor, r the block size, p parallelization factor and maxmem limits memory (OpenSSL 1.1.0 defaults to 32 MiB).", "dklen is the length of the derived key.", "Availability: OpenSSL 1.1+."]}
{"index": 2641, "name": "heapq.heappush", "module": "heapq", "doc": ["Push the value item onto the heap, maintaining the heap invariant."]}
{"index": 2642, "name": "heapq.heappop", "module": "heapq", "doc": ["Pop and return the smallest item from the heap, maintaining the heap invariant.", "If the heap is empty, IndexError is raised.", "To access the smallest item without popping it, use heap[0]."]}
{"index": 2643, "name": "heapq.heappushpop", "module": "heapq", "doc": ["Push item on the heap, then pop and return the smallest item from the heap.", "The combined action runs more efficiently than heappush() followed by a separate call to heappop()."]}
{"index": 2644, "name": "heapq.heapify", "module": "heapq", "doc": ["Transform list x into a heap, in-place, in linear time."]}
{"index": 2645, "name": "heapq.heapreplace", "module": "heapq", "doc": ["Pop and return the smallest item from the heap, and also push the new item.", "The heap size doesn\u2019t change.", "If the heap is empty, IndexError is raised.", "This one step operation is more efficient than a heappop() followed by heappush() and can be more appropriate when using a fixed-size heap.", "The pop/push combination always returns an element from the heap and replaces it with item.", "The value returned may be larger than the item added.", "If that isn\u2019t desired, consider using heappushpop() instead.", "Its push/pop combination returns the smaller of the two values, leaving the larger value on the heap."]}
{"index": 2646, "name": "heapq.merge", "module": "heapq", "doc": ["Merge multiple sorted inputs into a single sorted output (for example, merge timestamped entries from multiple log files).", "Returns an iterator over the sorted values.", "Similar to sorted(itertools.chain(*iterables)) but returns an iterable, does not pull the data into memory all at once, and assumes that each of the input streams is already sorted (smallest to largest).", "Has two optional arguments which must be specified as keyword arguments.", "key specifies a key function of one argument that is used to extract a comparison key from each input element.", "The default value is None (compare the elements directly).", "reverse is a boolean value.", "If set to True, then the input elements are merged as if each comparison were reversed.", "To achieve behavior similar to sorted(itertools.chain(*iterables), reverse=True), all iterables must be sorted from largest to smallest."]}
{"index": 2647, "name": "heapq.nlargest", "module": "heapq", "doc": ["Return a list with the n largest elements from the dataset defined by iterable.", "key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower).", "Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]."]}
{"index": 2648, "name": "heapq.nsmallest", "module": "heapq", "doc": ["Return a list with the n smallest elements from the dataset defined by iterable.", "key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower).", "Equivalent to:  sorted(iterable, key=key)[:n]."]}
{"index": 2649, "name": "id2", "module": "heapq", "doc": ["The disk balancing algorithms which are current, nowadays, are more annoying than clever, and this is a consequence of the seeking capabilities of the disks.", "On devices which cannot seek, like big tape drives, the story was quite different, and one had to be very clever to ensure (far in advance) that each tape movement will be the most effective possible (that is, will best participate at \u201cprogressing\u201d the merge).", "Some tapes were even able to read backwards, and this was also used to avoid the rewinding time.", "Believe me, real good tape sorts were quite spectacular to watch!", "From all times, sorting has always been a Great Art!", ":-)"]}
{"index": 2650, "name": "hmac.new", "module": "hmac", "doc": ["Return a new hmac object.", "key is a bytes or bytearray object giving the secret key.", "If msg is present, the method call update(msg) is made.", "digestmod is the digest name, digest constructor or module for the HMAC object to use.", "It supports any name suitable to hashlib.new() and defaults to the hashlib.md5 constructor."]}
{"index": 2651, "name": "hmac.digest", "module": "hmac", "doc": ["Return digest of msg for given secret key and digest.", "The function is equivalent to HMAC(key, msg, digest).digest(), but uses an optimized C or inline implementation, which is faster for messages that fit into memory.", "The parameters key, msg, and digest have the same meaning as in new().", "CPython implementation detail, the optimized C implementation is only used when digest is a string and name of a digest algorithm, which is supported by OpenSSL."]}
{"index": 2652, "name": "hmac.HMAC.update", "module": "hmac", "doc": ["Update the hmac object with msg.", "Repeated calls are equivalent to a single call with the concatenation of all the arguments: m.update(a); m.update(b) is equivalent to m.update(a + b)."]}
{"index": 2653, "name": "hmac.HMAC.digest", "module": "hmac", "doc": ["Return the digest of the bytes passed to the update() method so far.", "This bytes object will be the same length as the digest_size of the digest given to the constructor.", "It may contain non-ASCII bytes, including NUL bytes."]}
{"index": 2654, "name": "hmac.HMAC.hexdigest", "module": "hmac", "doc": ["Like digest() except the digest is returned as a string twice the length containing only hexadecimal digits.", "This may be used to exchange the value safely in email or other non-binary environments."]}
{"index": 2655, "name": "hmac.HMAC.copy", "module": "hmac", "doc": ["Return a copy (\u201cclone\u201d) of the hmac object.", "This can be used to efficiently compute the digests of strings that share a common initial substring."]}
{"index": 2656, "name": "hmac.HMAC.digest_size", "module": "hmac", "doc": ["The size of the resulting HMAC digest in bytes."]}
{"index": 2657, "name": "hmac.HMAC.block_size", "module": "hmac", "doc": ["The internal block size of the hash algorithm in bytes."]}
{"index": 2658, "name": "hmac.HMAC.name", "module": "hmac", "doc": ["The canonical name of this HMAC, always lowercase, e.g.", "hmac-md5."]}
{"index": 2659, "name": "hmac.compare_digest", "module": "hmac", "doc": ["Return a == b.", "This function uses an approach designed to prevent timing analysis by avoiding content-based short circuiting behaviour, making it appropriate for cryptography.", "a and b must both be of the same type: either str (ASCII only, as e.g.", "returned by HMAC.hexdigest()), or a bytes-like object."]}
{"index": 2660, "name": "html.entities.html5", "module": "html", "doc": ["A dictionary that maps HTML5 named character references 1 to the equivalent Unicode character(s), e.g.", "html5['gt;'] == '>'.", "Note that the trailing semicolon is included in the name (e.g.", "'gt;'), however some of the names are accepted by the standard even without the semicolon: in this case the name is present with and without the ';'.", "See also html.unescape()."]}
{"index": 2661, "name": "html.entities.entitydefs", "module": "html", "doc": ["A dictionary mapping XHTML 1.0 entity definitions to their replacement text in ISO Latin-1."]}
{"index": 2662, "name": "html.entities.name2codepoint", "module": "html", "doc": ["A dictionary that maps HTML entity names to the Unicode code points."]}
{"index": 2663, "name": "html.entities.codepoint2name", "module": "html", "doc": ["A dictionary that maps Unicode code points to HTML entity names."]}
{"index": 2664, "name": "id2", "module": "html", "doc": ["See https://www.w3.org/TR/html5/syntax.html#named-character-references"]}
{"index": 2665, "name": "html.escape", "module": "html", "doc": ["Convert the characters &, < and > in string s to HTML-safe sequences.", "Use this if you need to display text that might contain such characters in HTML.", "If the optional flag quote is true, the characters (\") and (') are also translated; this helps for inclusion in an HTML attribute value delimited by quotes, as in <a href=\"...\">."]}
{"index": 2666, "name": "html.unescape", "module": "html", "doc": ["Convert all named and numeric character references (e.g.", "&gt;, &#62;, &#x3e;) in the string s to the corresponding Unicode characters.", "This function uses the rules defined by the HTML 5 standard for both valid and invalid character references, and the list of HTML 5 named character references."]}
{"index": 2667, "name": "html.parser.HTMLParser", "module": "html", "doc": ["Create a parser instance able to parse invalid markup.", "If convert_charrefs is True (the default), all character references (except the ones in script/style elements) are automatically converted to the corresponding Unicode characters.", "An HTMLParser instance is fed HTML data and calls handler methods when start tags, end tags, text, comments, and other markup elements are encountered.", "The user should subclass HTMLParser and override its methods to implement the desired behavior.", "This parser does not check that end tags match start tags or call the end-tag handler for elements which are closed implicitly by closing an outer element."]}
{"index": 2668, "name": "html.parser.HTMLParser.feed", "module": "html", "doc": ["Feed some text to the parser.", "It is processed insofar as it consists of complete elements; incomplete data is buffered until more data is fed or close() is called.", "data must be str."]}
{"index": 2669, "name": "html.parser.HTMLParser.close", "module": "html", "doc": ["Force processing of all buffered data as if it were followed by an end-of-file mark.", "This method may be redefined by a derived class to define additional processing at the end of the input, but the redefined version should always call the HTMLParser base class method close()."]}
{"index": 2670, "name": "html.parser.HTMLParser.reset", "module": "html", "doc": ["Reset the instance.", "Loses all unprocessed data.", "This is called implicitly at instantiation time."]}
{"index": 2671, "name": "html.parser.HTMLParser.getpos", "module": "html", "doc": ["Return current line number and offset."]}
{"index": 2672, "name": "html.parser.HTMLParser.get_starttag_text", "module": "html", "doc": ["Return the text of the most recently opened start tag.", "This should not normally be needed for structured processing, but may be useful in dealing with HTML \u201cas deployed\u201d or for re-generating input with minimal changes (whitespace between attributes can be preserved, etc.", ")."]}
{"index": 2673, "name": "html.parser.HTMLParser.handle_starttag", "module": "html", "doc": ["This method is called to handle the start of a tag (e.g.", "<div id=\"main\">).", "The tag argument is the name of the tag converted to lower case.", "The attrs argument is a list of (name, value) pairs containing the attributes found inside the tag\u2019s <> brackets.", "The name will be translated to lower case, and quotes in the value have been removed, and character and entity references have been replaced.", "For instance, for the tag <A HREF=\"https://www.cwi.nl/\">, this method would be called as handle_starttag('a', [('href', 'https://www.cwi.nl/')]).", "All entity references from html.entities are replaced in the attribute values."]}
{"index": 2674, "name": "html.parser.HTMLParser.handle_endtag", "module": "html", "doc": ["This method is called to handle the end tag of an element (e.g.", "</div>).", "The tag argument is the name of the tag converted to lower case."]}
{"index": 2675, "name": "html.parser.HTMLParser.handle_startendtag", "module": "html", "doc": ["Similar to handle_starttag(), but called when the parser encounters an XHTML-style empty tag (<img ... />).", "This method may be overridden by subclasses which require this particular lexical information; the default implementation simply calls handle_starttag() and handle_endtag()."]}
{"index": 2676, "name": "html.parser.HTMLParser.handle_data", "module": "html", "doc": ["This method is called to process arbitrary data (e.g.", "text nodes and the content of <script>...</script> and <style>...</style>)."]}
{"index": 2677, "name": "html.parser.HTMLParser.handle_entityref", "module": "html", "doc": ["This method is called to process a named character reference of the form &name; (e.g.", "&gt;), where name is a general entity reference (e.g.", "'gt').", "This method is never called if convert_charrefs is True."]}
{"index": 2678, "name": "html.parser.HTMLParser.handle_charref", "module": "html", "doc": ["This method is called to process decimal and hexadecimal numeric character references of the form &#NNN; and &#xNNN;.", "For example, the decimal equivalent for &gt; is &#62;, whereas the hexadecimal is &#x3E;; in this case the method will receive '62' or 'x3E'.", "This method is never called if convert_charrefs is True."]}
{"index": 2679, "name": "html.parser.HTMLParser.handle_comment", "module": "html", "doc": ["This method is called when a comment is encountered (e.g.", "<!--comment-->).", "For example, the comment <!-- comment --> will cause this method to be called with the argument ' comment '.", "The content of Internet Explorer conditional comments (condcoms) will also be sent to this method, so, for <!--[if IE 9]>IE9-specific content<!", "[endif]-->, this method will receive '[if IE 9]>IE9-specific content<!", "[endif]'."]}
{"index": 2680, "name": "html.parser.HTMLParser.handle_decl", "module": "html", "doc": ["This method is called to handle an HTML doctype declaration (e.g.", "<!DOCTYPE html>).", "The decl parameter will be the entire contents of the declaration inside the <!...> markup (e.g.", "'DOCTYPE html')."]}
{"index": 2681, "name": "html.parser.HTMLParser.handle_pi", "module": "html", "doc": ["Method called when a processing instruction is encountered.", "The data parameter will contain the entire processing instruction.", "For example, for the processing instruction <?proc color='red'>, this method would be called as handle_pi(\"proc color='red'\").", "It is intended to be overridden by a derived class; the base class implementation does nothing."]}
{"index": 2682, "name": "html.parser.HTMLParser.unknown_decl", "module": "html", "doc": ["This method is called when an unrecognized declaration is read by the parser.", "The data parameter will be the entire contents of the declaration inside the <![...", "]> markup.", "It is sometimes useful to be overridden by a derived class.", "The base class implementation does nothing."]}
{"index": 2683, "name": "http.client.HTTPConnection", "module": "http", "doc": ["An HTTPConnection instance represents one transaction with an HTTP server.", "It should be instantiated passing it a host and optional port number.", "If no port number is passed, the port is extracted from the host string if it has the form host:port, else the default HTTP port (80) is used.", "If the optional timeout parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used).", "The optional source_address parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from.", "The optional blocksize parameter sets the buffer size in bytes for sending a file-like message body.", "For example, the following calls all create instances that connect to the server at the same host and port:"]}
{"index": 2684, "name": "http.client.HTTPSConnection", "module": "http", "doc": ["A subclass of HTTPConnection that uses SSL for communication with secure servers.", "Default port is 443.", "If context is specified, it must be a ssl.SSLContext instance describing the various SSL options.", "Please read Security considerations for more information on best practices."]}
{"index": 2685, "name": "http.client.HTTPResponse", "module": "http", "doc": ["Class whose instances are returned upon successful connection.", "Not instantiated directly by user."]}
{"index": 2686, "name": "http.client.HTTPException", "module": "http", "doc": ["The base class of the other exceptions in this module.", "It is a subclass of Exception."]}
{"index": 2687, "name": "http.client.NotConnected", "module": "http", "doc": ["A subclass of HTTPException."]}
{"index": 2688, "name": "http.client.InvalidURL", "module": "http", "doc": ["A subclass of HTTPException, raised if a port is given and is either non-numeric or empty."]}
{"index": 2689, "name": "http.client.UnknownProtocol", "module": "http", "doc": ["A subclass of HTTPException."]}
{"index": 2690, "name": "http.client.UnknownTransferEncoding", "module": "http", "doc": ["A subclass of HTTPException."]}
{"index": 2691, "name": "http.client.UnimplementedFileMode", "module": "http", "doc": ["A subclass of HTTPException."]}
{"index": 2692, "name": "http.client.IncompleteRead", "module": "http", "doc": ["A subclass of HTTPException."]}
{"index": 2693, "name": "http.client.ImproperConnectionState", "module": "http", "doc": ["A subclass of HTTPException."]}
{"index": 2694, "name": "http.client.CannotSendRequest", "module": "http", "doc": ["A subclass of ImproperConnectionState."]}
{"index": 2695, "name": "http.client.CannotSendHeader", "module": "http", "doc": ["A subclass of ImproperConnectionState."]}
{"index": 2696, "name": "http.client.ResponseNotReady", "module": "http", "doc": ["A subclass of ImproperConnectionState."]}
{"index": 2697, "name": "http.client.BadStatusLine", "module": "http", "doc": ["A subclass of HTTPException.", "Raised if a server responds with a HTTP status code that we don\u2019t understand."]}
{"index": 2698, "name": "http.client.LineTooLong", "module": "http", "doc": ["A subclass of HTTPException.", "Raised if an excessively long line is received in the HTTP protocol from the server."]}
{"index": 2699, "name": "http.client.RemoteDisconnected", "module": "http", "doc": ["A subclass of ConnectionResetError and BadStatusLine.", "Raised by HTTPConnection.getresponse() when the attempt to read the response results in no data read from the connection, indicating that the remote end has closed the connection."]}
{"index": 2700, "name": "http.client.HTTP_PORT", "module": "http", "doc": ["The default port for the HTTP protocol (always 80)."]}
{"index": 2701, "name": "http.client.HTTPS_PORT", "module": "http", "doc": ["The default port for the HTTPS protocol (always 443)."]}
{"index": 2702, "name": "http.client.responses", "module": "http", "doc": ["This dictionary maps the HTTP 1.1 status codes to the W3C names.", "Example: http.client.responses[http.client.NOT_FOUND] is 'Not Found'."]}
{"index": 2703, "name": "http.client.HTTPConnection.request", "module": "http", "doc": ["This will send a request to the server using the HTTP request method method and the selector url.", "If body is specified, the specified data is sent after the headers are finished.", "It may be a str, a bytes-like object, an open file object, or an iterable of bytes.", "If body is a string, it is encoded as ISO-8859-1, the default for HTTP.", "If it is a bytes-like object, the bytes are sent as is.", "If it is a file object, the contents of the file is sent; this file object should support at least the read() method.", "If the file object is an instance of io.TextIOBase, the data returned by the read() method will be encoded as ISO-8859-1, otherwise the data returned by read() is sent as is.", "If body is an iterable, the elements of the iterable are sent as is until the iterable is exhausted.", "The headers argument should be a mapping of extra HTTP headers to send with the request.", "If headers contains neither Content-Length nor Transfer-Encoding, but there is a request body, one of those header fields will be added automatically.", "If body is None, the Content-Length header is set to 0 for methods that expect a body (PUT, POST, and PATCH).", "If body is a string or a bytes-like object that is not also a file, the Content-Length header is set to its length.", "Any other type of body (files and iterables in general) will be chunk-encoded, and the Transfer-Encoding header will automatically be set instead of Content-Length.", "The encode_chunked argument is only relevant if Transfer-Encoding is specified in headers.", "If encode_chunked is False, the HTTPConnection object assumes that all encoding is handled by the calling code.", "If it is True, the body will be chunk-encoded."]}
{"index": 2704, "name": "http.client.HTTPConnection.getresponse", "module": "http", "doc": ["Should be called after a request is sent to get the response from the server.", "Returns an HTTPResponse instance."]}
{"index": 2705, "name": "http.client.HTTPConnection.set_debuglevel", "module": "http", "doc": ["Set the debugging level.", "The default debug level is 0, meaning no debugging output is printed.", "Any value greater than 0 will cause all currently defined debug output to be printed to stdout.", "The debuglevel is passed to any new HTTPResponse objects that are created."]}
{"index": 2706, "name": "http.client.HTTPConnection.set_tunnel", "module": "http", "doc": ["Set the host and the port for HTTP Connect Tunnelling.", "This allows running the connection through a proxy server.", "The host and port arguments specify the endpoint of the tunneled connection (i.e.", "the address included in the CONNECT request, not the address of the proxy server).", "The headers argument should be a mapping of extra HTTP headers to send with the CONNECT request.", "For example, to tunnel through a HTTPS proxy server running locally on port 8080, we would pass the address of the proxy to the HTTPSConnection constructor, and the address of the host that we eventually want to reach to the set_tunnel() method:"]}
{"index": 2707, "name": "http.client.HTTPConnection.connect", "module": "http", "doc": ["Connect to the server specified when the object was created.", "By default, this is called automatically when making a request if the client does not already have a connection."]}
{"index": 2708, "name": "http.client.HTTPConnection.close", "module": "http", "doc": ["Close the connection to the server."]}
{"index": 2709, "name": "http.client.HTTPConnection.blocksize", "module": "http", "doc": ["Buffer size in bytes for sending a file-like message body."]}
{"index": 2710, "name": "http.client.HTTPConnection.putrequest", "module": "http", "doc": ["This should be the first call after the connection to the server has been made.", "It sends a line to the server consisting of the method string, the url string, and the HTTP version (HTTP/1.1).", "To disable automatic sending of Host: or Accept-Encoding: headers (for example to accept additional content encodings), specify skip_host or skip_accept_encoding with non-False values."]}
{"index": 2711, "name": "http.client.HTTPConnection.putheader", "module": "http", "doc": ["Send an RFC 822-style header to the server.", "It sends a line to the server consisting of the header, a colon and a space, and the first argument.", "If more arguments are given, continuation lines are sent, each consisting of a tab and an argument."]}
{"index": 2712, "name": "http.client.HTTPConnection.endheaders", "module": "http", "doc": ["Send a blank line to the server, signalling the end of the headers.", "The optional message_body argument can be used to pass a message body associated with the request.", "If encode_chunked is True, the result of each iteration of message_body will be chunk-encoded as specified in RFC 7230, Section 3.3.1.", "How the data is encoded is dependent on the type of message_body.", "If message_body implements the buffer interface the encoding will result in a single chunk.", "If message_body is a collections.abc.Iterable, each iteration of message_body will result in a chunk.", "If message_body is a file object, each call to .read() will result in a chunk.", "The method automatically signals the end of the chunk-encoded data immediately after message_body."]}
{"index": 2713, "name": "http.client.HTTPConnection.send", "module": "http", "doc": ["Send data to the server.", "This should be used directly only after the endheaders() method has been called and before getresponse() is called."]}
{"index": 2714, "name": "http.client.HTTPResponse.read", "module": "http", "doc": ["Reads and returns the response body, or up to the next amt bytes."]}
{"index": 2715, "name": "http.client.HTTPResponse.readinto", "module": "http", "doc": ["Reads up to the next len(b) bytes of the response body into the buffer b.", "Returns the number of bytes read."]}
{"index": 2716, "name": "http.client.HTTPResponse.getheader", "module": "http", "doc": ["Return the value of the header name, or default if there is no header matching name.", "If there is more than one  header with the name name, return all of the values joined by \u2018, \u2018.", "If \u2018default\u2019 is any iterable other than a single string, its elements are similarly returned joined by commas."]}
{"index": 2717, "name": "http.client.HTTPResponse.getheaders", "module": "http", "doc": ["Return a list of (header, value) tuples."]}
{"index": 2718, "name": "http.client.HTTPResponse.fileno", "module": "http", "doc": ["Return the fileno of the underlying socket."]}
{"index": 2719, "name": "http.client.HTTPResponse.msg", "module": "http", "doc": ["A http.client.HTTPMessage instance containing the response headers.", "http.client.HTTPMessage is a subclass of email.message.Message."]}
{"index": 2720, "name": "http.client.HTTPResponse.version", "module": "http", "doc": ["HTTP protocol version used by server.", "10 for HTTP/1.0, 11 for HTTP/1.1."]}
{"index": 2721, "name": "http.client.HTTPResponse.status", "module": "http", "doc": ["Status code returned by server."]}
{"index": 2722, "name": "http.client.HTTPResponse.reason", "module": "http", "doc": ["Reason phrase returned by server."]}
{"index": 2723, "name": "http.client.HTTPResponse.debuglevel", "module": "http", "doc": ["A debugging hook.", "If debuglevel is greater than zero, messages will be printed to stdout as the response is read and parsed."]}
{"index": 2724, "name": "http.client.HTTPResponse.closed", "module": "http", "doc": ["Is True if the stream is closed."]}
{"index": 2725, "name": "http.cookiejar.LoadError", "module": "http", "doc": ["Instances of FileCookieJar raise this exception on failure to load cookies from a file.", "LoadError is a subclass of OSError."]}
{"index": 2726, "name": "http.cookiejar.CookieJar", "module": "http", "doc": ["policy is an object implementing the CookiePolicy interface.", "The CookieJar class stores HTTP cookies.", "It extracts cookies from HTTP requests, and returns them in HTTP responses.", "CookieJar instances automatically expire contained cookies when necessary.", "Subclasses are also responsible for storing and retrieving cookies from a file or database."]}
{"index": 2727, "name": "http.cookiejar.FileCookieJar", "module": "http", "doc": ["policy is an object implementing the CookiePolicy interface.", "For the other arguments, see the documentation for the corresponding attributes.", "A CookieJar which can load cookies from, and perhaps save cookies to, a file on disk.", "Cookies are NOT loaded from the named file until either the load() or revert() method is called.", "Subclasses of this class are documented in section FileCookieJar subclasses and co-operation with web browsers."]}
{"index": 2728, "name": "http.cookiejar.CookiePolicy", "module": "http", "doc": ["This class is responsible for deciding whether each cookie should be accepted from / returned to the server."]}
{"index": 2729, "name": "http.cookiejar.DefaultCookiePolicy", "module": "http", "doc": ["Constructor arguments should be passed as keyword arguments only.", "blocked_domains is a sequence of domain names that we never accept cookies from, nor return cookies to.", "allowed_domains if not None, this is a sequence of the only domains for which we accept and return cookies.", "For all other arguments, see the documentation for CookiePolicy and DefaultCookiePolicy objects.", "DefaultCookiePolicy implements the standard accept / reject rules for Netscape and RFC 2965 cookies.", "By default, RFC 2109 cookies (ie.", "cookies received in a Set-Cookie header with a version cookie-attribute of 1) are treated according to the RFC 2965 rules.", "However, if RFC 2965 handling is turned off or rfc2109_as_netscape is True, RFC 2109 cookies are \u2018downgraded\u2019 by the CookieJar instance to Netscape cookies, by setting the version attribute of the Cookie instance to 0.", "DefaultCookiePolicy also provides some parameters to allow some fine-tuning of policy."]}
{"index": 2730, "name": "http.cookiejar.Cookie", "module": "http", "doc": ["This class represents Netscape, RFC 2109 and RFC 2965 cookies.", "It is not expected that users of http.cookiejar construct their own Cookie instances.", "Instead, if necessary, call make_cookies() on a CookieJar instance."]}
{"index": 2731, "name": "http.cookiejar.CookieJar.add_cookie_header", "module": "http", "doc": ["Add correct Cookie header to request.", "If policy allows (ie.", "the rfc2965 and hide_cookie2 attributes of the CookieJar\u2019s CookiePolicy instance are true and false respectively), the Cookie2 header is also added when appropriate.", "The request object (usually a urllib.request.Request instance) must support the methods get_full_url(), get_host(), get_type(), unverifiable(), has_header(), get_header(), header_items(), add_unredirected_header() and origin_req_host attribute as documented by urllib.request."]}
{"index": 2732, "name": "http.cookiejar.CookieJar.extract_cookies", "module": "http", "doc": ["Extract cookies from HTTP response and store them in the CookieJar, where allowed by policy.", "The CookieJar will look for allowable Set-Cookie and Set-Cookie2 headers in the response argument, and store cookies as appropriate (subject to the CookiePolicy.set_ok() method\u2019s approval).", "The response object (usually the result of a call to urllib.request.urlopen(), or similar) should support an info() method, which returns an email.message.Message instance.", "The request object (usually a urllib.request.Request instance) must support the methods get_full_url(), get_host(), unverifiable(), and origin_req_host attribute, as documented by urllib.request.", "The request is used to set default values for cookie-attributes as well as for checking that the cookie is allowed to be set."]}
{"index": 2733, "name": "http.cookiejar.CookieJar.set_policy", "module": "http", "doc": ["Set the CookiePolicy instance to be used."]}
{"index": 2734, "name": "http.cookiejar.CookieJar.make_cookies", "module": "http", "doc": ["Return sequence of Cookie objects extracted from response object.", "See the documentation for extract_cookies() for the interfaces required of the response and request arguments."]}
{"index": 2735, "name": "http.cookiejar.CookieJar.set_cookie_if_ok", "module": "http", "doc": ["Set a Cookie if policy says it\u2019s OK to do so."]}
{"index": 2736, "name": "http.cookiejar.CookieJar.set_cookie", "module": "http", "doc": ["Set a Cookie, without checking with policy to see whether or not it should be set."]}
{"index": 2737, "name": "http.cookiejar.CookieJar.clear", "module": "http", "doc": ["Clear some cookies.", "If invoked without arguments, clear all cookies.", "If given a single argument, only cookies belonging to that domain will be removed.", "If given two arguments, cookies belonging to the specified domain and URL path are removed.", "If given three arguments, then the cookie with the specified domain, path and name is removed.", "Raises KeyError if no matching cookie exists."]}
{"index": 2738, "name": "http.cookiejar.CookieJar.clear_session_cookies", "module": "http", "doc": ["Discard all session cookies.", "Discards all contained cookies that have a true discard attribute (usually because they had either no max-age or expires cookie-attribute, or an explicit discard cookie-attribute).", "For interactive browsers, the end of a session usually corresponds to closing the browser window.", "Note that the save() method won\u2019t save session cookies anyway, unless you ask otherwise by passing a true ignore_discard argument."]}
{"index": 2739, "name": "http.cookiejar.FileCookieJar.save", "module": "http", "doc": ["Save cookies to a file.", "This base class raises NotImplementedError.", "Subclasses may leave this method unimplemented.", "filename is the name of file in which to save cookies.", "If filename is not specified, self.filename is used (whose default is the value passed to the constructor, if any); if self.filename is None, ValueError is raised.", "ignore_discard: save even cookies set to be discarded.", "ignore_expires: save even cookies that have expired", "The file is overwritten if it already exists, thus wiping all the cookies it contains.", "Saved cookies can be restored later using the load() or revert() methods."]}
{"index": 2740, "name": "http.cookiejar.FileCookieJar.load", "module": "http", "doc": ["Load cookies from a file.", "Old cookies are kept unless overwritten by newly loaded ones.", "Arguments are as for save().", "The named file must be in the format understood by the class, or LoadError will be raised.", "Also, OSError may be raised, for example if the file does not exist."]}
{"index": 2741, "name": "http.cookiejar.FileCookieJar.revert", "module": "http", "doc": ["Clear all cookies and reload cookies from a saved file.", "revert() can raise the same exceptions as load().", "If there is a failure, the object\u2019s state will not be altered."]}
{"index": 2742, "name": "http.cookiejar.FileCookieJar.filename", "module": "http", "doc": ["Filename of default file in which to keep cookies.", "This attribute may be assigned to."]}
{"index": 2743, "name": "http.cookiejar.FileCookieJar.delayload", "module": "http", "doc": ["If true, load cookies lazily from disk.", "This attribute should not be assigned to.", "This is only a hint, since this only affects performance, not behaviour (unless the cookies on disk are changing).", "A CookieJar object may ignore it.", "None of the FileCookieJar classes included in the standard library lazily loads cookies."]}
{"index": 2744, "name": "http.cookiejar.MozillaCookieJar", "module": "http", "doc": ["A FileCookieJar that can load from and save cookies to disk in the Mozilla cookies.txt file format (which is also used by the Lynx and Netscape browsers).", "Also note that cookies saved while Mozilla is running will get clobbered by Mozilla."]}
{"index": 2745, "name": "http.cookiejar.LWPCookieJar", "module": "http", "doc": ["A FileCookieJar that can load from and save cookies to disk in format compatible with the libwww-perl library\u2019s Set-Cookie3 file format.", "This is convenient if you want to store cookies in a human-readable file."]}
{"index": 2746, "name": "http.cookiejar.CookiePolicy.set_ok", "module": "http", "doc": ["Return boolean value indicating whether cookie should be accepted from server.", "cookie is a Cookie instance.", "request is an object implementing the interface defined by the documentation for CookieJar.extract_cookies()."]}
{"index": 2747, "name": "http.cookiejar.CookiePolicy.return_ok", "module": "http", "doc": ["Return boolean value indicating whether cookie should be returned to server.", "cookie is a Cookie instance.", "request is an object implementing the interface defined by the documentation for CookieJar.add_cookie_header()."]}
{"index": 2748, "name": "http.cookiejar.CookiePolicy.domain_return_ok", "module": "http", "doc": ["Return false if cookies should not be returned, given cookie domain.", "This method is an optimization.", "It removes the need for checking every cookie with a particular domain (which might involve reading many files).", "Returning true from domain_return_ok() and path_return_ok() leaves all the work to return_ok().", "If domain_return_ok() returns true for the cookie domain, path_return_ok() is called for the cookie path.", "Otherwise, path_return_ok() and return_ok() are never called for that cookie domain.", "If path_return_ok() returns true, return_ok() is called with the Cookie object itself for a full check.", "Otherwise, return_ok() is never called for that cookie path.", "Note that domain_return_ok() is called for every cookie domain, not just for the request domain.", "For example, the function might be called with both \".example.com\" and \"www.example.com\" if the request domain is \"www.example.com\".", "The same goes for path_return_ok().", "The request argument is as documented for return_ok()."]}
{"index": 2749, "name": "http.cookiejar.CookiePolicy.path_return_ok", "module": "http", "doc": ["Return false if cookies should not be returned, given cookie path.", "See the documentation for domain_return_ok()."]}
{"index": 2750, "name": "http.cookiejar.CookiePolicy.netscape", "module": "http", "doc": ["Implement Netscape protocol."]}
{"index": 2751, "name": "http.cookiejar.CookiePolicy.rfc2965", "module": "http", "doc": ["Implement RFC 2965 protocol."]}
{"index": 2752, "name": "http.cookiejar.CookiePolicy.hide_cookie2", "module": "http", "doc": ["Don\u2019t add Cookie2 header to requests (the presence of this header indicates to the server that we understand RFC 2965 cookies)."]}
{"index": 2753, "name": "http.cookiejar.DefaultCookiePolicy.blocked_domains", "module": "http", "doc": ["Return the sequence of blocked domains (as a tuple)."]}
{"index": 2754, "name": "http.cookiejar.DefaultCookiePolicy.set_blocked_domains", "module": "http", "doc": ["Set the sequence of blocked domains."]}
{"index": 2755, "name": "http.cookiejar.DefaultCookiePolicy.is_blocked", "module": "http", "doc": ["Return whether domain is on the blacklist for setting or receiving cookies."]}
{"index": 2756, "name": "http.cookiejar.DefaultCookiePolicy.allowed_domains", "module": "http", "doc": ["Return None, or the sequence of allowed domains (as a tuple)."]}
{"index": 2757, "name": "http.cookiejar.DefaultCookiePolicy.set_allowed_domains", "module": "http", "doc": ["Set the sequence of allowed domains, or None."]}
{"index": 2758, "name": "http.cookiejar.DefaultCookiePolicy.is_not_allowed", "module": "http", "doc": ["Return whether domain is not on the whitelist for setting or receiving cookies."]}
{"index": 2759, "name": "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape", "module": "http", "doc": ["If true, request that the CookieJar instance downgrade RFC 2109 cookies (ie.", "cookies received in a Set-Cookie header with a version cookie-attribute of 1) to Netscape cookies by setting the version attribute of the Cookie instance to 0.", "The default value is None, in which case RFC 2109 cookies are downgraded if and only if RFC 2965 handling is turned off.", "Therefore, RFC 2109 cookies are downgraded by default."]}
{"index": 2760, "name": "http.cookiejar.DefaultCookiePolicy.strict_domain", "module": "http", "doc": ["Don\u2019t allow sites to set two-component domains with country-code top-level domains like .co.uk, .gov.uk, .co.nz.etc.", "This is far from perfect and isn\u2019t guaranteed to work!"]}
{"index": 2761, "name": "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable", "module": "http", "doc": ["Follow RFC 2965 rules on unverifiable transactions (usually, an unverifiable transaction is one resulting from a redirect or a request for an image hosted on another site).", "If this is false, cookies are never blocked on the basis of verifiability"]}
{"index": 2762, "name": "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable", "module": "http", "doc": ["Apply RFC 2965 rules on unverifiable transactions even to Netscape cookies."]}
{"index": 2763, "name": "http.cookiejar.DefaultCookiePolicy.strict_ns_domain", "module": "http", "doc": ["Flags indicating how strict to be with domain-matching rules for Netscape cookies.", "See below for acceptable values."]}
{"index": 2764, "name": "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar", "module": "http", "doc": ["Ignore cookies in Set-Cookie: headers that have names starting with '$'."]}
{"index": 2765, "name": "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path", "module": "http", "doc": ["Don\u2019t allow setting cookies whose path doesn\u2019t path-match request URI."]}
{"index": 2766, "name": "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots", "module": "http", "doc": ["When setting cookies, the \u2018host prefix\u2019 must not contain a dot (eg.", "www.foo.bar.com can\u2019t set a cookie for .bar.com, because www.foo contains a dot)."]}
{"index": 2767, "name": "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain", "module": "http", "doc": ["Cookies that did not explicitly specify a domain cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg.", "spam.example.com won\u2019t be returned cookies from example.com that had no domain cookie-attribute)."]}
{"index": 2768, "name": "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match", "module": "http", "doc": ["When setting cookies, require a full RFC 2965 domain-match."]}
{"index": 2769, "name": "http.cookiejar.DefaultCookiePolicy.DomainLiberal", "module": "http", "doc": ["Equivalent to 0 (ie.", "all of the above Netscape domain strictness flags switched off)."]}
{"index": 2770, "name": "http.cookiejar.DefaultCookiePolicy.DomainStrict", "module": "http", "doc": ["Equivalent to DomainStrictNoDots|DomainStrictNonDomain."]}
{"index": 2771, "name": "http.cookiejar.Cookie.version", "module": "http", "doc": ["Integer or None.", "Netscape cookies have version 0.", "RFC 2965 and RFC 2109 cookies have a version cookie-attribute of 1.", "However, note that http.cookiejar may \u2018downgrade\u2019 RFC 2109 cookies to Netscape cookies, in which case version is 0."]}
{"index": 2772, "name": "http.cookiejar.Cookie.name", "module": "http", "doc": ["Cookie name (a string)."]}
{"index": 2773, "name": "http.cookiejar.Cookie.value", "module": "http", "doc": ["Cookie value (a string), or None."]}
{"index": 2774, "name": "http.cookiejar.Cookie.port", "module": "http", "doc": ["String representing a port or a set of ports (eg.", "\u201880\u2019, or \u201880,8080\u2019), or None."]}
{"index": 2775, "name": "http.cookiejar.Cookie.path", "module": "http", "doc": ["Cookie path (a string, eg.", "'/acme/rocket_launchers')."]}
{"index": 2776, "name": "http.cookiejar.Cookie.secure", "module": "http", "doc": ["True if cookie should only be returned over a secure connection."]}
{"index": 2777, "name": "http.cookiejar.Cookie.expires", "module": "http", "doc": ["Integer expiry date in seconds since epoch, or None.", "See also the is_expired() method."]}
{"index": 2778, "name": "http.cookiejar.Cookie.discard", "module": "http", "doc": ["True if this is a session cookie."]}
{"index": 2779, "name": "http.cookiejar.Cookie.comment", "module": "http", "doc": ["String comment from the server explaining the function of this cookie, or None."]}
{"index": 2780, "name": "http.cookiejar.Cookie.comment_url", "module": "http", "doc": ["URL linking to a comment from the server explaining the function of this cookie, or None."]}
{"index": 2781, "name": "http.cookiejar.Cookie.rfc2109", "module": "http", "doc": ["True if this cookie was received as an RFC 2109 cookie (ie.", "the cookie arrived in a Set-Cookie header, and the value of the Version cookie-attribute in that header was 1).", "This attribute is provided because http.cookiejar may \u2018downgrade\u2019 RFC 2109 cookies to Netscape cookies, in which case version is 0."]}
{"index": 2782, "name": "http.cookiejar.Cookie.port_specified", "module": "http", "doc": ["True if a port or set of ports was explicitly specified by the server (in the Set-Cookie / Set-Cookie2 header)."]}
{"index": 2783, "name": "http.cookiejar.Cookie.domain_specified", "module": "http", "doc": ["True if a domain was explicitly specified by the server."]}
{"index": 2784, "name": "http.cookiejar.Cookie.domain_initial_dot", "module": "http", "doc": ["True if the domain explicitly specified by the server began with a dot ('.", "')."]}
{"index": 2785, "name": "http.cookiejar.Cookie.has_nonstandard_attr", "module": "http", "doc": ["Return true if cookie has the named cookie-attribute."]}
{"index": 2786, "name": "http.cookiejar.Cookie.get_nonstandard_attr", "module": "http", "doc": ["If cookie has the named cookie-attribute, return its value.", "Otherwise, return default."]}
{"index": 2787, "name": "http.cookiejar.Cookie.set_nonstandard_attr", "module": "http", "doc": ["Set the value of the named cookie-attribute."]}
{"index": 2788, "name": "http.cookiejar.Cookie.is_expired", "module": "http", "doc": ["True if cookie has passed the time at which the server requested it should expire.", "If now is given (in seconds since the epoch), return whether the cookie has expired at the specified time."]}
{"index": 2789, "name": "http.cookies.CookieError", "module": "http", "doc": ["Exception failing because of RFC 2109 invalidity: incorrect attributes, incorrect Set-Cookie header, etc."]}
{"index": 2790, "name": "http.cookies.BaseCookie", "module": "http", "doc": ["This class is a dictionary-like object whose keys are strings and whose values are Morsel instances.", "Note that upon setting a key to a value, the value is first converted to a Morsel containing the key and the value.", "If input is given, it is passed to the load() method."]}
{"index": 2791, "name": "http.cookies.SimpleCookie", "module": "http", "doc": ["This class derives from BaseCookie and overrides value_decode() and value_encode().", "SimpleCookie supports strings as cookie values.", "When setting the value, SimpleCookie calls the builtin str() to convert the value to a string.", "Values received from HTTP are kept as strings."]}
{"index": 2792, "name": "http.cookies.BaseCookie.value_decode", "module": "http", "doc": ["Return a tuple (real_value, coded_value) from a string representation.", "real_value can be any type.", "This method does no decoding in BaseCookie \u2014 it exists so it can be overridden."]}
{"index": 2793, "name": "http.cookies.BaseCookie.value_encode", "module": "http", "doc": ["Return a tuple (real_value, coded_value).", "val can be any type, but coded_value will always be converted to a string.", "This method does no encoding in BaseCookie \u2014 it exists so it can be overridden.", "In general, it should be the case that value_encode() and value_decode() are inverses on the range of value_decode."]}
{"index": 2794, "name": "http.cookies.BaseCookie.output", "module": "http", "doc": ["Return a string representation suitable to be sent as HTTP headers.", "attrs and header are sent to each Morsel\u2019s output() method.", "sep is used to join the headers together, and is by default the combination '\\r\\n' (CRLF)."]}
{"index": 2795, "name": "http.cookies.BaseCookie.js_output", "module": "http", "doc": ["Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP headers was sent.", "The meaning for attrs is the same as in output()."]}
{"index": 2796, "name": "http.cookies.BaseCookie.load", "module": "http", "doc": ["If rawdata is a string, parse it as an HTTP_COOKIE and add the values found there as Morsels.", "If it is a dictionary, it is equivalent to:"]}
{"index": 2797, "name": "http.cookies.Morsel", "module": "http", "doc": ["Abstract a key/value pair, which has some RFC 2109 attributes.", "Morsels are dictionary-like objects, whose set of keys is constant \u2014 the valid RFC 2109 attributes, which are", "The attribute httponly specifies that the cookie is only transferred in HTTP requests, and is not accessible through JavaScript.", "This is intended to mitigate some forms of cross-site scripting.", "The keys are case-insensitive and their default value is ''."]}
{"index": 2798, "name": "http.cookies.Morsel.value", "module": "http", "doc": ["The value of the cookie."]}
{"index": 2799, "name": "http.cookies.Morsel.coded_value", "module": "http", "doc": ["The encoded value of the cookie \u2014 this is what should be sent."]}
{"index": 2800, "name": "http.cookies.Morsel.key", "module": "http", "doc": ["The name of the cookie."]}
{"index": 2801, "name": "http.cookies.Morsel.set", "module": "http", "doc": ["Set the key, value and coded_value attributes."]}
{"index": 2802, "name": "http.cookies.Morsel.isReservedKey", "module": "http", "doc": ["Whether K is a member of the set of keys of a Morsel."]}
{"index": 2803, "name": "http.cookies.Morsel.output", "module": "http", "doc": ["Return a string representation of the Morsel, suitable to be sent as an HTTP header.", "By default, all the attributes are included, unless attrs is given, in which case it should be a list of attributes to use.", "header is by default \"Set-Cookie:\"."]}
{"index": 2804, "name": "http.cookies.Morsel.js_output", "module": "http", "doc": ["Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP header was sent.", "The meaning for attrs is the same as in output()."]}
{"index": 2805, "name": "http.cookies.Morsel.OutputString", "module": "http", "doc": ["Return a string representing the Morsel, without any surrounding HTTP or JavaScript.", "The meaning for attrs is the same as in output()."]}
{"index": 2806, "name": "http.cookies.Morsel.update", "module": "http", "doc": ["Update the values in the Morsel dictionary with the values in the dictionary values.", "Raise an error if any of the keys in the values dict is not a valid RFC 2109 attribute."]}
{"index": 2807, "name": "http.cookies.Morsel.copy", "module": "http", "doc": ["Return a shallow copy of the Morsel object."]}
{"index": 2808, "name": "http.cookies.Morsel.setdefault", "module": "http", "doc": ["Raise an error if key is not a valid RFC 2109 attribute, otherwise behave the same as dict.setdefault()."]}
{"index": 2809, "name": "http.HTTPStatus", "module": "http", "doc": ["A subclass of enum.IntEnum that defines a set of HTTP status codes, reason phrases and long descriptions written in English.", "Usage:"]}
{"index": 2810, "name": "http.server.HTTPServer", "module": "http", "doc": ["This class builds on the TCPServer class by storing the server address as instance variables named server_name and server_port.", "The server is accessible by the handler, typically through the handler\u2019s server instance variable."]}
{"index": 2811, "name": "http.server.ThreadingHTTPServer", "module": "http", "doc": ["This class is identical to HTTPServer but uses threads to handle requests by using the ThreadingMixIn.", "This is useful to handle web browsers pre-opening sockets, on which HTTPServer would wait indefinitely."]}
{"index": 2812, "name": "http.server.BaseHTTPRequestHandler", "module": "http", "doc": ["This class is used to handle the HTTP requests that arrive at the server.", "By itself, it cannot respond to any actual HTTP requests; it must be subclassed to handle each request method (e.g.", "GET or POST).", "BaseHTTPRequestHandler provides a number of class and instance variables, and methods for use by subclasses.", "The handler will parse the request and the headers, then call a method specific to the request type.", "The method name is constructed from the request.", "For example, for the request method SPAM, the do_SPAM() method will be called with no arguments.", "All of the relevant information is stored in instance variables of the handler.", "Subclasses should not need to override or extend the __init__() method.", "BaseHTTPRequestHandler has the following instance variables:", "BaseHTTPRequestHandler has the following attributes:", "A BaseHTTPRequestHandler instance has the following methods:"]}
{"index": 2813, "name": "http.server.BaseHTTPRequestHandler.client_address", "module": "http", "doc": ["Contains a tuple of the form (host, port) referring to the client\u2019s address."]}
{"index": 2814, "name": "http.server.BaseHTTPRequestHandler.server", "module": "http", "doc": ["Contains the server instance."]}
{"index": 2815, "name": "http.server.BaseHTTPRequestHandler.close_connection", "module": "http", "doc": ["Boolean that should be set before handle_one_request() returns, indicating if another request may be expected, or if the connection should be shut down."]}
{"index": 2816, "name": "http.server.BaseHTTPRequestHandler.requestline", "module": "http", "doc": ["Contains the string representation of the HTTP request line.", "The terminating CRLF is stripped.", "This attribute should be set by handle_one_request().", "If no valid request line was processed, it should be set to the empty string."]}
{"index": 2817, "name": "http.server.BaseHTTPRequestHandler.command", "module": "http", "doc": ["Contains the command (request type).", "For example, 'GET'."]}
{"index": 2818, "name": "http.server.BaseHTTPRequestHandler.path", "module": "http", "doc": ["Contains the request path."]}
{"index": 2819, "name": "http.server.BaseHTTPRequestHandler.request_version", "module": "http", "doc": ["Contains the version string from the request.", "For example, 'HTTP/1.0'."]}
{"index": 2820, "name": "http.server.BaseHTTPRequestHandler.headers", "module": "http", "doc": ["Holds an instance of the class specified by the MessageClass class variable.", "This instance parses and manages the headers in the HTTP request.", "The parse_headers() function from http.client is used to parse the headers and it requires that the HTTP request provide a valid RFC 2822 style header."]}
{"index": 2821, "name": "http.server.BaseHTTPRequestHandler.rfile", "module": "http", "doc": ["An io.BufferedIOBase input stream, ready to read from the start of the optional input data."]}
{"index": 2822, "name": "http.server.BaseHTTPRequestHandler.wfile", "module": "http", "doc": ["Contains the output stream for writing a response back to the client.", "Proper adherence to the HTTP protocol must be used when writing to this stream in order to achieve successful interoperation with HTTP clients."]}
{"index": 2823, "name": "http.server.BaseHTTPRequestHandler.server_version", "module": "http", "doc": ["Specifies the server software version.", "You may want to override this.", "The format is multiple whitespace-separated strings, where each string is of the form name[/version].", "For example, 'BaseHTTP/0.2'."]}
{"index": 2824, "name": "http.server.BaseHTTPRequestHandler.sys_version", "module": "http", "doc": ["Contains the Python system version, in a form usable by the version_string method and the server_version class variable.", "For example, 'Python/1.4'."]}
{"index": 2825, "name": "http.server.BaseHTTPRequestHandler.error_message_format", "module": "http", "doc": ["Specifies a format string that should be used by send_error() method for building an error response to the client.", "The string is filled by default with variables from responses based on the status code that passed to send_error()."]}
{"index": 2826, "name": "http.server.BaseHTTPRequestHandler.error_content_type", "module": "http", "doc": ["Specifies the Content-Type HTTP header of error responses sent to the client.", "The default value is 'text/html'."]}
{"index": 2827, "name": "http.server.BaseHTTPRequestHandler.protocol_version", "module": "http", "doc": ["This specifies the HTTP protocol version used in responses.", "If set to 'HTTP/1.1', the server will permit HTTP persistent connections; however, your server must then include an accurate Content-Length header (using send_header()) in all of its responses to clients.", "For backwards compatibility, the setting defaults to 'HTTP/1.0'."]}
{"index": 2828, "name": "http.server.BaseHTTPRequestHandler.MessageClass", "module": "http", "doc": ["Specifies an email.message.Message-like class to parse HTTP headers.", "Typically, this is not overridden, and it defaults to http.client.HTTPMessage."]}
{"index": 2829, "name": "http.server.BaseHTTPRequestHandler.responses", "module": "http", "doc": ["This attribute contains a mapping of error code integers to two-element tuples containing a short and long message.", "For example, {code: (shortmessage, longmessage)}.", "The shortmessage is usually used as the message key in an error response, and longmessage as the explain key.", "It is used by send_response_only() and send_error() methods."]}
{"index": 2830, "name": "http.server.BaseHTTPRequestHandler.handle", "module": "http", "doc": ["Calls handle_one_request() once (or, if persistent connections are enabled, multiple times) to handle incoming HTTP requests.", "You should never need to override it; instead, implement appropriate do_*() methods."]}
{"index": 2831, "name": "http.server.BaseHTTPRequestHandler.handle_one_request", "module": "http", "doc": ["This method will parse and dispatch the request to the appropriate do_*() method.", "You should never need to override it."]}
{"index": 2832, "name": "http.server.BaseHTTPRequestHandler.handle_expect_100", "module": "http", "doc": ["When a HTTP/1.1 compliant server receives an Expect: 100-continue request header it responds back with a 100 Continue followed by 200 OK headers.", "This method can be overridden to raise an error if the server does not want the client to continue.", "For e.g.", "server can chose to send 417 Expectation Failed as a response header and return False."]}
{"index": 2833, "name": "http.server.BaseHTTPRequestHandler.send_error", "module": "http", "doc": ["Sends and logs a complete error reply to the client.", "The numeric code specifies the HTTP error code, with message as an optional, short, human readable description of the error.", "The explain argument can be used to provide more detailed information about the error; it will be formatted using the error_message_format attribute and emitted, after a complete set of headers, as the response body.", "The responses attribute holds the default values for message and explain that will be used if no value is provided; for unknown codes the default value for both is the string ???.", "The body will be empty if the method is HEAD or the response code is one of the following: 1xx, 204 No Content, 205 Reset Content, 304 Not Modified."]}
{"index": 2834, "name": "http.server.BaseHTTPRequestHandler.send_response", "module": "http", "doc": ["Adds a response header to the headers buffer and logs the accepted request.", "The HTTP response line is written to the internal buffer, followed by Server and Date headers.", "The values for these two headers are picked up from the version_string() and date_time_string() methods, respectively.", "If the server does not intend to send any other headers using the send_header() method, then send_response() should be followed by an end_headers() call."]}
{"index": 2835, "name": "http.server.BaseHTTPRequestHandler.send_header", "module": "http", "doc": ["Adds the HTTP header to an internal buffer which will be written to the output stream when either end_headers() or flush_headers() is invoked.", "keyword should specify the header keyword, with value specifying its value.", "Note that, after the send_header calls are done, end_headers() MUST BE called in order to complete the operation."]}
{"index": 2836, "name": "http.server.BaseHTTPRequestHandler.send_response_only", "module": "http", "doc": ["Sends the response header only, used for the purposes when 100 Continue response is sent by the server to the client.", "The headers not buffered and sent directly the output stream.If the message is not specified, the HTTP message corresponding the response code  is sent."]}
{"index": 2837, "name": "http.server.BaseHTTPRequestHandler.end_headers", "module": "http", "doc": ["Adds a blank line (indicating the end of the HTTP headers in the response) to the headers buffer and calls flush_headers()."]}
{"index": 2838, "name": "http.server.BaseHTTPRequestHandler.flush_headers", "module": "http", "doc": ["Finally send the headers to the output stream and flush the internal headers buffer."]}
{"index": 2839, "name": "http.server.BaseHTTPRequestHandler.log_request", "module": "http", "doc": ["Logs an accepted (successful) request.", "code should specify the numeric HTTP code associated with the response.", "If a size of the response is available, then it should be passed as the size parameter."]}
{"index": 2840, "name": "http.server.BaseHTTPRequestHandler.log_error", "module": "http", "doc": ["Logs an error when a request cannot be fulfilled.", "By default, it passes the message to log_message(), so it takes the same arguments (format and additional values)."]}
{"index": 2841, "name": "http.server.BaseHTTPRequestHandler.log_message", "module": "http", "doc": ["Logs an arbitrary message to sys.stderr.", "This is typically overridden to create custom error logging mechanisms.", "The format argument is a standard printf-style format string, where the additional arguments to log_message() are applied as inputs to the formatting.", "The client ip address and current date and time are prefixed to every message logged."]}
{"index": 2842, "name": "http.server.BaseHTTPRequestHandler.version_string", "module": "http", "doc": ["Returns the server software\u2019s version string.", "This is a combination of the server_version and sys_version attributes."]}
{"index": 2843, "name": "http.server.BaseHTTPRequestHandler.date_time_string", "module": "http", "doc": ["Returns the date and time given by timestamp (which must be None or in the format returned by time.time()), formatted for a message header.", "If timestamp is omitted, it uses the current date and time.", "The result looks like 'Sun, 06 Nov 1994 08:49:37 GMT'."]}
{"index": 2844, "name": "http.server.BaseHTTPRequestHandler.log_date_time_string", "module": "http", "doc": ["Returns the current date and time, formatted for logging."]}
{"index": 2845, "name": "http.server.BaseHTTPRequestHandler.address_string", "module": "http", "doc": ["Returns the client address."]}
{"index": 2846, "name": "http.server.SimpleHTTPRequestHandler", "module": "http", "doc": ["This class serves files from the current directory and below, directly mapping the directory structure to HTTP requests.", "A lot of the work, such as parsing the request, is done by the base class BaseHTTPRequestHandler.", "This class implements the do_GET() and do_HEAD() functions.", "The following are defined as class-level attributes of SimpleHTTPRequestHandler:", "The SimpleHTTPRequestHandler class defines the following methods:"]}
{"index": 2847, "name": "http.server.SimpleHTTPRequestHandler.server_version", "module": "http", "doc": ["This will be \"SimpleHTTP/\" + __version__, where __version__ is defined at the module level."]}
{"index": 2848, "name": "http.server.SimpleHTTPRequestHandler.extensions_map", "module": "http", "doc": ["A dictionary mapping suffixes into MIME types.", "The default is signified by an empty string, and is considered to be application/octet-stream.", "The mapping is used case-insensitively, and so should contain only lower-cased keys."]}
{"index": 2849, "name": "http.server.SimpleHTTPRequestHandler.directory", "module": "http", "doc": ["If not specified, the directory to serve is the current working directory."]}
{"index": 2850, "name": "http.server.SimpleHTTPRequestHandler.do_HEAD", "module": "http", "doc": ["This method serves the 'HEAD' request type: it sends the headers it would send for the equivalent GET request.", "See the do_GET() method for a more complete explanation of the possible headers."]}
{"index": 2851, "name": "http.server.SimpleHTTPRequestHandler.do_GET", "module": "http", "doc": ["The request is mapped to a local file by interpreting the request as a path relative to the current working directory.", "If the request was mapped to a directory, the directory is checked for a file named index.html or index.htm (in that order).", "If found, the file\u2019s contents are returned; otherwise a directory listing is generated by calling the list_directory() method.", "This method uses os.listdir() to scan the directory, and returns a 404 error response if the listdir() fails.", "If the request was mapped to a file, it is opened.", "Any OSError exception in opening the requested file is mapped to a 404, 'File not found' error.", "If there was a 'If-Modified-Since' header in the request, and the file was not modified after this time, a 304, 'Not Modified' response is sent.", "Otherwise, the content type is guessed by calling the guess_type() method, which in turn uses the extensions_map variable, and the file contents are returned.", "A 'Content-type:' header with the guessed content type is output, followed by a 'Content-Length:' header with the file\u2019s size and a 'Last-Modified:' header with the file\u2019s modification time.", "Then follows a blank line signifying the end of the headers, and then the contents of the file are output.", "If the file\u2019s MIME type starts with text/ the file is opened in text mode; otherwise binary mode is used.", "For example usage, see the implementation of the test() function invocation in the http.server module."]}
{"index": 2852, "name": "http.server.CGIHTTPRequestHandler", "module": "http", "doc": ["This class is used to serve either files or output of CGI scripts from the current directory and below.", "Note that mapping HTTP hierarchic structure to local directory structure is exactly as in SimpleHTTPRequestHandler.", "The class will however, run the CGI script, instead of serving it as a file, if it guesses it to be a CGI script.", "Only directory-based CGI are used \u2014 the other common server configuration is to treat special extensions as denoting CGI scripts.", "The do_GET() and do_HEAD() functions are modified to run CGI scripts and serve the output, instead of serving files, if the request leads to somewhere below the cgi_directories path.", "The CGIHTTPRequestHandler defines the following data member:", "The CGIHTTPRequestHandler defines the following method:", "Note that CGI scripts will be run with UID of user nobody, for security reasons.", "Problems with the CGI script will be translated to error 403."]}
{"index": 2853, "name": "http.server.CGIHTTPRequestHandler.cgi_directories", "module": "http", "doc": ["This defaults to ['/cgi-bin', '/htbin'] and describes directories to treat as containing CGI scripts."]}
{"index": 2854, "name": "http.server.CGIHTTPRequestHandler.do_POST", "module": "http", "doc": ["This method serves the 'POST' request type, only allowed for CGI scripts.", "Error 501, \u201cCan only POST to CGI scripts\u201d, is output when trying to POST to a non-CGI url."]}
{"index": 2855, "name": "imaplib.IMAP4", "module": "imaplib", "doc": ["This class implements the actual IMAP4 protocol.", "The connection is created and protocol version (IMAP4 or IMAP4rev1) is determined when the instance is initialized.", "If host is not specified, '' (the local host) is used.", "If port is omitted, the standard IMAP4 port (143) is used.", "The IMAP4 class supports the with statement.", "When used like this, the IMAP4 LOGOUT command is issued automatically when the with statement exits.", "E.g.", ":"]}
{"index": 2856, "name": "imaplib.IMAP4.error", "module": "imaplib", "doc": ["Exception raised on any errors.", "The reason for the exception is passed to the constructor as a string."]}
{"index": 2857, "name": "imaplib.IMAP4.abort", "module": "imaplib", "doc": ["IMAP4 server errors cause this exception to be raised.", "This is a sub-class of IMAP4.error.", "Note that closing the instance and instantiating a new one will usually allow recovery from this exception."]}
{"index": 2858, "name": "imaplib.IMAP4.readonly", "module": "imaplib", "doc": ["This exception is raised when a writable mailbox has its status changed by the server.", "This is a sub-class of IMAP4.error.", "Some other client now has write permission, and the mailbox will need to be re-opened to re-obtain write permission."]}
{"index": 2859, "name": "imaplib.IMAP4_SSL", "module": "imaplib", "doc": ["This is a subclass derived from IMAP4 that connects over an SSL encrypted socket (to use this class you need a socket module that was compiled with SSL support).", "If host is not specified, '' (the local host) is used.", "If port is omitted, the standard IMAP4-over-SSL port (993) is used.", "ssl_context is a ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.", "Please read Security considerations for best practices.", "keyfile and certfile are a legacy alternative to ssl_context - they can point to PEM-formatted private key and certificate chain files for the SSL connection.", "Note that the keyfile/certfile parameters are mutually exclusive with ssl_context, a ValueError is raised if keyfile/certfile is provided along with ssl_context."]}
{"index": 2860, "name": "imaplib.IMAP4_stream", "module": "imaplib", "doc": ["This is a subclass derived from IMAP4 that connects to the stdin/stdout file descriptors created by passing command to subprocess.Popen()."]}
{"index": 2861, "name": "imaplib.Internaldate2tuple", "module": "imaplib", "doc": ["Parse an IMAP4 INTERNALDATE string and return corresponding local time.", "The return value is a time.struct_time tuple or None if the string has wrong format."]}
{"index": 2862, "name": "imaplib.Int2AP", "module": "imaplib", "doc": ["Converts an integer into a string representation using characters from the set [A .. P]."]}
{"index": 2863, "name": "imaplib.ParseFlags", "module": "imaplib", "doc": ["Converts an IMAP4 FLAGS response to a tuple of individual flags."]}
{"index": 2864, "name": "imaplib.Time2Internaldate", "module": "imaplib", "doc": ["Convert date_time to an IMAP4 INTERNALDATE representation.", "The return value is a string in the form: \"DD-Mmm-YYYY HH:MM:SS +HHMM\" (including double-quotes).", "The date_time argument can be a number (int or float) representing seconds since epoch (as returned by time.time()), a 9-tuple representing local time an instance of time.struct_time (as returned by time.localtime()), an aware instance of datetime.datetime, or a double-quoted string.", "In the last case, it is assumed to already be in the correct format."]}
{"index": 2865, "name": "imaplib.IMAP4.append", "module": "imaplib", "doc": ["Append message to named mailbox."]}
{"index": 2866, "name": "imaplib.IMAP4.authenticate", "module": "imaplib", "doc": ["Authenticate command \u2014 requires response processing.", "mechanism specifies which authentication mechanism is to be used - it should appear in the instance variable capabilities in the form AUTH=mechanism.", "authobject must be a callable object:", "It will be called to process server continuation responses; the response argument it is passed will be bytes.", "It should return bytes data that will be base64 encoded and sent to the server.", "It should return None if the client abort response * should be sent instead."]}
{"index": 2867, "name": "imaplib.IMAP4.check", "module": "imaplib", "doc": ["Checkpoint mailbox on server."]}
{"index": 2868, "name": "imaplib.IMAP4.close", "module": "imaplib", "doc": ["Close currently selected mailbox.", "Deleted messages are removed from writable mailbox.", "This is the recommended command before LOGOUT."]}
{"index": 2869, "name": "imaplib.IMAP4.copy", "module": "imaplib", "doc": ["Copy message_set messages onto end of new_mailbox."]}
{"index": 2870, "name": "imaplib.IMAP4.create", "module": "imaplib", "doc": ["Create new mailbox named mailbox."]}
{"index": 2871, "name": "imaplib.IMAP4.delete", "module": "imaplib", "doc": ["Delete old mailbox named mailbox."]}
{"index": 2872, "name": "imaplib.IMAP4.deleteacl", "module": "imaplib", "doc": ["Delete the ACLs (remove any rights) set for who on mailbox."]}
{"index": 2873, "name": "imaplib.IMAP4.enable", "module": "imaplib", "doc": ["Enable capability (see RFC 5161).", "Most capabilities do not need to be enabled.", "Currently only the UTF8=ACCEPT capability is supported (see RFC 6855)."]}
{"index": 2874, "name": "imaplib.IMAP4.expunge", "module": "imaplib", "doc": ["Permanently remove deleted items from selected mailbox.", "Generates an EXPUNGE response for each deleted message.", "Returned data contains a list of EXPUNGE message numbers in order received."]}
{"index": 2875, "name": "imaplib.IMAP4.fetch", "module": "imaplib", "doc": ["Fetch (parts of) messages.", "message_parts should be a string of message part names enclosed within parentheses, eg: \"(UID BODY[TEXT])\".", "Returned data are tuples of message part envelope and data."]}
{"index": 2876, "name": "imaplib.IMAP4.getacl", "module": "imaplib", "doc": ["Get the ACLs for mailbox.", "The method is non-standard, but is supported by the Cyrus server."]}
{"index": 2877, "name": "imaplib.IMAP4.getannotation", "module": "imaplib", "doc": ["Retrieve the specified ANNOTATIONs for mailbox.", "The method is non-standard, but is supported by the Cyrus server."]}
{"index": 2878, "name": "imaplib.IMAP4.getquota", "module": "imaplib", "doc": ["Get the quota root\u2019s resource usage and limits.", "This method is part of the IMAP4 QUOTA extension defined in rfc2087."]}
{"index": 2879, "name": "imaplib.IMAP4.getquotaroot", "module": "imaplib", "doc": ["Get the list of quota roots for the named mailbox.", "This method is part of the IMAP4 QUOTA extension defined in rfc2087."]}
{"index": 2880, "name": "imaplib.IMAP4.list", "module": "imaplib", "doc": ["List mailbox names in directory matching pattern.", "directory defaults to the top-level mail folder, and pattern defaults to match anything.", "Returned data contains a list of LIST responses."]}
{"index": 2881, "name": "imaplib.IMAP4.login", "module": "imaplib", "doc": ["Identify the client using a plaintext password.", "The password will be quoted."]}
{"index": 2882, "name": "imaplib.IMAP4.login_cram_md5", "module": "imaplib", "doc": ["Force use of CRAM-MD5 authentication when identifying the client to protect the password.", "Will only work if the server CAPABILITY response includes the phrase AUTH=CRAM-MD5."]}
{"index": 2883, "name": "imaplib.IMAP4.logout", "module": "imaplib", "doc": ["Shutdown connection to server.", "Returns server BYE response."]}
{"index": 2884, "name": "imaplib.IMAP4.lsub", "module": "imaplib", "doc": ["List subscribed mailbox names in directory matching pattern.", "directory defaults to the top level directory and pattern defaults to match any mailbox.", "Returned data are tuples of message part envelope and data."]}
{"index": 2885, "name": "imaplib.IMAP4.myrights", "module": "imaplib", "doc": ["Show my ACLs for a mailbox (i.e.", "the rights that I have on mailbox)."]}
{"index": 2886, "name": "imaplib.IMAP4.namespace", "module": "imaplib", "doc": ["Returns IMAP namespaces as defined in RFC 2342."]}
{"index": 2887, "name": "imaplib.IMAP4.noop", "module": "imaplib", "doc": ["Send NOOP to server."]}
{"index": 2888, "name": "imaplib.IMAP4.open", "module": "imaplib", "doc": ["Opens socket to port at host.", "This method is implicitly called by the IMAP4 constructor.", "The connection objects established by this method will be used in the IMAP4.read(), IMAP4.readline(), IMAP4.send(), and IMAP4.shutdown() methods.", "You may override this method."]}
{"index": 2889, "name": "imaplib.IMAP4.partial", "module": "imaplib", "doc": ["Fetch truncated part of a message.", "Returned data is a tuple of message part envelope and data."]}
{"index": 2890, "name": "imaplib.IMAP4.proxyauth", "module": "imaplib", "doc": ["Assume authentication as user.", "Allows an authorised administrator to proxy into any user\u2019s mailbox."]}
{"index": 2891, "name": "imaplib.IMAP4.read", "module": "imaplib", "doc": ["Reads size bytes from the remote server.", "You may override this method."]}
{"index": 2892, "name": "imaplib.IMAP4.readline", "module": "imaplib", "doc": ["Reads one line from the remote server.", "You may override this method."]}
{"index": 2893, "name": "imaplib.IMAP4.recent", "module": "imaplib", "doc": ["Prompt server for an update.", "Returned data is None if no new messages, else value of RECENT response."]}
{"index": 2894, "name": "imaplib.IMAP4.rename", "module": "imaplib", "doc": ["Rename mailbox named oldmailbox to newmailbox."]}
{"index": 2895, "name": "imaplib.IMAP4.response", "module": "imaplib", "doc": ["Return data for response code if received, or None.", "Returns the given code, instead of the usual type."]}
{"index": 2896, "name": "imaplib.IMAP4.search", "module": "imaplib", "doc": ["Search mailbox for matching messages.", "charset may be None, in which case no CHARSET will be specified in the request to the server.", "The IMAP protocol requires that at least one criterion be specified; an exception will be raised when the server returns an error.", "charset must be None if the UTF8=ACCEPT capability was enabled using the enable() command.", "Example:"]}
{"index": 2897, "name": "imaplib.IMAP4.select", "module": "imaplib", "doc": ["Select a mailbox.", "Returned data is the count of messages in mailbox (EXISTS response).", "The default mailbox is 'INBOX'.", "If the readonly flag is set, modifications to the mailbox are not allowed."]}
{"index": 2898, "name": "imaplib.IMAP4.send", "module": "imaplib", "doc": ["Sends data to the remote server.", "You may override this method."]}
{"index": 2899, "name": "imaplib.IMAP4.setacl", "module": "imaplib", "doc": ["Set an ACL for mailbox.", "The method is non-standard, but is supported by the Cyrus server."]}
{"index": 2900, "name": "imaplib.IMAP4.setannotation", "module": "imaplib", "doc": ["Set ANNOTATIONs for mailbox.", "The method is non-standard, but is supported by the Cyrus server."]}
{"index": 2901, "name": "imaplib.IMAP4.setquota", "module": "imaplib", "doc": ["Set the quota root\u2019s resource limits.", "This method is part of the IMAP4 QUOTA extension defined in rfc2087."]}
{"index": 2902, "name": "imaplib.IMAP4.shutdown", "module": "imaplib", "doc": ["Close connection established in open.", "This method is implicitly called by IMAP4.logout().", "You may override this method."]}
{"index": 2903, "name": "imaplib.IMAP4.socket", "module": "imaplib", "doc": ["Returns socket instance used to connect to server."]}
{"index": 2904, "name": "imaplib.IMAP4.sort", "module": "imaplib", "doc": ["The sort command is a variant of search with sorting semantics for the results.", "Returned data contains a space separated list of matching message numbers.", "Sort has two arguments before the search_criterion argument(s); a parenthesized list of sort_criteria, and the searching charset.", "Note that unlike search, the searching charset argument is mandatory.", "There is also a uid sort command which corresponds to sort the way that uid search corresponds to search.", "The sort command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria.", "It then returns the numbers of matching messages.", "This is an IMAP4rev1 extension command."]}
{"index": 2905, "name": "imaplib.IMAP4.starttls", "module": "imaplib", "doc": ["Send a STARTTLS command.", "The ssl_context argument is optional and should be a ssl.SSLContext object.", "This will enable encryption on the IMAP connection.", "Please read Security considerations for best practices."]}
{"index": 2906, "name": "imaplib.IMAP4.status", "module": "imaplib", "doc": ["Request named status conditions for mailbox."]}
{"index": 2907, "name": "imaplib.IMAP4.store", "module": "imaplib", "doc": ["Alters flag dispositions for messages in mailbox.", "command is specified by section 6.4.6 of RFC 2060 as being one of \u201cFLAGS\u201d, \u201c+FLAGS\u201d, or \u201c-FLAGS\u201d, optionally with a suffix of \u201c.SILENT\u201d.", "For example, to set the delete flag on all messages:"]}
{"index": 2908, "name": "imaplib.IMAP4.subscribe", "module": "imaplib", "doc": ["Subscribe to new mailbox."]}
{"index": 2909, "name": "imaplib.IMAP4.thread", "module": "imaplib", "doc": ["The thread command is a variant of search with threading semantics for the results.", "Returned data contains a space separated list of thread members.", "Thread members consist of zero or more messages numbers, delimited by spaces, indicating successive parent and child.", "Thread has two arguments before the search_criterion argument(s); a threading_algorithm, and the searching charset.", "Note that unlike search, the searching charset argument is mandatory.", "There is also a uid thread command which corresponds to thread the way that uid search corresponds to search.", "The thread command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria.", "It then returns the matching messages threaded according to the specified threading algorithm.", "This is an IMAP4rev1 extension command."]}
{"index": 2910, "name": "imaplib.IMAP4.uid", "module": "imaplib", "doc": ["Execute command args with messages identified by UID, rather than message number.", "Returns response appropriate to command.", "At least one argument must be supplied; if none are provided, the server will return an error and an exception will be raised."]}
{"index": 2911, "name": "imaplib.IMAP4.unsubscribe", "module": "imaplib", "doc": ["Unsubscribe from old mailbox."]}
{"index": 2912, "name": "imaplib.IMAP4.xatom", "module": "imaplib", "doc": ["Allow simple extension commands notified by server in CAPABILITY response."]}
{"index": 2913, "name": "imaplib.IMAP4.PROTOCOL_VERSION", "module": "imaplib", "doc": ["The most recent supported protocol in the CAPABILITY response from the server."]}
{"index": 2914, "name": "imaplib.IMAP4.debug", "module": "imaplib", "doc": ["Integer value to control debugging output.", "The initialize value is taken from the module variable Debug.", "Values greater than three trace each command."]}
{"index": 2915, "name": "imaplib.IMAP4.utf8_enabled", "module": "imaplib", "doc": ["Boolean value that is normally False, but is set to True if an enable() command is successfully issued for the UTF8=ACCEPT capability."]}
{"index": 2916, "name": "imghdr.what", "module": "imghdr", "doc": ["Tests the image data contained in the file named by filename, and returns a string describing the image type.", "If optional h is provided, the filename is ignored and h is assumed to contain the byte stream to test."]}
{"index": 2917, "name": "imghdr.tests", "module": "imghdr", "doc": ["A list of functions performing the individual tests.", "Each function takes two arguments: the byte-stream and an open file-like object.", "When what() is called with a byte-stream, the file-like object will be None.", "The test function should return a string describing the image type if the test succeeded, or None if it failed."]}
{"index": 2918, "name": "imp.get_magic", "module": "imp", "doc": ["Return the magic string value used to recognize byte-compiled code files (.pyc files).", "(This value may be different for each Python version.)"]}
{"index": 2919, "name": "imp.get_suffixes", "module": "imp", "doc": ["Return a list of 3-element tuples, each describing a particular type of module.", "Each triple has the form (suffix, mode, type), where suffix is a string to be appended to the module name to form the filename to search for, mode is the mode string to pass to the built-in open() function to open the file (this can be 'r' for text files or 'rb' for binary files), and type is the file type, which has one of the values PY_SOURCE, PY_COMPILED, or C_EXTENSION, described below."]}
{"index": 2920, "name": "imp.find_module", "module": "imp", "doc": ["Try to find the module name.", "If path is omitted or None, the list of directory names given by sys.path is searched, but first a few special places are searched: the function tries to find a built-in module with the given name (C_BUILTIN), then a frozen module (PY_FROZEN), and on some systems some other places are looked in as well (on Windows, it looks in the registry which may point to a specific file).", "Otherwise, path must be a list of directory names; each directory is searched for files with any of the suffixes returned by get_suffixes() above.", "Invalid names in the list are silently ignored (but all list items must be strings).", "If search is successful, the return value is a 3-element tuple (file, pathname, description):", "file is an open file object positioned at the beginning, pathname is the pathname of the file found, and description is a 3-element tuple as contained in the list returned by get_suffixes() describing the kind of module found.", "If the module is built-in or frozen then file and pathname are both None and the description tuple contains empty strings for its suffix and mode; the module type is indicated as given in parentheses above.", "If the search is unsuccessful, ImportError is raised.", "Other exceptions indicate problems with the arguments or environment.", "If the module is a package, file is None, pathname is the package path and the last item in the description tuple is PKG_DIRECTORY.", "This function does not handle hierarchical module names (names containing dots).", "In order to find P.M, that is, submodule M of package P, use find_module() and load_module() to find and load package P, and then use find_module() with the path argument set to P.__path__.", "When P itself has a dotted name, apply this recipe recursively."]}
{"index": 2921, "name": "imp.load_module", "module": "imp", "doc": ["Load a module that was previously found by find_module() (or by an otherwise conducted search yielding compatible results).", "This function does more than importing the module: if the module was already imported, it will reload the module!", "The name argument indicates the full module name (including the package name, if this is a submodule of a package).", "The file argument is an open file, and pathname is the corresponding file name; these can be None and '', respectively, when the module is a package or not being loaded from a file.", "The description argument is a tuple, as would be returned by get_suffixes(), describing what kind of module must be loaded.", "If the load is successful, the return value is the module object; otherwise, an exception (usually ImportError) is raised.", "Important: the caller is responsible for closing the file argument, if it was not None, even when an exception is raised.", "This is best done using a try \u2026 finally statement."]}
{"index": 2922, "name": "imp.new_module", "module": "imp", "doc": ["Return a new empty module object called name.", "This object is not inserted in sys.modules."]}
{"index": 2923, "name": "imp.reload", "module": "imp", "doc": ["Reload a previously imported module.", "The argument must be a module object, so it must have been successfully imported before.", "This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter.", "The return value is the module object (the same as the module argument).", "When reload(module) is executed:", "There are a number of other caveats:", "When a module is reloaded, its dictionary (containing the module\u2019s global variables) is retained.", "Redefinitions of names will override the old definitions, so this is generally not a problem.", "If the new version of a module does not define a name that was defined by the old version, the old definition remains.", "This feature can be used to the module\u2019s advantage if it maintains a global table or cache of objects \u2014 with a try statement it can test for the table\u2019s presence and skip its initialization if desired:", "It is legal though generally not very useful to reload built-in or dynamically loaded modules, except for sys, __main__ and builtins.", "In many cases, however, extension modules are not designed to be initialized more than once, and may fail in arbitrary ways when reloaded.", "If a module imports objects from another module using from \u2026 import \u2026, calling reload() for the other module does not redefine the objects imported from it \u2014 one way around this is to re-execute the from statement, another is to use import and qualified names (module.", "*name*) instead.", "If a module instantiates instances of a class, reloading the module that defines the class does not affect the method definitions of the instances \u2014 they continue to use the old class definition.", "The same is true for derived classes."]}
{"index": 2924, "name": "imp.cache_from_source", "module": "imp", "doc": ["Return the PEP 3147 path to the byte-compiled file associated with the source path.", "For example, if path is /foo/bar/baz.py the return value would be /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2.", "The cpython-32 string comes from the current magic tag (see get_tag(); if sys.implementation.cache_tag is not defined then NotImplementedError will be raised).", "By passing in True or False for debug_override you can override the system\u2019s value for __debug__, leading to optimized bytecode.", "path need not exist."]}
{"index": 2925, "name": "imp.source_from_cache", "module": "imp", "doc": ["Given the path to a PEP 3147 file name, return the associated source code file path.", "For example, if path is /foo/bar/__pycache__/baz.cpython-32.pyc the returned path would be /foo/bar/baz.py.", "path need not exist, however if it does not conform to PEP 3147 format, a ValueError is raised.", "If sys.implementation.cache_tag is not defined, NotImplementedError is raised."]}
{"index": 2926, "name": "imp.get_tag", "module": "imp", "doc": ["Return the PEP 3147 magic tag string matching this version of Python\u2019s magic number, as returned by get_magic()."]}
{"index": 2927, "name": "imp.lock_held", "module": "imp", "doc": ["Return True if the global import lock is currently held, else False.", "On platforms without threads, always return False.", "On platforms with threads, a thread executing an import first holds a global import lock, then sets up a per-module lock for the rest of the import.", "This blocks other threads from importing the same module until the original import completes, preventing other threads from seeing incomplete module objects constructed by the original thread.", "An exception is made for circular imports, which by construction have to expose an incomplete module object at some point."]}
{"index": 2928, "name": "imp.acquire_lock", "module": "imp", "doc": ["Acquire the interpreter\u2019s global import lock for the current thread.", "This lock should be used by import hooks to ensure thread-safety when importing modules.", "Once a thread has acquired the import lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it.", "On platforms without threads, this function does nothing."]}
{"index": 2929, "name": "imp.release_lock", "module": "imp", "doc": ["Release the interpreter\u2019s global import lock.", "On platforms without threads, this function does nothing."]}
{"index": 2930, "name": "imp.PY_SOURCE", "module": "imp", "doc": ["The module was found as a source file."]}
{"index": 2931, "name": "imp.PY_COMPILED", "module": "imp", "doc": ["The module was found as a compiled code object file."]}
{"index": 2932, "name": "imp.C_EXTENSION", "module": "imp", "doc": ["The module was found as dynamically loadable shared library."]}
{"index": 2933, "name": "imp.PKG_DIRECTORY", "module": "imp", "doc": ["The module was found as a package directory."]}
{"index": 2934, "name": "imp.C_BUILTIN", "module": "imp", "doc": ["The module was found as a built-in module."]}
{"index": 2935, "name": "imp.PY_FROZEN", "module": "imp", "doc": ["The module was found as a frozen module."]}
{"index": 2936, "name": "imp.NullImporter", "module": "imp", "doc": ["The NullImporter type is a PEP 302 import hook that handles non-directory path strings by failing to find any modules.", "Calling this type with an existing directory or empty string raises ImportError.", "Otherwise, a NullImporter instance is returned.", "Instances have only one method:"]}
{"index": 2937, "name": "imp.NullImporter.find_module", "module": "imp", "doc": ["This method always returns None, indicating that the requested module could not be found."]}
{"index": 2938, "name": "importlib.__import__", "module": "importlib", "doc": ["An implementation of the built-in __import__() function."]}
{"index": 2939, "name": "importlib.import_module", "module": "importlib", "doc": ["Import a module.", "The name argument specifies what module to import in absolute or relative terms (e.g.", "either pkg.mod or ..mod).", "If the name is specified in relative terms, then the package argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g.", "import_module('..mod', 'pkg.subpkg') will import pkg.mod).", "The import_module() function acts as a simplifying wrapper around importlib.__import__().", "This means all semantics of the function are derived from importlib.__import__().", "The most important difference between these two functions is that import_module() returns the specified package or module (e.g.", "pkg.mod), while __import__() returns the top-level package or module (e.g.", "pkg).", "If you are dynamically importing a module that was created since the interpreter began execution (e.g., created a Python source file), you may need to call invalidate_caches() in order for the new module to be noticed by the import system."]}
{"index": 2940, "name": "importlib.find_loader", "module": "importlib", "doc": ["Find the loader for a module, optionally within the specified path.", "If the module is in sys.modules, then sys.modules[name].__loader__ is returned (unless the loader would be None or is not set, in which case ValueError is raised).", "Otherwise a search using sys.meta_path is done.", "None is returned if no loader is found.", "A dotted name does not have its parents implicitly imported as that requires loading them and that may not be desired.", "To properly import a submodule you will need to import all parent packages of the submodule and use the correct argument to path."]}
{"index": 2941, "name": "importlib.invalidate_caches", "module": "importlib", "doc": ["Invalidate the internal caches of finders stored at sys.meta_path.", "If a finder implements invalidate_caches() then it will be called to perform the invalidation.", "This function should be called if any modules are created/installed while your program is running to guarantee all finders will notice the new module\u2019s existence."]}
{"index": 2942, "name": "importlib.reload", "module": "importlib", "doc": ["Reload a previously imported module.", "The argument must be a module object, so it must have been successfully imported before.", "This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter.", "The return value is the module object (which can be different if re-importing causes a different object to be placed in sys.modules).", "When reload() is executed:", "There are a number of other caveats:", "When a module is reloaded, its dictionary (containing the module\u2019s global variables) is retained.", "Redefinitions of names will override the old definitions, so this is generally not a problem.", "If the new version of a module does not define a name that was defined by the old version, the old definition remains.", "This feature can be used to the module\u2019s advantage if it maintains a global table or cache of objects \u2014 with a try statement it can test for the table\u2019s presence and skip its initialization if desired:", "It is generally not very useful to reload built-in or dynamically loaded modules.", "Reloading sys, __main__, builtins and other key modules is not recommended.", "In many cases extension modules are not designed to be initialized more than once, and may fail in arbitrary ways when reloaded.", "If a module imports objects from another module using from \u2026 import \u2026, calling reload() for the other module does not redefine the objects imported from it \u2014 one way around this is to re-execute the from statement, another is to use import and qualified names (module.name) instead.", "If a module instantiates instances of a class, reloading the module that defines the class does not affect the method definitions of the instances \u2014 they continue to use the old class definition.", "The same is true for derived classes."]}
{"index": 2943, "name": "importlib.abc.Finder", "module": "importlib", "doc": ["An abstract base class representing a finder."]}
{"index": 2944, "name": "importlib.abc.Finder.find_module", "module": "importlib", "doc": ["An abstract method for finding a loader for the specified module.", "Originally specified in PEP 302, this method was meant for use in sys.meta_path and in the path-based import subsystem."]}
{"index": 2945, "name": "importlib.abc.MetaPathFinder", "module": "importlib", "doc": ["An abstract base class representing a meta path finder.", "For compatibility, this is a subclass of Finder."]}
{"index": 2946, "name": "importlib.abc.MetaPathFinder.find_spec", "module": "importlib", "doc": ["An abstract method for finding a spec for the specified module.", "If this is a top-level import, path will be None.", "Otherwise, this is a search for a subpackage or module and path will be the value of __path__ from the parent package.", "If a spec cannot be found, None is returned.", "When passed in, target is a module object that the finder may use to make a more educated guess about what spec to return.", "importlib.util.spec_from_loader() may be useful for implementing concrete MetaPathFinders."]}
{"index": 2947, "name": "importlib.abc.MetaPathFinder.find_module", "module": "importlib", "doc": ["A legacy method for finding a loader for the specified module.", "If this is a top-level import, path will be None.", "Otherwise, this is a search for a subpackage or module and path will be the value of __path__ from the parent package.", "If a loader cannot be found, None is returned.", "If find_spec() is defined, backwards-compatible functionality is provided."]}
{"index": 2948, "name": "importlib.abc.MetaPathFinder.invalidate_caches", "module": "importlib", "doc": ["An optional method which, when called, should invalidate any internal cache used by the finder.", "Used by importlib.invalidate_caches() when invalidating the caches of all finders on sys.meta_path."]}
{"index": 2949, "name": "importlib.abc.PathEntryFinder", "module": "importlib", "doc": ["An abstract base class representing a path entry finder.", "Though it bears some similarities to MetaPathFinder, PathEntryFinder is meant for use only within the path-based import subsystem provided by PathFinder.", "This ABC is a subclass of Finder for compatibility reasons only."]}
{"index": 2950, "name": "importlib.abc.PathEntryFinder.find_spec", "module": "importlib", "doc": ["An abstract method for finding a spec for the specified module.", "The finder will search for the module only within the path entry to which it is assigned.", "If a spec cannot be found, None is returned.", "When passed in, target is a module object that the finder may use to make a more educated guess about what spec to return.", "importlib.util.spec_from_loader() may be useful for implementing concrete PathEntryFinders."]}
{"index": 2951, "name": "importlib.abc.PathEntryFinder.find_loader", "module": "importlib", "doc": ["A legacy method for finding a loader for the specified module.", "Returns a 2-tuple of (loader, portion) where portion is a sequence of file system locations contributing to part of a namespace package.", "The loader may be None while specifying portion to signify the contribution of the file system locations to a namespace package.", "An empty list can be used for portion to signify the loader is not part of a namespace package.", "If loader is None and portion is the empty list then no loader or location for a namespace package were found (i.e.", "failure to find anything for the module).", "If find_spec() is defined then backwards-compatible functionality is provided."]}
{"index": 2952, "name": "importlib.abc.PathEntryFinder.find_module", "module": "importlib", "doc": ["A concrete implementation of Finder.find_module() which is equivalent to self.find_loader(fullname)[0]."]}
{"index": 2953, "name": "importlib.abc.PathEntryFinder.invalidate_caches", "module": "importlib", "doc": ["An optional method which, when called, should invalidate any internal cache used by the finder.", "Used by PathFinder.invalidate_caches() when invalidating the caches of all cached finders."]}
{"index": 2954, "name": "importlib.abc.Loader", "module": "importlib", "doc": ["An abstract base class for a loader.", "See PEP 302 for the exact definition for a loader.", "Loaders that wish to support resource reading should implement a get_resource_reader(fullname) method as specified by importlib.abc.ResourceReader."]}
{"index": 2955, "name": "importlib.abc.Loader.create_module", "module": "importlib", "doc": ["A method that returns the module object to use when importing a module.", "This method may return None, indicating that default module creation semantics should take place."]}
{"index": 2956, "name": "importlib.abc.Loader.exec_module", "module": "importlib", "doc": ["An abstract method that executes the module in its own namespace when a module is imported or reloaded.", "The module should already be initialized when exec_module() is called.", "When this method exists, create_module() must be defined."]}
{"index": 2957, "name": "importlib.abc.Loader.load_module", "module": "importlib", "doc": ["A legacy method for loading a module.", "If the module cannot be loaded, ImportError is raised, otherwise the loaded module is returned.", "If the requested module already exists in sys.modules, that module should be used and reloaded.", "Otherwise the loader should create a new module and insert it into sys.modules before any loading begins, to prevent recursion from the import.", "If the loader inserted a module and the load fails, it must be removed by the loader from sys.modules; modules already in sys.modules before the loader began execution should be left alone (see importlib.util.module_for_loader()).", "The loader should set several attributes on the module.", "(Note that some of these attributes can change when a module is reloaded):", "When exec_module() is available then backwards-compatible functionality is provided."]}
{"index": 2958, "name": "importlib.abc.Loader.module_repr", "module": "importlib", "doc": ["A legacy method which when implemented calculates and returns the given module\u2019s repr, as a string.", "The module type\u2019s default repr() will use the result of this method as appropriate."]}
{"index": 2959, "name": "importlib.abc.ResourceReader", "module": "importlib", "doc": ["An abstract base class to provide the ability to read resources.", "From the perspective of this ABC, a resource is a binary artifact that is shipped within a package.", "Typically this is something like a data file that lives next to the __init__.py file of the package.", "The purpose of this class is to help abstract out the accessing of such data files so that it does not matter if the package and its data file(s) are stored in a e.g.", "zip file versus on the file system.", "For any of methods of this class, a resource argument is expected to be a path-like object which represents conceptually just a file name.", "This means that no subdirectory paths should be included in the resource argument.", "This is because the location of the package the reader is for, acts as the \u201cdirectory\u201d.", "Hence the metaphor for directories and file names is packages and resources, respectively.", "This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).", "Loaders that wish to support resource reading are expected to provide a method called get_resource_reader(fullname) which returns an object implementing this ABC\u2019s interface.", "If the module specified by fullname is not a package, this method should return None.", "An object compatible with this ABC should only be returned when the specified module is a package."]}
{"index": 2960, "name": "importlib.abc.ResourceReader.open_resource", "module": "importlib", "doc": ["Returns an opened, file-like object for binary reading of the resource.", "If the resource cannot be found, FileNotFoundError is raised."]}
{"index": 2961, "name": "importlib.abc.ResourceReader.resource_path", "module": "importlib", "doc": ["Returns the file system path to the resource.", "If the resource does not concretely exist on the file system, raise FileNotFoundError."]}
{"index": 2962, "name": "importlib.abc.ResourceReader.is_resource", "module": "importlib", "doc": ["Returns True if the named name is considered a resource.", "FileNotFoundError is raised if name does not exist."]}
{"index": 2963, "name": "importlib.abc.ResourceReader.contents", "module": "importlib", "doc": ["Returns an iterable of strings over the contents of the package.", "Do note that it is not required that all names returned by the iterator be actual resources, e.g.", "it is acceptable to return names for which is_resource() would be false.", "Allowing non-resource names to be returned is to allow for situations where how a package and its resources are stored are known a priori and the non-resource names would be useful.", "For instance, returning subdirectory names is allowed so that when it is known that the package and resources are stored on the file system then those subdirectory names can be used directly.", "The abstract method returns an iterable of no items."]}
{"index": 2964, "name": "importlib.abc.ResourceLoader", "module": "importlib", "doc": ["An abstract base class for a loader which implements the optional PEP 302 protocol for loading arbitrary resources from the storage back-end."]}
{"index": 2965, "name": "importlib.abc.ResourceLoader.get_data", "module": "importlib", "doc": ["An abstract method to return the bytes for the data located at path.", "Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored.", "OSError is to be raised if the path cannot be found.", "The path is expected to be constructed using a module\u2019s __file__ attribute or an item from a package\u2019s __path__."]}
{"index": 2966, "name": "importlib.abc.InspectLoader", "module": "importlib", "doc": ["An abstract base class for a loader which implements the optional PEP 302 protocol for loaders that inspect modules."]}
{"index": 2967, "name": "importlib.abc.InspectLoader.get_code", "module": "importlib", "doc": ["Return the code object for a module, or None if the module does not have a code object (as would be the case, for example, for a built-in module).", "Raise an ImportError if loader cannot find the requested module."]}
{"index": 2968, "name": "importlib.abc.InspectLoader.get_source", "module": "importlib", "doc": ["An abstract method to return the source of a module.", "It is returned as a text string using universal newlines, translating all recognized line separators into '\\n' characters.", "Returns None if no source is available (e.g.", "a built-in module).", "Raises ImportError if the loader cannot find the module specified."]}
{"index": 2969, "name": "importlib.abc.InspectLoader.is_package", "module": "importlib", "doc": ["An abstract method to return a true value if the module is a package, a false value otherwise.", "ImportError is raised if the loader cannot find the module."]}
{"index": 2970, "name": "importlib.abc.InspectLoader.source_to_code", "module": "importlib", "doc": ["Create a code object from Python source.", "The data argument can be whatever the compile() function supports (i.e.", "string or bytes).", "The path argument should be the \u201cpath\u201d to where the source code originated from, which can be an abstract concept (e.g.", "location in a zip file).", "With the subsequent code object one can execute it in a module by running exec(code, module.__dict__)."]}
{"index": 2971, "name": "importlib.abc.InspectLoader.exec_module", "module": "importlib", "doc": ["Implementation of Loader.exec_module()."]}
{"index": 2972, "name": "importlib.abc.InspectLoader.load_module", "module": "importlib", "doc": ["Implementation of Loader.load_module()."]}
{"index": 2973, "name": "importlib.abc.ExecutionLoader", "module": "importlib", "doc": ["An abstract base class which inherits from InspectLoader that, when implemented, helps a module to be executed as a script.", "The ABC represents an optional PEP 302 protocol."]}
{"index": 2974, "name": "importlib.abc.ExecutionLoader.get_filename", "module": "importlib", "doc": ["An abstract method that is to return the value of __file__ for the specified module.", "If no path is available, ImportError is raised.", "If source code is available, then the method should return the path to the source file, regardless of whether a bytecode was used to load the module."]}
{"index": 2975, "name": "importlib.abc.FileLoader", "module": "importlib", "doc": ["An abstract base class which inherits from ResourceLoader and ExecutionLoader, providing concrete implementations of ResourceLoader.get_data() and ExecutionLoader.get_filename().", "The fullname argument is a fully resolved name of the module the loader is to handle.", "The path argument is the path to the file for the module."]}
{"index": 2976, "name": "importlib.abc.FileLoader.name", "module": "importlib", "doc": ["The name of the module the loader can handle."]}
{"index": 2977, "name": "importlib.abc.FileLoader.path", "module": "importlib", "doc": ["Path to the file of the module."]}
{"index": 2978, "name": "importlib.abc.FileLoader.load_module", "module": "importlib", "doc": ["Calls super\u2019s load_module()."]}
{"index": 2979, "name": "importlib.abc.FileLoader.get_filename", "module": "importlib", "doc": ["Returns path."]}
{"index": 2980, "name": "importlib.abc.FileLoader.get_data", "module": "importlib", "doc": ["Reads path as a binary file and returns the bytes from it."]}
{"index": 2981, "name": "importlib.abc.SourceLoader", "module": "importlib", "doc": ["An abstract base class for implementing source (and optionally bytecode) file loading.", "The class inherits from both ResourceLoader and ExecutionLoader, requiring the implementation of:", "The abstract methods defined by this class are to add optional bytecode file support.", "Not implementing these optional methods (or causing them to raise NotImplementedError) causes the loader to only work with source code.", "Implementing the methods allows the loader to work with source and bytecode files; it does not allow for sourceless loading where only bytecode is provided.", "Bytecode files are an optimization to speed up loading by removing the parsing step of Python\u2019s compiler, and so no bytecode-specific API is exposed."]}
{"index": 2982, "name": "importlib.abc.SourceLoader.path_stats", "module": "importlib", "doc": ["Optional abstract method which returns a dict containing metadata about the specified path.", "Supported dictionary keys are:", "Any other keys in the dictionary are ignored, to allow for future extensions.", "If the path cannot be handled, OSError is raised."]}
{"index": 2983, "name": "importlib.abc.SourceLoader.path_mtime", "module": "importlib", "doc": ["Optional abstract method which returns the modification time for the specified path."]}
{"index": 2984, "name": "importlib.abc.SourceLoader.set_data", "module": "importlib", "doc": ["Optional abstract method which writes the specified bytes to a file path.", "Any intermediate directories which do not exist are to be created automatically.", "When writing to the path fails because the path is read-only (errno.EACCES/PermissionError), do not propagate the exception."]}
{"index": 2985, "name": "importlib.abc.SourceLoader.get_code", "module": "importlib", "doc": ["Concrete implementation of InspectLoader.get_code()."]}
{"index": 2986, "name": "importlib.abc.SourceLoader.exec_module", "module": "importlib", "doc": ["Concrete implementation of Loader.exec_module()."]}
{"index": 2987, "name": "importlib.abc.SourceLoader.load_module", "module": "importlib", "doc": ["Concrete implementation of Loader.load_module()."]}
{"index": 2988, "name": "importlib.abc.SourceLoader.get_source", "module": "importlib", "doc": ["Concrete implementation of InspectLoader.get_source()."]}
{"index": 2989, "name": "importlib.abc.SourceLoader.is_package", "module": "importlib", "doc": ["Concrete implementation of InspectLoader.is_package().", "A module is determined to be a package if its file path (as provided by ExecutionLoader.get_filename()) is a file named __init__ when the file extension is removed and the module name itself does not end in __init__."]}
{"index": 2990, "name": "importlib.resources.Package", "module": "importlib", "doc": ["The Package type is defined as Union[str, ModuleType].", "This means that where the function describes accepting a Package, you can pass in either a string or a module.", "Module objects must have a resolvable __spec__.submodule_search_locations that is not None."]}
{"index": 2991, "name": "importlib.resources.Resource", "module": "importlib", "doc": ["This type describes the resource names passed into the various functions in this package.", "This is defined as Union[str, os.PathLike]."]}
{"index": 2992, "name": "importlib.resources.open_binary", "module": "importlib", "doc": ["Open for binary reading the resource within package.", "package is either a name or a module object which conforms to the Package requirements.", "resource is the name of the resource to open within package; it may not contain path separators and it may not have sub-resources (i.e.", "it cannot be a directory).", "This function returns a typing.BinaryIO instance, a binary I/O stream open for reading."]}
{"index": 2993, "name": "importlib.resources.open_text", "module": "importlib", "doc": ["Open for text reading the resource within package.", "By default, the resource is opened for reading as UTF-8.", "package is either a name or a module object which conforms to the Package requirements.", "resource is the name of the resource to open within package; it may not contain path separators and it may not have sub-resources (i.e.", "it cannot be a directory).", "encoding and errors have the same meaning as with built-in open().", "This function returns a typing.TextIO instance, a text I/O stream open for reading."]}
{"index": 2994, "name": "importlib.resources.read_binary", "module": "importlib", "doc": ["Read and return the contents of the resource within package as bytes.", "package is either a name or a module object which conforms to the Package requirements.", "resource is the name of the resource to open within package; it may not contain path separators and it may not have sub-resources (i.e.", "it cannot be a directory).", "This function returns the contents of the resource as bytes."]}
{"index": 2995, "name": "importlib.resources.read_text", "module": "importlib", "doc": ["Read and return the contents of resource within package as a str.", "By default, the contents are read as strict UTF-8.", "package is either a name or a module object which conforms to the Package requirements.", "resource is the name of the resource to open within package; it may not contain path separators and it may not have sub-resources (i.e.", "it cannot be a directory).", "encoding and errors have the same meaning as with built-in open().", "This function returns the contents of the resource as str."]}
{"index": 2996, "name": "importlib.resources.path", "module": "importlib", "doc": ["Return the path to the resource as an actual file system path.", "This function returns a context manager for use in a with statement.", "The context manager provides a pathlib.Path object.", "Exiting the context manager cleans up any temporary file created when the resource needs to be extracted from e.g.", "a zip file.", "package is either a name or a module object which conforms to the Package requirements.", "resource is the name of the resource to open within package; it may not contain path separators and it may not have sub-resources (i.e.", "it cannot be a directory)."]}
{"index": 2997, "name": "importlib.resources.is_resource", "module": "importlib", "doc": ["Return True if there is a resource named name in the package, otherwise False.", "Remember that directories are not resources!", "package is either a name or a module object which conforms to the Package requirements."]}
{"index": 2998, "name": "importlib.resources.contents", "module": "importlib", "doc": ["Return an iterable over the named items within the package.", "The iterable returns str resources (e.g.", "files) and non-resources (e.g.", "directories).", "The iterable does not recurse into subdirectories.", "package is either a name or a module object which conforms to the Package requirements."]}
{"index": 2999, "name": "importlib.machinery.SOURCE_SUFFIXES", "module": "importlib", "doc": ["A list of strings representing the recognized file suffixes for source modules."]}
{"index": 3000, "name": "importlib.machinery.DEBUG_BYTECODE_SUFFIXES", "module": "importlib", "doc": ["A list of strings representing the file suffixes for non-optimized bytecode modules."]}
{"index": 3001, "name": "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES", "module": "importlib", "doc": ["A list of strings representing the file suffixes for optimized bytecode modules."]}
{"index": 3002, "name": "importlib.machinery.BYTECODE_SUFFIXES", "module": "importlib", "doc": ["A list of strings representing the recognized file suffixes for bytecode modules (including the leading dot)."]}
{"index": 3003, "name": "importlib.machinery.EXTENSION_SUFFIXES", "module": "importlib", "doc": ["A list of strings representing the recognized file suffixes for extension modules."]}
{"index": 3004, "name": "importlib.machinery.all_suffixes", "module": "importlib", "doc": ["Returns a combined list of strings representing all file suffixes for modules recognized by the standard import machinery.", "This is a helper for code which simply needs to know if a filesystem path potentially refers to a module without needing any details on the kind of module (for example, inspect.getmodulename())."]}
{"index": 3005, "name": "importlib.machinery.BuiltinImporter", "module": "importlib", "doc": ["An importer for built-in modules.", "All known built-in modules are listed in sys.builtin_module_names.", "This class implements the importlib.abc.MetaPathFinder and importlib.abc.InspectLoader ABCs.", "Only class methods are defined by this class to alleviate the need for instantiation."]}
{"index": 3006, "name": "importlib.machinery.FrozenImporter", "module": "importlib", "doc": ["An importer for frozen modules.", "This class implements the importlib.abc.MetaPathFinder and importlib.abc.InspectLoader ABCs.", "Only class methods are defined by this class to alleviate the need for instantiation."]}
{"index": 3007, "name": "importlib.machinery.WindowsRegistryFinder", "module": "importlib", "doc": ["Finder for modules declared in the Windows registry.", "This class implements the importlib.abc.MetaPathFinder ABC.", "Only class methods are defined by this class to alleviate the need for instantiation."]}
{"index": 3008, "name": "importlib.machinery.PathFinder", "module": "importlib", "doc": ["A Finder for sys.path and package __path__ attributes.", "This class implements the importlib.abc.MetaPathFinder ABC.", "Only class methods are defined by this class to alleviate the need for instantiation."]}
{"index": 3009, "name": "importlib.machinery.PathFinder.find_spec", "module": "importlib", "doc": ["Class method that attempts to find a spec for the module specified by fullname on sys.path or, if defined, on path.", "For each path entry that is searched, sys.path_importer_cache is checked.", "If a non-false object is found then it is used as the path entry finder to look for the module being searched for.", "If no entry is found in sys.path_importer_cache, then sys.path_hooks is searched for a finder for the path entry and, if found, is stored in sys.path_importer_cache along with being queried about the module.", "If no finder is ever found then None is both stored in the cache and returned."]}
{"index": 3010, "name": "importlib.machinery.PathFinder.find_module", "module": "importlib", "doc": ["A legacy wrapper around find_spec()."]}
{"index": 3011, "name": "importlib.machinery.PathFinder.invalidate_caches", "module": "importlib", "doc": ["Calls importlib.abc.PathEntryFinder.invalidate_caches() on all finders stored in sys.path_importer_cache that define the method.", "Otherwise entries in sys.path_importer_cache set to None are deleted."]}
{"index": 3012, "name": "importlib.machinery.FileFinder", "module": "importlib", "doc": ["A concrete implementation of importlib.abc.PathEntryFinder which caches results from the file system.", "The path argument is the directory for which the finder is in charge of searching.", "The loader_details argument is a variable number of 2-item tuples each containing a loader and a sequence of file suffixes the loader recognizes.", "The loaders are expected to be callables which accept two arguments of the module\u2019s name and the path to the file found.", "The finder will cache the directory contents as necessary, making stat calls for each module search to verify the cache is not outdated.", "Because cache staleness relies upon the granularity of the operating system\u2019s state information of the file system, there is a potential race condition of searching for a module, creating a new file, and then searching for the module the new file represents.", "If the operations happen fast enough to fit within the granularity of stat calls, then the module search will fail.", "To prevent this from happening, when you create a module dynamically, make sure to call importlib.invalidate_caches()."]}
{"index": 3013, "name": "importlib.machinery.FileFinder.path", "module": "importlib", "doc": ["The path the finder will search in."]}
{"index": 3014, "name": "importlib.machinery.FileFinder.find_spec", "module": "importlib", "doc": ["Attempt to find the spec to handle fullname within path."]}
{"index": 3015, "name": "importlib.machinery.FileFinder.find_loader", "module": "importlib", "doc": ["Attempt to find the loader to handle fullname within path."]}
{"index": 3016, "name": "importlib.machinery.FileFinder.invalidate_caches", "module": "importlib", "doc": ["Clear out the internal cache."]}
{"index": 3017, "name": "importlib.machinery.FileFinder.path_hook", "module": "importlib", "doc": ["A class method which returns a closure for use on sys.path_hooks.", "An instance of FileFinder is returned by the closure using the path argument given to the closure directly and loader_details indirectly.", "If the argument to the closure is not an existing directory, ImportError is raised."]}
{"index": 3018, "name": "importlib.machinery.SourceFileLoader", "module": "importlib", "doc": ["A concrete implementation of importlib.abc.SourceLoader by subclassing importlib.abc.FileLoader and providing some concrete implementations of other methods."]}
{"index": 3019, "name": "importlib.machinery.SourceFileLoader.name", "module": "importlib", "doc": ["The name of the module that this loader will handle."]}
{"index": 3020, "name": "importlib.machinery.SourceFileLoader.path", "module": "importlib", "doc": ["The path to the source file."]}
{"index": 3021, "name": "importlib.machinery.SourceFileLoader.is_package", "module": "importlib", "doc": ["Return true if path appears to be for a package."]}
{"index": 3022, "name": "importlib.machinery.SourceFileLoader.path_stats", "module": "importlib", "doc": ["Concrete implementation of importlib.abc.SourceLoader.path_stats()."]}
{"index": 3023, "name": "importlib.machinery.SourceFileLoader.set_data", "module": "importlib", "doc": ["Concrete implementation of importlib.abc.SourceLoader.set_data()."]}
{"index": 3024, "name": "importlib.machinery.SourceFileLoader.load_module", "module": "importlib", "doc": ["Concrete implementation of importlib.abc.Loader.load_module() where specifying the name of the module to load is optional."]}
{"index": 3025, "name": "importlib.machinery.SourcelessFileLoader", "module": "importlib", "doc": ["A concrete implementation of importlib.abc.FileLoader which can import bytecode files (i.e.", "no source code files exist).", "Please note that direct use of bytecode files (and thus not source code files) inhibits your modules from being usable by all Python implementations or new versions of Python which change the bytecode format.", "Concrete implementation of importlib.abc.Loader.load_module() where specifying the name of the module to load is optional."]}
{"index": 3026, "name": "importlib.machinery.SourcelessFileLoader.name", "module": "importlib", "doc": ["The name of the module the loader will handle."]}
{"index": 3027, "name": "importlib.machinery.SourcelessFileLoader.path", "module": "importlib", "doc": ["The path to the bytecode file."]}
{"index": 3028, "name": "importlib.machinery.SourcelessFileLoader.is_package", "module": "importlib", "doc": ["Determines if the module is a package based on path."]}
{"index": 3029, "name": "importlib.machinery.SourcelessFileLoader.get_code", "module": "importlib", "doc": ["Returns the code object for name created from path."]}
{"index": 3030, "name": "importlib.machinery.SourcelessFileLoader.get_source", "module": "importlib", "doc": ["Returns None as bytecode files have no source when this loader is used."]}
{"index": 3031, "name": "importlib.machinery.ExtensionFileLoader", "module": "importlib", "doc": ["A concrete implementation of importlib.abc.ExecutionLoader for extension modules.", "The fullname argument specifies the name of the module the loader is to support.", "The path argument is the path to the extension module\u2019s file."]}
{"index": 3032, "name": "importlib.machinery.ExtensionFileLoader.name", "module": "importlib", "doc": ["Name of the module the loader supports."]}
{"index": 3033, "name": "importlib.machinery.ExtensionFileLoader.path", "module": "importlib", "doc": ["Path to the extension module."]}
{"index": 3034, "name": "importlib.machinery.ExtensionFileLoader.create_module", "module": "importlib", "doc": ["Creates the module object from the given specification in accordance with PEP 489."]}
{"index": 3035, "name": "importlib.machinery.ExtensionFileLoader.exec_module", "module": "importlib", "doc": ["Initializes the given module object in accordance with PEP 489."]}
{"index": 3036, "name": "importlib.machinery.ExtensionFileLoader.is_package", "module": "importlib", "doc": ["Returns True if the file path points to a package\u2019s __init__ module based on EXTENSION_SUFFIXES."]}
{"index": 3037, "name": "importlib.machinery.ExtensionFileLoader.get_code", "module": "importlib", "doc": ["Returns None as extension modules lack a code object."]}
{"index": 3038, "name": "importlib.machinery.ExtensionFileLoader.get_source", "module": "importlib", "doc": ["Returns None as extension modules do not have source code."]}
{"index": 3039, "name": "importlib.machinery.ExtensionFileLoader.get_filename", "module": "importlib", "doc": ["Returns path."]}
{"index": 3040, "name": "importlib.machinery.ModuleSpec", "module": "importlib", "doc": ["A specification for a module\u2019s import-system-related state.", "This is typically exposed as the module\u2019s __spec__ attribute.", "In the descriptions below, the names in parentheses give the corresponding attribute available directly on the module object.", "E.g.", "module.__spec__.origin == module.__file__.", "Note however that while the values are usually equivalent, they can differ since there is no synchronization between the two objects.", "Thus it is possible to update the module\u2019s __path__ at runtime, and this will not be automatically reflected in __spec__.submodule_search_locations.", "(__name__)", "A string for the fully-qualified name of the module.", "(__loader__)", "The loader to use for loading.", "For namespace packages this should be set to None.", "(__file__)", "Name of the place from which the module is loaded, e.g.", "\u201cbuiltin\u201d for built-in modules and the filename for modules loaded from source.", "Normally \u201corigin\u201d should be set, but it may be None (the default) which indicates it is unspecified (e.g.", "for namespace packages).", "(__path__)", "List of strings for where to find submodules, if a package (None otherwise).", "Container of extra module-specific data for use during loading (or None).", "(__cached__)", "String for where the compiled module should be stored (or None).", "(__package__)", "(Read-only) Fully-qualified name of the package to which the module belongs as a submodule (or None).", "Boolean indicating whether or not the module\u2019s \u201corigin\u201d attribute refers to a loadable location."]}
{"index": 3041, "name": "importlib.util.MAGIC_NUMBER", "module": "importlib", "doc": ["The bytes which represent the bytecode version number.", "If you need help with loading/writing bytecode then consider importlib.abc.SourceLoader."]}
{"index": 3042, "name": "importlib.util.cache_from_source", "module": "importlib", "doc": ["Return the PEP 3147/PEP 488 path to the byte-compiled file associated with the source path.", "For example, if path is /foo/bar/baz.py the return value would be /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2.", "The cpython-32 string comes from the current magic tag (see get_tag(); if sys.implementation.cache_tag is not defined then NotImplementedError will be raised).", "The optimization parameter is used to specify the optimization level of the bytecode file.", "An empty string represents no optimization, so /foo/bar/baz.py with an optimization of '' will result in a bytecode path of /foo/bar/__pycache__/baz.cpython-32.pyc.", "None causes the interpter\u2019s optimization level to be used.", "Any other value\u2019s string representation being used, so /foo/bar/baz.py with an optimization of 2 will lead to the bytecode path of /foo/bar/__pycache__/baz.cpython-32.opt-2.pyc.", "The string representation of optimization can only be alphanumeric, else ValueError is raised.", "The debug_override parameter is deprecated and can be used to override the system\u2019s value for __debug__.", "A True value is the equivalent of setting optimization to the empty string.", "A False value is the same as setting optimization to 1.", "If both debug_override an optimization are not None then TypeError is raised."]}
{"index": 3043, "name": "importlib.util.source_from_cache", "module": "importlib", "doc": ["Given the path to a PEP 3147 file name, return the associated source code file path.", "For example, if path is /foo/bar/__pycache__/baz.cpython-32.pyc the returned path would be /foo/bar/baz.py.", "path need not exist, however if it does not conform to PEP 3147 or PEP 488 format, a ValueError is raised.", "If sys.implementation.cache_tag is not defined, NotImplementedError is raised."]}
{"index": 3044, "name": "importlib.util.decode_source", "module": "importlib", "doc": ["Decode the given bytes representing source code and return it as a string with universal newlines (as required by importlib.abc.InspectLoader.get_source())."]}
{"index": 3045, "name": "importlib.util.resolve_name", "module": "importlib", "doc": ["Resolve a relative module name to an absolute one.", "If  name has no leading dots, then name is simply returned.", "This allows for usage such as importlib.util.resolve_name('sys', __package__) without doing a check to see if the package argument is needed.", "ValueError is raised if name is a relative module name but package is a false value (e.g.", "None or the empty string).", "ValueError is also raised a relative name would escape its containing package (e.g.", "requesting ..bacon from within the spam package)."]}
{"index": 3046, "name": "importlib.util.find_spec", "module": "importlib", "doc": ["Find the spec for a module, optionally relative to the specified package name.", "If the module is in sys.modules, then sys.modules[name].__spec__ is returned (unless the spec would be None or is not set, in which case ValueError is raised).", "Otherwise a search using sys.meta_path is done.", "None is returned if no spec is found.", "If name is for a submodule (contains a dot), the parent module is automatically imported.", "name and package work the same as for import_module()."]}
{"index": 3047, "name": "importlib.util.module_from_spec", "module": "importlib", "doc": ["Create a new module based on spec and spec.loader.create_module.", "If spec.loader.create_module does not return None, then any pre-existing attributes will not be reset.", "Also, no AttributeError will be raised if triggered while accessing spec or setting an attribute on the module.", "This function is preferred over using types.ModuleType to create a new module as spec is used to set as many import-controlled attributes on the module as possible."]}
{"index": 3048, "name": "importlib.util.module_for_loader", "module": "importlib", "doc": ["A decorator for importlib.abc.Loader.load_module() to handle selecting the proper module object to load with.", "The decorated method is expected to have a call signature taking two positional arguments (e.g.", "load_module(self, module)) for which the second argument will be the module object to be used by the loader.", "Note that the decorator will not work on static methods because of the assumption of two arguments.", "The decorated method will take in the name of the module to be loaded as expected for a loader.", "If the module is not found in sys.modules then a new one is constructed.", "Regardless of where the module came from, __loader__ set to self and __package__ is set based on what importlib.abc.InspectLoader.is_package() returns (if available).", "These attributes are set unconditionally to support reloading.", "If an exception is raised by the decorated method and a module was added to sys.modules, then the module will be removed to prevent a partially initialized module from being in left in sys.modules.", "If the module was already in sys.modules then it is left alone."]}
{"index": 3049, "name": "importlib.util.set_loader", "module": "importlib", "doc": ["A decorator for importlib.abc.Loader.load_module() to set the __loader__ attribute on the returned module.", "If the attribute is already set the decorator does nothing.", "It is assumed that the first positional argument to the wrapped method (i.e.", "self) is what __loader__ should be set to."]}
{"index": 3050, "name": "importlib.util.set_package", "module": "importlib", "doc": ["A decorator for importlib.abc.Loader.load_module() to set the __package__ attribute on the returned module.", "If __package__ is set and has a value other than None it will not be changed."]}
{"index": 3051, "name": "importlib.util.spec_from_loader", "module": "importlib", "doc": ["A factory function for creating a ModuleSpec instance based on a loader.", "The parameters have the same meaning as they do for ModuleSpec.", "The function uses available loader APIs, such as InspectLoader.is_package(), to fill in any missing information on the spec."]}
{"index": 3052, "name": "importlib.util.spec_from_file_location", "module": "importlib", "doc": ["A factory function for creating a ModuleSpec instance based on the path to a file.", "Missing information will be filled in on the spec by making use of loader APIs and by the implication that the module will be file-based."]}
{"index": 3053, "name": "importlib.util.source_hash", "module": "importlib", "doc": ["Return the hash of source_bytes as bytes.", "A hash-based .pyc file embeds the source_hash() of the corresponding source file\u2019s contents in its header."]}
{"index": 3054, "name": "importlib.util.LazyLoader", "module": "importlib", "doc": ["A class which postpones the execution of the loader of a module until the module has an attribute accessed.", "This class only works with loaders that define exec_module() as control over what module type is used for the module is required.", "For those same reasons, the loader\u2019s create_module() method must return None or a type for which its __class__ attribute can be mutated along with not using slots.", "Finally, modules which substitute the object placed into sys.modules will not work as there is no way to properly replace the module references throughout the interpreter safely; ValueError is raised if such a substitution is detected."]}
{"index": 3055, "name": "importlib.util.LazyLoader.factory", "module": "importlib", "doc": ["A static method which returns a callable that creates a lazy loader.", "This is meant to be used in situations where the loader is passed by class instead of by instance."]}
{"index": 3056, "name": "inspect.getmembers", "module": "inspect", "doc": ["Return all the members of an object in a list of (name, value) pairs sorted by name.", "If the optional predicate argument is supplied, only members for which the predicate returns a true value are included."]}
{"index": 3057, "name": "inspect.getmodulename", "module": "inspect", "doc": ["Return the name of the module named by the file path, without including the names of enclosing packages.", "The file extension is checked against all of the entries in importlib.machinery.all_suffixes().", "If it matches, the final path component is returned with the extension removed.", "Otherwise, None is returned.", "Note that this function only returns a meaningful name for actual Python modules - paths that potentially refer to Python packages will still return None."]}
{"index": 3058, "name": "inspect.ismodule", "module": "inspect", "doc": ["Return true if the object is a module."]}
{"index": 3059, "name": "inspect.isclass", "module": "inspect", "doc": ["Return true if the object is a class, whether built-in or created in Python code."]}
{"index": 3060, "name": "inspect.ismethod", "module": "inspect", "doc": ["Return true if the object is a bound method written in Python."]}
{"index": 3061, "name": "inspect.isfunction", "module": "inspect", "doc": ["Return true if the object is a Python function, which includes functions created by a lambda expression."]}
{"index": 3062, "name": "inspect.isgeneratorfunction", "module": "inspect", "doc": ["Return true if the object is a Python generator function."]}
{"index": 3063, "name": "inspect.isgenerator", "module": "inspect", "doc": ["Return true if the object is a generator."]}
{"index": 3064, "name": "inspect.iscoroutinefunction", "module": "inspect", "doc": ["Return true if the object is a coroutine function (a function defined with an async def syntax)."]}
{"index": 3065, "name": "inspect.iscoroutine", "module": "inspect", "doc": ["Return true if the object is a coroutine created by an async def function."]}
{"index": 3066, "name": "inspect.isawaitable", "module": "inspect", "doc": ["Return true if the object can be used in await expression.", "Can also be used to distinguish generator-based coroutines from regular generators:"]}
{"index": 3067, "name": "inspect.isasyncgenfunction", "module": "inspect", "doc": ["Return true if the object is an asynchronous generator function, for example:"]}
{"index": 3068, "name": "inspect.isasyncgen", "module": "inspect", "doc": ["Return true if the object is an asynchronous generator iterator created by an asynchronous generator function."]}
{"index": 3069, "name": "inspect.istraceback", "module": "inspect", "doc": ["Return true if the object is a traceback."]}
{"index": 3070, "name": "inspect.isframe", "module": "inspect", "doc": ["Return true if the object is a frame."]}
{"index": 3071, "name": "inspect.iscode", "module": "inspect", "doc": ["Return true if the object is a code."]}
{"index": 3072, "name": "inspect.isbuiltin", "module": "inspect", "doc": ["Return true if the object is a built-in function or a bound built-in method."]}
{"index": 3073, "name": "inspect.isroutine", "module": "inspect", "doc": ["Return true if the object is a user-defined or built-in function or method."]}
{"index": 3074, "name": "inspect.isabstract", "module": "inspect", "doc": ["Return true if the object is an abstract base class."]}
{"index": 3075, "name": "inspect.ismethoddescriptor", "module": "inspect", "doc": ["Return true if the object is a method descriptor, but not if ismethod(), isclass(), isfunction() or isbuiltin() are true.", "This, for example, is true of int.__add__.", "An object passing this test has a __get__() method but not a __set__() method, but beyond that the set of attributes varies.", "A __name__ attribute is usually sensible, and __doc__ often is.", "Methods implemented via descriptors that also pass one of the other tests return false from the ismethoddescriptor() test, simply because the other tests promise more \u2013 you can, e.g., count on having the __func__ attribute (etc) when an object passes ismethod()."]}
{"index": 3076, "name": "inspect.isdatadescriptor", "module": "inspect", "doc": ["Return true if the object is a data descriptor.", "Data descriptors have both a __get__ and a __set__ method.", "Examples are properties (defined in Python), getsets, and members.", "The latter two are defined in C and there are more specific tests available for those types, which is robust across Python implementations.", "Typically, data descriptors will also have __name__ and __doc__ attributes (properties, getsets, and members have both of these attributes), but this is not guaranteed."]}
{"index": 3077, "name": "inspect.isgetsetdescriptor", "module": "inspect", "doc": ["Return true if the object is a getset descriptor."]}
{"index": 3078, "name": "inspect.ismemberdescriptor", "module": "inspect", "doc": ["Return true if the object is a member descriptor."]}
{"index": 3079, "name": "inspect.getdoc", "module": "inspect", "doc": ["Get the documentation string for an object, cleaned up with cleandoc().", "If the documentation string for an object is not provided and the object is a class, a method, a property or a descriptor, retrieve the documentation string from the inheritance hierarchy."]}
{"index": 3080, "name": "inspect.getcomments", "module": "inspect", "doc": ["Return in a single string any lines of comments immediately preceding the object\u2019s source code (for a class, function, or method), or at the top of the Python source file (if the object is a module).", "If the object\u2019s source code is unavailable, return None.", "This could happen if the object has been defined in C or the interactive shell."]}
{"index": 3081, "name": "inspect.getfile", "module": "inspect", "doc": ["Return the name of the (text or binary) file in which an object was defined.", "This will fail with a TypeError if the object is a built-in module, class, or function."]}
{"index": 3082, "name": "inspect.getmodule", "module": "inspect", "doc": ["Try to guess which module an object was defined in."]}
{"index": 3083, "name": "inspect.getsourcefile", "module": "inspect", "doc": ["Return the name of the Python source file in which an object was defined.", "This will fail with a TypeError if the object is a built-in module, class, or function."]}
{"index": 3084, "name": "inspect.getsourcelines", "module": "inspect", "doc": ["Return a list of source lines and starting line number for an object.", "The argument may be a module, class, method, function, traceback, frame, or code object.", "The source code is returned as a list of the lines corresponding to the object and the line number indicates where in the original source file the first line of code was found.", "An OSError is raised if the source code cannot be retrieved."]}
{"index": 3085, "name": "inspect.getsource", "module": "inspect", "doc": ["Return the text of the source code for an object.", "The argument may be a module, class, method, function, traceback, frame, or code object.", "The source code is returned as a single string.", "An OSError is raised if the source code cannot be retrieved."]}
{"index": 3086, "name": "inspect.cleandoc", "module": "inspect", "doc": ["Clean up indentation from docstrings that are indented to line up with blocks of code.", "All leading whitespace is removed from the first line.", "Any leading whitespace that can be uniformly removed from the second line onwards is removed.", "Empty lines at the beginning and end are subsequently removed.", "Also, all tabs are expanded to spaces."]}
{"index": 3087, "name": "inspect.signature", "module": "inspect", "doc": ["Return a Signature object for the given callable:", "Accepts a wide range of Python callables, from plain functions and classes to functools.partial() objects.", "Raises ValueError if no signature can be provided, and TypeError if that type of object is not supported.", "A slash(/) in the signature of a function denotes that the parameters prior to it are positional-only.", "For more info, see the FAQ entry on positional-only parameters."]}
{"index": 3088, "name": "inspect.Signature", "module": "inspect", "doc": ["A Signature object represents the call signature of a function and its return annotation.", "For each parameter accepted by the function it stores a Parameter object in its parameters collection.", "The optional parameters argument is a sequence of Parameter objects, which is validated to check that there are no parameters with duplicate names, and that the parameters are in the right order, i.e.", "positional-only first, then positional-or-keyword, and that parameters with defaults follow parameters without defaults.", "The optional return_annotation argument, can be an arbitrary Python object, is the \u201creturn\u201d annotation of the callable.", "Signature objects are immutable.", "Use Signature.replace() to make a modified copy."]}
{"index": 3089, "name": "inspect.Signature.empty", "module": "inspect", "doc": ["A special class-level marker to specify absence of a return annotation."]}
{"index": 3090, "name": "inspect.Signature.parameters", "module": "inspect", "doc": ["An ordered mapping of parameters\u2019 names to the corresponding Parameter objects.", "Parameters appear in strict definition order, including keyword-only parameters."]}
{"index": 3091, "name": "inspect.Signature.return_annotation", "module": "inspect", "doc": ["The \u201creturn\u201d annotation for the callable.", "If the callable has no \u201creturn\u201d annotation, this attribute is set to Signature.empty."]}
{"index": 3092, "name": "inspect.Signature.bind", "module": "inspect", "doc": ["Create a mapping from positional and keyword arguments to parameters.", "Returns BoundArguments if *args and **kwargs match the signature, or raises a TypeError."]}
{"index": 3093, "name": "inspect.Signature.bind_partial", "module": "inspect", "doc": ["Works the same way as Signature.bind(), but allows the omission of some required arguments (mimics functools.partial() behavior.)", "Returns BoundArguments, or raises a TypeError if the passed arguments do not match the signature."]}
{"index": 3094, "name": "inspect.Signature.replace", "module": "inspect", "doc": ["Create a new Signature instance based on the instance replace was invoked on.", "It is possible to pass different parameters and/or return_annotation to override the corresponding properties of the base signature.", "To remove return_annotation from the copied Signature, pass in Signature.empty."]}
{"index": 3095, "name": "inspect.Signature.from_callable", "module": "inspect", "doc": ["Return a Signature (or its subclass) object for a given callable obj.", "Pass follow_wrapped=False to get a signature of obj without unwrapping its __wrapped__ chain.", "This method simplifies subclassing of Signature:"]}
{"index": 3096, "name": "inspect.Parameter", "module": "inspect", "doc": ["Parameter objects are immutable.", "Instead of modifying a Parameter object, you can use Parameter.replace() to create a modified copy."]}
{"index": 3097, "name": "inspect.Parameter.empty", "module": "inspect", "doc": ["A special class-level marker to specify absence of default values and annotations."]}
{"index": 3098, "name": "inspect.Parameter.name", "module": "inspect", "doc": ["The name of the parameter as a string.", "The name must be a valid Python identifier."]}
{"index": 3099, "name": "inspect.Parameter.default", "module": "inspect", "doc": ["The default value for the parameter.", "If the parameter has no default value, this attribute is set to Parameter.empty."]}
{"index": 3100, "name": "inspect.Parameter.annotation", "module": "inspect", "doc": ["The annotation for the parameter.", "If the parameter has no annotation, this attribute is set to Parameter.empty."]}
{"index": 3101, "name": "inspect.Parameter.kind", "module": "inspect", "doc": ["Describes how argument values are bound to the parameter.", "Possible values (accessible via Parameter, like Parameter.KEYWORD_ONLY):", "Example: print all keyword-only arguments without default values:"]}
{"index": 3102, "name": "inspect.BoundArguments", "module": "inspect", "doc": ["Result of a Signature.bind() or Signature.bind_partial() call.", "Holds the mapping of arguments to the function\u2019s parameters.", "The args and kwargs properties can be used to invoke functions:"]}
{"index": 3103, "name": "inspect.BoundArguments.arguments", "module": "inspect", "doc": ["An ordered, mutable mapping (collections.OrderedDict) of parameters\u2019 names to arguments\u2019 values.", "Contains only explicitly bound arguments.", "Changes in arguments will reflect in args and kwargs.", "Should be used in conjunction with Signature.parameters for any argument processing purposes."]}
{"index": 3104, "name": "inspect.BoundArguments.args", "module": "inspect", "doc": ["A tuple of positional arguments values.", "Dynamically computed from the arguments attribute."]}
{"index": 3105, "name": "inspect.BoundArguments.kwargs", "module": "inspect", "doc": ["A dict of keyword arguments values.", "Dynamically computed from the arguments attribute."]}
{"index": 3106, "name": "inspect.BoundArguments.signature", "module": "inspect", "doc": ["A reference to the parent Signature object."]}
{"index": 3107, "name": "inspect.BoundArguments.apply_defaults", "module": "inspect", "doc": ["Set default values for missing arguments.", "For variable-positional arguments (*args) the default is an empty tuple.", "For variable-keyword arguments (**kwargs) the default is an empty dict."]}
{"index": 3108, "name": "inspect.getclasstree", "module": "inspect", "doc": ["Arrange the given list of classes into a hierarchy of nested lists.", "Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list.", "Each entry is a 2-tuple containing a class and a tuple of its base classes.", "If the unique argument is true, exactly one entry appears in the returned structure for each class in the given list.", "Otherwise, classes using multiple inheritance and their descendants will appear multiple times."]}
{"index": 3109, "name": "inspect.getargspec", "module": "inspect", "doc": ["Get the names and default values of a Python function\u2019s parameters.", "A named tuple ArgSpec(args, varargs, keywords, defaults) is returned.", "args is a list of the parameter names.", "varargs and keywords are the names of the * and ** parameters or None.", "defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args."]}
{"index": 3110, "name": "inspect.getfullargspec", "module": "inspect", "doc": ["Get the names and default values of a Python function\u2019s parameters.", "A named tuple is returned:", "FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)", "args is a list of the positional parameter names.", "varargs is the name of the * parameter or None if arbitrary positional arguments are not accepted.", "varkw is the name of the ** parameter or None if arbitrary keyword arguments are not accepted.", "defaults is an n-tuple of default argument values corresponding to the last n positional parameters, or None if there are no such defaults defined.", "kwonlyargs is a list of keyword-only parameter names in declaration order.", "kwonlydefaults is a dictionary mapping parameter names from kwonlyargs to the default values used if no argument is supplied.", "annotations is a dictionary mapping parameter names to annotations.", "The special key \"return\" is used to report the function return value annotation (if any).", "Note that signature() and Signature Object provide the recommended API for callable introspection, and support additional behaviours (like positional-only arguments) that are sometimes encountered in extension module APIs.", "This function is retained primarily for use in code that needs to maintain compatibility with the Python 2 inspect module API."]}
{"index": 3111, "name": "inspect.getargvalues", "module": "inspect", "doc": ["Get information about arguments passed into a particular frame.", "A named tuple ArgInfo(args, varargs, keywords, locals) is returned.", "args is a list of the argument names.", "varargs and keywords are the names of the * and ** arguments or None.", "locals is the locals dictionary of the given frame."]}
{"index": 3112, "name": "inspect.formatargspec", "module": "inspect", "doc": ["Format a pretty argument spec from the values returned by getfullargspec().", "The first seven arguments are (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).", "The other six arguments are functions that are called to turn argument names, * argument name, ** argument name, default values, return annotation and individual annotations into strings, respectively.", "For example:"]}
{"index": 3113, "name": "inspect.formatargvalues", "module": "inspect", "doc": ["Format a pretty argument spec from the four values returned by getargvalues().", "The format* arguments are the corresponding optional formatting functions that are called to turn names and values into strings."]}
{"index": 3114, "name": "inspect.getmro", "module": "inspect", "doc": ["Return a tuple of class cls\u2019s base classes, including cls, in method resolution order.", "No class appears more than once in this tuple.", "Note that the method resolution order depends on cls\u2019s type.", "Unless a very peculiar user-defined metatype is in use, cls will be the first element of the tuple."]}
{"index": 3115, "name": "inspect.getcallargs", "module": "inspect", "doc": ["Bind the args and kwds to the argument names of the Python function or method func, as if it was called with them.", "For bound methods, bind also the first argument (typically named self) to the associated instance.", "A dict is returned, mapping the argument names (including the names of the * and ** arguments, if any) to their values from args and kwds.", "In case of invoking func incorrectly, i.e.", "whenever func(*args, **kwds) would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised.", "For example:"]}
{"index": 3116, "name": "inspect.getclosurevars", "module": "inspect", "doc": ["Get the mapping of external name references in a Python function or method func to their current values.", "A named tuple ClosureVars(nonlocals, globals, builtins, unbound) is returned.", "nonlocals maps referenced names to lexical closure variables, globals to the function\u2019s module globals and builtins to the builtins visible from the function body.", "unbound is the set of names referenced in the function that could not be resolved at all given the current module globals and builtins.", "TypeError is raised if func is not a Python function or method."]}
{"index": 3117, "name": "inspect.unwrap", "module": "inspect", "doc": ["Get the object wrapped by func.", "It follows the chain of __wrapped__ attributes returning the last object in the chain.", "stop is an optional callback accepting an object in the wrapper chain as its sole argument that allows the unwrapping to be terminated early if the callback returns a true value.", "If the callback never returns a true value, the last object in the chain is returned as usual.", "For example, signature() uses this to stop unwrapping if any object in the chain has a __signature__ attribute defined.", "ValueError is raised if a cycle is encountered."]}
{"index": 3118, "name": "inspect.getframeinfo", "module": "inspect", "doc": ["Get information about a frame or traceback object.", "A named tuple Traceback(filename, lineno, function, code_context, index) is returned."]}
{"index": 3119, "name": "inspect.getouterframes", "module": "inspect", "doc": ["Get a list of frame records for a frame and all outer frames.", "These frames represent the calls that lead to the creation of frame.", "The first entry in the returned list represents frame; the last entry represents the outermost call on frame\u2019s stack."]}
{"index": 3120, "name": "inspect.getinnerframes", "module": "inspect", "doc": ["Get a list of frame records for a traceback\u2019s frame and all inner frames.", "These frames represent calls made as a consequence of frame.", "The first entry in the list represents traceback; the last entry represents where the exception was raised."]}
{"index": 3121, "name": "inspect.currentframe", "module": "inspect", "doc": ["Return the frame object for the caller\u2019s stack frame."]}
{"index": 3122, "name": "inspect.stack", "module": "inspect", "doc": ["Return a list of frame records for the caller\u2019s stack.", "The first entry in the returned list represents the caller; the last entry represents the outermost call on the stack."]}
{"index": 3123, "name": "inspect.trace", "module": "inspect", "doc": ["Return a list of frame records for the stack between the current frame and the frame in which an exception currently being handled was raised in.", "The first entry in the list represents the caller; the last entry represents where the exception was raised."]}
{"index": 3124, "name": "inspect.getattr_static", "module": "inspect", "doc": ["Retrieve attributes without triggering dynamic lookup via the descriptor protocol, __getattr__() or __getattribute__().", "Note: this function may not be able to retrieve all attributes that getattr can fetch (like dynamically created attributes) and may find attributes that getattr can\u2019t (like descriptors that raise AttributeError).", "It can also return descriptors objects instead of instance members.", "If the instance __dict__ is shadowed by another member (for example a property) then this function will be unable to find instance members."]}
{"index": 3125, "name": "inspect.getgeneratorstate", "module": "inspect", "doc": ["Get current state of a generator-iterator."]}
{"index": 3126, "name": "inspect.getcoroutinestate", "module": "inspect", "doc": ["Get current state of a coroutine object.", "The function is intended to be used with coroutine objects created by async def functions, but will accept any coroutine-like object that has cr_running and cr_frame attributes."]}
{"index": 3127, "name": "inspect.getgeneratorlocals", "module": "inspect", "doc": ["Get the mapping of live local variables in generator to their current values.", "A dictionary is returned that maps from variable names to values.", "This is the equivalent of calling locals() in the body of the generator, and all the same caveats apply.", "If generator is a generator with no currently associated frame, then an empty dictionary is returned.", "TypeError is raised if generator is not a Python generator object."]}
{"index": 3128, "name": "inspect.getcoroutinelocals", "module": "inspect", "doc": ["This function is analogous to getgeneratorlocals(), but works for coroutine objects created by async def functions."]}
{"index": 3129, "name": "inspect.CO_OPTIMIZED", "module": "inspect", "doc": ["The code object is optimized, using fast locals."]}
{"index": 3130, "name": "inspect.CO_NEWLOCALS", "module": "inspect", "doc": ["If set, a new dict will be created for the frame\u2019s f_locals when the code object is executed."]}
{"index": 3131, "name": "inspect.CO_VARARGS", "module": "inspect", "doc": ["The code object has a variable positional parameter (*args-like)."]}
{"index": 3132, "name": "inspect.CO_VARKEYWORDS", "module": "inspect", "doc": ["The code object has a variable keyword parameter (**kwargs-like)."]}
{"index": 3133, "name": "inspect.CO_NESTED", "module": "inspect", "doc": ["The flag is set when the code object is a nested function."]}
{"index": 3134, "name": "inspect.CO_GENERATOR", "module": "inspect", "doc": ["The flag is set when the code object is a generator function, i.e.", "a generator object is returned when the code object is executed."]}
{"index": 3135, "name": "inspect.CO_NOFREE", "module": "inspect", "doc": ["The flag is set if there are no free or cell variables."]}
{"index": 3136, "name": "inspect.CO_COROUTINE", "module": "inspect", "doc": ["The flag is set when the code object is a coroutine function.", "When the code object is executed it returns a coroutine object.", "See PEP 492 for more details."]}
{"index": 3137, "name": "inspect.CO_ITERABLE_COROUTINE", "module": "inspect", "doc": ["The flag is used to transform generators into generator-based coroutines.", "Generator objects with this flag can be used in await expression, and can yield from coroutine objects.", "See PEP 492 for more details."]}
{"index": 3138, "name": "inspect.CO_ASYNC_GENERATOR", "module": "inspect", "doc": ["The flag is set when the code object is an asynchronous generator function.", "When the code object is executed it returns an asynchronous generator object.", "See PEP 525 for more details."]}
{"index": 3139, "name": "cmdoption-inspect-details", "module": "inspect", "doc": ["Print information about the specified object rather than the source code"]}
{"index": 3140, "name": "io.DEFAULT_BUFFER_SIZE", "module": "io", "doc": ["An int containing the default buffer size used by the module\u2019s buffered I/O classes.", "open() uses the file\u2019s blksize (as obtained by os.stat()) if possible."]}
{"index": 3141, "name": "io.open", "module": "io", "doc": ["This is an alias for the builtin open() function."]}
{"index": 3142, "name": "io.BlockingIOError", "module": "io", "doc": ["This is a compatibility alias for the builtin BlockingIOError exception."]}
{"index": 3143, "name": "io.UnsupportedOperation", "module": "io", "doc": ["An exception inheriting OSError and ValueError that is raised when an unsupported operation is called on a stream."]}
{"index": 3144, "name": "io.IOBase", "module": "io", "doc": ["The abstract base class for all I/O classes, acting on streams of bytes.", "There is no public constructor.", "This class provides empty abstract implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked.", "Even though IOBase does not declare read() or write() because their signatures will vary, implementations and clients should consider those methods part of the interface.", "Also, implementations may raise a ValueError (or UnsupportedOperation) when operations they do not support are called.", "The basic type used for binary data read from or written to a file is bytes.", "Other bytes-like objects are accepted as method arguments too.", "Text I/O classes work with str data.", "Note that calling any method (even inquiries) on a closed stream is undefined.", "Implementations may raise ValueError in this case.", "IOBase (and its subclasses) supports the iterator protocol, meaning that an IOBase object can be iterated over yielding the lines in a stream.", "Lines are defined slightly differently depending on whether the stream is a binary stream (yielding bytes), or a text stream (yielding character strings).", "See readline() below.", "IOBase is also a context manager and therefore supports the with statement.", "In this example, file is closed after the with statement\u2019s suite is finished\u2014even if an exception occurs:", "IOBase provides these data attributes and methods:"]}
{"index": 3145, "name": "io.IOBase.close", "module": "io", "doc": ["Flush and close this stream.", "This method has no effect if the file is already closed.", "Once the file is closed, any operation on the file (e.g.", "reading or writing) will raise a ValueError.", "As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect."]}
{"index": 3146, "name": "io.IOBase.closed", "module": "io", "doc": ["True if the stream is closed."]}
{"index": 3147, "name": "io.IOBase.fileno", "module": "io", "doc": ["Return the underlying file descriptor (an integer) of the stream if it exists.", "An OSError is raised if the IO object does not use a file descriptor."]}
{"index": 3148, "name": "io.IOBase.flush", "module": "io", "doc": ["Flush the write buffers of the stream if applicable.", "This does nothing for read-only and non-blocking streams."]}
{"index": 3149, "name": "io.IOBase.isatty", "module": "io", "doc": ["Return True if the stream is interactive (i.e., connected to a terminal/tty device)."]}
{"index": 3150, "name": "io.IOBase.readable", "module": "io", "doc": ["Return True if the stream can be read from.", "If False, read() will raise OSError."]}
{"index": 3151, "name": "io.IOBase.readline", "module": "io", "doc": ["Read and return one line from the stream.", "If size is specified, at most size bytes will be read.", "The line terminator is always b'\\n' for binary files; for text files, the newline argument to open() can be used to select the line terminator(s) recognized."]}
{"index": 3152, "name": "io.IOBase.readlines", "module": "io", "doc": ["Read and return a list of lines from the stream.", "hint can be specified to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds hint.", "Note that it\u2019s already possible to iterate on file objects using for line in file: ... without calling file.readlines()."]}
{"index": 3153, "name": "io.IOBase.seek", "module": "io", "doc": ["Change the stream position to the given byte offset.", "offset is interpreted relative to the position indicated by whence.", "The default value for whence is SEEK_SET.", "Values for whence are:", "Return the new absolute position."]}
{"index": 3154, "name": "io.IOBase.seekable", "module": "io", "doc": ["Return True if the stream supports random access.", "If False, seek(), tell() and truncate() will raise OSError."]}
{"index": 3155, "name": "io.IOBase.tell", "module": "io", "doc": ["Return the current stream position."]}
{"index": 3156, "name": "io.IOBase.truncate", "module": "io", "doc": ["Resize the stream to the given size in bytes (or the current position if size is not specified).", "The current stream position isn\u2019t changed.", "This resizing can extend or reduce the current file size.", "In case of extension, the contents of the new file area depend on the platform (on most systems, additional bytes are zero-filled).", "The new file size is returned."]}
{"index": 3157, "name": "io.IOBase.writable", "module": "io", "doc": ["Return True if the stream supports writing.", "If False, write() and truncate() will raise OSError."]}
{"index": 3158, "name": "io.IOBase.writelines", "module": "io", "doc": ["Write a list of lines to the stream.", "Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end."]}
{"index": 3159, "name": "io.IOBase.__del__", "module": "io", "doc": ["Prepare for object destruction.", "IOBase provides a default implementation of this method that calls the instance\u2019s close() method."]}
{"index": 3160, "name": "io.RawIOBase", "module": "io", "doc": ["Base class for raw binary I/O.", "It inherits IOBase.", "There is no public constructor.", "Raw binary I/O typically provides low-level access to an underlying OS device or API, and does not try to encapsulate it in high-level primitives (this is left to Buffered I/O and Text I/O, described later in this page).", "In addition to the attributes and methods from IOBase, RawIOBase provides the following methods:"]}
{"index": 3161, "name": "io.RawIOBase.read", "module": "io", "doc": ["Read up to size bytes from the object and return them.", "As a convenience, if size is unspecified or -1, all bytes until EOF are returned.", "Otherwise, only one system call is ever made.", "Fewer than size bytes may be returned if the operating system call returns fewer than size bytes.", "If 0 bytes are returned, and size was not 0, this indicates end of file.", "If the object is in non-blocking mode and no bytes are available, None is returned.", "The default implementation defers to readall() and readinto()."]}
{"index": 3162, "name": "io.RawIOBase.readall", "module": "io", "doc": ["Read and return all the bytes from the stream until EOF, using multiple calls to the stream if necessary."]}
{"index": 3163, "name": "io.RawIOBase.readinto", "module": "io", "doc": ["Read bytes into a pre-allocated, writable bytes-like object b, and return the number of bytes read.", "For example, b might be a bytearray.", "If the object is in non-blocking mode and no bytes are available, None is returned."]}
{"index": 3164, "name": "io.RawIOBase.write", "module": "io", "doc": ["Write the given bytes-like object, b, to the underlying raw stream, and return the number of bytes written.", "This can be less than the length of b in bytes, depending on specifics of the underlying raw stream, and especially if it is in non-blocking mode.", "None is returned if the raw stream is set not to block and no single byte could be readily written to it.", "The caller may release or mutate b after this method returns, so the implementation should only access b during the method call."]}
{"index": 3165, "name": "io.BufferedIOBase", "module": "io", "doc": ["Base class for binary streams that support some kind of buffering.", "It inherits IOBase.", "There is no public constructor.", "The main difference with RawIOBase is that methods read(), readinto() and write() will try (respectively) to read as much input as requested or to consume all given output, at the expense of making perhaps more than one system call.", "In addition, those methods can raise BlockingIOError if the underlying raw stream is in non-blocking mode and cannot take or give enough data; unlike their RawIOBase counterparts, they will never return None.", "Besides, the read() method does not have a default implementation that defers to readinto().", "A typical BufferedIOBase implementation should not inherit from a RawIOBase implementation, but wrap one, like BufferedWriter and BufferedReader do.", "BufferedIOBase provides or overrides these methods and attribute in addition to those from IOBase:"]}
{"index": 3166, "name": "io.BufferedIOBase.raw", "module": "io", "doc": ["The underlying raw stream (a RawIOBase instance) that BufferedIOBase deals with.", "This is not part of the BufferedIOBase API and may not exist on some implementations."]}
{"index": 3167, "name": "io.BufferedIOBase.detach", "module": "io", "doc": ["Separate the underlying raw stream from the buffer and return it.", "After the raw stream has been detached, the buffer is in an unusable state.", "Some buffers, like BytesIO, do not have the concept of a single raw stream to return from this method.", "They raise UnsupportedOperation."]}
{"index": 3168, "name": "io.BufferedIOBase.read", "module": "io", "doc": ["Read and return up to size bytes.", "If the argument is omitted, None, or negative, data is read and returned until EOF is reached.", "An empty bytes object is returned if the stream is already at EOF.", "If the argument is positive, and the underlying raw stream is not interactive, multiple raw reads may be issued to satisfy the byte count (unless EOF is reached first).", "But for interactive raw streams, at most one raw read will be issued, and a short result does not imply that EOF is imminent.", "A BlockingIOError is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment."]}
{"index": 3169, "name": "io.BufferedIOBase.read1", "module": "io", "doc": ["Read and return up to size bytes, with at most one call to the underlying raw stream\u2019s read() (or readinto()) method.", "This can be useful if you are implementing your own buffering on top of a BufferedIOBase object.", "If size is -1 (the default), an arbitrary number of bytes are returned (more than zero unless EOF is reached)."]}
{"index": 3170, "name": "io.BufferedIOBase.readinto", "module": "io", "doc": ["Read bytes into a pre-allocated, writable bytes-like object b and return the number of bytes read.", "For example, b might be a bytearray.", "Like read(), multiple reads may be issued to the underlying raw stream, unless the latter is interactive.", "A BlockingIOError is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment."]}
{"index": 3171, "name": "io.BufferedIOBase.readinto1", "module": "io", "doc": ["Read bytes into a pre-allocated, writable bytes-like object b, using at most one call to the underlying raw stream\u2019s read() (or readinto()) method.", "Return the number of bytes read.", "A BlockingIOError is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment."]}
{"index": 3172, "name": "io.BufferedIOBase.write", "module": "io", "doc": ["Write the given bytes-like object, b, and return the number of bytes written (always equal to the length of b in bytes, since if the write fails an OSError will be raised).", "Depending on the actual implementation, these bytes may be readily written to the underlying stream, or held in a buffer for performance and latency reasons.", "When in non-blocking mode, a BlockingIOError is raised if the data needed to be written to the raw stream but it couldn\u2019t accept all the data without blocking.", "The caller may release or mutate b after this method returns, so the implementation should only access b during the method call."]}
{"index": 3173, "name": "io.FileIO", "module": "io", "doc": ["FileIO represents an OS-level file containing bytes data.", "It implements the RawIOBase interface (and therefore the IOBase interface, too).", "The name can be one of two things:", "The mode can be 'r', 'w', 'x' or 'a' for reading (default), writing, exclusive creation or appending.", "The file will be created if it doesn\u2019t exist when opened for writing or appending; it will be truncated when opened for writing.", "FileExistsError will be raised if it already exists when opened for creating.", "Opening a file for creating implies writing, so this mode behaves in a similar way to 'w'.", "Add a '+' to the mode to allow simultaneous reading and writing.", "The read() (when called with a positive argument), readinto() and write() methods on this class will only make one system call.", "A custom opener can be used by passing a callable as opener.", "The underlying file descriptor for the file object is then obtained by calling opener with (name, flags).", "opener must return an open file descriptor (passing os.open as opener results in functionality similar to passing None).", "The newly created file is non-inheritable.", "See the open() built-in function for examples on using the opener parameter.", "In addition to the attributes and methods from IOBase and RawIOBase, FileIO provides the following data attributes:"]}
{"index": 3174, "name": "io.FileIO.mode", "module": "io", "doc": ["The mode as given in the constructor."]}
{"index": 3175, "name": "io.FileIO.name", "module": "io", "doc": ["The file name.", "This is the file descriptor of the file when no name is given in the constructor."]}
{"index": 3176, "name": "io.BytesIO", "module": "io", "doc": ["A stream implementation using an in-memory bytes buffer.", "It inherits BufferedIOBase.", "The buffer is discarded when the close() method is called.", "The optional argument initial_bytes is a bytes-like object that contains initial data.", "BytesIO provides or overrides these methods in addition to those from BufferedIOBase and IOBase:"]}
{"index": 3177, "name": "io.BytesIO.getbuffer", "module": "io", "doc": ["Return a readable and writable view over the contents of the buffer without copying them.", "Also, mutating the view will transparently update the contents of the buffer:"]}
{"index": 3178, "name": "io.BytesIO.getvalue", "module": "io", "doc": ["Return bytes containing the entire contents of the buffer."]}
{"index": 3179, "name": "io.BytesIO.read1", "module": "io", "doc": ["In BytesIO, this is the same as read()."]}
{"index": 3180, "name": "io.BytesIO.readinto1", "module": "io", "doc": ["In BytesIO, this is the same as readinto()."]}
{"index": 3181, "name": "io.BufferedReader", "module": "io", "doc": ["A buffer providing higher-level access to a readable, sequential RawIOBase object.", "It inherits BufferedIOBase.", "When reading data from this object, a larger amount of data may be requested from the underlying raw stream, and kept in an internal buffer.", "The buffered data can then be returned directly on subsequent reads.", "The constructor creates a BufferedReader for the given readable raw stream and buffer_size.", "If buffer_size is omitted, DEFAULT_BUFFER_SIZE is used.", "BufferedReader provides or overrides these methods in addition to those from BufferedIOBase and IOBase:"]}
{"index": 3182, "name": "io.BufferedReader.peek", "module": "io", "doc": ["Return bytes from the stream without advancing the position.", "At most one single read on the raw stream is done to satisfy the call.", "The number of bytes returned may be less or more than requested."]}
{"index": 3183, "name": "io.BufferedReader.read", "module": "io", "doc": ["Read and return size bytes, or if size is not given or negative, until EOF or if the read call would block in non-blocking mode."]}
{"index": 3184, "name": "io.BufferedReader.read1", "module": "io", "doc": ["Read and return up to size bytes with only one call on the raw stream.", "If at least one byte is buffered, only buffered bytes are returned.", "Otherwise, one raw stream read call is made."]}
{"index": 3185, "name": "io.BufferedWriter", "module": "io", "doc": ["A buffer providing higher-level access to a writeable, sequential RawIOBase object.", "It inherits BufferedIOBase.", "When writing to this object, data is normally placed into an internal buffer.", "The buffer will be written out to the underlying RawIOBase object under various conditions, including:", "The constructor creates a BufferedWriter for the given writeable raw stream.", "If the buffer_size is not given, it defaults to DEFAULT_BUFFER_SIZE.", "BufferedWriter provides or overrides these methods in addition to those from BufferedIOBase and IOBase:"]}
{"index": 3186, "name": "io.BufferedWriter.flush", "module": "io", "doc": ["Force bytes held in the buffer into the raw stream.", "A BlockingIOError should be raised if the raw stream blocks."]}
{"index": 3187, "name": "io.BufferedWriter.write", "module": "io", "doc": ["Write the bytes-like object, b, and return the number of bytes written.", "When in non-blocking mode, a BlockingIOError is raised if the buffer needs to be written out but the raw stream blocks."]}
{"index": 3188, "name": "io.BufferedRandom", "module": "io", "doc": ["A buffered interface to random access streams.", "It inherits BufferedReader and BufferedWriter, and further supports seek() and tell() functionality.", "The constructor creates a reader and writer for a seekable raw stream, given in the first argument.", "If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE.", "BufferedRandom is capable of anything BufferedReader or BufferedWriter can do."]}
{"index": 3189, "name": "io.BufferedRWPair", "module": "io", "doc": ["A buffered I/O object combining two unidirectional RawIOBase objects \u2013 one readable, the other writeable \u2013 into a single bidirectional endpoint.", "It inherits BufferedIOBase.", "reader and writer are RawIOBase objects that are readable and writeable respectively.", "If the buffer_size is omitted it defaults to DEFAULT_BUFFER_SIZE.", "BufferedRWPair implements all of BufferedIOBase\u2019s methods except for detach(), which raises UnsupportedOperation."]}
{"index": 3190, "name": "io.TextIOBase", "module": "io", "doc": ["Base class for text streams.", "This class provides a character and line based interface to stream I/O.", "It inherits IOBase.", "There is no public constructor.", "TextIOBase provides or overrides these data attributes and methods in addition to those from IOBase:"]}
{"index": 3191, "name": "io.TextIOBase.encoding", "module": "io", "doc": ["The name of the encoding used to decode the stream\u2019s bytes into strings, and to encode strings into bytes."]}
{"index": 3192, "name": "io.TextIOBase.errors", "module": "io", "doc": ["The error setting of the decoder or encoder."]}
{"index": 3193, "name": "io.TextIOBase.newlines", "module": "io", "doc": ["A string, a tuple of strings, or None, indicating the newlines translated so far.", "Depending on the implementation and the initial constructor flags, this may not be available."]}
{"index": 3194, "name": "io.TextIOBase.buffer", "module": "io", "doc": ["The underlying binary buffer (a BufferedIOBase instance) that TextIOBase deals with.", "This is not part of the TextIOBase API and may not exist in some implementations."]}
{"index": 3195, "name": "io.TextIOBase.detach", "module": "io", "doc": ["Separate the underlying binary buffer from the TextIOBase and return it.", "After the underlying buffer has been detached, the TextIOBase is in an unusable state.", "Some TextIOBase implementations, like StringIO, may not have the concept of an underlying buffer and calling this method will raise UnsupportedOperation."]}
{"index": 3196, "name": "io.TextIOBase.read", "module": "io", "doc": ["Read and return at most size characters from the stream as a single str.", "If size is negative or None, reads until EOF."]}
{"index": 3197, "name": "io.TextIOBase.readline", "module": "io", "doc": ["Read until newline or EOF and return a single str.", "If the stream is already at EOF, an empty string is returned.", "If size is specified, at most size characters will be read."]}
{"index": 3198, "name": "io.TextIOBase.seek", "module": "io", "doc": ["Change the stream position to the given offset.", "Behaviour depends on the whence parameter.", "The default value for whence is SEEK_SET.", "Return the new absolute position as an opaque number."]}
{"index": 3199, "name": "io.TextIOBase.tell", "module": "io", "doc": ["Return the current stream position as an opaque number.", "The number does not usually represent a number of bytes in the underlying binary storage."]}
{"index": 3200, "name": "io.TextIOBase.write", "module": "io", "doc": ["Write the string s to the stream and return the number of characters written."]}
{"index": 3201, "name": "io.TextIOWrapper", "module": "io", "doc": ["A buffered text stream over a BufferedIOBase binary stream.", "It inherits TextIOBase.", "encoding gives the name of the encoding that the stream will be decoded or encoded with.", "It defaults to locale.getpreferredencoding(False).", "errors is an optional string that specifies how encoding and decoding errors are to be handled.", "Pass 'strict' to raise a ValueError exception if there is an encoding error (the default of None has the same effect), or pass 'ignore' to ignore errors.", "(Note that ignoring encoding errors can lead to data loss.)", "'replace' causes a replacement marker (such as '?')", "to be inserted where there is malformed data.", "'backslashreplace' causes malformed data to be replaced by a backslashed escape sequence.", "When writing, 'xmlcharrefreplace' (replace with the appropriate XML character reference)  or 'namereplace' (replace with \\N{...} escape sequences) can be used.", "Any other error handling name that has been registered with codecs.register_error() is also valid.", "newline controls how line endings are handled.", "It can be None, '', '\\n', '\\r', and '\\r\\n'.", "It works as follows:", "If line_buffering is True, flush() is implied when a call to write contains a newline character or a carriage return.", "If write_through is True, calls to write() are guaranteed not to be buffered: any data written on the TextIOWrapper object is immediately handled to its underlying binary buffer.", "TextIOWrapper provides these members in addition to those of TextIOBase and its parents:"]}
{"index": 3202, "name": "io.TextIOWrapper.line_buffering", "module": "io", "doc": ["Whether line buffering is enabled."]}
{"index": 3203, "name": "io.TextIOWrapper.write_through", "module": "io", "doc": ["Whether writes are passed immediately to the underlying binary buffer."]}
{"index": 3204, "name": "io.TextIOWrapper.reconfigure", "module": "io", "doc": ["Reconfigure this text stream using new settings for encoding, errors, newline, line_buffering and write_through.", "Parameters not specified keep current settings, except errors='strict' is used when encoding is specified but errors is not specified.", "It is not possible to change the encoding or newline if some data has already been read from the stream.", "On the other hand, changing encoding after write is possible.", "This method does an implicit stream flush before setting the new parameters."]}
{"index": 3205, "name": "io.StringIO", "module": "io", "doc": ["An in-memory stream for text I/O.", "The text buffer is discarded when the close() method is called.", "The initial value of the buffer can be set by providing initial_value.", "If newline translation is enabled, newlines will be encoded as if by write().", "The stream is positioned at the start of the buffer.", "The newline argument works like that of TextIOWrapper.", "The default is to consider only \\n characters as ends of lines and to do no newline translation.", "If newline is set to None, newlines are written as \\n on all platforms, but universal newline decoding is still performed when reading.", "StringIO provides this method in addition to those from TextIOBase and its parents:", "Example usage:"]}
{"index": 3206, "name": "io.StringIO.getvalue", "module": "io", "doc": ["Return a str containing the entire contents of the buffer.", "Newlines are decoded as if by read(), although the stream position is not changed."]}
{"index": 3207, "name": "io.IncrementalNewlineDecoder", "module": "io", "doc": ["A helper codec that decodes newlines for universal newlines mode.", "It inherits codecs.IncrementalDecoder."]}
{"index": 3208, "name": "ipaddress.ip_address", "module": "ipaddress", "doc": ["Return an IPv4Address or IPv6Address object depending on the IP address passed as argument.", "Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default.", "A ValueError is raised if address does not represent a valid IPv4 or IPv6 address."]}
{"index": 3209, "name": "ipaddress.ip_network", "module": "ipaddress", "doc": ["Return an IPv4Network or IPv6Network object depending on the IP address passed as argument.", "address is a string or integer representing the IP network.", "Either IPv4 or IPv6 networks may be supplied; integers less than 2**32 will be considered to be IPv4 by default.", "strict is passed to IPv4Network or IPv6Network constructor.", "A ValueError is raised if address does not represent a valid IPv4 or IPv6 address, or if the network has host bits set."]}
{"index": 3210, "name": "ipaddress.ip_interface", "module": "ipaddress", "doc": ["Return an IPv4Interface or IPv6Interface object depending on the IP address passed as argument.", "address is a string or integer representing the IP address.", "Either IPv4 or IPv6 addresses may be supplied; integers less than 2**32 will be considered to be IPv4 by default.", "A ValueError is raised if address does not represent a valid IPv4 or IPv6 address."]}
{"index": 3211, "name": "ipaddress.IPv4Address", "module": "ipaddress", "doc": ["Construct an IPv4 address.", "An AddressValueError is raised if address is not a valid IPv4 address.", "The following constitutes a valid IPv4 address:"]}
{"index": 3212, "name": "ipaddress.IPv4Address.version", "module": "ipaddress", "doc": ["The appropriate version number: 4 for IPv4, 6 for IPv6."]}
{"index": 3213, "name": "ipaddress.IPv4Address.max_prefixlen", "module": "ipaddress", "doc": ["The total number of bits in the address representation for this version: 32 for IPv4, 128 for IPv6.", "The prefix defines the number of leading bits in an  address that are compared to determine whether or not an address is part of a network."]}
{"index": 3214, "name": "ipaddress.IPv4Address.exploded", "module": "ipaddress", "doc": ["The string representation in dotted decimal notation.", "Leading zeroes are never included in the representation.", "As IPv4 does not define a shorthand notation for addresses with octets set to zero, these two attributes are always the same as str(addr) for IPv4 addresses.", "Exposing these attributes makes it easier to write display code that can handle both IPv4 and IPv6 addresses."]}
{"index": 3215, "name": "ipaddress.IPv4Address.packed", "module": "ipaddress", "doc": ["The binary representation of this address - a bytes object of the appropriate length (most significant octet first).", "This is 4 bytes for IPv4 and 16 bytes for IPv6."]}
{"index": 3216, "name": "ipaddress.IPv4Address.reverse_pointer", "module": "ipaddress", "doc": ["The name of the reverse DNS PTR record for the IP address, e.g.", ":", "This is the name that could be used for performing a PTR lookup, not the resolved hostname itself."]}
{"index": 3217, "name": "ipaddress.IPv4Address.is_multicast", "module": "ipaddress", "doc": ["True if the address is reserved for multicast use.", "See RFC 3171 (for IPv4) or RFC 2373 (for IPv6)."]}
{"index": 3218, "name": "ipaddress.IPv4Address.is_private", "module": "ipaddress", "doc": ["True if the address is allocated for private networks.", "See iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry (for IPv6)."]}
{"index": 3219, "name": "ipaddress.IPv4Address.is_global", "module": "ipaddress", "doc": ["True if the address is allocated for public networks.", "See iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry (for IPv6)."]}
{"index": 3220, "name": "ipaddress.IPv4Address.is_unspecified", "module": "ipaddress", "doc": ["True if the address is unspecified.", "See RFC 5735 (for IPv4) or RFC 2373 (for IPv6)."]}
{"index": 3221, "name": "ipaddress.IPv4Address.is_reserved", "module": "ipaddress", "doc": ["True if the address is otherwise IETF reserved."]}
{"index": 3222, "name": "ipaddress.IPv4Address.is_loopback", "module": "ipaddress", "doc": ["True if this is a loopback address.", "See RFC 3330 (for IPv4) or RFC 2373 (for IPv6)."]}
{"index": 3223, "name": "ipaddress.IPv4Address.is_link_local", "module": "ipaddress", "doc": ["True if the address is reserved for link-local usage.", "See RFC 3927."]}
{"index": 3224, "name": "ipaddress.IPv6Address", "module": "ipaddress", "doc": ["Construct an IPv6 address.", "An AddressValueError is raised if address is not a valid IPv6 address.", "The following constitutes a valid IPv6 address:", "The short form of the address representation, with leading zeroes in groups omitted and the longest sequence of groups consisting entirely of zeroes collapsed to a single empty group.", "This is also the value returned by str(addr) for IPv6 addresses.", "The long form of the address representation, with all leading zeroes and groups consisting entirely of zeroes included.", "For the following attributes, see the corresponding documentation of the IPv4Address class:"]}
{"index": 3225, "name": "ipaddress.IPv6Address.is_site_local", "module": "ipaddress", "doc": ["True if the address is reserved for site-local usage.", "Note that the site-local address space has been deprecated by RFC 3879.", "Use is_private to test if this address is in the space of unique local addresses as defined by RFC 4193."]}
{"index": 3226, "name": "ipaddress.IPv6Address.ipv4_mapped", "module": "ipaddress", "doc": ["For addresses that appear to be IPv4 mapped addresses (starting with ::FFFF/96), this property will report the embedded IPv4 address.", "For any other address, this property will be None."]}
{"index": 3227, "name": "ipaddress.IPv6Address.sixtofour", "module": "ipaddress", "doc": ["For addresses that appear to be 6to4 addresses  (starting with 2002::/16) as defined by RFC 3056, this property will report the embedded IPv4 address.", "For any other address, this property will be None."]}
{"index": 3228, "name": "ipaddress.IPv6Address.teredo", "module": "ipaddress", "doc": ["For addresses that appear to be Teredo addresses (starting with 2001::/32) as defined by RFC 4380, this property will report the embedded (server, client) IP address pair.", "For any other address, this property will be None."]}
{"index": 3229, "name": "ipaddress.IPv4Network", "module": "ipaddress", "doc": ["Construct an IPv4 network definition.", "address can be one of the following:", "An AddressValueError is raised if address is not a valid IPv4 address.", "A NetmaskValueError is raised if the mask is not valid for an IPv4 address.", "If strict is True and host bits are set in the supplied address, then ValueError is raised.", "Otherwise, the host bits are masked out to determine the appropriate network address.", "Unless stated otherwise, all network methods accepting other network/address objects will raise TypeError if the argument\u2019s IP version is incompatible to self."]}
{"index": 3230, "name": "ipaddress.IPv4Network.max_prefixlen", "module": "ipaddress", "doc": ["Refer to the corresponding attribute documentation in IPv4Address."]}
{"index": 3231, "name": "ipaddress.IPv4Network.is_link_local", "module": "ipaddress", "doc": ["These attributes are true for the network as a whole if they are true for both the network address and the broadcast address."]}
{"index": 3232, "name": "ipaddress.IPv4Network.network_address", "module": "ipaddress", "doc": ["The network address for the network.", "The network address and the prefix length together uniquely define a network."]}
{"index": 3233, "name": "ipaddress.IPv4Network.broadcast_address", "module": "ipaddress", "doc": ["The broadcast address for the network.", "Packets sent to the broadcast address should be received by every host on the network."]}
{"index": 3234, "name": "ipaddress.IPv4Network.hostmask", "module": "ipaddress", "doc": ["The host mask, as an IPv4Address object."]}
{"index": 3235, "name": "ipaddress.IPv4Network.netmask", "module": "ipaddress", "doc": ["The net mask, as an IPv4Address object."]}
{"index": 3236, "name": "ipaddress.IPv4Network.exploded", "module": "ipaddress", "doc": ["A string representation of the network, with the mask in prefix notation.", "with_prefixlen and compressed are always the same as str(network).", "exploded uses the exploded form the network address."]}
{"index": 3237, "name": "ipaddress.IPv4Network.with_netmask", "module": "ipaddress", "doc": ["A string representation of the network, with the mask in net mask notation."]}
{"index": 3238, "name": "ipaddress.IPv4Network.with_hostmask", "module": "ipaddress", "doc": ["A string representation of the network, with the mask in host mask notation."]}
{"index": 3239, "name": "ipaddress.IPv4Network.num_addresses", "module": "ipaddress", "doc": ["The total number of addresses in the network."]}
{"index": 3240, "name": "ipaddress.IPv4Network.prefixlen", "module": "ipaddress", "doc": ["Length of the network prefix, in bits."]}
{"index": 3241, "name": "ipaddress.IPv4Network.hosts", "module": "ipaddress", "doc": ["Returns an iterator over the usable hosts in the network.", "The usable hosts are all the IP addresses that belong to the network, except the network address itself and the network broadcast address.", "For networks with a mask length of 31, the network address and network broadcast address are also included in the result."]}
{"index": 3242, "name": "ipaddress.IPv4Network.overlaps", "module": "ipaddress", "doc": ["True if this network is partly or wholly contained in other or other is wholly contained in this network."]}
{"index": 3243, "name": "ipaddress.IPv4Network.address_exclude", "module": "ipaddress", "doc": ["Computes the network definitions resulting from removing the given network from this one.", "Returns an iterator of network objects.", "Raises ValueError if network is not completely contained in this network."]}
{"index": 3244, "name": "ipaddress.IPv4Network.subnets", "module": "ipaddress", "doc": ["The subnets that join to make the current network definition, depending on the argument values.", "prefixlen_diff is the amount our prefix length should be increased by.", "new_prefix is the desired new prefix of the subnets; it must be larger than our prefix.", "One and only one of prefixlen_diff and new_prefix must be set.", "Returns an iterator of network objects."]}
{"index": 3245, "name": "ipaddress.IPv4Network.supernet", "module": "ipaddress", "doc": ["The supernet containing this network definition, depending on the argument values.", "prefixlen_diff is the amount our prefix length should be decreased by.", "new_prefix is the desired new prefix of the supernet; it must be smaller than our prefix.", "One and only one of prefixlen_diff and new_prefix must be set.", "Returns a single network object."]}
{"index": 3246, "name": "ipaddress.IPv4Network.subnet_of", "module": "ipaddress", "doc": ["Returns True if this network is a subnet of other."]}
{"index": 3247, "name": "ipaddress.IPv4Network.supernet_of", "module": "ipaddress", "doc": ["Returns True if this network is a supernet of other."]}
{"index": 3248, "name": "ipaddress.IPv4Network.compare_networks", "module": "ipaddress", "doc": ["Compare this network to other.", "In this comparison only the network addresses are considered; host bits aren\u2019t.", "Returns either -1, 0 or 1."]}
{"index": 3249, "name": "ipaddress.IPv6Network", "module": "ipaddress", "doc": ["Construct an IPv6 network definition.", "address can be one of the following:", "An AddressValueError is raised if address is not a valid IPv6 address.", "A NetmaskValueError is raised if the mask is not valid for an IPv6 address.", "If strict is True and host bits are set in the supplied address, then ValueError is raised.", "Otherwise, the host bits are masked out to determine the appropriate network address."]}
{"index": 3250, "name": "ipaddress.IPv6Network.hosts", "module": "ipaddress", "doc": ["Returns an iterator over the usable hosts in the network.", "The usable hosts are all the IP addresses that belong to the network, except the Subnet-Router anycast address.", "For networks with a mask length of 127, the Subnet-Router anycast address is also included in the result."]}
{"index": 3251, "name": "ipaddress.IPv6Network.compare_networks", "module": "ipaddress", "doc": ["Refer to the corresponding attribute documentation in IPv4Network."]}
{"index": 3252, "name": "ipaddress.IPv6Network.is_site_local", "module": "ipaddress", "doc": ["These attribute is true for the network as a whole if it is true for both the network address and the broadcast address."]}
{"index": 3253, "name": "ipaddress.IPv4Interface", "module": "ipaddress", "doc": ["Construct an IPv4 interface.", "The meaning of address is as in the constructor of IPv4Network, except that arbitrary host addresses are always accepted.", "IPv4Interface is a subclass of IPv4Address, so it inherits all the attributes from that class.", "In addition, the following attributes are available:"]}
{"index": 3254, "name": "ipaddress.IPv4Interface.ip", "module": "ipaddress", "doc": ["The address (IPv4Address) without network information."]}
{"index": 3255, "name": "ipaddress.IPv4Interface.network", "module": "ipaddress", "doc": ["The network (IPv4Network) this interface belongs to."]}
{"index": 3256, "name": "ipaddress.IPv4Interface.with_prefixlen", "module": "ipaddress", "doc": ["A string representation of the interface with the mask in prefix notation."]}
{"index": 3257, "name": "ipaddress.IPv4Interface.with_netmask", "module": "ipaddress", "doc": ["A string representation of the interface with the network as a net mask."]}
{"index": 3258, "name": "ipaddress.IPv4Interface.with_hostmask", "module": "ipaddress", "doc": ["A string representation of the interface with the network as a host mask."]}
{"index": 3259, "name": "ipaddress.IPv6Interface", "module": "ipaddress", "doc": ["Construct an IPv6 interface.", "The meaning of address is as in the constructor of IPv6Network, except that arbitrary host addresses are always accepted.", "IPv6Interface is a subclass of IPv6Address, so it inherits all the attributes from that class.", "In addition, the following attributes are available:"]}
{"index": 3260, "name": "ipaddress.IPv6Interface.with_hostmask", "module": "ipaddress", "doc": ["Refer to the corresponding attribute documentation in IPv4Interface."]}
{"index": 3261, "name": "ipaddress.v4_int_to_packed", "module": "ipaddress", "doc": ["Represent an address as 4 packed bytes in network (big-endian) order.", "address is an integer representation of an IPv4 IP address.", "A ValueError is raised if the integer is negative or too large to be an IPv4 IP address."]}
{"index": 3262, "name": "ipaddress.v6_int_to_packed", "module": "ipaddress", "doc": ["Represent an address as 16 packed bytes in network (big-endian) order.", "address is an integer representation of an IPv6 IP address.", "A ValueError is raised if the integer is negative or too large to be an IPv6 IP address."]}
{"index": 3263, "name": "ipaddress.summarize_address_range", "module": "ipaddress", "doc": ["Return an iterator of the summarized network range given the first and last IP addresses.", "first is the first IPv4Address or IPv6Address in the range and last is the last IPv4Address or IPv6Address in the range.", "A TypeError is raised if first or last are not IP addresses or are not of the same version.", "A ValueError is raised if last is not greater than first or if first address version is not 4 or 6."]}
{"index": 3264, "name": "ipaddress.collapse_addresses", "module": "ipaddress", "doc": ["Return an iterator of the collapsed IPv4Network or IPv6Network objects.", "addresses is an iterator of IPv4Network or IPv6Network objects.", "A TypeError is raised if addresses contains mixed version objects."]}
{"index": 3265, "name": "ipaddress.get_mixed_type_key", "module": "ipaddress", "doc": ["Return a key suitable for sorting between networks and addresses.", "Address and Network objects are not sortable by default; they\u2019re fundamentally different, so the expression:", "doesn\u2019t make sense.", "There are some times however, where you may wish to have ipaddress sort these anyway.", "If you need to do this, you can use this function as the key argument to sorted().", "obj is either a network or address object."]}
{"index": 3266, "name": "ipaddress.AddressValueError", "module": "ipaddress", "doc": ["Any value error related to the address."]}
{"index": 3267, "name": "ipaddress.NetmaskValueError", "module": "ipaddress", "doc": ["Any value error related to the net mask."]}
{"index": 3268, "name": "itertools.accumulate", "module": "itertools", "doc": ["Make an iterator that returns accumulated sums, or accumulated results of other binary functions (specified via the optional func argument).", "If func is supplied, it should be a function of two arguments.", "Elements of the input iterable may be any type that can be accepted as arguments to func.", "(For example, with the default operation of addition, elements may be any addable type including Decimal or Fraction.)", "If the input iterable is empty, the output iterable will also be empty.", "Roughly equivalent to:", "There are a number of uses for the func argument.", "It can be set to min() for a running minimum, max() for a running maximum, or operator.mul() for a running product.", "Amortization tables can be built by accumulating interest and applying payments.", "First-order recurrence relations can be modeled by supplying the initial value in the iterable and using only the accumulated total in func argument:", "See functools.reduce() for a similar function that returns only the final accumulated value."]}
{"index": 3269, "name": "itertools.chain", "module": "itertools", "doc": ["Make an iterator that returns elements from the first iterable until it is exhausted, then proceeds to the next iterable, until all of the iterables are exhausted.", "Used for treating consecutive sequences as a single sequence.", "Roughly equivalent to:"]}
{"index": 3270, "name": "itertools.chain.from_iterable", "module": "itertools", "doc": ["Alternate constructor for chain().", "Gets chained inputs from a single iterable argument that is evaluated lazily.", "Roughly equivalent to:"]}
{"index": 3271, "name": "itertools.combinations", "module": "itertools", "doc": ["Return r length subsequences of elements from the input iterable.", "Combinations are emitted in lexicographic sort order.", "So, if the input iterable is sorted, the combination tuples will be produced in sorted order.", "Elements are treated as unique based on their position, not on their value.", "So if the input elements are unique, there will be no repeat values in each combination.", "Roughly equivalent to:", "The code for combinations() can be also expressed as a subsequence of permutations() after filtering entries where the elements are not in sorted order (according to their position in the input pool):", "The number of items returned is n!", "/ r!", "/ (n-r)!", "when 0 <= r <= n or zero when r > n."]}
{"index": 3272, "name": "itertools.combinations_with_replacement", "module": "itertools", "doc": ["Return r length subsequences of elements from the input iterable allowing individual elements to be repeated more than once.", "Combinations are emitted in lexicographic sort order.", "So, if the input iterable is sorted, the combination tuples will be produced in sorted order.", "Elements are treated as unique based on their position, not on their value.", "So if the input elements are unique, the generated combinations will also be unique.", "Roughly equivalent to:", "The code for combinations_with_replacement() can be also expressed as a subsequence of product() after filtering entries where the elements are not in sorted order (according to their position in the input pool):", "The number of items returned is (n+r-1)!", "/ r!", "/ (n-1)!", "when n > 0."]}
{"index": 3273, "name": "itertools.compress", "module": "itertools", "doc": ["Make an iterator that filters elements from data returning only those that have a corresponding element in selectors that evaluates to True.", "Stops when either the data or selectors iterables has been exhausted.", "Roughly equivalent to:"]}
{"index": 3274, "name": "itertools.count", "module": "itertools", "doc": ["Make an iterator that returns evenly spaced values starting with number start.", "Often used as an argument to map() to generate consecutive data points.", "Also, used with zip() to add sequence numbers.", "Roughly equivalent to:", "When counting with floating point numbers, better accuracy can sometimes be achieved by substituting multiplicative code such as: (start + step * i for i in count())."]}
{"index": 3275, "name": "itertools.cycle", "module": "itertools", "doc": ["Make an iterator returning elements from the iterable and saving a copy of each.", "When the iterable is exhausted, return elements from the saved copy.", "Repeats indefinitely.", "Roughly equivalent to:", "Note, this member of the toolkit may require significant auxiliary storage (depending on the length of the iterable)."]}
{"index": 3276, "name": "itertools.dropwhile", "module": "itertools", "doc": ["Make an iterator that drops elements from the iterable as long as the predicate is true; afterwards, returns every element.", "Note, the iterator does not produce any output until the predicate first becomes false, so it may have a lengthy start-up time.", "Roughly equivalent to:"]}
{"index": 3277, "name": "itertools.filterfalse", "module": "itertools", "doc": ["Make an iterator that filters elements from iterable returning only those for which the predicate is False.", "If predicate is None, return the items that are false.", "Roughly equivalent to:"]}
{"index": 3278, "name": "itertools.groupby", "module": "itertools", "doc": ["Make an iterator that returns consecutive keys and groups from the iterable.", "The key is a function computing a key value for each element.", "If not specified or is None, key defaults to an identity function and returns the element unchanged.", "Generally, the iterable needs to already be sorted on the same key function.", "The operation of groupby() is similar to the uniq filter in Unix.", "It generates a break or new group every time the value of the key function changes (which is why it is usually necessary to have sorted the data using the same key function).", "That behavior differs from SQL\u2019s GROUP BY which aggregates common elements regardless of their input order.", "The returned group is itself an iterator that shares the underlying iterable with groupby().", "Because the source is shared, when the groupby() object is advanced, the previous group is no longer visible.", "So, if that data is needed later, it should be stored as a list:", "groupby() is roughly equivalent to:"]}
{"index": 3279, "name": "itertools.islice", "module": "itertools", "doc": ["Make an iterator that returns selected elements from the iterable.", "If start is non-zero, then elements from the iterable are skipped until start is reached.", "Afterward, elements are returned consecutively unless step is set higher than one which results in items being skipped.", "If stop is None, then iteration continues until the iterator is exhausted, if at all; otherwise, it stops at the specified position.", "Unlike regular slicing, islice() does not support negative values for start, stop, or step.", "Can be used to extract related fields from data where the internal structure has been flattened (for example, a multi-line report may list a name field on every third line).", "Roughly equivalent to:", "If start is None, then iteration starts at zero.", "If step is None, then the step defaults to one."]}
{"index": 3280, "name": "itertools.permutations", "module": "itertools", "doc": ["Return successive r length permutations of elements in the iterable.", "If r is not specified or is None, then r defaults to the length of the iterable and all possible full-length permutations are generated.", "Permutations are emitted in lexicographic sort order.", "So, if the input iterable is sorted, the permutation tuples will be produced in sorted order.", "Elements are treated as unique based on their position, not on their value.", "So if the input elements are unique, there will be no repeat values in each permutation.", "Roughly equivalent to:", "The code for permutations() can be also expressed as a subsequence of product(), filtered to exclude entries with repeated elements (those from the same position in the input pool):", "The number of items returned is n!", "/ (n-r)!", "when 0 <= r <= n or zero when r > n."]}
{"index": 3281, "name": "itertools.product", "module": "itertools", "doc": ["Cartesian product of input iterables.", "Roughly equivalent to nested for-loops in a generator expression.", "For example, product(A, B) returns the same as ((x,y) for x in A for y in B).", "The nested loops cycle like an odometer with the rightmost element advancing on every iteration.", "This pattern creates a lexicographic ordering so that if the input\u2019s iterables are sorted, the product tuples are emitted in sorted order.", "To compute the product of an iterable with itself, specify the number of repetitions with the optional repeat keyword argument.", "For example, product(A, repeat=4) means the same as product(A, A, A, A).", "This function is roughly equivalent to the following code, except that the actual implementation does not build up intermediate results in memory:"]}
{"index": 3282, "name": "itertools.repeat", "module": "itertools", "doc": ["Make an iterator that returns object over and over again.", "Runs indefinitely unless the times argument is specified.", "Used as argument to map() for invariant parameters to the called function.", "Also used with zip() to create an invariant part of a tuple record.", "Roughly equivalent to:", "A common use for repeat is to supply a stream of constant values to map or zip:"]}
{"index": 3283, "name": "itertools.starmap", "module": "itertools", "doc": ["Make an iterator that computes the function using arguments obtained from the iterable.", "Used instead of map() when argument parameters are already grouped in tuples from a single iterable (the data has been \u201cpre-zipped\u201d).", "The difference between map() and starmap() parallels the distinction between function(a,b) and function(*c).", "Roughly equivalent to:"]}
{"index": 3284, "name": "itertools.takewhile", "module": "itertools", "doc": ["Make an iterator that returns elements from the iterable as long as the predicate is true.", "Roughly equivalent to:"]}
{"index": 3285, "name": "itertools.tee", "module": "itertools", "doc": ["Return n independent iterators from a single iterable.", "The following Python code helps explain what tee does (although the actual implementation is more complex and uses only a single underlying FIFO queue).", "Roughly equivalent to:", "Once tee() has made a split, the original iterable should not be used anywhere else; otherwise, the iterable could get advanced without the tee objects being informed.", "tee iterators are not threadsafe.", "A RuntimeError may be raised when using simultaneously iterators returned by the same tee() call, even if the original iterable is threadsafe.", "This itertool may require significant auxiliary storage (depending on how much temporary data needs to be stored).", "In general, if one iterator uses most or all of the data before another iterator starts, it is faster to use list() instead of tee()."]}
{"index": 3286, "name": "itertools.zip_longest", "module": "itertools", "doc": ["Make an iterator that aggregates elements from each of the iterables.", "If the iterables are of uneven length, missing values are filled-in with fillvalue.", "Iteration continues until the longest iterable is exhausted.", "Roughly equivalent to:", "If one of the iterables is potentially infinite, then the zip_longest() function should be wrapped with something that limits the number of calls (for example islice() or takewhile()).", "If not specified, fillvalue defaults to None."]}
{"index": 3287, "name": "json.dump", "module": "json", "doc": ["Serialize obj as a JSON formatted stream to fp (a .write()-supporting file-like object) using this conversion table.", "If skipkeys is true (default: False), then dict keys that are not of a basic type (str, int, float, bool, None) will be skipped instead of raising a TypeError.", "The json module always produces str objects, not bytes objects.", "Therefore, fp.write() must support str input.", "If ensure_ascii is true (the default), the output is guaranteed to have all incoming non-ASCII characters escaped.", "If ensure_ascii is false, these characters will be output as-is.", "If check_circular is false (default: True), then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError (or worse).", "If allow_nan is false (default: True), then it will be a ValueError to serialize out of range float values (nan, inf, -inf) in strict compliance of the JSON specification.", "If allow_nan is true, their JavaScript equivalents (NaN, Infinity, -Infinity) will be used.", "If indent is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level.", "An indent level of 0, negative, or \"\" will only insert newlines.", "None (the default) selects the most compact representation.", "Using a positive integer indent indents that many spaces per level.", "If indent is a string (such as \"\\t\"), that string is used to indent each level.", "If specified, separators should be an (item_separator, key_separator) tuple.", "The default is (', ', ': ') if indent is None and (',', ': ') otherwise.", "To get the most compact JSON representation, you should specify (',', ':') to eliminate whitespace.", "If specified, default should be a function that gets called for objects that can\u2019t otherwise be serialized.", "It should return a JSON encodable version of the object or raise a TypeError.", "If not specified, TypeError is raised.", "If sort_keys is true (default: False), then the output of dictionaries will be sorted by key.", "To use a custom JSONEncoder subclass (e.g.", "one that overrides the default() method to serialize additional types), specify it with the cls kwarg; otherwise JSONEncoder is used."]}
{"index": 3288, "name": "json.dumps", "module": "json", "doc": ["Serialize obj to a JSON formatted str using this conversion table.", "The arguments have the same meaning as in dump()."]}
{"index": 3289, "name": "json.load", "module": "json", "doc": ["Deserialize fp (a .read()-supporting text file or binary file containing a JSON document) to a Python object using this conversion table.", "object_hook is an optional function that will be called with the result of any object literal decoded (a dict).", "The return value of object_hook will be used instead of the dict.", "This feature can be used to implement custom decoders (e.g.", "JSON-RPC class hinting).", "object_pairs_hook is an optional function that will be called with the result of any object literal decoded with an ordered list of pairs.", "The return value of object_pairs_hook will be used instead of the dict.", "This feature can be used to implement custom decoders.", "If object_hook is also defined, the object_pairs_hook takes priority.", "parse_float, if specified, will be called with the string of every JSON float to be decoded.", "By default, this is equivalent to float(num_str).", "This can be used to use another datatype or parser for JSON floats (e.g.", "decimal.Decimal).", "parse_int, if specified, will be called with the string of every JSON int to be decoded.", "By default, this is equivalent to int(num_str).", "This can be used to use another datatype or parser for JSON integers (e.g.", "float).", "parse_constant, if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN'.", "This can be used to raise an exception if invalid JSON numbers are encountered.", "To use a custom JSONDecoder subclass, specify it with the cls kwarg; otherwise JSONDecoder is used.", "Additional keyword arguments will be passed to the constructor of the class.", "If the data being deserialized is not a valid JSON document, a JSONDecodeError will be raised."]}
{"index": 3290, "name": "json.loads", "module": "json", "doc": ["Deserialize s (a str, bytes or bytearray instance containing a JSON document) to a Python object using this conversion table.", "The other arguments have the same meaning as in load(), except encoding which is ignored and deprecated.", "If the data being deserialized is not a valid JSON document, a JSONDecodeError will be raised."]}
{"index": 3291, "name": "json.JSONDecoder", "module": "json", "doc": ["Simple JSON decoder.", "Performs the following translations in decoding by default:", "It also understands NaN, Infinity, and -Infinity as their corresponding float values, which is outside the JSON spec.", "object_hook, if specified, will be called with the result of every JSON object decoded and its return value will be used in place of the given dict.", "This can be used to provide custom deserializations (e.g.", "to support JSON-RPC class hinting).", "object_pairs_hook, if specified will be called with the result of every JSON object decoded with an ordered list of pairs.", "The return value of object_pairs_hook will be used instead of the dict.", "This feature can be used to implement custom decoders.", "If object_hook is also defined, the object_pairs_hook takes priority.", "parse_float, if specified, will be called with the string of every JSON float to be decoded.", "By default, this is equivalent to float(num_str).", "This can be used to use another datatype or parser for JSON floats (e.g.", "decimal.Decimal).", "parse_int, if specified, will be called with the string of every JSON int to be decoded.", "By default, this is equivalent to int(num_str).", "This can be used to use another datatype or parser for JSON integers (e.g.", "float).", "parse_constant, if specified, will be called with one of the following strings: '-Infinity', 'Infinity', 'NaN'.", "This can be used to raise an exception if invalid JSON numbers are encountered.", "If strict is false (True is the default), then control characters will be allowed inside strings.", "Control characters in this context are those with character codes in the 0\u201331 range, including '\\t' (tab), '\\n', '\\r' and '\\0'.", "If the data being deserialized is not a valid JSON document, a JSONDecodeError will be raised."]}
{"index": 3292, "name": "json.JSONDecoder.decode", "module": "json", "doc": ["Return the Python representation of s (a str instance containing a JSON document).", "JSONDecodeError will be raised if the given JSON document is not valid."]}
{"index": 3293, "name": "json.JSONDecoder.raw_decode", "module": "json", "doc": ["Decode a JSON document from s (a str beginning with a JSON document) and return a 2-tuple of the Python representation and the index in s where the document ended.", "This can be used to decode a JSON document from a string that may have extraneous data at the end."]}
{"index": 3294, "name": "json.JSONEncoder", "module": "json", "doc": ["Extensible JSON encoder for Python data structures.", "Supports the following objects and types by default:", "To extend this to recognize other objects, subclass and implement a default() method with another method that returns a serializable object for o if possible, otherwise it should call the superclass implementation (to raise TypeError).", "If skipkeys is false (the default), then it is a TypeError to attempt encoding of keys that are not str, int, float or None.", "If skipkeys is true, such items are simply skipped.", "If ensure_ascii is true (the default), the output is guaranteed to have all incoming non-ASCII characters escaped.", "If ensure_ascii is false, these characters will be output as-is.", "If check_circular is true (the default), then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause an OverflowError).", "Otherwise, no such check takes place.", "If allow_nan is true (the default), then NaN, Infinity, and -Infinity will be encoded as such.", "This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders.", "Otherwise, it will be a ValueError to encode such floats.", "If sort_keys is true (default: False), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis.", "If indent is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level.", "An indent level of 0, negative, or \"\" will only insert newlines.", "None (the default) selects the most compact representation.", "Using a positive integer indent indents that many spaces per level.", "If indent is a string (such as \"\\t\"), that string is used to indent each level.", "If specified, separators should be an (item_separator, key_separator) tuple.", "The default is (', ', ': ') if indent is None and (',', ': ') otherwise.", "To get the most compact JSON representation, you should specify (',', ':') to eliminate whitespace.", "If specified, default should be a function that gets called for objects that can\u2019t otherwise be serialized.", "It should return a JSON encodable version of the object or raise a TypeError.", "If not specified, TypeError is raised."]}
{"index": 3295, "name": "json.JSONEncoder.default", "module": "json", "doc": ["Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a TypeError).", "For example, to support arbitrary iterators, you could implement default like this:"]}
{"index": 3296, "name": "json.JSONEncoder.encode", "module": "json", "doc": ["Return a JSON string representation of a Python data structure, o.", "For example:"]}
{"index": 3297, "name": "json.JSONEncoder.iterencode", "module": "json", "doc": ["Encode the given object, o, and yield each string representation as available.", "For example:"]}
{"index": 3298, "name": "json.JSONDecodeError", "module": "json", "doc": ["Subclass of ValueError with the following additional attributes:"]}
{"index": 3299, "name": "json.JSONDecodeError.msg", "module": "json", "doc": ["The unformatted error message."]}
{"index": 3300, "name": "json.JSONDecodeError.doc", "module": "json", "doc": ["The JSON document being parsed."]}
{"index": 3301, "name": "json.JSONDecodeError.pos", "module": "json", "doc": ["The start index of doc where parsing failed."]}
{"index": 3302, "name": "json.JSONDecodeError.lineno", "module": "json", "doc": ["The line corresponding to pos."]}
{"index": 3303, "name": "json.JSONDecodeError.colno", "module": "json", "doc": ["The column corresponding to pos."]}
{"index": 3304, "name": "cmdoption-json.tool-arg-infile", "module": "cmdoption-json", "doc": ["The JSON file to be validated or pretty-printed:", "If infile is not specified, read from sys.stdin."]}
{"index": 3305, "name": "cmdoption-json.tool-arg-outfile", "module": "cmdoption-json", "doc": ["Write the output of the infile to the given outfile.", "Otherwise, write it to sys.stdout."]}
{"index": 3306, "name": "cmdoption-json.tool-sort-keys", "module": "cmdoption-json", "doc": ["Sort the output of dictionaries alphabetically by key."]}
{"index": 3307, "name": "cmdoption-json.tool-h", "module": "cmdoption-json", "doc": ["Show the help message."]}
{"index": 3308, "name": "rfc-errata", "module": "json", "doc": ["As noted in the errata for RFC 7159, JSON permits literal U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript (as of ECMAScript Edition 5.1) does not."]}
{"index": 3309, "name": "keyword.iskeyword", "module": "keyword", "doc": ["Return true if s is a Python keyword."]}
{"index": 3310, "name": "keyword.kwlist", "module": "keyword", "doc": ["Sequence containing all the keywords defined for the interpreter.", "If any keywords are defined to only be active when particular __future__ statements are in effect, these will be included as well."]}
{"index": 3311, "name": "linecache.getline", "module": "linecache", "doc": ["Get line lineno from file named filename.", "This function will never raise an exception \u2014 it will return '' on errors (the terminating newline character will be included for lines that are found).", "If a file named filename is not found, the function will look for it in the module search path, sys.path, after first checking for a PEP 302 __loader__ in module_globals, in case the module was imported from a zipfile or other non-filesystem import source."]}
{"index": 3312, "name": "linecache.clearcache", "module": "linecache", "doc": ["Clear the cache.", "Use this function if you no longer need lines from files previously read using getline()."]}
{"index": 3313, "name": "linecache.checkcache", "module": "linecache", "doc": ["Check the cache for validity.", "Use this function if files in the cache  may have changed on disk, and you require the updated version.", "If filename is omitted, it will check all the entries in the cache."]}
{"index": 3314, "name": "linecache.lazycache", "module": "linecache", "doc": ["Capture enough detail about a non-file-based module to permit getting its lines later via getline() even if module_globals is None in the later call.", "This avoids doing I/O until a line is actually needed, without having to carry the module globals around indefinitely."]}
{"index": 3315, "name": "locale.Error", "module": "locale", "doc": ["Exception raised when the locale passed to setlocale() is not recognized."]}
{"index": 3316, "name": "locale.setlocale", "module": "locale", "doc": ["If locale is given and not None, setlocale() modifies the locale setting for the category.", "The available categories are listed in the data description below.", "locale may be a string, or an iterable of two strings (language code and encoding).", "If it\u2019s an iterable, it\u2019s converted to a locale name using the locale aliasing engine.", "An empty string specifies the user\u2019s default settings.", "If the modification of the locale fails, the exception Error is raised.", "If successful, the new locale setting is returned.", "If locale is omitted or None, the current setting for category is returned.", "setlocale() is not thread-safe on most systems.", "Applications typically start with a call of", "This sets the locale for all categories to the user\u2019s default setting (typically specified in the LANG environment variable).", "If the locale is not changed thereafter, using multithreading should not cause problems."]}
{"index": 3317, "name": "locale.localeconv", "module": "locale", "doc": ["Returns the database of the local conventions as a dictionary.", "This dictionary has the following strings as keys:", "All numeric values can be set to CHAR_MAX to indicate that there is no value specified in this locale.", "The possible values for 'p_sign_posn' and 'n_sign_posn' are given below.", "The function sets temporarily the LC_CTYPE locale to the LC_NUMERIC locale or the LC_MONETARY locale if locales are different and numeric or monetary strings are non-ASCII.", "This temporary change affects other threads."]}
{"index": 3318, "name": "locale.nl_langinfo", "module": "locale", "doc": ["Return some locale-specific information as a string.", "This function is not available on all systems, and the set of possible options might also vary across platforms.", "The possible argument values are numbers, for which symbolic constants are available in the locale module.", "The nl_langinfo() function accepts one of the following keys.", "Most descriptions are taken from the corresponding description in the GNU C library."]}
{"index": 3319, "name": "locale.CODESET", "module": "locale", "doc": ["Get a string with the name of the character encoding used in the selected locale."]}
{"index": 3320, "name": "locale.D_T_FMT", "module": "locale", "doc": ["Get a string that can be used as a format string for time.strftime() to represent date and time in a locale-specific way."]}
{"index": 3321, "name": "locale.D_FMT", "module": "locale", "doc": ["Get a string that can be used as a format string for time.strftime() to represent a date in a locale-specific way."]}
{"index": 3322, "name": "locale.T_FMT", "module": "locale", "doc": ["Get a string that can be used as a format string for time.strftime() to represent a time in a locale-specific way."]}
{"index": 3323, "name": "locale.T_FMT_AMPM", "module": "locale", "doc": ["Get a format string for time.strftime() to represent time in the am/pm format."]}
{"index": 3324, "name": "locale.RADIXCHAR", "module": "locale", "doc": ["Get the radix character (decimal dot, decimal comma, etc.", ")."]}
{"index": 3325, "name": "locale.THOUSEP", "module": "locale", "doc": ["Get the separator character for thousands (groups of three digits)."]}
{"index": 3326, "name": "locale.YESEXPR", "module": "locale", "doc": ["Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question."]}
{"index": 3327, "name": "locale.NOEXPR", "module": "locale", "doc": ["Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question."]}
{"index": 3328, "name": "locale.CRNCYSTR", "module": "locale", "doc": ["Get the currency symbol, preceded by \u201c-\u201d if the symbol should appear before the value, \u201c+\u201d if the symbol should appear after the value, or \u201c.\u201d if the symbol should replace the radix character."]}
{"index": 3329, "name": "locale.ERA", "module": "locale", "doc": ["Get a string that represents the era used in the current locale.", "Most locales do not define this value.", "An example of a locale which does define this value is the Japanese one.", "In Japan, the traditional representation of dates includes the name of the era corresponding to the then-emperor\u2019s reign.", "Normally it should not be necessary to use this value directly.", "Specifying the E modifier in their format strings causes the time.strftime() function to use this information.", "The format of the returned string is not specified, and therefore you should not assume knowledge of it on different systems."]}
{"index": 3330, "name": "locale.ERA_D_T_FMT", "module": "locale", "doc": ["Get a format string for time.strftime() to represent date and time in a locale-specific era-based way."]}
{"index": 3331, "name": "locale.ERA_D_FMT", "module": "locale", "doc": ["Get a format string for time.strftime() to represent a date in a locale-specific era-based way."]}
{"index": 3332, "name": "locale.ERA_T_FMT", "module": "locale", "doc": ["Get a format string for time.strftime() to represent a time in a locale-specific era-based way."]}
{"index": 3333, "name": "locale.ALT_DIGITS", "module": "locale", "doc": ["Get a representation of up to 100 values used to represent the values 0 to 99."]}
{"index": 3334, "name": "locale.getdefaultlocale", "module": "locale", "doc": ["Tries to determine the default locale settings and returns them as a tuple of the form (language code, encoding).", "According to POSIX, a program which has not called setlocale(LC_ALL, '') runs using the portable 'C' locale.", "Calling setlocale(LC_ALL, '') lets it use the default locale as defined by the LANG variable.", "Since we do not want to interfere with the current locale setting we thus emulate the behavior in the way described above.", "To maintain compatibility with other platforms, not only the LANG variable is tested, but a list of variables given as envvars parameter.", "The first found to be defined will be used.", "envvars defaults to the search path used in GNU gettext; it must always contain the variable name 'LANG'.", "The GNU gettext search path contains 'LC_ALL', 'LC_CTYPE', 'LANG' and 'LANGUAGE', in that order.", "Except for the code 'C', the language code corresponds to RFC 1766. language code and encoding may be None if their values cannot be determined."]}
{"index": 3335, "name": "locale.getlocale", "module": "locale", "doc": ["Returns the current setting for the given locale category as sequence containing language code, encoding.", "category may be one of the LC_* values except LC_ALL.", "It defaults to LC_CTYPE.", "Except for the code 'C', the language code corresponds to RFC 1766. language code and encoding may be None if their values cannot be determined."]}
{"index": 3336, "name": "locale.getpreferredencoding", "module": "locale", "doc": ["Return the encoding used for text data, according to user preferences.", "User preferences are expressed differently on different systems, and might not be available programmatically on some systems, so this function only returns a guess.", "On some systems, it is necessary to invoke setlocale() to obtain the user preferences, so this function is not thread-safe.", "If invoking setlocale is not necessary or desired, do_setlocale should be set to False.", "On Android or in the UTF-8 mode (-X utf8 option), always return 'UTF-8', the locale and the do_setlocale argument are ignored."]}
{"index": 3337, "name": "locale.normalize", "module": "locale", "doc": ["Returns a normalized locale code for the given locale name.", "The returned locale code is formatted for use with setlocale().", "If normalization fails, the original name is returned unchanged.", "If the given encoding is not known, the function defaults to the default encoding for the locale code just like setlocale()."]}
{"index": 3338, "name": "locale.resetlocale", "module": "locale", "doc": ["Sets the locale for category to the default setting.", "The default setting is determined by calling getdefaultlocale().", "category defaults to LC_ALL."]}
{"index": 3339, "name": "locale.strcoll", "module": "locale", "doc": ["Compares two strings according to the current LC_COLLATE setting.", "As any other compare function, returns a negative, or a positive value, or 0, depending on whether string1 collates before or after string2 or is equal to it."]}
{"index": 3340, "name": "locale.strxfrm", "module": "locale", "doc": ["Transforms a string to one that can be used in locale-aware comparisons.", "For example, strxfrm(s1) < strxfrm(s2) is equivalent to strcoll(s1, s2) < 0.", "This function can be used when the same string is compared repeatedly, e.g.", "when collating a sequence of strings."]}
{"index": 3341, "name": "locale.format_string", "module": "locale", "doc": ["Formats a number val according to the current LC_NUMERIC setting.", "The format follows the conventions of the % operator.", "For floating point values, the decimal point is modified if appropriate.", "If grouping is true, also takes the grouping into account.", "If monetary is true, the conversion uses monetary thousands separator and grouping strings.", "Processes formatting specifiers as in format % val, but takes the current locale settings into account."]}
{"index": 3342, "name": "locale.format", "module": "locale", "doc": ["Please note that this function works like format_string() but will only work for exactly one %char specifier.", "For example, '%f' and '%.0f' are both valid specifiers, but '%f KiB' is not.", "For whole format strings, use format_string()."]}
{"index": 3343, "name": "locale.currency", "module": "locale", "doc": ["Formats a number val according to the current LC_MONETARY settings.", "The returned string includes the currency symbol if symbol is true, which is the default.", "If grouping is true (which is not the default), grouping is done with the value.", "If international is true (which is not the default), the international currency symbol is used.", "Note that this function will not work with the \u2018C\u2019 locale, so you have to set a locale via setlocale() first."]}
{"index": 3344, "name": "locale.str", "module": "locale", "doc": ["Formats a floating point number using the same format as the built-in function str(float), but takes the decimal point into account."]}
{"index": 3345, "name": "locale.delocalize", "module": "locale", "doc": ["Converts a string into a normalized number string, following the LC_NUMERIC settings."]}
{"index": 3346, "name": "locale.atof", "module": "locale", "doc": ["Converts a string to a floating point number, following the LC_NUMERIC settings."]}
{"index": 3347, "name": "locale.atoi", "module": "locale", "doc": ["Converts a string to an integer, following the LC_NUMERIC conventions."]}
{"index": 3348, "name": "locale.LC_CTYPE", "module": "locale", "doc": ["Locale category for the character type functions.", "Depending on the settings of this category, the functions of module string dealing with case change their behaviour."]}
{"index": 3349, "name": "locale.LC_COLLATE", "module": "locale", "doc": ["Locale category for sorting strings.", "The functions strcoll() and strxfrm() of the locale module are affected."]}
{"index": 3350, "name": "locale.LC_TIME", "module": "locale", "doc": ["Locale category for the formatting of time.", "The function time.strftime() follows these conventions."]}
{"index": 3351, "name": "locale.LC_MONETARY", "module": "locale", "doc": ["Locale category for formatting of monetary values.", "The available options are available from the localeconv() function."]}
{"index": 3352, "name": "locale.LC_MESSAGES", "module": "locale", "doc": ["Locale category for message display.", "Python currently does not support application specific locale-aware messages.", "Messages displayed by the operating system, like those returned by os.strerror() might be affected by this category."]}
{"index": 3353, "name": "locale.LC_NUMERIC", "module": "locale", "doc": ["Locale category for formatting numbers.", "The functions format(), atoi(), atof() and str() of the locale module are affected by that category.", "All other numeric formatting operations are not affected."]}
{"index": 3354, "name": "locale.LC_ALL", "module": "locale", "doc": ["Combination of all locale settings.", "If this flag is used when the locale is changed, setting the locale for all categories is attempted.", "If that fails for any category, no category is changed at all.", "When the locale is retrieved using this flag, a string indicating the setting for all categories is returned.", "This string can be later used to restore the settings."]}
{"index": 3355, "name": "locale.CHAR_MAX", "module": "locale", "doc": ["This is a symbolic constant used for different values returned by localeconv()."]}
{"index": 3356, "name": "logging.config.fileConfig", "module": "logging", "doc": ["Reads the logging configuration from a configparser-format file.", "The format of the file should be as described in Configuration file format.", "This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration)."]}
{"index": 3357, "name": "logging.config.listen", "module": "logging", "doc": ["Starts up a socket server on the specified port, and listens for new configurations.", "If no port is specified, the module\u2019s default DEFAULT_LOGGING_CONFIG_PORT is used.", "Logging configurations will be sent as a file suitable for processing by dictConfig() or fileConfig().", "Returns a Thread instance on which you can call start() to start the server, and which you can join() when appropriate.", "To stop the server, call stopListening().", "The verify argument, if specified, should be a callable which should verify whether bytes received across the socket are valid and should be processed.", "This could be done by encrypting and/or signing what is sent across the socket, such that the verify callable can perform signature verification and/or decryption.", "The verify callable is called with a single argument - the bytes received across the socket - and should return the bytes to be processed, or None to indicate that the bytes should be discarded.", "The returned bytes could be the same as the passed in bytes (e.g.", "when only verification is done), or they could be completely different (perhaps if decryption were performed).", "To send a configuration to the socket, read in the configuration file and send it to the socket as a sequence of bytes preceded by a four-byte length string packed in binary using struct.pack('>L', n)."]}
{"index": 3358, "name": "logging.config.stopListening", "module": "logging", "doc": ["Stops the listening server which was created with a call to listen().", "This is typically called before calling join() on the return value from listen()."]}
{"index": 3359, "name": "logging.StreamHandler", "module": "logging", "doc": ["Returns a new instance of the StreamHandler class.", "If stream is specified, the instance will use it for logging output; otherwise, sys.stderr will be used."]}
{"index": 3360, "name": "logging.StreamHandler.emit", "module": "logging", "doc": ["If a formatter is specified, it is used to format the record.", "The record is then written to the stream with a terminator.", "If exception information is present, it is formatted using traceback.print_exception() and appended to the stream."]}
{"index": 3361, "name": "logging.StreamHandler.flush", "module": "logging", "doc": ["Flushes the stream by calling its flush() method.", "Note that the close() method is inherited from Handler and so does no output, so an explicit flush() call may be needed at times."]}
{"index": 3362, "name": "logging.StreamHandler.setStream", "module": "logging", "doc": ["Sets the instance\u2019s stream to the specified value, if it is different.", "The old stream is flushed before the new stream is set."]}
{"index": 3363, "name": "logging.FileHandler", "module": "logging", "doc": ["Returns a new instance of the FileHandler class.", "The specified file is opened and used as the stream for logging.", "If mode is not specified, 'a' is used.", "If encoding is not None, it is used to open the file with that encoding.", "If delay is true, then file opening is deferred until the first call to emit().", "By default, the file grows indefinitely."]}
{"index": 3364, "name": "logging.FileHandler.close", "module": "logging", "doc": ["Closes the file."]}
{"index": 3365, "name": "logging.FileHandler.emit", "module": "logging", "doc": ["Outputs the record to the file."]}
{"index": 3366, "name": "logging.NullHandler", "module": "logging", "doc": ["Returns a new instance of the NullHandler class."]}
{"index": 3367, "name": "logging.NullHandler.emit", "module": "logging", "doc": ["This method does nothing."]}
{"index": 3368, "name": "logging.NullHandler.handle", "module": "logging", "doc": ["This method does nothing."]}
{"index": 3369, "name": "logging.NullHandler.createLock", "module": "logging", "doc": ["This method returns None for the lock, since there is no underlying I/O to which access needs to be serialized."]}
{"index": 3370, "name": "logging.handlers.WatchedFileHandler", "module": "logging", "doc": ["Returns a new instance of the WatchedFileHandler class.", "The specified file is opened and used as the stream for logging.", "If mode is not specified, 'a' is used.", "If encoding is not None, it is used to open the file with that encoding.", "If delay is true, then file opening is deferred until the first call to emit().", "By default, the file grows indefinitely."]}
{"index": 3371, "name": "logging.handlers.WatchedFileHandler.reopenIfNeeded", "module": "logging", "doc": ["Checks to see if the file has changed.", "If it has, the existing stream is flushed and closed and the file opened again, typically as a precursor to outputting the record to the file."]}
{"index": 3372, "name": "logging.handlers.WatchedFileHandler.emit", "module": "logging", "doc": ["Outputs the record to the file, but first calls reopenIfNeeded() to reopen the file if it has changed."]}
{"index": 3373, "name": "logging.handlers.BaseRotatingHandler", "module": "logging", "doc": ["The parameters are as for FileHandler.", "The attributes are:"]}
{"index": 3374, "name": "logging.handlers.BaseRotatingHandler.namer", "module": "logging", "doc": ["If this attribute is set to a callable, the rotation_filename() method delegates to this callable.", "The parameters passed to the callable are those passed to rotation_filename()."]}
{"index": 3375, "name": "logging.handlers.BaseRotatingHandler.rotator", "module": "logging", "doc": ["If this attribute is set to a callable, the rotate() method delegates to this callable.", "The parameters passed to the callable are those passed to rotate()."]}
{"index": 3376, "name": "logging.handlers.BaseRotatingHandler.rotation_filename", "module": "logging", "doc": ["Modify the filename of a log file when rotating.", "This is provided so that a custom filename can be provided.", "The default implementation calls the \u2018namer\u2019 attribute of the handler, if it\u2019s callable, passing the default name to it.", "If the attribute isn\u2019t callable (the default is None), the name is returned unchanged."]}
{"index": 3377, "name": "logging.handlers.BaseRotatingHandler.rotate", "module": "logging", "doc": ["When rotating, rotate the current log.", "The default implementation calls the \u2018rotator\u2019 attribute of the handler, if it\u2019s callable, passing the source and dest arguments to it.", "If the attribute isn\u2019t callable (the default is None), the source is simply renamed to the destination."]}
{"index": 3378, "name": "logging.handlers.RotatingFileHandler", "module": "logging", "doc": ["Returns a new instance of the RotatingFileHandler class.", "The specified file is opened and used as the stream for logging.", "If mode is not specified, 'a' is used.", "If encoding is not None, it is used to open the file with that encoding.", "If delay is true, then file opening is deferred until the first call to emit().", "By default, the file grows indefinitely.", "You can use the maxBytes and backupCount values to allow the file to rollover at a predetermined size.", "When the size is about to be exceeded, the file is closed and a new file is silently opened for output.", "Rollover occurs whenever the current log file is nearly maxBytes in length; but if either of maxBytes or backupCount is zero, rollover never occurs, so you generally want to set backupCount to at least 1, and have a non-zero maxBytes.", "When backupCount is non-zero, the system will save old log files by appending the extensions \u2018.1\u2019, \u2018.2\u2019 etc., to the filename.", "For example, with a backupCount of 5 and a base file name of app.log, you would get app.log, app.log.1, app.log.2, up to app.log.5.", "The file being written to is always app.log.", "When this file is filled, it is closed and renamed to app.log.1, and if files app.log.1, app.log.2, etc.", "exist, then they are renamed to app.log.2, app.log.3 etc.", "respectively."]}
{"index": 3379, "name": "logging.handlers.RotatingFileHandler.doRollover", "module": "logging", "doc": ["Does a rollover, as described above."]}
{"index": 3380, "name": "logging.handlers.RotatingFileHandler.emit", "module": "logging", "doc": ["Outputs the record to the file, catering for rollover as described previously."]}
{"index": 3381, "name": "logging.handlers.TimedRotatingFileHandler", "module": "logging", "doc": ["Returns a new instance of the TimedRotatingFileHandler class.", "The specified file is opened and used as the stream for logging.", "On rotating it also sets the filename suffix.", "Rotating happens based on the product of when and interval.", "You can use the when to specify the type of interval.", "The list of possible values is below.", "Note that they are not case sensitive.", "When using weekday-based rotation, specify \u2018W0\u2019 for Monday, \u2018W1\u2019 for Tuesday, and so on up to \u2018W6\u2019 for Sunday.", "In this case, the value passed for interval isn\u2019t used.", "The system will save old log files by appending extensions to the filename.", "The extensions are date-and-time based, using the strftime format %Y-%m-%d_%H-%M-%S or a leading portion thereof, depending on the rollover interval.", "When computing the next rollover time for the first time (when the handler is created), the last modification time of an existing log file, or else the current time, is used to compute when the next rotation will occur.", "If the utc argument is true, times in UTC will be used; otherwise local time is used.", "If backupCount is nonzero, at most backupCount files will be kept, and if more would be created when rollover occurs, the oldest one is deleted.", "The deletion logic uses the interval to determine which files to delete, so changing the interval may leave old files lying around.", "If delay is true, then file opening is deferred until the first call to emit().", "If atTime is not None, it must be a datetime.time instance which specifies the time of day when rollover occurs, for the cases where rollover is set to happen \u201cat midnight\u201d or \u201con a particular weekday\u201d.", "Note that in these cases, the atTime value is effectively used to compute the initial rollover, and subsequent rollovers would be calculated via the normal interval calculation."]}
{"index": 3382, "name": "logging.handlers.TimedRotatingFileHandler.doRollover", "module": "logging", "doc": ["Does a rollover, as described above."]}
{"index": 3383, "name": "logging.handlers.TimedRotatingFileHandler.emit", "module": "logging", "doc": ["Outputs the record to the file, catering for rollover as described above."]}
{"index": 3384, "name": "logging.handlers.SocketHandler", "module": "logging", "doc": ["Returns a new instance of the SocketHandler class intended to communicate with a remote machine whose address is given by host and port."]}
{"index": 3385, "name": "logging.handlers.SocketHandler.close", "module": "logging", "doc": ["Closes the socket."]}
{"index": 3386, "name": "logging.handlers.SocketHandler.emit", "module": "logging", "doc": ["Pickles the record\u2019s attribute dictionary and writes it to the socket in binary format.", "If there is an error with the socket, silently drops the packet.", "If the connection was previously lost, re-establishes the connection.", "To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord() function."]}
{"index": 3387, "name": "logging.handlers.SocketHandler.handleError", "module": "logging", "doc": ["Handles an error which has occurred during emit().", "The most likely cause is a lost connection.", "Closes the socket so that we can retry on the next event."]}
{"index": 3388, "name": "logging.handlers.SocketHandler.makeSocket", "module": "logging", "doc": ["This is a factory method which allows subclasses to define the precise type of socket they want.", "The default implementation creates a TCP socket (socket.SOCK_STREAM)."]}
{"index": 3389, "name": "logging.handlers.SocketHandler.makePickle", "module": "logging", "doc": ["Pickles the record\u2019s attribute dictionary in binary format with a length prefix, and returns it ready for transmission across the socket.", "The details of this operation are equivalent to:", "Note that pickles aren\u2019t completely secure.", "If you are concerned about security, you may want to override this method to implement a more secure mechanism.", "For example, you can sign pickles using HMAC and then verify them on the receiving end, or alternatively you can disable unpickling of global objects on the receiving end."]}
{"index": 3390, "name": "logging.handlers.SocketHandler.send", "module": "logging", "doc": ["Send a pickled byte-string packet to the socket.", "The format of the sent byte-string is as described in the documentation for makePickle().", "This function allows for partial sends, which can happen when the network is busy."]}
{"index": 3391, "name": "logging.handlers.SocketHandler.createSocket", "module": "logging", "doc": ["Tries to create a socket; on failure, uses an exponential back-off algorithm.", "On initial failure, the handler will drop the message it was trying to send.", "When subsequent messages are handled by the same instance, it will not try connecting until some time has passed.", "The default parameters are such that the initial delay is one second, and if after that delay the connection still can\u2019t be made, the handler will double the delay each time up to a maximum of 30 seconds.", "This behaviour is controlled by the following handler attributes:", "This means that if the remote listener starts up after the handler has been used, you could lose messages (since the handler won\u2019t even attempt a connection until the delay has elapsed, but just silently drop messages during the delay period)."]}
{"index": 3392, "name": "logging.handlers.DatagramHandler", "module": "logging", "doc": ["Returns a new instance of the DatagramHandler class intended to communicate with a remote machine whose address is given by host and port."]}
{"index": 3393, "name": "logging.handlers.DatagramHandler.emit", "module": "logging", "doc": ["Pickles the record\u2019s attribute dictionary and writes it to the socket in binary format.", "If there is an error with the socket, silently drops the packet.", "To unpickle the record at the receiving end into a LogRecord, use the makeLogRecord() function."]}
{"index": 3394, "name": "logging.handlers.DatagramHandler.makeSocket", "module": "logging", "doc": ["The factory method of SocketHandler is here overridden to create a UDP socket (socket.SOCK_DGRAM)."]}
{"index": 3395, "name": "logging.handlers.DatagramHandler.send", "module": "logging", "doc": ["Send a pickled byte-string to a socket.", "The format of the sent byte-string is as described in the documentation for SocketHandler.makePickle()."]}
{"index": 3396, "name": "logging.handlers.SysLogHandler", "module": "logging", "doc": ["Returns a new instance of the SysLogHandler class intended to communicate with a remote Unix machine whose address is given by address in the form of a (host, port) tuple.", "If address is not specified, ('localhost', 514) is used.", "The address is used to open a socket.", "An alternative to providing a (host, port) tuple is providing an address as a string, for example \u2018/dev/log\u2019.", "In this case, a Unix domain socket is used to send the message to the syslog.", "If facility is not specified, LOG_USER is used.", "The type of socket opened depends on the socktype argument, which defaults to socket.SOCK_DGRAM and thus opens a UDP socket.", "To open a TCP socket (for use with the newer syslog daemons such as rsyslog), specify a value of socket.SOCK_STREAM.", "Note that if your server is not listening on UDP port 514, SysLogHandler may appear not to work.", "In that case, check what address you should be using for a domain socket - it\u2019s system dependent.", "For example, on Linux it\u2019s usually \u2018/dev/log\u2019 but on OS/X it\u2019s \u2018/var/run/syslog\u2019.", "You\u2019ll need to check your platform and use the appropriate address (you may need to do this check at runtime if your application needs to run on several platforms).", "On Windows, you pretty much have to use the UDP option."]}
{"index": 3397, "name": "logging.handlers.SysLogHandler.close", "module": "logging", "doc": ["Closes the socket to the remote host."]}
{"index": 3398, "name": "logging.handlers.SysLogHandler.emit", "module": "logging", "doc": ["The record is formatted, and then sent to the syslog server.", "If exception information is present, it is not sent to the server."]}
{"index": 3399, "name": "logging.handlers.SysLogHandler.encodePriority", "module": "logging", "doc": ["Encodes the facility and priority into an integer.", "You can pass in strings or integers - if strings are passed, internal mapping dictionaries are used to convert them to integers.", "The symbolic LOG_ values are defined in SysLogHandler and mirror the values defined in the sys/syslog.h header file.", "Priorities", "Facilities"]}
{"index": 3400, "name": "logging.handlers.SysLogHandler.mapPriority", "module": "logging", "doc": ["Maps a logging level name to a syslog priority name.", "You may need to override this if you are using custom levels, or if the default algorithm is not suitable for your needs.", "The default algorithm maps DEBUG, INFO, WARNING, ERROR and CRITICAL to the equivalent syslog names, and all other level names to \u2018warning\u2019."]}
{"index": 3401, "name": "logging.handlers.NTEventLogHandler", "module": "logging", "doc": ["Returns a new instance of the NTEventLogHandler class.", "The appname is used to define the application name as it appears in the event log.", "An appropriate registry entry is created using this name.", "The dllname should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log (if not specified, 'win32service.pyd' is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions.", "Note that use of these placeholders will make your event logs big, as the entire message source is held in the log.", "If you want slimmer logs, you have to pass in the name of your own .dll or .exe which contains the message definitions you want to use in the event log).", "The logtype is one of 'Application', 'System' or 'Security', and defaults to 'Application'."]}
{"index": 3402, "name": "logging.handlers.NTEventLogHandler.close", "module": "logging", "doc": ["At this point, you can remove the application name from the registry as a source of event log entries.", "However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name.", "The current version does not do this."]}
{"index": 3403, "name": "logging.handlers.NTEventLogHandler.emit", "module": "logging", "doc": ["Determines the message ID, event category and event type, and then logs the message in the NT event log."]}
{"index": 3404, "name": "logging.handlers.NTEventLogHandler.getEventCategory", "module": "logging", "doc": ["Returns the event category for the record.", "Override this if you want to specify your own categories.", "This version returns 0."]}
{"index": 3405, "name": "logging.handlers.NTEventLogHandler.getEventType", "module": "logging", "doc": ["Returns the event type for the record.", "Override this if you want to specify your own types.", "This version does a mapping using the handler\u2019s typemap attribute, which is set up in __init__() to a dictionary which contains mappings for DEBUG, INFO, WARNING, ERROR and CRITICAL.", "If you are using your own levels, you will either need to override this method or place a suitable dictionary in the handler\u2019s typemap attribute."]}
{"index": 3406, "name": "logging.handlers.NTEventLogHandler.getMessageID", "module": "logging", "doc": ["Returns the message ID for the record.", "If you are using your own messages, you could do this by having the msg passed to the logger being an ID rather than a format string.", "Then, in here, you could use a dictionary lookup to get the message ID.", "This version returns 1, which is the base message ID in win32service.pyd."]}
{"index": 3407, "name": "logging.handlers.SMTPHandler", "module": "logging", "doc": ["Returns a new instance of the SMTPHandler class.", "The instance is initialized with the from and to addresses and subject line of the email.", "The toaddrs should be a list of strings.", "To specify a non-standard SMTP port, use the (host, port) tuple format for the mailhost argument.", "If you use a string, the standard SMTP port is used.", "If your SMTP server requires authentication, you can specify a (username, password) tuple for the credentials argument.", "To specify the use of a secure protocol (TLS), pass in a tuple to the secure argument.", "This will only be used when authentication credentials are supplied.", "The tuple should be either an empty tuple, or a single-value tuple with the name of a keyfile, or a 2-value tuple with the names of the keyfile and certificate file.", "(This tuple is passed to the smtplib.SMTP.starttls() method.)", "A timeout can be specified for communication with the SMTP server using the timeout argument."]}
{"index": 3408, "name": "logging.handlers.SMTPHandler.emit", "module": "logging", "doc": ["Formats the record and sends it to the specified addressees."]}
{"index": 3409, "name": "logging.handlers.SMTPHandler.getSubject", "module": "logging", "doc": ["If you want to specify a subject line which is record-dependent, override this method."]}
{"index": 3410, "name": "logging.handlers.BufferingHandler", "module": "logging", "doc": ["Initializes the handler with a buffer of the specified capacity.", "Here, capacity means the number of logging records buffered."]}
{"index": 3411, "name": "logging.handlers.BufferingHandler.emit", "module": "logging", "doc": ["Appends the record to the buffer.", "If shouldFlush() returns true, calls flush() to process the buffer."]}
{"index": 3412, "name": "logging.handlers.BufferingHandler.flush", "module": "logging", "doc": ["You can override this to implement custom flushing behavior.", "This version just zaps the buffer to empty."]}
{"index": 3413, "name": "logging.handlers.BufferingHandler.shouldFlush", "module": "logging", "doc": ["Returns true if the buffer is up to capacity.", "This method can be overridden to implement custom flushing strategies."]}
{"index": 3414, "name": "logging.handlers.MemoryHandler", "module": "logging", "doc": ["Returns a new instance of the MemoryHandler class.", "The instance is initialized with a buffer size of capacity (number of records buffered).", "If flushLevel is not specified, ERROR is used.", "If no target is specified, the target will need to be set using setTarget() before this handler does anything useful.", "If flushOnClose is specified as False, then the buffer is not flushed when the handler is closed.", "If not specified or specified as True, the previous behaviour of flushing the buffer will occur when the handler is closed."]}
{"index": 3415, "name": "logging.handlers.MemoryHandler.close", "module": "logging", "doc": ["Calls flush(), sets the target to None and clears the buffer."]}
{"index": 3416, "name": "logging.handlers.MemoryHandler.flush", "module": "logging", "doc": ["For a MemoryHandler, flushing means just sending the buffered records to the target, if there is one.", "The buffer is also cleared when this happens.", "Override if you want different behavior."]}
{"index": 3417, "name": "logging.handlers.MemoryHandler.setTarget", "module": "logging", "doc": ["Sets the target handler for this handler."]}
{"index": 3418, "name": "logging.handlers.MemoryHandler.shouldFlush", "module": "logging", "doc": ["Checks for buffer full or a record at the flushLevel or higher."]}
{"index": 3419, "name": "logging.handlers.HTTPHandler", "module": "logging", "doc": ["Returns a new instance of the HTTPHandler class.", "The host can be of the form host:port, should you need to use a specific port number.", "If no method is specified, GET is used.", "If secure is true, a HTTPS connection will be used.", "The context parameter may be set to a ssl.SSLContext instance to configure the SSL settings used for the HTTPS connection.", "If credentials is specified, it should be a 2-tuple consisting of userid and password, which will be placed in a HTTP \u2018Authorization\u2019 header using Basic authentication.", "If you specify credentials, you should also specify secure=True so that your userid and password are not passed in cleartext across the wire."]}
{"index": 3420, "name": "logging.handlers.HTTPHandler.mapLogRecord", "module": "logging", "doc": ["Provides a dictionary, based on record, which is to be URL-encoded and sent to the web server.", "The default implementation just returns record.__dict__.", "This method can be overridden if e.g.", "only a subset of LogRecord is to be sent to the web server, or if more specific customization of what\u2019s sent to the server is required."]}
{"index": 3421, "name": "logging.handlers.HTTPHandler.emit", "module": "logging", "doc": ["Sends the record to the Web server as a URL-encoded dictionary.", "The mapLogRecord() method is used to convert the record to the dictionary to be sent."]}
{"index": 3422, "name": "logging.handlers.QueueHandler", "module": "logging", "doc": ["Returns a new instance of the QueueHandler class.", "The instance is initialized with the queue to send messages to.", "The queue can be any queue-like object; it\u2019s used as-is by the enqueue() method, which needs to know how to send messages to it.", "The queue is not required to have the task tracking API, which means that you can use SimpleQueue instances for queue."]}
{"index": 3423, "name": "logging.handlers.QueueHandler.emit", "module": "logging", "doc": ["Enqueues the result of preparing the LogRecord.", "Should an exception occur (e.g.", "because a bounded queue has filled up), the handleError() method is called to handle the error.", "This can result in the record silently being dropped (if logging.raiseExceptions is False) or a message printed to sys.stderr (if logging.raiseExceptions is True)."]}
{"index": 3424, "name": "logging.handlers.QueueHandler.prepare", "module": "logging", "doc": ["Prepares a record for queuing.", "The object returned by this method is enqueued.", "The base implementation formats the record to merge the message, arguments, and exception information, if present.", "It also removes unpickleable items from the record in-place.", "You might want to override this method if you want to convert the record to a dict or JSON string, or send a modified copy of the record while leaving the original intact."]}
{"index": 3425, "name": "logging.handlers.QueueHandler.enqueue", "module": "logging", "doc": ["Enqueues the record on the queue using put_nowait(); you may want to override this if you want to use blocking behaviour, or a timeout, or a customized queue implementation."]}
{"index": 3426, "name": "logging.handlers.QueueListener", "module": "logging", "doc": ["Returns a new instance of the QueueListener class.", "The instance is initialized with the queue to send messages to and a list of handlers which will handle entries placed on the queue.", "The queue can be any queue-like object; it\u2019s passed as-is to the dequeue() method, which needs to know how to get messages from it.", "The queue is not required to have the task tracking API (though it\u2019s used if available), which means that you can use SimpleQueue instances for queue.", "If respect_handler_level is True, a handler\u2019s level is respected (compared with the level for the message) when deciding whether to pass messages to that handler; otherwise, the behaviour is as in previous Python versions - to always pass each message to each handler."]}
{"index": 3427, "name": "logging.handlers.QueueListener.dequeue", "module": "logging", "doc": ["Dequeues a record and return it, optionally blocking.", "The base implementation uses get().", "You may want to override this method if you want to use timeouts or work with custom queue implementations."]}
{"index": 3428, "name": "logging.handlers.QueueListener.prepare", "module": "logging", "doc": ["Prepare a record for handling.", "This implementation just returns the passed-in record.", "You may want to override this method if you need to do any custom marshalling or manipulation of the record before passing it to the handlers."]}
{"index": 3429, "name": "logging.handlers.QueueListener.handle", "module": "logging", "doc": ["Handle a record.", "This just loops through the handlers offering them the record to handle.", "The actual object passed to the handlers is that which is returned from prepare()."]}
{"index": 3430, "name": "logging.handlers.QueueListener.start", "module": "logging", "doc": ["Starts the listener.", "This starts up a background thread to monitor the queue for LogRecords to process."]}
{"index": 3431, "name": "logging.handlers.QueueListener.stop", "module": "logging", "doc": ["Stops the listener.", "This asks the thread to terminate, and then waits for it to do so.", "Note that if you don\u2019t call this before your application exits, there may be some records still left on the queue, which won\u2019t be processed."]}
{"index": 3432, "name": "logging.handlers.QueueListener.enqueue_sentinel", "module": "logging", "doc": ["Writes a sentinel to the queue to tell the listener to quit.", "This implementation uses put_nowait().", "You may want to override this method if you want to use timeouts or work with custom queue implementations."]}
{"index": 3433, "name": "logging.Logger.propagate", "module": "logging", "doc": ["If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger.", "Messages are passed directly to the ancestor loggers\u2019 handlers - neither the level nor filters of the ancestor loggers in question are considered.", "If this evaluates to false, logging messages are not passed to the handlers of ancestor loggers.", "The constructor sets this attribute to True."]}
{"index": 3434, "name": "logging.Logger.setLevel", "module": "logging", "doc": ["Sets the threshold for this logger to level.", "Logging messages which are less severe than level will be ignored; logging messages which have severity level or higher will be emitted by whichever handler or handlers service this logger, unless a handler\u2019s level has been set to a higher severity level than level.", "When a logger is created, the level is set to NOTSET (which causes all messages to be processed when the logger is the root logger, or delegation to the parent when the logger is a non-root logger).", "Note that the root logger is created with level WARNING.", "The term \u2018delegation to the parent\u2019 means that if a logger has a level of NOTSET, its chain of ancestor loggers is traversed until either an ancestor with a level other than NOTSET is found, or the root is reached.", "If an ancestor is found with a level other than NOTSET, then that ancestor\u2019s level is treated as the effective level of the logger where the ancestor search began, and is used to determine how a logging event is handled.", "If the root is reached, and it has a level of NOTSET, then all messages will be processed.", "Otherwise, the root\u2019s level will be used as the effective level.", "See Logging Levels for a list of levels."]}
{"index": 3435, "name": "logging.Logger.isEnabledFor", "module": "logging", "doc": ["Indicates if a message of severity level would be processed by this logger.", "This method checks first the module-level level set by logging.disable(level) and then the logger\u2019s effective level as determined by getEffectiveLevel()."]}
{"index": 3436, "name": "logging.Logger.getEffectiveLevel", "module": "logging", "doc": ["Indicates the effective level for this logger.", "If a value other than NOTSET has been set using setLevel(), it is returned.", "Otherwise, the hierarchy is traversed towards the root until a value other than NOTSET is found, and that value is returned.", "The value returned is an integer, typically one of logging.DEBUG, logging.INFO etc."]}
{"index": 3437, "name": "logging.Logger.getChild", "module": "logging", "doc": ["Returns a logger which is a descendant to this logger, as determined by the suffix.", "Thus, logging.getLogger('abc').getChild('def.ghi') would return the same logger as would be returned by logging.getLogger('abc.def.ghi').", "This is a convenience method, useful when the parent logger is named using e.g.", "__name__ rather than a literal string."]}
{"index": 3438, "name": "logging.Logger.debug", "module": "logging", "doc": ["Logs a message with level DEBUG on this logger.", "The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator.", "(Note that this means that you can use keywords in the format string, together with a single dictionary argument.)", "There are three keyword arguments in kwargs which are inspected: exc_info, stack_info, and extra.", "If exc_info does not evaluate as false, it causes exception information to be added to the logging message.", "If an exception tuple (in the format returned by sys.exc_info()) or an exception instance is provided, it is used; otherwise, sys.exc_info() is called to get the exception information.", "The second optional keyword argument is stack_info, which defaults to False.", "If true, stack information is added to the logging message, including the actual logging call.", "Note that this is not the same stack information as that displayed through specifying exc_info: The former is stack frames from the bottom of the stack up to the logging call in the current thread, whereas the latter is information about stack frames which have been unwound, following an exception, while searching for exception handlers.", "You can specify stack_info independently of exc_info, e.g.", "to just show how you got to a certain point in your code, even when no exceptions were raised.", "The stack frames are printed following a header line which says:", "This mimics the Traceback (most recent call last): which is used when displaying exception frames.", "The third keyword argument is extra which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes.", "These custom attributes can then be used as you like.", "For example, they could be incorporated into logged messages.", "For example:", "would print something like", "The keys in the dictionary passed in extra should not clash with the keys used by the logging system.", "(See the Formatter documentation for more information on which keys are used by the logging system.)", "If you choose to use these attributes in logged messages, you need to exercise some care.", "In the above example, for instance, the Formatter has been set up with a format string which expects \u2018clientip\u2019 and \u2018user\u2019 in the attribute dictionary of the LogRecord.", "If these are missing, the message will not be logged because a string formatting exception will occur.", "So in this case, you always need to pass the extra dictionary with these keys.", "While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example).", "In such circumstances, it is likely that specialized Formatters would be used with particular Handlers."]}
{"index": 3439, "name": "logging.Logger.info", "module": "logging", "doc": ["Logs a message with level INFO on this logger.", "The arguments are interpreted as for debug()."]}
{"index": 3440, "name": "logging.Logger.warning", "module": "logging", "doc": ["Logs a message with level WARNING on this logger.", "The arguments are interpreted as for debug()."]}
{"index": 3441, "name": "logging.Logger.error", "module": "logging", "doc": ["Logs a message with level ERROR on this logger.", "The arguments are interpreted as for debug()."]}
{"index": 3442, "name": "logging.Logger.critical", "module": "logging", "doc": ["Logs a message with level CRITICAL on this logger.", "The arguments are interpreted as for debug()."]}
{"index": 3443, "name": "logging.Logger.log", "module": "logging", "doc": ["Logs a message with integer level level on this logger.", "The other arguments are interpreted as for debug()."]}
{"index": 3444, "name": "logging.Logger.exception", "module": "logging", "doc": ["Logs a message with level ERROR on this logger.", "The arguments are interpreted as for debug().", "Exception info is added to the logging message.", "This method should only be called from an exception handler."]}
{"index": 3445, "name": "logging.Logger.addFilter", "module": "logging", "doc": ["Adds the specified filter filter to this logger."]}
{"index": 3446, "name": "logging.Logger.removeFilter", "module": "logging", "doc": ["Removes the specified filter filter from this logger."]}
{"index": 3447, "name": "logging.Logger.filter", "module": "logging", "doc": ["Applies this logger\u2019s filters to the record and returns a true value if the record is to be processed.", "The filters are consulted in turn, until one of them returns a false value.", "If none of them return a false value, the record will be processed (passed to handlers).", "If one returns a false value, no further processing of the record occurs."]}
{"index": 3448, "name": "logging.Logger.addHandler", "module": "logging", "doc": ["Adds the specified handler hdlr to this logger."]}
{"index": 3449, "name": "logging.Logger.removeHandler", "module": "logging", "doc": ["Removes the specified handler hdlr from this logger."]}
{"index": 3450, "name": "logging.Logger.findCaller", "module": "logging", "doc": ["Finds the caller\u2019s source filename and line number.", "Returns the filename, line number, function name and stack information as a 4-element tuple.", "The stack information is returned as None unless stack_info is True."]}
{"index": 3451, "name": "logging.Logger.handle", "module": "logging", "doc": ["Handles a record by passing it to all handlers associated with this logger and its ancestors (until a false value of propagate is found).", "This method is used for unpickled records received from a socket, as well as those created locally.", "Logger-level filtering is applied using filter()."]}
{"index": 3452, "name": "logging.Logger.makeRecord", "module": "logging", "doc": ["This is a factory method which can be overridden in subclasses to create specialized LogRecord instances."]}
{"index": 3453, "name": "logging.Logger.hasHandlers", "module": "logging", "doc": ["Checks to see if this logger has any handlers configured.", "This is done by looking for handlers in this logger and its parents in the logger hierarchy.", "Returns True if a handler was found, else False.", "The method stops searching up the hierarchy whenever a logger with the \u2018propagate\u2019 attribute set to false is found - that will be the last logger which is checked for the existence of handlers."]}
{"index": 3454, "name": "logging.Handler.__init__", "module": "logging", "doc": ["Initializes the Handler instance by setting its level, setting the list of filters to the empty list and creating a lock (using createLock()) for serializing access to an I/O mechanism."]}
{"index": 3455, "name": "logging.Handler.createLock", "module": "logging", "doc": ["Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe."]}
{"index": 3456, "name": "logging.Handler.acquire", "module": "logging", "doc": ["Acquires the thread lock created with createLock()."]}
{"index": 3457, "name": "logging.Handler.release", "module": "logging", "doc": ["Releases the thread lock acquired with acquire()."]}
{"index": 3458, "name": "logging.Handler.setLevel", "module": "logging", "doc": ["Sets the threshold for this handler to level.", "Logging messages which are less severe than level will be ignored.", "When a handler is created, the level is set to NOTSET (which causes all messages to be processed).", "See Logging Levels for a list of levels."]}
{"index": 3459, "name": "logging.Handler.setFormatter", "module": "logging", "doc": ["Sets the Formatter for this handler to fmt."]}
{"index": 3460, "name": "logging.Handler.addFilter", "module": "logging", "doc": ["Adds the specified filter filter to this handler."]}
{"index": 3461, "name": "logging.Handler.removeFilter", "module": "logging", "doc": ["Removes the specified filter filter from this handler."]}
{"index": 3462, "name": "logging.Handler.filter", "module": "logging", "doc": ["Applies this handler\u2019s filters to the record and returns a true value if the record is to be processed.", "The filters are consulted in turn, until one of them returns a false value.", "If none of them return a false value, the record will be emitted.", "If one returns a false value, the handler will not emit the record."]}
{"index": 3463, "name": "logging.Handler.flush", "module": "logging", "doc": ["Ensure all logging output has been flushed.", "This version does nothing and is intended to be implemented by subclasses."]}
{"index": 3464, "name": "logging.Handler.close", "module": "logging", "doc": ["Tidy up any resources used by the handler.", "This version does no output but removes the handler from an internal list of handlers which is closed when shutdown() is called.", "Subclasses should ensure that this gets called from overridden close() methods."]}
{"index": 3465, "name": "logging.Handler.handle", "module": "logging", "doc": ["Conditionally emits the specified logging record, depending on filters which may have been added to the handler.", "Wraps the actual emission of the record with acquisition/release of the I/O thread lock."]}
{"index": 3466, "name": "logging.Handler.handleError", "module": "logging", "doc": ["This method should be called from handlers when an exception is encountered during an emit() call.", "If the module-level attribute raiseExceptions is False, exceptions get silently ignored.", "This is what is mostly wanted for a logging system - most users will not care about errors in the logging system, they are more interested in application errors.", "You could, however, replace this with a custom handler if you wish.", "The specified record is the one which was being processed when the exception occurred.", "(The default value of raiseExceptions is True, as that is more useful during development)."]}
{"index": 3467, "name": "logging.Handler.format", "module": "logging", "doc": ["Do formatting for a record - if a formatter is set, use it.", "Otherwise, use the default formatter for the module."]}
{"index": 3468, "name": "logging.Handler.emit", "module": "logging", "doc": ["Do whatever it takes to actually log the specified logging record.", "This version is intended to be implemented by subclasses and so raises a NotImplementedError."]}
{"index": 3469, "name": "logging.Formatter", "module": "logging", "doc": ["Returns a new instance of the Formatter class.", "The instance is initialized with a format string for the message as a whole, as well as a format string for the date/time portion of a message.", "If no fmt is specified, '%(message)s' is used.", "If no datefmt is specified, a format is used which is described in the formatTime() documentation.", "The style parameter can be one of \u2018%\u2019, \u2018{\u2018 or \u2018$\u2019 and determines how the format string will be merged with its data: using one of %-formatting, str.format() or string.Template.", "See Using particular formatting styles throughout your application for more information on using {- and $-formatting for log messages."]}
{"index": 3470, "name": "logging.Formatter.format", "module": "logging", "doc": ["The record\u2019s attribute dictionary is used as the operand to a string formatting operation.", "Returns the resulting string.", "Before formatting the dictionary, a couple of preparatory steps are carried out.", "The message attribute of the record is computed using msg % args.", "If the formatting string contains '(asctime)', formatTime() is called to format the event time.", "If there is exception information, it is formatted using formatException() and appended to the message.", "Note that the formatted exception information is cached in attribute exc_text.", "This is useful because the exception information can be pickled and sent across the wire, but you should be careful if you have more than one Formatter subclass which customizes the formatting of exception information.", "In this case, you will have to clear the cached value after a formatter has done its formatting, so that the next formatter to handle the event doesn\u2019t use the cached value but recalculates it afresh.", "If stack information is available, it\u2019s appended after the exception information, using formatStack() to transform it if necessary."]}
{"index": 3471, "name": "logging.Formatter.formatTime", "module": "logging", "doc": ["This method should be called from format() by a formatter which wants to make use of a formatted time.", "This method can be overridden in formatters to provide for any specific requirement, but the basic behavior is as follows: if datefmt (a string) is specified, it is used with time.strftime() to format the creation time of the record.", "Otherwise, the format \u2018%Y-%m-%d %H:%M:%S,uuu\u2019 is used, where the uuu part is a millisecond value and the other letters are as per the time.strftime() documentation.", "An example time in this format is 2003-01-23 00:29:50,411.", "The resulting string is returned.", "This function uses a user-configurable function to convert the creation time to a tuple.", "By default, time.localtime() is used; to change this for a particular formatter instance, set the converter attribute to a function with the same signature as time.localtime() or time.gmtime().", "To change it for all formatters, for example if you want all logging times to be shown in GMT, set the converter attribute in the Formatter class."]}
{"index": 3472, "name": "logging.Formatter.formatException", "module": "logging", "doc": ["Formats the specified exception information (a standard exception tuple as returned by sys.exc_info()) as a string.", "This default implementation just uses traceback.print_exception().", "The resulting string is returned."]}
{"index": 3473, "name": "logging.Formatter.formatStack", "module": "logging", "doc": ["Formats the specified stack information (a string as returned by traceback.print_stack(), but with the last newline removed) as a string.", "This default implementation just returns the input value."]}
{"index": 3474, "name": "logging.Filter", "module": "logging", "doc": ["Returns an instance of the Filter class.", "If name is specified, it names a logger which, together with its children, will have its events allowed through the filter.", "If name is the empty string, allows every event."]}
{"index": 3475, "name": "logging.Filter.filter", "module": "logging", "doc": ["Is the specified record to be logged?", "Returns zero for no, nonzero for yes.", "If deemed appropriate, the record may be modified in-place by this method."]}
{"index": 3476, "name": "logging.LogRecord", "module": "logging", "doc": ["Contains all the information pertinent to the event being logged.", "The primary information is passed in msg and args, which are combined using msg % args to create the message field of the record.", "This functionality can be used to inject your own values into a LogRecord at creation time.", "You can use the following pattern:", "With this pattern, multiple factories could be chained, and as long as they don\u2019t overwrite each other\u2019s attributes or unintentionally overwrite the standard attributes listed above, there should be no surprises."]}
{"index": 3477, "name": "logging.LogRecord.getMessage", "module": "logging", "doc": ["Returns the message for this LogRecord instance after merging any user-supplied arguments with the message.", "If the user-supplied message argument to the logging call is not a string, str() is called on it to convert it to a string.", "This allows use of user-defined classes as messages, whose __str__ method can return the actual format string to be used."]}
{"index": 3478, "name": "logging.LoggerAdapter", "module": "logging", "doc": ["Returns an instance of LoggerAdapter initialized with an underlying Logger instance and a dict-like object."]}
{"index": 3479, "name": "logging.LoggerAdapter.process", "module": "logging", "doc": ["Modifies the message and/or keyword arguments passed to a logging call in order to insert contextual information.", "This implementation takes the object passed as extra to the constructor and adds it to kwargs using key \u2018extra\u2019.", "The return value is a (msg, kwargs) tuple which has the (possibly modified) versions of the arguments passed in."]}
{"index": 3480, "name": "logging.getLogger", "module": "logging", "doc": ["Return a logger with the specified name or, if name is None, return a logger which is the root logger of the hierarchy.", "If specified, the name is typically a dot-separated hierarchical name like \u2018a\u2019, \u2018a.b\u2019 or \u2018a.b.c.d\u2019.", "Choice of these names is entirely up to the developer who is using logging.", "All calls to this function with a given name return the same logger instance.", "This means that logger instances never need to be passed between different parts of an application."]}
{"index": 3481, "name": "logging.getLoggerClass", "module": "logging", "doc": ["Return either the standard Logger class, or the last class passed to setLoggerClass().", "This function may be called from within a new class definition, to ensure that installing a customized Logger class will not undo customizations already applied by other code.", "For example:"]}
{"index": 3482, "name": "logging.getLogRecordFactory", "module": "logging", "doc": ["Return a callable which is used to create a LogRecord.", "See setLogRecordFactory() for more information about the how the factory is called."]}
{"index": 3483, "name": "logging.debug", "module": "logging", "doc": ["Logs a message with level DEBUG on the root logger.", "The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator.", "(Note that this means that you can use keywords in the format string, together with a single dictionary argument.)", "There are three keyword arguments in kwargs which are inspected: exc_info which, if it does not evaluate as false, causes exception information to be added to the logging message.", "If an exception tuple (in the format returned by sys.exc_info()) or an exception instance is provided, it is used; otherwise, sys.exc_info() is called to get the exception information.", "The second optional keyword argument is stack_info, which defaults to False.", "If true, stack information is added to the logging message, including the actual logging call.", "Note that this is not the same stack information as that displayed through specifying exc_info: The former is stack frames from the bottom of the stack up to the logging call in the current thread, whereas the latter is information about stack frames which have been unwound, following an exception, while searching for exception handlers.", "You can specify stack_info independently of exc_info, e.g.", "to just show how you got to a certain point in your code, even when no exceptions were raised.", "The stack frames are printed following a header line which says:", "This mimics the Traceback (most recent call last): which is used when displaying exception frames.", "The third optional keyword argument is extra which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes.", "These custom attributes can then be used as you like.", "For example, they could be incorporated into logged messages.", "For example:", "would print something like:", "The keys in the dictionary passed in extra should not clash with the keys used by the logging system.", "(See the Formatter documentation for more information on which keys are used by the logging system.)", "If you choose to use these attributes in logged messages, you need to exercise some care.", "In the above example, for instance, the Formatter has been set up with a format string which expects \u2018clientip\u2019 and \u2018user\u2019 in the attribute dictionary of the LogRecord.", "If these are missing, the message will not be logged because a string formatting exception will occur.", "So in this case, you always need to pass the extra dictionary with these keys.", "While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example).", "In such circumstances, it is likely that specialized Formatters would be used with particular Handlers."]}
{"index": 3484, "name": "logging.info", "module": "logging", "doc": ["Logs a message with level INFO on the root logger.", "The arguments are interpreted as for debug()."]}
{"index": 3485, "name": "logging.warning", "module": "logging", "doc": ["Logs a message with level WARNING on the root logger.", "The arguments are interpreted as for debug()."]}
{"index": 3486, "name": "logging.error", "module": "logging", "doc": ["Logs a message with level ERROR on the root logger.", "The arguments are interpreted as for debug()."]}
{"index": 3487, "name": "logging.critical", "module": "logging", "doc": ["Logs a message with level CRITICAL on the root logger.", "The arguments are interpreted as for debug()."]}
{"index": 3488, "name": "logging.exception", "module": "logging", "doc": ["Logs a message with level ERROR on the root logger.", "The arguments are interpreted as for debug().", "Exception info is added to the logging message.", "This function should only be called from an exception handler."]}
{"index": 3489, "name": "logging.log", "module": "logging", "doc": ["Logs a message with level level on the root logger.", "The other arguments are interpreted as for debug()."]}
{"index": 3490, "name": "logging.disable", "module": "logging", "doc": ["Provides an overriding level level for all loggers which takes precedence over the logger\u2019s own level.", "When the need arises to temporarily throttle logging output down across the whole application, this function can be useful.", "Its effect is to disable all logging calls of severity level and below, so that if you call it with a value of INFO, then all INFO and DEBUG events would be discarded, whereas those of severity WARNING and above would be processed according to the logger\u2019s effective level.", "If logging.disable(logging.NOTSET) is called, it effectively removes this overriding level, so that logging output again depends on the effective levels of individual loggers.", "Note that if you have defined any custom logging level higher than CRITICAL (this is not recommended), you won\u2019t be able to rely on the default value for the level parameter, but will have to explicitly supply a suitable value."]}
{"index": 3491, "name": "logging.addLevelName", "module": "logging", "doc": ["Associates level level with text levelName in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a Formatter formats a message.", "This function can also be used to define your own levels.", "The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity."]}
{"index": 3492, "name": "logging.getLevelName", "module": "logging", "doc": ["Returns the textual representation of logging level level.", "If the level is one of the predefined levels CRITICAL, ERROR, WARNING, INFO or DEBUG then you get the corresponding string.", "If you have associated levels with names using addLevelName() then the name you have associated with level is returned.", "If a numeric value corresponding to one of the defined levels is passed in, the corresponding string representation is returned.", "Otherwise, the string \u2018Level %s\u2019 % level is returned."]}
{"index": 3493, "name": "logging.makeLogRecord", "module": "logging", "doc": ["Creates and returns a new LogRecord instance whose attributes are defined by attrdict.", "This function is useful for taking a pickled LogRecord attribute dictionary, sent over a socket, and reconstituting it as a LogRecord instance at the receiving end."]}
{"index": 3494, "name": "logging.basicConfig", "module": "logging", "doc": ["Does basic configuration for the logging system by creating a StreamHandler with a default Formatter and adding it to the root logger.", "The functions debug(), info(), warning(), error() and critical() will call basicConfig() automatically if no handlers are defined for the root logger.", "This function does nothing if the root logger already has handlers configured for it.", "The following keyword arguments are supported."]}
{"index": 3495, "name": "logging.shutdown", "module": "logging", "doc": ["Informs the logging system to perform an orderly shutdown by flushing and closing all handlers.", "This should be called at application exit and no further use of the logging system should be made after this call."]}
{"index": 3496, "name": "logging.setLoggerClass", "module": "logging", "doc": ["Tells the logging system to use the class klass when instantiating a logger.", "The class should define __init__() such that only a name argument is required, and the __init__() should call Logger.__init__().", "This function is typically called before any loggers are instantiated by applications which need to use custom logger behavior.", "After this call, as at any other time, do not instantiate loggers directly using the subclass: continue to use the logging.getLogger() API to get your loggers."]}
{"index": 3497, "name": "logging.setLogRecordFactory", "module": "logging", "doc": ["Set a callable which is used to create a LogRecord.", "The factory has the following signature:", "factory(name, level, fn, lno, msg, args, exc_info, func=None, sinfo=None, **kwargs)"]}
{"index": 3498, "name": "logging.lastResort", "module": "logging", "doc": ["A \u201chandler of last resort\u201d is available through this attribute.", "This is a StreamHandler writing to sys.stderr with a level of WARNING, and is used to handle logging events in the absence of any logging configuration.", "The end result is to just print the message to sys.stderr.", "This replaces the earlier error message saying that \u201cno handlers could be found for logger XYZ\u201d.", "If you need the earlier behaviour for some reason, lastResort can be set to None."]}
{"index": 3499, "name": "logging.captureWarnings", "module": "logging", "doc": ["This function is used to turn the capture of warnings by logging on and off.", "If capture is True, warnings issued by the warnings module will be redirected to the logging system.", "Specifically, a warning will be formatted using warnings.formatwarning() and the resulting string logged to a logger named 'py.warnings' with a severity of WARNING.", "If capture is False, the redirection of warnings to the logging system will stop, and warnings will be redirected to their original destinations (i.e.", "those in effect before captureWarnings(True) was called)."]}
{"index": 3500, "name": "lzma.LZMAError", "module": "lzma", "doc": ["This exception is raised when an error occurs during compression or decompression, or while initializing the compressor/decompressor state."]}
{"index": 3501, "name": "lzma.open", "module": "lzma", "doc": ["Open an LZMA-compressed file in binary or text mode, returning a file object.", "The filename argument can be either an actual file name (given as a str, bytes or path-like object), in which case the named file is opened, or it can be an existing file object to read from or write to.", "The mode argument can be any of \"r\", \"rb\", \"w\", \"wb\", \"x\", \"xb\", \"a\" or \"ab\" for binary mode, or \"rt\", \"wt\", \"xt\", or \"at\" for text mode.", "The default is \"rb\".", "When opening a file for reading, the format and filters arguments have the same meanings as for LZMADecompressor.", "In this case, the check and preset arguments should not be used.", "When opening a file for writing, the format, check, preset and filters arguments have the same meanings as for LZMACompressor.", "For binary mode, this function is equivalent to the LZMAFile constructor: LZMAFile(filename, mode, ...).", "In this case, the encoding, errors and newline arguments must not be provided.", "For text mode, a LZMAFile object is created, and wrapped in an io.TextIOWrapper instance with the specified encoding, error handling behavior, and line ending(s)."]}
{"index": 3502, "name": "lzma.LZMAFile", "module": "lzma", "doc": ["Open an LZMA-compressed file in binary mode.", "An LZMAFile can wrap an already-open file object, or operate directly on a named file.", "The filename argument specifies either the file object to wrap, or the name of the file to open (as a str, bytes or path-like object).", "When wrapping an existing file object, the wrapped file will not be closed when the LZMAFile is closed.", "The mode argument can be either \"r\" for reading (default), \"w\" for overwriting, \"x\" for exclusive creation, or \"a\" for appending.", "These can equivalently be given as \"rb\", \"wb\", \"xb\" and \"ab\" respectively.", "If filename is a file object (rather than an actual file name), a mode of \"w\" does not truncate the file, and is instead equivalent to \"a\".", "When opening a file for reading, the input file may be the concatenation of multiple separate compressed streams.", "These are transparently decoded as a single logical stream.", "When opening a file for reading, the format and filters arguments have the same meanings as for LZMADecompressor.", "In this case, the check and preset arguments should not be used.", "When opening a file for writing, the format, check, preset and filters arguments have the same meanings as for LZMACompressor.", "LZMAFile supports all the members specified by io.BufferedIOBase, except for detach() and truncate().", "Iteration and the with statement are supported.", "The following method is also provided:"]}
{"index": 3503, "name": "lzma.LZMAFile.peek", "module": "lzma", "doc": ["Return buffered data without advancing the file position.", "At least one byte of data will be returned, unless EOF has been reached.", "The exact number of bytes returned is unspecified (the size argument is ignored)."]}
{"index": 3504, "name": "lzma.LZMACompressor", "module": "lzma", "doc": ["Create a compressor object, which can be used to compress data incrementally.", "For a more convenient way of compressing a single chunk of data, see compress().", "The format argument specifies what container format should be used.", "Possible values are:", "The check argument specifies the type of integrity check to include in the compressed data.", "This check is used when decompressing, to ensure that the data has not been corrupted.", "Possible values are:", "If the specified check is not supported, an LZMAError is raised.", "The compression settings can be specified either as a preset compression level (with the preset argument), or in detail as a custom filter chain (with the filters argument).", "The preset argument (if provided) should be an integer between 0 and 9 (inclusive), optionally OR-ed with the constant PRESET_EXTREME.", "If neither preset nor filters are given, the default behavior is to use PRESET_DEFAULT (preset level 6).", "Higher presets produce smaller output, but make the compression process slower.", "The filters argument (if provided) should be a filter chain specifier.", "See Specifying custom filter chains for details."]}
{"index": 3505, "name": "lzma.LZMACompressor.compress", "module": "lzma", "doc": ["Compress data (a bytes object), returning a bytes object containing compressed data for at least part of the input.", "Some of data may be buffered internally, for use in later calls to compress() and flush().", "The returned data should be concatenated with the output of any previous calls to compress()."]}
{"index": 3506, "name": "lzma.LZMACompressor.flush", "module": "lzma", "doc": ["Finish the compression process, returning a bytes object containing any data stored in the compressor\u2019s internal buffers.", "The compressor cannot be used after this method has been called."]}
{"index": 3507, "name": "lzma.LZMADecompressor", "module": "lzma", "doc": ["Create a decompressor object, which can be used to decompress data incrementally.", "For a more convenient way of decompressing an entire compressed stream at once, see decompress().", "The format argument specifies the container format that should be used.", "The default is FORMAT_AUTO, which can decompress both .xz and .lzma files.", "Other possible values are FORMAT_XZ, FORMAT_ALONE, and FORMAT_RAW.", "The memlimit argument specifies a limit (in bytes) on the amount of memory that the decompressor can use.", "When this argument is used, decompression will fail with an LZMAError if it is not possible to decompress the input within the given memory limit.", "The filters argument specifies the filter chain that was used to create the stream being decompressed.", "This argument is required if format is FORMAT_RAW, but should not be used for other formats.", "See Specifying custom filter chains for more information about filter chains."]}
{"index": 3508, "name": "lzma.LZMADecompressor.decompress", "module": "lzma", "doc": ["Decompress data (a bytes-like object), returning uncompressed data as bytes.", "Some of data may be buffered internally, for use in later calls to decompress().", "The returned data should be concatenated with the output of any previous calls to decompress().", "If max_length is nonnegative, returns at most max_length bytes of decompressed data.", "If this limit is reached and further output can be produced, the needs_input attribute will be set to False.", "In this case, the next call to decompress() may provide data as b'' to obtain more of the output.", "If all of the input data was decompressed and returned (either because this was less than max_length bytes, or because max_length was negative), the needs_input attribute will be set to True.", "Attempting to decompress data after the end of stream is reached raises an EOFError.", "Any data found after the end of the stream is ignored and saved in the unused_data attribute."]}
{"index": 3509, "name": "lzma.LZMADecompressor.check", "module": "lzma", "doc": ["The ID of the integrity check used by the input stream.", "This may be CHECK_UNKNOWN until enough of the input has been decoded to determine what integrity check it uses."]}
{"index": 3510, "name": "lzma.LZMADecompressor.eof", "module": "lzma", "doc": ["True if the end-of-stream marker has been reached."]}
{"index": 3511, "name": "lzma.LZMADecompressor.unused_data", "module": "lzma", "doc": ["Data found after the end of the compressed stream.", "Before the end of the stream is reached, this will be b\"\"."]}
{"index": 3512, "name": "lzma.LZMADecompressor.needs_input", "module": "lzma", "doc": ["False if the decompress() method can provide more decompressed data before requiring new uncompressed input."]}
{"index": 3513, "name": "lzma.compress", "module": "lzma", "doc": ["Compress data (a bytes object), returning the compressed data as a bytes object.", "See LZMACompressor above for a description of the format, check, preset and filters arguments."]}
{"index": 3514, "name": "lzma.decompress", "module": "lzma", "doc": ["Decompress data (a bytes object), returning the uncompressed data as a bytes object.", "If data is the concatenation of multiple distinct compressed streams, decompress all of these streams, and return the concatenation of the results.", "See LZMADecompressor above for a description of the format, memlimit and filters arguments."]}
{"index": 3515, "name": "lzma.is_check_supported", "module": "lzma", "doc": ["Returns true if the given integrity check is supported on this system.", "CHECK_NONE and CHECK_CRC32 are always supported.", "CHECK_CRC64 and CHECK_SHA256 may be unavailable if you are using a version of liblzma that was compiled with a limited feature set."]}
{"index": 3516, "name": "mailbox.Mailbox", "module": "mailbox", "doc": ["A mailbox, which may be inspected and modified.", "The Mailbox class defines an interface and is not intended to be instantiated.", "Instead, format-specific subclasses should inherit from Mailbox and your code should instantiate a particular subclass.", "The Mailbox interface is dictionary-like, with small keys corresponding to messages.", "Keys are issued by the Mailbox instance with which they will be used and are only meaningful to that Mailbox instance.", "A key continues to identify a message even if the corresponding message is modified, such as by replacing it with another message.", "Messages may be added to a Mailbox instance using the set-like method add() and removed using a del statement or the set-like methods remove() and discard().", "Mailbox interface semantics differ from dictionary semantics in some noteworthy ways.", "Each time a message is requested, a new representation (typically a Message instance) is generated based upon the current state of the mailbox.", "Similarly, when a message is added to a Mailbox instance, the provided message representation\u2019s contents are copied.", "In neither case is a reference to the message representation kept by the Mailbox instance.", "The default Mailbox iterator iterates over message representations, not keys as the default dictionary iterator does.", "Moreover, modification of a mailbox during iteration is safe and well-defined.", "Messages added to the mailbox after an iterator is created will not be seen by the iterator.", "Messages removed from the mailbox before the iterator yields them will be silently skipped, though using a key from an iterator may result in a KeyError exception if the corresponding message is subsequently removed.", "Mailbox instances have the following methods:"]}
{"index": 3517, "name": "mailbox.Mailbox.add", "module": "mailbox", "doc": ["Add message to the mailbox and return the key that has been assigned to it.", "Parameter message may be a Message instance, an email.message.Message instance, a string, a byte string, or a file-like object (which should be open in binary mode).", "If message is an instance of the appropriate format-specific Message subclass (e.g., if it\u2019s an mboxMessage instance and this is an mbox instance), its format-specific information is used.", "Otherwise, reasonable defaults for format-specific information are used."]}
{"index": 3518, "name": "mailbox.Mailbox.remove", "module": "mailbox", "doc": ["Delete the message corresponding to key from the mailbox.", "If no such message exists, a KeyError exception is raised if the method was called as remove() or __delitem__() but no exception is raised if the method was called as discard().", "The behavior of discard() may be preferred if the underlying mailbox format supports concurrent modification by other processes."]}
{"index": 3519, "name": "mailbox.Mailbox.__delitem__", "module": "mailbox", "doc": ["Delete the message corresponding to key from the mailbox.", "If no such message exists, a KeyError exception is raised if the method was called as remove() or __delitem__() but no exception is raised if the method was called as discard().", "The behavior of discard() may be preferred if the underlying mailbox format supports concurrent modification by other processes."]}
{"index": 3520, "name": "mailbox.Mailbox.discard", "module": "mailbox", "doc": ["Delete the message corresponding to key from the mailbox.", "If no such message exists, a KeyError exception is raised if the method was called as remove() or __delitem__() but no exception is raised if the method was called as discard().", "The behavior of discard() may be preferred if the underlying mailbox format supports concurrent modification by other processes."]}
{"index": 3521, "name": "mailbox.Mailbox.__setitem__", "module": "mailbox", "doc": ["Replace the message corresponding to key with message.", "Raise a KeyError exception if no message already corresponds to key.", "As with add(), parameter message may be a Message instance, an email.message.Message instance, a string, a byte string, or a file-like object (which should be open in binary mode).", "If message is an instance of the appropriate format-specific Message subclass (e.g., if it\u2019s an mboxMessage instance and this is an mbox instance), its format-specific information is used.", "Otherwise, the format-specific information of the message that currently corresponds to key is left unchanged."]}
{"index": 3522, "name": "mailbox.Mailbox.iterkeys", "module": "mailbox", "doc": ["Return an iterator over all keys if called as iterkeys() or return a list of keys if called as keys()."]}
{"index": 3523, "name": "mailbox.Mailbox.keys", "module": "mailbox", "doc": ["Return an iterator over all keys if called as iterkeys() or return a list of keys if called as keys()."]}
{"index": 3524, "name": "mailbox.Mailbox.itervalues", "module": "mailbox", "doc": ["Return an iterator over representations of all messages if called as itervalues() or __iter__() or return a list of such representations if called as values().", "The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3525, "name": "mailbox.Mailbox.__iter__", "module": "mailbox", "doc": ["Return an iterator over representations of all messages if called as itervalues() or __iter__() or return a list of such representations if called as values().", "The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3526, "name": "mailbox.Mailbox.values", "module": "mailbox", "doc": ["Return an iterator over representations of all messages if called as itervalues() or __iter__() or return a list of such representations if called as values().", "The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3527, "name": "mailbox.Mailbox.iteritems", "module": "mailbox", "doc": ["Return an iterator over (key, message) pairs, where key is a key and message is a message representation, if called as iteritems() or return a list of such pairs if called as items().", "The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3528, "name": "mailbox.Mailbox.items", "module": "mailbox", "doc": ["Return an iterator over (key, message) pairs, where key is a key and message is a message representation, if called as iteritems() or return a list of such pairs if called as items().", "The messages are represented as instances of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3529, "name": "mailbox.Mailbox.get", "module": "mailbox", "doc": ["Return a representation of the message corresponding to key.", "If no such message exists, default is returned if the method was called as get() and a KeyError exception is raised if the method was called as __getitem__().", "The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3530, "name": "mailbox.Mailbox.__getitem__", "module": "mailbox", "doc": ["Return a representation of the message corresponding to key.", "If no such message exists, default is returned if the method was called as get() and a KeyError exception is raised if the method was called as __getitem__().", "The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3531, "name": "mailbox.Mailbox.get_message", "module": "mailbox", "doc": ["Return a representation of the message corresponding to key as an instance of the appropriate format-specific Message subclass, or raise a KeyError exception if no such message exists."]}
{"index": 3532, "name": "mailbox.Mailbox.get_bytes", "module": "mailbox", "doc": ["Return a byte representation of the message corresponding to key, or raise a KeyError exception if no such message exists."]}
{"index": 3533, "name": "mailbox.Mailbox.get_string", "module": "mailbox", "doc": ["Return a string representation of the message corresponding to key, or raise a KeyError exception if no such message exists.", "The message is processed through email.message.Message to convert it to a 7bit clean representation."]}
{"index": 3534, "name": "mailbox.Mailbox.get_file", "module": "mailbox", "doc": ["Return a file-like representation of the message corresponding to key, or raise a KeyError exception if no such message exists.", "The file-like object behaves as if open in binary mode.", "This file should be closed once it is no longer needed."]}
{"index": 3535, "name": "mailbox.Mailbox.__contains__", "module": "mailbox", "doc": ["Return True if key corresponds to a message, False otherwise."]}
{"index": 3536, "name": "mailbox.Mailbox.__len__", "module": "mailbox", "doc": ["Return a count of messages in the mailbox."]}
{"index": 3537, "name": "mailbox.Mailbox.clear", "module": "mailbox", "doc": ["Delete all messages from the mailbox."]}
{"index": 3538, "name": "mailbox.Mailbox.pop", "module": "mailbox", "doc": ["Return a representation of the message corresponding to key and delete the message.", "If no such message exists, return default.", "The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3539, "name": "mailbox.Mailbox.popitem", "module": "mailbox", "doc": ["Return an arbitrary (key, message) pair, where key is a key and message is a message representation, and delete the corresponding message.", "If the mailbox is empty, raise a KeyError exception.", "The message is represented as an instance of the appropriate format-specific Message subclass unless a custom message factory was specified when the Mailbox instance was initialized."]}
{"index": 3540, "name": "mailbox.Mailbox.update", "module": "mailbox", "doc": ["Parameter arg should be a key-to-message mapping or an iterable of (key, message) pairs.", "Updates the mailbox so that, for each given key and message, the message corresponding to key is set to message as if by using __setitem__().", "As with __setitem__(), each key must already correspond to a message in the mailbox or else a KeyError exception will be raised, so in general it is incorrect for arg to be a Mailbox instance."]}
{"index": 3541, "name": "mailbox.Mailbox.flush", "module": "mailbox", "doc": ["Write any pending changes to the filesystem.", "For some Mailbox subclasses, changes are always written immediately and flush() does nothing, but you should still make a habit of calling this method."]}
{"index": 3542, "name": "mailbox.Mailbox.lock", "module": "mailbox", "doc": ["Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it.", "An ExternalClashError is raised if the lock is not available.", "The particular locking mechanisms used depend upon the mailbox format.", "You should always lock the mailbox before making any modifications to its contents."]}
{"index": 3543, "name": "mailbox.Mailbox.unlock", "module": "mailbox", "doc": ["Release the lock on the mailbox, if any."]}
{"index": 3544, "name": "mailbox.Mailbox.close", "module": "mailbox", "doc": ["Flush the mailbox, unlock it if necessary, and close any open files.", "For some Mailbox subclasses, this method does nothing."]}
{"index": 3545, "name": "mailbox.Maildir", "module": "mailbox", "doc": ["A subclass of Mailbox for mailboxes in Maildir format.", "Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation.", "If factory is None, MaildirMessage is used as the default message representation.", "If create is True, the mailbox is created if it does not exist.", "If create is True and the dirname path exists, it will be treated as an existing maildir without attempting to verify its directory layout.", "It is for historical reasons that dirname is named as such rather than path.", "Maildir is a directory-based mailbox format invented for the qmail mail transfer agent and now widely supported by other programs.", "Messages in a Maildir mailbox are stored in separate files within a common directory structure.", "This design allows Maildir mailboxes to be accessed and modified by multiple unrelated programs without data corruption, so file locking is unnecessary.", "Maildir mailboxes contain three subdirectories, namely: tmp, new, and cur.", "Messages are created momentarily in the tmp subdirectory and then moved to the new subdirectory to finalize delivery.", "A mail user agent may subsequently move the message to the cur subdirectory and store information about the state of the message in a special \u201cinfo\u201d section appended to its file name.", "Folders of the style introduced by the Courier mail transfer agent are also supported.", "Any subdirectory of the main mailbox is considered a folder if '.'", "is the first character in its name.", "Folder names are represented by Maildir without the leading '.'.", "Each folder is itself a Maildir mailbox but should not contain other folders.", "Instead, a logical nesting is indicated using '.'", "to delimit levels, e.g., \u201cArchived.2005.07\u201d.", "Maildir instances have all of the methods of Mailbox in addition to the following:", "Some Mailbox methods implemented by Maildir deserve special remarks:"]}
{"index": 3546, "name": "mailbox.Maildir.list_folders", "module": "mailbox", "doc": ["Return a list of the names of all folders."]}
{"index": 3547, "name": "mailbox.Maildir.get_folder", "module": "mailbox", "doc": ["Return a Maildir instance representing the folder whose name is folder.", "A NoSuchMailboxError exception is raised if the folder does not exist."]}
{"index": 3548, "name": "mailbox.Maildir.add_folder", "module": "mailbox", "doc": ["Create a folder whose name is folder and return a Maildir instance representing it."]}
{"index": 3549, "name": "mailbox.Maildir.remove_folder", "module": "mailbox", "doc": ["Delete the folder whose name is folder.", "If the folder contains any messages, a NotEmptyError exception will be raised and the folder will not be deleted."]}
{"index": 3550, "name": "mailbox.Maildir.clean", "module": "mailbox", "doc": ["Delete temporary files from the mailbox that have not been accessed in the last 36 hours.", "The Maildir specification says that mail-reading programs should do this occasionally."]}
{"index": 3551, "name": "mailbox.Maildir.flush", "module": "mailbox", "doc": ["All changes to Maildir mailboxes are immediately applied, so this method does nothing."]}
{"index": 3552, "name": "mailbox.Maildir.lock", "module": "mailbox", "doc": ["Maildir mailboxes do not support (or require) locking, so these methods do nothing."]}
{"index": 3553, "name": "mailbox.Maildir.unlock", "module": "mailbox", "doc": ["Maildir mailboxes do not support (or require) locking, so these methods do nothing."]}
{"index": 3554, "name": "mailbox.Maildir.close", "module": "mailbox", "doc": ["Maildir instances do not keep any open files and the underlying mailboxes do not support locking, so this method does nothing."]}
{"index": 3555, "name": "mailbox.Maildir.get_file", "module": "mailbox", "doc": ["Depending upon the host platform, it may not be possible to modify or remove the underlying message while the returned file remains open."]}
{"index": 3556, "name": "mailbox.mbox", "module": "mailbox", "doc": ["A subclass of Mailbox for mailboxes in mbox format.", "Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation.", "If factory is None, mboxMessage is used as the default message representation.", "If create is True, the mailbox is created if it does not exist.", "The mbox format is the classic format for storing mail on Unix systems.", "All messages in an mbox mailbox are stored in a single file with the beginning of each message indicated by a line whose first five characters are \u201cFrom \u201c.", "Several variations of the mbox format exist to address perceived shortcomings in the original.", "In the interest of compatibility, mbox implements the original format, which is sometimes referred to as mboxo.", "This means that the Content-Length header, if present, is ignored and that any occurrences of \u201cFrom \u201d at the beginning of a line in a message body are transformed to \u201c>From \u201d when storing the message, although occurrences of \u201c>From \u201d are not transformed to \u201cFrom \u201d when reading the message.", "Some Mailbox methods implemented by mbox deserve special remarks:"]}
{"index": 3557, "name": "mailbox.mbox.get_file", "module": "mailbox", "doc": ["Using the file after calling flush() or close() on the mbox instance may yield unpredictable results or raise an exception."]}
{"index": 3558, "name": "mailbox.mbox.lock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls."]}
{"index": 3559, "name": "mailbox.mbox.unlock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls."]}
{"index": 3560, "name": "mailbox.MH", "module": "mailbox", "doc": ["A subclass of Mailbox for mailboxes in MH format.", "Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation.", "If factory is None, MHMessage is used as the default message representation.", "If create is True, the mailbox is created if it does not exist.", "MH is a directory-based mailbox format invented for the MH Message Handling System, a mail user agent.", "Each message in an MH mailbox resides in its own file.", "An MH mailbox may contain other MH mailboxes (called folders) in addition to messages.", "Folders may be nested indefinitely.", "MH mailboxes also support sequences, which are named lists used to logically group messages without moving them to sub-folders.", "Sequences are defined in a file called .mh_sequences in each folder.", "The MH class manipulates MH mailboxes, but it does not attempt to emulate all of mh\u2019s behaviors.", "In particular, it does not modify and is not affected by the context or .mh_profile files that are used by mh to store its state and configuration.", "MH instances have all of the methods of Mailbox in addition to the following:", "Some Mailbox methods implemented by MH deserve special remarks:"]}
{"index": 3561, "name": "mailbox.MH.list_folders", "module": "mailbox", "doc": ["Return a list of the names of all folders."]}
{"index": 3562, "name": "mailbox.MH.get_folder", "module": "mailbox", "doc": ["Return an MH instance representing the folder whose name is folder.", "A NoSuchMailboxError exception is raised if the folder does not exist."]}
{"index": 3563, "name": "mailbox.MH.add_folder", "module": "mailbox", "doc": ["Create a folder whose name is folder and return an MH instance representing it."]}
{"index": 3564, "name": "mailbox.MH.remove_folder", "module": "mailbox", "doc": ["Delete the folder whose name is folder.", "If the folder contains any messages, a NotEmptyError exception will be raised and the folder will not be deleted."]}
{"index": 3565, "name": "mailbox.MH.get_sequences", "module": "mailbox", "doc": ["Return a dictionary of sequence names mapped to key lists.", "If there are no sequences, the empty dictionary is returned."]}
{"index": 3566, "name": "mailbox.MH.set_sequences", "module": "mailbox", "doc": ["Re-define the sequences that exist in the mailbox based upon sequences, a dictionary of names mapped to key lists, like returned by get_sequences()."]}
{"index": 3567, "name": "mailbox.MH.pack", "module": "mailbox", "doc": ["Rename messages in the mailbox as necessary to eliminate gaps in numbering.", "Entries in the sequences list are updated correspondingly."]}
{"index": 3568, "name": "mailbox.MH.remove", "module": "mailbox", "doc": ["These methods immediately delete the message.", "The MH convention of marking a message for deletion by prepending a comma to its name is not used."]}
{"index": 3569, "name": "mailbox.MH.__delitem__", "module": "mailbox", "doc": ["These methods immediately delete the message.", "The MH convention of marking a message for deletion by prepending a comma to its name is not used."]}
{"index": 3570, "name": "mailbox.MH.discard", "module": "mailbox", "doc": ["These methods immediately delete the message.", "The MH convention of marking a message for deletion by prepending a comma to its name is not used."]}
{"index": 3571, "name": "mailbox.MH.lock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls.", "For MH mailboxes, locking the mailbox means locking the .mh_sequences file and, only for the duration of any operations that affect them, locking individual message files."]}
{"index": 3572, "name": "mailbox.MH.unlock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls.", "For MH mailboxes, locking the mailbox means locking the .mh_sequences file and, only for the duration of any operations that affect them, locking individual message files."]}
{"index": 3573, "name": "mailbox.MH.get_file", "module": "mailbox", "doc": ["Depending upon the host platform, it may not be possible to remove the underlying message while the returned file remains open."]}
{"index": 3574, "name": "mailbox.MH.flush", "module": "mailbox", "doc": ["All changes to MH mailboxes are immediately applied, so this method does nothing."]}
{"index": 3575, "name": "mailbox.MH.close", "module": "mailbox", "doc": ["MH instances do not keep any open files, so this method is equivalent to unlock()."]}
{"index": 3576, "name": "mailbox.Babyl", "module": "mailbox", "doc": ["A subclass of Mailbox for mailboxes in Babyl format.", "Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation.", "If factory is None, BabylMessage is used as the default message representation.", "If create is True, the mailbox is created if it does not exist.", "Babyl is a single-file mailbox format used by the Rmail mail user agent included with Emacs.", "The beginning of a message is indicated by a line containing the two characters Control-Underscore ('\\037') and Control-L ('\\014').", "The end of a message is indicated by the start of the next message or, in the case of the last message, a line containing a Control-Underscore ('\\037') character.", "Messages in a Babyl mailbox have two sets of headers, original headers and so-called visible headers.", "Visible headers are typically a subset of the original headers that have been reformatted or abridged to be more attractive.", "Each message in a Babyl mailbox also has an accompanying list of labels, or short strings that record extra information about the message, and a list of all user-defined labels found in the mailbox is kept in the Babyl options section.", "Babyl instances have all of the methods of Mailbox in addition to the following:", "Some Mailbox methods implemented by Babyl deserve special remarks:"]}
{"index": 3577, "name": "mailbox.Babyl.get_labels", "module": "mailbox", "doc": ["Return a list of the names of all user-defined labels used in the mailbox."]}
{"index": 3578, "name": "mailbox.Babyl.get_file", "module": "mailbox", "doc": ["In Babyl mailboxes, the headers of a message are not stored contiguously with the body of the message.", "To generate a file-like representation, the headers and body are copied together into an io.BytesIO instance, which has an API identical to that of a file.", "As a result, the file-like object is truly independent of the underlying mailbox but does not save memory compared to a string representation."]}
{"index": 3579, "name": "mailbox.Babyl.lock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls."]}
{"index": 3580, "name": "mailbox.Babyl.unlock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls."]}
{"index": 3581, "name": "mailbox.MMDF", "module": "mailbox", "doc": ["A subclass of Mailbox for mailboxes in MMDF format.", "Parameter factory is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation.", "If factory is None, MMDFMessage is used as the default message representation.", "If create is True, the mailbox is created if it does not exist.", "MMDF is a single-file mailbox format invented for the Multichannel Memorandum Distribution Facility, a mail transfer agent.", "Each message is in the same form as an mbox message but is bracketed before and after by lines containing four Control-A ('\\001') characters.", "As with the mbox format, the beginning of each message is indicated by a line whose first five characters are \u201cFrom \u201c, but additional occurrences of \u201cFrom \u201d are not transformed to \u201c>From \u201d when storing messages because the extra message separator lines prevent mistaking such occurrences for the starts of subsequent messages.", "Some Mailbox methods implemented by MMDF deserve special remarks:"]}
{"index": 3582, "name": "mailbox.MMDF.get_file", "module": "mailbox", "doc": ["Using the file after calling flush() or close() on the MMDF instance may yield unpredictable results or raise an exception."]}
{"index": 3583, "name": "mailbox.MMDF.lock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls."]}
{"index": 3584, "name": "mailbox.MMDF.unlock", "module": "mailbox", "doc": ["Three locking mechanisms are used\u2014dot locking and, if available, the flock() and lockf() system calls."]}
{"index": 3585, "name": "mailbox.Message", "module": "mailbox", "doc": ["A subclass of the email.message module\u2019s Message.", "Subclasses of mailbox.Message add mailbox-format-specific state and behavior.", "If message is omitted, the new instance is created in a default, empty state.", "If message is an email.message.Message instance, its contents are copied; furthermore, any format-specific information is converted insofar as possible if message is a Message instance.", "If message is a string, a byte string, or a file, it should contain an RFC 2822-compliant message, which is read and parsed.", "Files should be open in binary mode, but text mode files are accepted for backward compatibility.", "The format-specific state and behaviors offered by subclasses vary, but in general it is only the properties that are not specific to a particular mailbox that are supported (although presumably the properties are specific to a particular mailbox format).", "For example, file offsets for single-file mailbox formats and file names for directory-based mailbox formats are not retained, because they are only applicable to the original mailbox.", "But state such as whether a message has been read by the user or marked as important is retained, because it applies to the message itself.", "There is no requirement that Message instances be used to represent messages retrieved using Mailbox instances.", "In some situations, the time and memory required to generate Message representations might not be acceptable.", "For such situations, Mailbox instances also offer string and file-like representations, and a custom message factory may be specified when a Mailbox instance is initialized."]}
{"index": 3586, "name": "mailbox.MaildirMessage", "module": "mailbox", "doc": ["A message with Maildir-specific behaviors.", "Parameter message has the same meaning as with the Message constructor.", "Typically, a mail user agent application moves all of the messages in the new subdirectory to the cur subdirectory after the first time the user opens and closes the mailbox, recording that the messages are old whether or not they\u2019ve actually been read.", "Each message in cur has an \u201cinfo\u201d section added to its file name to store information about its state.", "(Some mail readers may also add an \u201cinfo\u201d section to messages in new.)", "The \u201cinfo\u201d section may take one of two forms: it may contain \u201c2,\u201d followed by a list of standardized flags (e.g., \u201c2,FR\u201d) or it may contain \u201c1,\u201d followed by so-called experimental information.", "Standard flags for Maildir messages are as follows:", "MaildirMessage instances offer the following methods:"]}
{"index": 3587, "name": "mailbox.MaildirMessage.get_subdir", "module": "mailbox", "doc": ["Return either \u201cnew\u201d (if the message should be stored in the new subdirectory) or \u201ccur\u201d (if the message should be stored in the cur subdirectory)."]}
{"index": 3588, "name": "mailbox.MaildirMessage.set_subdir", "module": "mailbox", "doc": ["Set the subdirectory the message should be stored in.", "Parameter subdir must be either \u201cnew\u201d or \u201ccur\u201d."]}
{"index": 3589, "name": "mailbox.MaildirMessage.get_flags", "module": "mailbox", "doc": ["Return a string specifying the flags that are currently set.", "If the message complies with the standard Maildir format, the result is the concatenation in alphabetical order of zero or one occurrence of each of 'D', 'F', 'P', 'R', 'S', and 'T'.", "The empty string is returned if no flags are set or if \u201cinfo\u201d contains experimental semantics."]}
{"index": 3590, "name": "mailbox.MaildirMessage.set_flags", "module": "mailbox", "doc": ["Set the flags specified by flags and unset all others."]}
{"index": 3591, "name": "mailbox.MaildirMessage.add_flag", "module": "mailbox", "doc": ["Set the flag(s) specified by flag without changing other flags.", "To add more than one flag at a time, flag may be a string of more than one character.", "The current \u201cinfo\u201d is overwritten whether or not it contains experimental information rather than flags."]}
{"index": 3592, "name": "mailbox.MaildirMessage.remove_flag", "module": "mailbox", "doc": ["Unset the flag(s) specified by flag without changing other flags.", "To remove more than one flag at a time, flag maybe a string of more than one character.", "If \u201cinfo\u201d contains experimental information rather than flags, the current \u201cinfo\u201d is not modified."]}
{"index": 3593, "name": "mailbox.MaildirMessage.get_date", "module": "mailbox", "doc": ["Return the delivery date of the message as a floating-point number representing seconds since the epoch."]}
{"index": 3594, "name": "mailbox.MaildirMessage.set_date", "module": "mailbox", "doc": ["Set the delivery date of the message to date, a floating-point number representing seconds since the epoch."]}
{"index": 3595, "name": "mailbox.MaildirMessage.get_info", "module": "mailbox", "doc": ["Return a string containing the \u201cinfo\u201d for a message.", "This is useful for accessing and modifying \u201cinfo\u201d that is experimental (i.e., not a list of flags)."]}
{"index": 3596, "name": "mailbox.MaildirMessage.set_info", "module": "mailbox", "doc": ["Set \u201cinfo\u201d to info, which should be a string."]}
{"index": 3597, "name": "mailbox.mboxMessage", "module": "mailbox", "doc": ["A message with mbox-specific behaviors.", "Parameter message has the same meaning as with the Message constructor.", "Messages in an mbox mailbox are stored together in a single file.", "The sender\u2019s envelope address and the time of delivery are typically stored in a line beginning with \u201cFrom \u201d that is used to indicate the start of a message, though there is considerable variation in the exact format of this data among mbox implementations.", "Flags that indicate the state of the message, such as whether it has been read or marked as important, are typically stored in Status and X-Status headers.", "Conventional flags for mbox messages are as follows:", "The \u201cR\u201d and \u201cO\u201d flags are stored in the Status header, and the \u201cD\u201d, \u201cF\u201d, and \u201cA\u201d flags are stored in the X-Status header.", "The flags and headers typically appear in the order mentioned.", "mboxMessage instances offer the following methods:"]}
{"index": 3598, "name": "mailbox.mboxMessage.get_from", "module": "mailbox", "doc": ["Return a string representing the \u201cFrom \u201d line that marks the start of the message in an mbox mailbox.", "The leading \u201cFrom \u201d and the trailing newline are excluded."]}
{"index": 3599, "name": "mailbox.mboxMessage.set_from", "module": "mailbox", "doc": ["Set the \u201cFrom \u201d line to from_, which should be specified without a leading \u201cFrom \u201d or trailing newline.", "For convenience, time_ may be specified and will be formatted appropriately and appended to from_.", "If time_ is specified, it should be a time.struct_time instance, a tuple suitable for passing to time.strftime(), or True (to use time.gmtime())."]}
{"index": 3600, "name": "mailbox.mboxMessage.get_flags", "module": "mailbox", "doc": ["Return a string specifying the flags that are currently set.", "If the message complies with the conventional format, the result is the concatenation in the following order of zero or one occurrence of each of 'R', 'O', 'D', 'F', and 'A'."]}
{"index": 3601, "name": "mailbox.mboxMessage.set_flags", "module": "mailbox", "doc": ["Set the flags specified by flags and unset all others.", "Parameter flags should be the concatenation in any order of zero or more occurrences of each of 'R', 'O', 'D', 'F', and 'A'."]}
{"index": 3602, "name": "mailbox.mboxMessage.add_flag", "module": "mailbox", "doc": ["Set the flag(s) specified by flag without changing other flags.", "To add more than one flag at a time, flag may be a string of more than one character."]}
{"index": 3603, "name": "mailbox.mboxMessage.remove_flag", "module": "mailbox", "doc": ["Unset the flag(s) specified by flag without changing other flags.", "To remove more than one flag at a time, flag maybe a string of more than one character."]}
{"index": 3604, "name": "mailbox.MHMessage", "module": "mailbox", "doc": ["A message with MH-specific behaviors.", "Parameter message has the same meaning as with the Message constructor.", "MH messages do not support marks or flags in the traditional sense, but they do support sequences, which are logical groupings of arbitrary messages.", "Some mail reading programs (although not the standard mh and nmh) use sequences in much the same way flags are used with other formats, as follows:", "MHMessage instances offer the following methods:"]}
{"index": 3605, "name": "mailbox.MHMessage.get_sequences", "module": "mailbox", "doc": ["Return a list of the names of sequences that include this message."]}
{"index": 3606, "name": "mailbox.MHMessage.set_sequences", "module": "mailbox", "doc": ["Set the list of sequences that include this message."]}
{"index": 3607, "name": "mailbox.MHMessage.add_sequence", "module": "mailbox", "doc": ["Add sequence to the list of sequences that include this message."]}
{"index": 3608, "name": "mailbox.MHMessage.remove_sequence", "module": "mailbox", "doc": ["Remove sequence from the list of sequences that include this message."]}
{"index": 3609, "name": "mailbox.BabylMessage", "module": "mailbox", "doc": ["A message with Babyl-specific behaviors.", "Parameter message has the same meaning as with the Message constructor.", "Certain message labels, called attributes, are defined by convention to have special meanings.", "The attributes are as follows:", "By default, Rmail displays only visible headers.", "The BabylMessage class, though, uses the original headers because they are more complete.", "Visible headers may be accessed explicitly if desired.", "BabylMessage instances offer the following methods:"]}
{"index": 3610, "name": "mailbox.BabylMessage.get_labels", "module": "mailbox", "doc": ["Return a list of labels on the message."]}
{"index": 3611, "name": "mailbox.BabylMessage.set_labels", "module": "mailbox", "doc": ["Set the list of labels on the message to labels."]}
{"index": 3612, "name": "mailbox.BabylMessage.add_label", "module": "mailbox", "doc": ["Add label to the list of labels on the message."]}
{"index": 3613, "name": "mailbox.BabylMessage.remove_label", "module": "mailbox", "doc": ["Remove label from the list of labels on the message."]}
{"index": 3614, "name": "mailbox.BabylMessage.get_visible", "module": "mailbox", "doc": ["Return an Message instance whose headers are the message\u2019s visible headers and whose body is empty."]}
{"index": 3615, "name": "mailbox.BabylMessage.set_visible", "module": "mailbox", "doc": ["Set the message\u2019s visible headers to be the same as the headers in message.", "Parameter visible should be a Message instance, an email.message.Message instance, a string, or a file-like object (which should be open in text mode)."]}
{"index": 3616, "name": "mailbox.BabylMessage.update_visible", "module": "mailbox", "doc": ["When a BabylMessage instance\u2019s original headers are modified, the visible headers are not automatically modified to correspond.", "This method updates the visible headers as follows: each visible header with a corresponding original header is set to the value of the original header, each visible header without a corresponding original header is removed, and any of Date, From, Reply-To, To, CC, and Subject that are present in the original headers but not the visible headers are added to the visible headers."]}
{"index": 3617, "name": "mailbox.MMDFMessage", "module": "mailbox", "doc": ["A message with MMDF-specific behaviors.", "Parameter message has the same meaning as with the Message constructor.", "As with message in an mbox mailbox, MMDF messages are stored with the sender\u2019s address and the delivery date in an initial line beginning with \u201cFrom \u201c.", "Likewise, flags that indicate the state of the message are typically stored in Status and X-Status headers.", "Conventional flags for MMDF messages are identical to those of mbox message and are as follows:", "The \u201cR\u201d and \u201cO\u201d flags are stored in the Status header, and the \u201cD\u201d, \u201cF\u201d, and \u201cA\u201d flags are stored in the X-Status header.", "The flags and headers typically appear in the order mentioned.", "MMDFMessage instances offer the following methods, which are identical to those offered by mboxMessage:"]}
{"index": 3618, "name": "mailbox.MMDFMessage.get_from", "module": "mailbox", "doc": ["Return a string representing the \u201cFrom \u201d line that marks the start of the message in an mbox mailbox.", "The leading \u201cFrom \u201d and the trailing newline are excluded."]}
{"index": 3619, "name": "mailbox.MMDFMessage.set_from", "module": "mailbox", "doc": ["Set the \u201cFrom \u201d line to from_, which should be specified without a leading \u201cFrom \u201d or trailing newline.", "For convenience, time_ may be specified and will be formatted appropriately and appended to from_.", "If time_ is specified, it should be a time.struct_time instance, a tuple suitable for passing to time.strftime(), or True (to use time.gmtime())."]}
{"index": 3620, "name": "mailbox.MMDFMessage.get_flags", "module": "mailbox", "doc": ["Return a string specifying the flags that are currently set.", "If the message complies with the conventional format, the result is the concatenation in the following order of zero or one occurrence of each of 'R', 'O', 'D', 'F', and 'A'."]}
{"index": 3621, "name": "mailbox.MMDFMessage.set_flags", "module": "mailbox", "doc": ["Set the flags specified by flags and unset all others.", "Parameter flags should be the concatenation in any order of zero or more occurrences of each of 'R', 'O', 'D', 'F', and 'A'."]}
{"index": 3622, "name": "mailbox.MMDFMessage.add_flag", "module": "mailbox", "doc": ["Set the flag(s) specified by flag without changing other flags.", "To add more than one flag at a time, flag may be a string of more than one character."]}
{"index": 3623, "name": "mailbox.MMDFMessage.remove_flag", "module": "mailbox", "doc": ["Unset the flag(s) specified by flag without changing other flags.", "To remove more than one flag at a time, flag maybe a string of more than one character."]}
{"index": 3624, "name": "mailbox.Error", "module": "mailbox", "doc": ["The based class for all other module-specific exceptions."]}
{"index": 3625, "name": "mailbox.NoSuchMailboxError", "module": "mailbox", "doc": ["Raised when a mailbox is expected but is not found, such as when instantiating a Mailbox subclass with a path that does not exist (and with the create parameter set to False), or when opening a folder that does not exist."]}
{"index": 3626, "name": "mailbox.NotEmptyError", "module": "mailbox", "doc": ["Raised when a mailbox is not empty but is expected to be, such as when deleting a folder that contains messages."]}
{"index": 3627, "name": "mailbox.ExternalClashError", "module": "mailbox", "doc": ["Raised when some mailbox-related condition beyond the control of the program causes it to be unable to proceed, such as when failing to acquire a lock that another program already holds a lock, or when a uniquely-generated file name already exists."]}
{"index": 3628, "name": "mailbox.FormatError", "module": "mailbox", "doc": ["Raised when the data in a file cannot be parsed, such as when an MH instance attempts to read a corrupted .mh_sequences file."]}
{"index": 3629, "name": "mailcap.findmatch", "module": "mailcap", "doc": ["Return a 2-tuple; the first element is a string containing the command line to be executed (which can be passed to os.system()), and the second element is the mailcap entry for a given MIME type.", "If no matching MIME type can be found, (None, None) is returned.", "key is the name of the field desired, which represents the type of activity to be performed; the default value is \u2018view\u2019, since in the  most common case you simply want to view the body of the MIME-typed data.", "Other possible values might be \u2018compose\u2019 and \u2018edit\u2019, if you wanted to create a new body of the given MIME type or alter the existing body data.", "See RFC 1524 for a complete list of these fields.", "filename is the filename to be substituted for %s in the command line; the default value is '/dev/null' which is almost certainly not what you want, so usually you\u2019ll override it by specifying a filename.", "plist can be a list containing named parameters; the default value is simply an empty list.", "Each entry in the list must be a string containing the parameter name, an equals sign ('='), and the parameter\u2019s value.", "Mailcap entries can contain  named parameters like %{foo}, which will be replaced by the value of the parameter named \u2018foo\u2019.", "For example, if the command line showpartial %{id} %{number} %{total} was in a mailcap file, and plist was set to ['id=1', 'number=2', 'total=3'], the resulting command line would be 'showpartial 1 2 3'.", "In a mailcap file, the \u201ctest\u201d field can optionally be specified to test some external condition (such as the machine architecture, or the window system in use) to determine whether or not the mailcap line applies.", "findmatch() will automatically check such conditions and skip the entry if the check fails."]}
{"index": 3630, "name": "mailcap.getcaps", "module": "mailcap", "doc": ["Returns a dictionary mapping MIME types to a list of mailcap file entries.", "This dictionary must be passed to the findmatch() function.", "An entry is stored as a list of dictionaries, but it shouldn\u2019t be necessary to know the details of this representation.", "The information is derived from all of the mailcap files found on the system.", "Settings in the user\u2019s mailcap file $HOME/.mailcap will override settings in the system mailcap files /etc/mailcap, /usr/etc/mailcap, and /usr/local/etc/mailcap."]}
{"index": 3631, "name": "marshal.dump", "module": "marshal", "doc": ["Write the value on the open file.", "The value must be a supported type.", "The file must be a writeable binary file.", "If the value has (or contains an object that has) an unsupported type, a ValueError exception is raised \u2014 but garbage data will also be written to the file.", "The object will not be properly read back by load().", "The version argument indicates the data format that dump should use (see below)."]}
{"index": 3632, "name": "marshal.load", "module": "marshal", "doc": ["Read one value from the open file and return it.", "If no valid value is read (e.g.", "because the data has a different Python version\u2019s incompatible marshal format), raise EOFError, ValueError or TypeError.", "The file must be a readable binary file."]}
{"index": 3633, "name": "marshal.dumps", "module": "marshal", "doc": ["Return the bytes object that would be written to a file by dump(value, file).", "The value must be a supported type.", "Raise a ValueError exception if value has (or contains an object that has) an unsupported type.", "The version argument indicates the data format that dumps should use (see below)."]}
{"index": 3634, "name": "marshal.loads", "module": "marshal", "doc": ["Convert the bytes-like object to a value.", "If no valid value is found, raise EOFError, ValueError or TypeError.", "Extra bytes in the input are ignored."]}
{"index": 3635, "name": "marshal.version", "module": "marshal", "doc": ["Indicates the format that the module uses.", "Version 0 is the historical format, version 1 shares interned strings and version 2 uses a binary format for floating point numbers.", "Version 3 adds support for object instancing and recursion.", "The current version is 4."]}
{"index": 3636, "name": "id2", "module": "marshal", "doc": ["The name of this module stems from a bit of terminology used by the designers of Modula-3 (amongst others), who use the term \u201cmarshalling\u201d for shipping of data around in a self-contained form.", "Strictly speaking, \u201cto marshal\u201d means to convert some data from internal to external form (in an RPC buffer for instance) and \u201cunmarshalling\u201d for the reverse process."]}
{"index": 3637, "name": "math.ceil", "module": "math", "doc": ["Return the ceiling of x, the smallest integer greater than or equal to x.", "If x is not a float, delegates to x.__ceil__(), which should return an Integral value."]}
{"index": 3638, "name": "math.copysign", "module": "math", "doc": ["Return a float with the magnitude (absolute value) of x but the sign of y.", "On platforms that support signed zeros, copysign(1.0, -0.0) returns -1.0."]}
{"index": 3639, "name": "math.fabs", "module": "math", "doc": ["Return the absolute value of x."]}
{"index": 3640, "name": "math.factorial", "module": "math", "doc": ["Return x factorial as an integer.", "Raises ValueError if x is not integral or is negative."]}
{"index": 3641, "name": "math.floor", "module": "math", "doc": ["Return the floor of x, the largest integer less than or equal to x.", "If x is not a float, delegates to x.__floor__(), which should return an Integral value."]}
{"index": 3642, "name": "math.fmod", "module": "math", "doc": ["Return fmod(x, y), as defined by the platform C library.", "Note that the Python expression x % y may not return the same result.", "The intent of the C standard is that fmod(x, y) be exactly (mathematically; to infinite precision) equal to x - n*y for some integer n such that the result has the same sign as x and magnitude less than abs(y).", "Python\u2019s x % y returns a result with the sign of y instead, and may not be exactly computable for float arguments.", "For example, fmod(-1e-100, 1e100) is -1e-100, but the result of Python\u2019s -1e-100 % 1e100 is 1e100-1e-100, which cannot be represented exactly as a float, and rounds to the surprising 1e100.", "For this reason, function fmod() is generally preferred when working with floats, while Python\u2019s x % y is preferred when working with integers."]}
{"index": 3643, "name": "math.frexp", "module": "math", "doc": ["Return the mantissa and exponent of x as the pair (m, e).", "m is a float and e is an integer such that x == m * 2**e exactly.", "If x is zero, returns (0.0, 0), otherwise 0.5 <= abs(m) < 1.", "This is used to \u201cpick apart\u201d the internal representation of a float in a portable way."]}
{"index": 3644, "name": "math.fsum", "module": "math", "doc": ["Return an accurate floating point sum of values in the iterable.", "Avoids loss of precision by tracking multiple intermediate partial sums:", "The algorithm\u2019s accuracy depends on IEEE-754 arithmetic guarantees and the typical case where the rounding mode is half-even.", "On some non-Windows builds, the underlying C library uses extended precision addition and may occasionally double-round an intermediate sum causing it to be off in its least significant bit.", "For further discussion and two alternative approaches, see the ASPN cookbook recipes for accurate floating point summation."]}
{"index": 3645, "name": "math.gcd", "module": "math", "doc": ["Return the greatest common divisor of the integers a and b.", "If either a or b is nonzero, then the value of gcd(a, b) is the largest positive integer that divides both a and b.  gcd(0, 0) returns 0."]}
{"index": 3646, "name": "math.isclose", "module": "math", "doc": ["Return True if the values a and b are close to each other and False otherwise.", "Whether or not two values are considered close is determined according to given absolute and relative tolerances.", "rel_tol is the relative tolerance \u2013 it is the maximum allowed difference between a and b, relative to the larger absolute value of a or b.", "For example, to set a tolerance of 5%, pass rel_tol=0.05.", "The default tolerance is 1e-09, which assures that the two values are the same within about 9 decimal digits.", "rel_tol must be greater than zero.", "abs_tol is the minimum absolute tolerance \u2013 useful for comparisons near zero.", "abs_tol must be at least zero.", "If no errors occur, the result will be: abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol).", "The IEEE 754 special values of NaN, inf, and -inf will be handled according to IEEE rules.", "Specifically, NaN is not considered close to any other value, including NaN.", "inf and -inf are only considered close to themselves."]}
{"index": 3647, "name": "math.isfinite", "module": "math", "doc": ["Return True if x is neither an infinity nor a NaN, and False otherwise.", "(Note that 0.0 is considered finite.)"]}
{"index": 3648, "name": "math.isinf", "module": "math", "doc": ["Return True if x is a positive or negative infinity, and False otherwise."]}
{"index": 3649, "name": "math.isnan", "module": "math", "doc": ["Return True if x is a NaN (not a number), and False otherwise."]}
{"index": 3650, "name": "math.ldexp", "module": "math", "doc": ["Return x * (2**i).", "This is essentially the inverse of function frexp()."]}
{"index": 3651, "name": "math.modf", "module": "math", "doc": ["Return the fractional and integer parts of x.", "Both results carry the sign of x and are floats."]}
{"index": 3652, "name": "math.remainder", "module": "math", "doc": ["Return the IEEE 754-style remainder of x with respect to y.", "For finite x and finite nonzero y, this is the difference x - n*y, where n is the closest integer to the exact value of the quotient x / y.", "If x / y is exactly halfway between two consecutive integers, the nearest even integer is used for n.  The remainder r = remainder(x, y) thus always satisfies abs(r) <= 0.5 * abs(y).", "Special cases follow IEEE 754: in particular, remainder(x, math.inf) is x for any finite x, and remainder(x, 0) and remainder(math.inf, x) raise ValueError for any non-NaN x.", "If the result of the remainder operation is zero, that zero will have the same sign as x.", "On platforms using IEEE 754 binary floating-point, the result of this operation is always exactly representable: no rounding error is introduced."]}
{"index": 3653, "name": "math.trunc", "module": "math", "doc": ["Return the Real value x truncated to an Integral (usually an integer).", "Delegates to x.__trunc__()."]}
{"index": 3654, "name": "math.exp", "module": "math", "doc": ["Return e raised to the power x, where e = 2.718281\u2026 is the base of natural logarithms.", "This is usually more accurate than math.e ** x or pow(math.e, x)."]}
{"index": 3655, "name": "math.expm1", "module": "math", "doc": ["Return e raised to the power x, minus 1.", "Here e is the base of natural logarithms.", "For small floats x, the subtraction in exp(x) - 1 can result in a significant loss of precision; the expm1() function provides a way to compute this quantity to full precision:"]}
{"index": 3656, "name": "math.log", "module": "math", "doc": ["With one argument, return the natural logarithm of x (to base e).", "With two arguments, return the logarithm of x to the given base, calculated as log(x)/log(base)."]}
{"index": 3657, "name": "math.log1p", "module": "math", "doc": ["Return the natural logarithm of 1+x (base e).", "The result is calculated in a way which is accurate for x near zero."]}
{"index": 3658, "name": "math.log2", "module": "math", "doc": ["Return the base-2 logarithm of x.", "This is usually more accurate than log(x, 2)."]}
{"index": 3659, "name": "math.log10", "module": "math", "doc": ["Return the base-10 logarithm of x.", "This is usually more accurate than log(x, 10)."]}
{"index": 3660, "name": "math.pow", "module": "math", "doc": ["Return x raised to the power y.", "Exceptional cases follow Annex \u2018F\u2019 of the C99 standard as far as possible.", "In particular, pow(1.0, x) and pow(x, 0.0) always return 1.0, even when x is a zero or a NaN.", "If both x and y are finite, x is negative, and y is not an integer then pow(x, y) is undefined, and raises ValueError.", "Unlike the built-in ** operator, math.pow() converts both its arguments to type float.", "Use ** or the built-in pow() function for computing exact integer powers."]}
{"index": 3661, "name": "math.sqrt", "module": "math", "doc": ["Return the square root of x."]}
{"index": 3662, "name": "math.acos", "module": "math", "doc": ["Return the arc cosine of x, in radians."]}
{"index": 3663, "name": "math.asin", "module": "math", "doc": ["Return the arc sine of x, in radians."]}
{"index": 3664, "name": "math.atan", "module": "math", "doc": ["Return the arc tangent of x, in radians."]}
{"index": 3665, "name": "math.atan2", "module": "math", "doc": ["Return atan(y / x), in radians.", "The result is between -pi and pi.", "The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis.", "The point of atan2() is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle.", "For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4."]}
{"index": 3666, "name": "math.cos", "module": "math", "doc": ["Return the cosine of x radians."]}
{"index": 3667, "name": "math.hypot", "module": "math", "doc": ["Return the Euclidean norm, sqrt(x*x + y*y).", "This is the length of the vector from the origin to point (x, y)."]}
{"index": 3668, "name": "math.sin", "module": "math", "doc": ["Return the sine of x radians."]}
{"index": 3669, "name": "math.tan", "module": "math", "doc": ["Return the tangent of x radians."]}
{"index": 3670, "name": "math.degrees", "module": "math", "doc": ["Convert angle x from radians to degrees."]}
{"index": 3671, "name": "math.radians", "module": "math", "doc": ["Convert angle x from degrees to radians."]}
{"index": 3672, "name": "math.acosh", "module": "math", "doc": ["Return the inverse hyperbolic cosine of x."]}
{"index": 3673, "name": "math.asinh", "module": "math", "doc": ["Return the inverse hyperbolic sine of x."]}
{"index": 3674, "name": "math.atanh", "module": "math", "doc": ["Return the inverse hyperbolic tangent of x."]}
{"index": 3675, "name": "math.cosh", "module": "math", "doc": ["Return the hyperbolic cosine of x."]}
{"index": 3676, "name": "math.sinh", "module": "math", "doc": ["Return the hyperbolic sine of x."]}
{"index": 3677, "name": "math.tanh", "module": "math", "doc": ["Return the hyperbolic tangent of x."]}
{"index": 3678, "name": "math.erf", "module": "math", "doc": ["Return the error function at x.", "The erf() function can be used to compute traditional statistical functions such as the cumulative standard normal distribution:"]}
{"index": 3679, "name": "math.erfc", "module": "math", "doc": ["Return the complementary error function at x.", "The complementary error function is defined as 1.0 - erf(x).", "It is used for large values of x where a subtraction from one would cause a loss of significance."]}
{"index": 3680, "name": "math.gamma", "module": "math", "doc": ["Return the Gamma function at x."]}
{"index": 3681, "name": "math.lgamma", "module": "math", "doc": ["Return the natural logarithm of the absolute value of the Gamma function at x."]}
{"index": 3682, "name": "math.pi", "module": "math", "doc": ["The mathematical constant \u03c0 = 3.141592\u2026, to available precision."]}
{"index": 3683, "name": "math.e", "module": "math", "doc": ["The mathematical constant e = 2.718281\u2026, to available precision."]}
{"index": 3684, "name": "math.tau", "module": "math", "doc": ["The mathematical constant \u03c4 = 6.283185\u2026, to available precision.", "Tau is a circle constant equal to 2\u03c0, the ratio of a circle\u2019s circumference to its radius.", "To learn more about Tau, check out Vi Hart\u2019s video Pi is (still) Wrong, and start celebrating Tau day by eating twice as much pie!"]}
{"index": 3685, "name": "math.inf", "module": "math", "doc": ["A floating-point positive infinity.", "(For negative infinity, use -math.inf.)", "Equivalent to the output of float('inf')."]}
{"index": 3686, "name": "math.nan", "module": "math", "doc": ["A floating-point \u201cnot a number\u201d (NaN) value.", "Equivalent to the output of float('nan')."]}
{"index": 3687, "name": "mimetypes.guess_type", "module": "mimetypes", "doc": ["Guess the type of a file based on its filename or URL, given by url.", "The return value is a tuple (type, encoding) where type is None if the type can\u2019t be guessed (missing or unknown suffix) or a string of the form 'type/subtype', usable for a MIME content-type header.", "encoding is None for no encoding or the name of the program used to encode (e.g.", "compress or gzip).", "The encoding is suitable for use as a Content-Encoding header, not as a Content-Transfer-Encoding header.", "The mappings are table driven.", "Encoding suffixes are case sensitive; type suffixes are first tried case sensitively, then case insensitively.", "The optional strict argument is a flag specifying whether the list of known MIME types is limited to only the official types registered with IANA.", "When strict is True (the default), only the IANA types are supported; when strict is False, some additional non-standard but commonly used MIME types are also recognized."]}
{"index": 3688, "name": "mimetypes.guess_all_extensions", "module": "mimetypes", "doc": ["Guess the extensions for a file based on its MIME type, given by type.", "The return value is a list of strings giving all possible filename extensions, including the leading dot ('.').", "The extensions are not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type type by guess_type().", "The optional strict argument has the same meaning as with the guess_type() function."]}
{"index": 3689, "name": "mimetypes.guess_extension", "module": "mimetypes", "doc": ["Guess the extension for a file based on its MIME type, given by type.", "The return value is a string giving a filename extension, including the leading dot ('.').", "The extension is not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type type by guess_type().", "If no extension can be guessed for type, None is returned.", "The optional strict argument has the same meaning as with the guess_type() function."]}
{"index": 3690, "name": "mimetypes.init", "module": "mimetypes", "doc": ["Initialize the internal data structures.", "If given, files must be a sequence of file names which should be used to augment the default type map.", "If omitted, the file names to use are taken from knownfiles; on Windows, the current registry settings are loaded.", "Each file named in files or knownfiles takes precedence over those named before it.", "Calling init() repeatedly is allowed.", "Specifying an empty list for files will prevent the system defaults from being applied: only the well-known values will be present from a built-in list.", "If files is None the internal data structure is completely rebuilt to its initial default value.", "This is a stable operation and will produce the same results when called multiple times."]}
{"index": 3691, "name": "mimetypes.read_mime_types", "module": "mimetypes", "doc": ["Load the type map given in the file filename, if it exists.", "The type map is returned as a dictionary mapping filename extensions, including the leading dot ('.", "'), to strings of the form 'type/subtype'.", "If the file filename does not exist or cannot be read, None is returned."]}
{"index": 3692, "name": "mimetypes.add_type", "module": "mimetypes", "doc": ["Add a mapping from the MIME type type to the extension ext.", "When the extension is already known, the new type will replace the old one.", "When the type is already known the extension will be added to the list of known extensions.", "When strict is True (the default), the mapping will be added to the official MIME types, otherwise to the non-standard ones."]}
{"index": 3693, "name": "mimetypes.inited", "module": "mimetypes", "doc": ["Flag indicating whether or not the global data structures have been initialized.", "This is set to True by init()."]}
{"index": 3694, "name": "mimetypes.knownfiles", "module": "mimetypes", "doc": ["List of type map file names commonly installed.", "These files are typically named mime.types and are installed in different locations by different packages."]}
{"index": 3695, "name": "mimetypes.suffix_map", "module": "mimetypes", "doc": ["Dictionary mapping suffixes to suffixes.", "This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension.", "For example, the .tgz extension is mapped to .tar.gz to allow the encoding and type to be recognized separately."]}
{"index": 3696, "name": "mimetypes.encodings_map", "module": "mimetypes", "doc": ["Dictionary mapping filename extensions to encoding types."]}
{"index": 3697, "name": "mimetypes.types_map", "module": "mimetypes", "doc": ["Dictionary mapping filename extensions to MIME types."]}
{"index": 3698, "name": "mimetypes.common_types", "module": "mimetypes", "doc": ["Dictionary mapping filename extensions to non-standard, but commonly found MIME types."]}
{"index": 3699, "name": "mimetypes.MimeTypes", "module": "mimetypes", "doc": ["This class represents a MIME-types database.", "By default, it provides access to the same database as the rest of this module.", "The initial database is a copy of that provided by the module, and may be extended by loading additional mime.types-style files into the database using the read() or readfp() methods.", "The mapping dictionaries may also be cleared before loading additional data if the default data is not desired.", "The optional filenames parameter can be used to cause additional files to be loaded \u201con top\u201d of the default database."]}
{"index": 3700, "name": "mimetypes.MimeTypes.suffix_map", "module": "mimetypes", "doc": ["Dictionary mapping suffixes to suffixes.", "This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension.", "For example, the .tgz extension is mapped to .tar.gz to allow the encoding and type to be recognized separately.", "This is initially a copy of the global suffix_map defined in the module."]}
{"index": 3701, "name": "mimetypes.MimeTypes.encodings_map", "module": "mimetypes", "doc": ["Dictionary mapping filename extensions to encoding types.", "This is initially a copy of the global encodings_map defined in the module."]}
{"index": 3702, "name": "mimetypes.MimeTypes.types_map", "module": "mimetypes", "doc": ["Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types.", "They are initialized by common_types and types_map."]}
{"index": 3703, "name": "mimetypes.MimeTypes.types_map_inv", "module": "mimetypes", "doc": ["Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types.", "They are initialized by common_types and types_map."]}
{"index": 3704, "name": "mimetypes.MimeTypes.guess_extension", "module": "mimetypes", "doc": ["Similar to the guess_extension() function, using the tables stored as part of the object."]}
{"index": 3705, "name": "mimetypes.MimeTypes.guess_type", "module": "mimetypes", "doc": ["Similar to the guess_type() function, using the tables stored as part of the object."]}
{"index": 3706, "name": "mimetypes.MimeTypes.guess_all_extensions", "module": "mimetypes", "doc": ["Similar to the guess_all_extensions() function, using the tables stored as part of the object."]}
{"index": 3707, "name": "mimetypes.MimeTypes.read", "module": "mimetypes", "doc": ["Load MIME information from a file named filename.", "This uses readfp() to parse the file.", "If strict is True, information will be added to list of standard types, else to the list of non-standard types."]}
{"index": 3708, "name": "mimetypes.MimeTypes.readfp", "module": "mimetypes", "doc": ["Load MIME type information from an open file fp.", "The file must have the format of the standard mime.types files.", "If strict is True, information will be added to the list of standard types, else to the list of non-standard types."]}
{"index": 3709, "name": "mimetypes.MimeTypes.read_windows_registry", "module": "mimetypes", "doc": ["Load MIME type information from the Windows registry.", "Availability: Windows.", "If strict is True, information will be added to the list of standard types, else to the list of non-standard types."]}
{"index": 3710, "name": "mmap.mmap", "module": "mmap", "doc": ["(Windows version) Maps length bytes from the file specified by the file handle fileno, and creates a mmap object.", "If length is larger than the current size of the file, the file is extended to contain length bytes.", "If length is 0, the maximum length of the map is the current size of the file, except that if the file is empty Windows raises an exception (you cannot create an empty mapping on Windows).", "tagname, if specified and not None, is a string giving a tag name for the mapping.", "Windows allows you to have many different mappings against the same file.", "If you specify the name of an existing tag, that tag is opened, otherwise a new tag of this name is created.", "If this parameter is omitted or None, the mapping is created without a name.", "Avoiding the use of the tag parameter will assist in keeping your code portable between Unix and Windows.", "offset may be specified as a non-negative integer offset.", "mmap references will be relative to the offset from the beginning of the file.", "offset defaults to 0.  offset must be a multiple of the ALLOCATIONGRANULARITY."]}
{"index": 3711, "name": "mmap.mmap.close", "module": "mmap", "doc": ["Closes the mmap.", "Subsequent calls to other methods of the object will result in a ValueError exception being raised.", "This will not close the open file."]}
{"index": 3712, "name": "mmap.mmap.closed", "module": "mmap", "doc": ["True if the file is closed."]}
{"index": 3713, "name": "mmap.mmap.find", "module": "mmap", "doc": ["Returns the lowest index in the object where the subsequence sub is found, such that sub is contained in the range [start, end].", "Optional arguments start and end are interpreted as in slice notation.", "Returns -1 on failure."]}
{"index": 3714, "name": "mmap.mmap.flush", "module": "mmap", "doc": ["Flushes changes made to the in-memory copy of a file back to disk.", "Without use of this call there is no guarantee that changes are written back before the object is destroyed.", "If offset and size are specified, only changes to the given range of bytes will be flushed to disk; otherwise, the whole extent of the mapping is flushed.", "offset must be a multiple of the PAGESIZE or ALLOCATIONGRANULARITY.", "(Windows version) A nonzero value returned indicates success; zero indicates failure.", "(Unix version) A zero value is returned to indicate success.", "An exception is raised when the call failed."]}
{"index": 3715, "name": "mmap.mmap.move", "module": "mmap", "doc": ["Copy the count bytes starting at offset src to the destination index dest.", "If the mmap was created with ACCESS_READ, then calls to move will raise a TypeError exception."]}
{"index": 3716, "name": "mmap.mmap.read", "module": "mmap", "doc": ["Return a bytes containing up to n bytes starting from the current file position.", "If the argument is omitted, None or negative, return all bytes from the current file position to the end of the mapping.", "The file position is updated to point after the bytes that were returned."]}
{"index": 3717, "name": "mmap.mmap.read_byte", "module": "mmap", "doc": ["Returns a byte at the current file position as an integer, and advances the file position by 1."]}
{"index": 3718, "name": "mmap.mmap.readline", "module": "mmap", "doc": ["Returns a single line, starting at the current file position and up to the next newline."]}
{"index": 3719, "name": "mmap.mmap.resize", "module": "mmap", "doc": ["Resizes the map and the underlying file, if any.", "If the mmap was created with ACCESS_READ or ACCESS_COPY, resizing the map will raise a TypeError exception."]}
{"index": 3720, "name": "mmap.mmap.rfind", "module": "mmap", "doc": ["Returns the highest index in the object where the subsequence sub is found, such that sub is contained in the range [start, end].", "Optional arguments start and end are interpreted as in slice notation.", "Returns -1 on failure."]}
{"index": 3721, "name": "mmap.mmap.seek", "module": "mmap", "doc": ["Set the file\u2019s current position.", "whence argument is optional and defaults to os.SEEK_SET or 0 (absolute file positioning); other values are os.SEEK_CUR or 1 (seek relative to the current position) and os.SEEK_END or 2 (seek relative to the file\u2019s end)."]}
{"index": 3722, "name": "mmap.mmap.size", "module": "mmap", "doc": ["Return the length of the file, which can be larger than the size of the memory-mapped area."]}
{"index": 3723, "name": "mmap.mmap.tell", "module": "mmap", "doc": ["Returns the current position of the file pointer."]}
{"index": 3724, "name": "mmap.mmap.write", "module": "mmap", "doc": ["Write the bytes in bytes into memory at the current position of the file pointer and return the number of bytes written (never less than len(bytes), since if the write fails, a ValueError will be raised).", "The file position is updated to point after the bytes that were written.", "If the mmap was created with ACCESS_READ, then writing to it will raise a TypeError exception."]}
{"index": 3725, "name": "mmap.mmap.write_byte", "module": "mmap", "doc": ["Write the integer byte into memory at the current position of the file pointer; the file position is advanced by 1.", "If the mmap was created with ACCESS_READ, then writing to it will raise a TypeError exception."]}
{"index": 3726, "name": "modulefinder.AddPackagePath", "module": "modulefinder", "doc": ["Record that the package named pkg_name can be found in the specified path."]}
{"index": 3727, "name": "modulefinder.ReplacePackage", "module": "modulefinder", "doc": ["Allows specifying that the module named oldname is in fact the package named newname."]}
{"index": 3728, "name": "modulefinder.ModuleFinder", "module": "modulefinder", "doc": ["This class provides run_script() and report() methods to determine the set of modules imported by a script.", "path can be a list of directories to search for modules; if not specified, sys.path is used.", "debug sets the debugging level; higher values make the class print debugging messages about what it\u2019s doing.", "excludes is a list of module names to exclude from the analysis.", "replace_paths is a list of (oldpath, newpath) tuples that will be replaced in module paths."]}
{"index": 3729, "name": "modulefinder.ModuleFinder.report", "module": "modulefinder", "doc": ["Print a report to standard output that lists the modules imported by the script and their paths, as well as modules that are missing or seem to be missing."]}
{"index": 3730, "name": "modulefinder.ModuleFinder.run_script", "module": "modulefinder", "doc": ["Analyze the contents of the pathname file, which must contain Python code."]}
{"index": 3731, "name": "modulefinder.ModuleFinder.modules", "module": "modulefinder", "doc": ["A dictionary mapping module names to modules.", "See Example usage of ModuleFinder."]}
{"index": 3732, "name": "msilib.FCICreate", "module": "msilib", "doc": ["Create a new CAB file named cabname.", "files must be a list of tuples, each containing the name of the file on disk, and the name of the file inside the CAB file.", "The files are added to the CAB file in the order they appear in the list.", "All files are added into a single CAB file, using the MSZIP compression algorithm.", "Callbacks to Python for the various steps of MSI creation are currently not exposed."]}
{"index": 3733, "name": "msilib.UuidCreate", "module": "msilib", "doc": ["Return the string representation of a new unique identifier.", "This wraps the Windows API functions UuidCreate() and UuidToString()."]}
{"index": 3734, "name": "msilib.OpenDatabase", "module": "msilib", "doc": ["Return a new database object by calling MsiOpenDatabase.", "path is the file name of the MSI file; persist can be one of the constants MSIDBOPEN_CREATEDIRECT, MSIDBOPEN_CREATE, MSIDBOPEN_DIRECT, MSIDBOPEN_READONLY, or MSIDBOPEN_TRANSACT, and may include the flag MSIDBOPEN_PATCHFILE.", "See the Microsoft documentation for the meaning of these flags; depending on the flags, an existing database is opened, or a new one created."]}
{"index": 3735, "name": "msilib.CreateRecord", "module": "msilib", "doc": ["Return a new record object by calling MSICreateRecord().", "count is the number of fields of the record."]}
{"index": 3736, "name": "msilib.init_database", "module": "msilib", "doc": ["Create and return a new database name, initialize it with schema, and set the properties ProductName, ProductCode, ProductVersion, and Manufacturer.", "schema must be a module object containing tables and _Validation_records attributes; typically, msilib.schema should be used.", "The database will contain just the schema and the validation records when this function returns."]}
{"index": 3737, "name": "msilib.add_data", "module": "msilib", "doc": ["Add all records to the table named table in database.", "The table argument must be one of the predefined tables in the MSI schema, e.g.", "'Feature', 'File', 'Component', 'Dialog', 'Control', etc.", "records should be a list of tuples, each one containing all fields of a record according to the schema of the table.", "For optional fields, None can be passed.", "Field values can be ints, strings, or instances of the Binary class."]}
{"index": 3738, "name": "msilib.Binary", "module": "msilib", "doc": ["Represents entries in the Binary table; inserting such an object using add_data() reads the file named filename into the table."]}
{"index": 3739, "name": "msilib.add_tables", "module": "msilib", "doc": ["Add all table content from module to database.", "module must contain an attribute tables listing all tables for which content should be added, and one attribute per table that has the actual content.", "This is typically used to install the sequence tables."]}
{"index": 3740, "name": "msilib.add_stream", "module": "msilib", "doc": ["Add the file path into the _Stream table of database, with the stream name name."]}
{"index": 3741, "name": "msilib.gen_uuid", "module": "msilib", "doc": ["Return a new UUID, in the format that MSI typically requires (i.e.", "in curly braces, and with all hexdigits in upper-case)."]}
{"index": 3742, "name": "msilib.Database.OpenView", "module": "msilib", "doc": ["Return a view object, by calling MSIDatabaseOpenView().", "sql is the SQL statement to execute."]}
{"index": 3743, "name": "msilib.Database.Commit", "module": "msilib", "doc": ["Commit the changes pending in the current transaction, by calling MSIDatabaseCommit()."]}
{"index": 3744, "name": "msilib.Database.GetSummaryInformation", "module": "msilib", "doc": ["Return a new summary information object, by calling MsiGetSummaryInformation().", "count is the maximum number of updated values."]}
{"index": 3745, "name": "msilib.Database.Close", "module": "msilib", "doc": ["Close the database object, through MsiCloseHandle()."]}
{"index": 3746, "name": "msilib.View.Execute", "module": "msilib", "doc": ["Execute the SQL query of the view, through MSIViewExecute().", "If params is not None, it is a record describing actual values of the parameter tokens in the query."]}
{"index": 3747, "name": "msilib.View.GetColumnInfo", "module": "msilib", "doc": ["Return a record describing the columns of the view, through calling MsiViewGetColumnInfo().", "kind can be either MSICOLINFO_NAMES or MSICOLINFO_TYPES."]}
{"index": 3748, "name": "msilib.View.Fetch", "module": "msilib", "doc": ["Return a result record of the query, through calling MsiViewFetch()."]}
{"index": 3749, "name": "msilib.View.Modify", "module": "msilib", "doc": ["Modify the view, by calling MsiViewModify().", "kind can be one of MSIMODIFY_SEEK, MSIMODIFY_REFRESH, MSIMODIFY_INSERT, MSIMODIFY_UPDATE, MSIMODIFY_ASSIGN, MSIMODIFY_REPLACE, MSIMODIFY_MERGE, MSIMODIFY_DELETE, MSIMODIFY_INSERT_TEMPORARY, MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, MSIMODIFY_VALIDATE_FIELD, or MSIMODIFY_VALIDATE_DELETE.", "data must be a record describing the new data."]}
{"index": 3750, "name": "msilib.View.Close", "module": "msilib", "doc": ["Close the view, through MsiViewClose()."]}
{"index": 3751, "name": "msilib.SummaryInformation.GetProperty", "module": "msilib", "doc": ["Return a property of the summary, through MsiSummaryInfoGetProperty().", "field is the name of the property, and can be one of the constants PID_CODEPAGE, PID_TITLE, PID_SUBJECT, PID_AUTHOR, PID_KEYWORDS, PID_COMMENTS, PID_TEMPLATE, PID_LASTAUTHOR, PID_REVNUMBER, PID_LASTPRINTED, PID_CREATE_DTM, PID_LASTSAVE_DTM, PID_PAGECOUNT, PID_WORDCOUNT, PID_CHARCOUNT, PID_APPNAME, or PID_SECURITY."]}
{"index": 3752, "name": "msilib.SummaryInformation.GetPropertyCount", "module": "msilib", "doc": ["Return the number of summary properties, through MsiSummaryInfoGetPropertyCount()."]}
{"index": 3753, "name": "msilib.SummaryInformation.SetProperty", "module": "msilib", "doc": ["Set a property through MsiSummaryInfoSetProperty().", "field can have the same values as in GetProperty(), value is the new value of the property.", "Possible value types are integer and string."]}
{"index": 3754, "name": "msilib.SummaryInformation.Persist", "module": "msilib", "doc": ["Write the modified properties to the summary information stream, using MsiSummaryInfoPersist()."]}
{"index": 3755, "name": "msilib.Record.GetFieldCount", "module": "msilib", "doc": ["Return the number of fields of the record, through MsiRecordGetFieldCount()."]}
{"index": 3756, "name": "msilib.Record.GetInteger", "module": "msilib", "doc": ["Return the value of field as an integer where possible.", "field must be an integer."]}
{"index": 3757, "name": "msilib.Record.GetString", "module": "msilib", "doc": ["Return the value of field as a string where possible.", "field must be an integer."]}
{"index": 3758, "name": "msilib.Record.SetString", "module": "msilib", "doc": ["Set field to value through MsiRecordSetString().", "field must be an integer; value a string."]}
{"index": 3759, "name": "msilib.Record.SetStream", "module": "msilib", "doc": ["Set field to the contents of the file named value, through MsiRecordSetStream().", "field must be an integer; value a string."]}
{"index": 3760, "name": "msilib.Record.SetInteger", "module": "msilib", "doc": ["Set field to value through MsiRecordSetInteger().", "Both field and value must be an integer."]}
{"index": 3761, "name": "msilib.Record.ClearData", "module": "msilib", "doc": ["Set all fields of the record to 0, through MsiRecordClearData()."]}
{"index": 3762, "name": "msilib.CAB", "module": "msilib", "doc": ["The class CAB represents a CAB file.", "During MSI construction, files will be added simultaneously to the Files table, and to a CAB file.", "Then, when all files have been added, the CAB file can be written, then added to the MSI file.", "name is the name of the CAB file in the MSI file."]}
{"index": 3763, "name": "msilib.CAB.append", "module": "msilib", "doc": ["Add the file with the pathname full to the CAB file, under the name logical.", "If there is already a file named logical, a new file name is created.", "Return the index of the file in the CAB file, and the new name of the file inside the CAB file."]}
{"index": 3764, "name": "msilib.CAB.commit", "module": "msilib", "doc": ["Generate a CAB file, add it as a stream to the MSI file, put it into the Media table, and remove the generated file from the disk."]}
{"index": 3765, "name": "msilib.Directory", "module": "msilib", "doc": ["Create a new directory in the Directory table.", "There is a current component at each point in time for the directory, which is either explicitly created through start_component(), or implicitly when files are added for the first time.", "Files are added into the current component, and into the cab file.", "To create a directory, a base directory object needs to be specified (can be None), the path to the physical directory, and a logical directory name.", "default specifies the DefaultDir slot in the directory table.", "componentflags specifies the default flags that new components get."]}
{"index": 3766, "name": "msilib.Directory.start_component", "module": "msilib", "doc": ["Add an entry to the Component table, and make this component the current component for this directory.", "If no component name is given, the directory name is used.", "If no feature is given, the current feature is used.", "If no flags are given, the directory\u2019s default flags are used.", "If no keyfile is given, the KeyPath is left null in the Component table."]}
{"index": 3767, "name": "msilib.Directory.add_file", "module": "msilib", "doc": ["Add a file to the current component of the directory, starting a new one if there is no current component.", "By default, the file name in the source and the file table will be identical.", "If the src file is specified, it is interpreted relative to the current directory.", "Optionally, a version and a language can be specified for the entry in the File table."]}
{"index": 3768, "name": "msilib.Directory.glob", "module": "msilib", "doc": ["Add a list of files to the current component as specified in the glob pattern.", "Individual files can be excluded in the exclude list."]}
{"index": 3769, "name": "msilib.Directory.remove_pyc", "module": "msilib", "doc": ["Remove .pyc files on uninstall."]}
{"index": 3770, "name": "msilib.Feature", "module": "msilib", "doc": ["Add a new record to the Feature table, using the values id, parent.id, title, desc, display, level, directory, and attributes.", "The resulting feature object can be passed to the start_component() method of Directory."]}
{"index": 3771, "name": "msilib.Feature.set_current", "module": "msilib", "doc": ["Make this feature the current feature of msilib.", "New components are automatically added to the default feature, unless a feature is explicitly specified."]}
{"index": 3772, "name": "msilib.Control", "module": "msilib", "doc": ["Base class of the dialog controls.", "dlg is the dialog object the control belongs to, and name is the control\u2019s name."]}
{"index": 3773, "name": "msilib.Control.event", "module": "msilib", "doc": ["Make an entry into the ControlEvent table for this control."]}
{"index": 3774, "name": "msilib.Control.mapping", "module": "msilib", "doc": ["Make an entry into the EventMapping table for this control."]}
{"index": 3775, "name": "msilib.Control.condition", "module": "msilib", "doc": ["Make an entry into the ControlCondition table for this control."]}
{"index": 3776, "name": "msilib.RadioButtonGroup", "module": "msilib", "doc": ["Create a radio button control named name.", "property is the installer property that gets set when a radio button is selected."]}
{"index": 3777, "name": "msilib.RadioButtonGroup.add", "module": "msilib", "doc": ["Add a radio button named name to the group, at the coordinates x, y, width, height, and with the label text.", "If value is None, it defaults to name."]}
{"index": 3778, "name": "msilib.Dialog", "module": "msilib", "doc": ["Return a new Dialog object.", "An entry in the Dialog table is made, with the specified coordinates, dialog attributes, title, name of the first, default, and cancel controls."]}
{"index": 3779, "name": "msilib.Dialog.control", "module": "msilib", "doc": ["Return a new Control object.", "An entry in the Control table is made with the specified parameters.", "This is a generic method; for specific types, specialized methods are provided."]}
{"index": 3780, "name": "msilib.Dialog.text", "module": "msilib", "doc": ["Add and return a Text control."]}
{"index": 3781, "name": "msilib.Dialog.bitmap", "module": "msilib", "doc": ["Add and return a Bitmap control."]}
{"index": 3782, "name": "msilib.Dialog.line", "module": "msilib", "doc": ["Add and return a Line control."]}
{"index": 3783, "name": "msilib.Dialog.pushbutton", "module": "msilib", "doc": ["Add and return a PushButton control."]}
{"index": 3784, "name": "msilib.Dialog.radiogroup", "module": "msilib", "doc": ["Add and return a RadioButtonGroup control."]}
{"index": 3785, "name": "msilib.Dialog.checkbox", "module": "msilib", "doc": ["Add and return a CheckBox control."]}
{"index": 3786, "name": "msilib.schema", "module": "msilib", "doc": ["This is the standard MSI schema for MSI 2.0, with the tables variable providing a list of table definitions, and _Validation_records providing the data for MSI validation."]}
{"index": 3787, "name": "msilib.sequence", "module": "msilib", "doc": ["This module contains table contents for the standard sequence tables: AdminExecuteSequence, AdminUISequence, AdvtExecuteSequence, InstallExecuteSequence, and InstallUISequence."]}
{"index": 3788, "name": "msilib.text", "module": "msilib", "doc": ["This module contains definitions for the UIText and ActionText tables, for the standard installer actions."]}
{"index": 3789, "name": "msvcrt.locking", "module": "msvcrt", "doc": ["Lock part of a file based on file descriptor fd from the C runtime.", "Raises OSError on failure.", "The locked region of the file extends from the current file position for nbytes bytes, and may continue beyond the end of the file.", "mode must be one of the LK_* constants listed below.", "Multiple regions in a file may be locked at the same time, but may not overlap.", "Adjacent regions are not merged; they must be unlocked individually."]}
{"index": 3790, "name": "msvcrt.LK_LOCK", "module": "msvcrt", "doc": ["Locks the specified bytes.", "If the bytes cannot be locked, the program immediately tries again after 1 second.", "If, after 10 attempts, the bytes cannot be locked, OSError is raised."]}
{"index": 3791, "name": "msvcrt.LK_RLCK", "module": "msvcrt", "doc": ["Locks the specified bytes.", "If the bytes cannot be locked, the program immediately tries again after 1 second.", "If, after 10 attempts, the bytes cannot be locked, OSError is raised."]}
{"index": 3792, "name": "msvcrt.LK_NBLCK", "module": "msvcrt", "doc": ["Locks the specified bytes.", "If the bytes cannot be locked, OSError is raised."]}
{"index": 3793, "name": "msvcrt.LK_NBRLCK", "module": "msvcrt", "doc": ["Locks the specified bytes.", "If the bytes cannot be locked, OSError is raised."]}
{"index": 3794, "name": "msvcrt.LK_UNLCK", "module": "msvcrt", "doc": ["Unlocks the specified bytes, which must have been previously locked."]}
{"index": 3795, "name": "msvcrt.setmode", "module": "msvcrt", "doc": ["Set the line-end translation mode for the file descriptor fd.", "To set it to text mode, flags should be os.O_TEXT; for binary, it should be os.O_BINARY."]}
{"index": 3796, "name": "msvcrt.open_osfhandle", "module": "msvcrt", "doc": ["Create a C runtime file descriptor from the file handle handle.", "The flags parameter should be a bitwise OR of os.O_APPEND, os.O_RDONLY, and os.O_TEXT.", "The returned file descriptor may be used as a parameter to os.fdopen() to create a file object."]}
{"index": 3797, "name": "msvcrt.get_osfhandle", "module": "msvcrt", "doc": ["Return the file handle for the file descriptor fd.", "Raises OSError if fd is not recognized."]}
{"index": 3798, "name": "msvcrt.kbhit", "module": "msvcrt", "doc": ["Return true if a keypress is waiting to be read."]}
{"index": 3799, "name": "msvcrt.getch", "module": "msvcrt", "doc": ["Read a keypress and return the resulting character as a byte string.", "Nothing is echoed to the console.", "This call will block if a keypress is not already available, but will not wait for Enter to be pressed.", "If the pressed key was a special function key, this will return '\\000' or '\\xe0'; the next call will return the keycode.", "The Control-C keypress cannot be read with this function."]}
{"index": 3800, "name": "msvcrt.getwch", "module": "msvcrt", "doc": ["Wide char variant of getch(), returning a Unicode value."]}
{"index": 3801, "name": "msvcrt.getche", "module": "msvcrt", "doc": ["Similar to getch(), but the keypress will be echoed if it  represents a printable character."]}
{"index": 3802, "name": "msvcrt.getwche", "module": "msvcrt", "doc": ["Wide char variant of getche(), returning a Unicode value."]}
{"index": 3803, "name": "msvcrt.putch", "module": "msvcrt", "doc": ["Print the byte string char to the console without buffering."]}
{"index": 3804, "name": "msvcrt.putwch", "module": "msvcrt", "doc": ["Wide char variant of putch(), accepting a Unicode value."]}
{"index": 3805, "name": "msvcrt.ungetch", "module": "msvcrt", "doc": ["Cause the byte string char to be \u201cpushed back\u201d into the console buffer; it will be the next character read by getch() or getche()."]}
{"index": 3806, "name": "msvcrt.ungetwch", "module": "msvcrt", "doc": ["Wide char variant of ungetch(), accepting a Unicode value."]}
{"index": 3807, "name": "msvcrt.heapmin", "module": "msvcrt", "doc": ["Force the malloc() heap to clean itself up and return unused blocks to the operating system.", "On failure, this raises OSError."]}
{"index": 3808, "name": "multiprocessing.Process", "module": "multiprocessing", "doc": ["Process objects represent activity that is run in a separate process.", "The Process class has equivalents of all the methods of threading.Thread.", "The constructor should always be called with keyword arguments.", "group should always be None; it exists solely for compatibility with threading.Thread.", "target is the callable object to be invoked by the run() method.", "It defaults to None, meaning nothing is called.", "name is the process name (see name for more details).", "args is the argument tuple for the target invocation.", "kwargs is a dictionary of keyword arguments for the target invocation.", "If provided, the keyword-only daemon argument sets the process daemon flag to True or False.", "If None (the default), this flag will be inherited from the creating process.", "By default, no arguments are passed to target.", "If a subclass overrides the constructor, it must make sure it invokes the base class constructor (Process.__init__()) before doing anything else to the process.", "In addition to the  threading.Thread API, Process objects also support the following attributes and methods:", "Note that the start(), join(), is_alive(), terminate() and exitcode methods should only be called by the process that created the process object.", "Example usage of some of the methods of Process:"]}
{"index": 3809, "name": "multiprocessing.Process.run", "module": "multiprocessing", "doc": ["Method representing the process\u2019s activity.", "You may override this method in a subclass.", "The standard run() method invokes the callable object passed to the object\u2019s constructor as the target argument, if any, with sequential and keyword arguments taken from the args and kwargs arguments, respectively."]}
{"index": 3810, "name": "multiprocessing.Process.start", "module": "multiprocessing", "doc": ["Start the process\u2019s activity.", "This must be called at most once per process object.", "It arranges for the object\u2019s run() method to be invoked in a separate process."]}
{"index": 3811, "name": "multiprocessing.Process.join", "module": "multiprocessing", "doc": ["If the optional argument timeout is None (the default), the method blocks until the process whose join() method is called terminates.", "If timeout is a positive number, it blocks at most timeout seconds.", "Note that the method returns None if its process terminates or if the method times out.", "Check the process\u2019s exitcode to determine if it terminated.", "A process can be joined many times.", "A process cannot join itself because this would cause a deadlock.", "It is an error to attempt to join a process before it has been started."]}
{"index": 3812, "name": "multiprocessing.Process.name", "module": "multiprocessing", "doc": ["The process\u2019s name.", "The name is a string used for identification purposes only.", "It has no semantics.", "Multiple processes may be given the same name.", "The initial name is set by the constructor.", "If no explicit name is provided to the constructor, a name of the form \u2018Process-N1:N2:\u2026:Nk\u2019 is constructed, where each Nk is the N-th child of its parent."]}
{"index": 3813, "name": "multiprocessing.Process.is_alive", "module": "multiprocessing", "doc": ["Return whether the process is alive.", "Roughly, a process object is alive from the moment the start() method returns until the child process terminates."]}
{"index": 3814, "name": "multiprocessing.Process.daemon", "module": "multiprocessing", "doc": ["The process\u2019s daemon flag, a Boolean value.", "This must be set before start() is called.", "The initial value is inherited from the creating process.", "When a process exits, it attempts to terminate all of its daemonic child processes.", "Note that a daemonic process is not allowed to create child processes.", "Otherwise a daemonic process would leave its children orphaned if it gets terminated when its parent process exits.", "Additionally, these are not Unix daemons or services, they are normal processes that will be terminated (and not joined) if non-daemonic processes have exited."]}
{"index": 3815, "name": "multiprocessing.Process.pid", "module": "multiprocessing", "doc": ["Return the process ID.", "Before the process is spawned, this will be None."]}
{"index": 3816, "name": "multiprocessing.Process.exitcode", "module": "multiprocessing", "doc": ["The child\u2019s exit code.", "This will be None if the process has not yet terminated.", "A negative value -N indicates that the child was terminated by signal N."]}
{"index": 3817, "name": "multiprocessing.Process.authkey", "module": "multiprocessing", "doc": ["The process\u2019s authentication key (a byte string).", "When multiprocessing is initialized the main process is assigned a random string using os.urandom().", "When a Process object is created, it will inherit the authentication key of its parent process, although this may be changed by setting authkey to another byte string.", "See Authentication keys."]}
{"index": 3818, "name": "multiprocessing.Process.sentinel", "module": "multiprocessing", "doc": ["A numeric handle of a system object which will become \u201cready\u201d when the process ends.", "You can use this value if you want to wait on several events at once using multiprocessing.connection.wait().", "Otherwise calling join() is simpler.", "On Windows, this is an OS handle usable with the WaitForSingleObject and WaitForMultipleObjects family of API calls.", "On Unix, this is a file descriptor usable with primitives from the select module."]}
{"index": 3819, "name": "multiprocessing.Process.terminate", "module": "multiprocessing", "doc": ["Terminate the process.", "On Unix this is done using the SIGTERM signal; on Windows TerminateProcess() is used.", "Note that exit handlers and finally clauses, etc., will not be executed.", "Note that descendant processes of the process will not be terminated \u2013 they will simply become orphaned."]}
{"index": 3820, "name": "multiprocessing.Process.kill", "module": "multiprocessing", "doc": ["Same as terminate() but using the SIGKILL signal on Unix."]}
{"index": 3821, "name": "multiprocessing.Process.close", "module": "multiprocessing", "doc": ["Close the Process object, releasing all resources associated with it.", "ValueError is raised if the underlying process is still running.", "Once close() returns successfully, most other methods and attributes of the Process object will raise ValueError."]}
{"index": 3822, "name": "multiprocessing.ProcessError", "module": "multiprocessing", "doc": ["The base class of all multiprocessing exceptions."]}
{"index": 3823, "name": "multiprocessing.BufferTooShort", "module": "multiprocessing", "doc": ["Exception raised by Connection.recv_bytes_into() when the supplied buffer object is too small for the message read.", "If e is an instance of BufferTooShort then e.args[0] will give the message as a byte string."]}
{"index": 3824, "name": "multiprocessing.AuthenticationError", "module": "multiprocessing", "doc": ["Raised when there is an authentication error."]}
{"index": 3825, "name": "multiprocessing.TimeoutError", "module": "multiprocessing", "doc": ["Raised by methods with a timeout when the timeout expires."]}
{"index": 3826, "name": "multiprocessing.Pipe", "module": "multiprocessing", "doc": ["Returns a pair (conn1, conn2) of Connection objects representing the ends of a pipe.", "If duplex is True (the default) then the pipe is bidirectional.", "If duplex is False then the pipe is unidirectional: conn1 can only be used for receiving messages and conn2 can only be used for sending messages."]}
{"index": 3827, "name": "multiprocessing.Queue", "module": "multiprocessing", "doc": ["Returns a process shared queue implemented using a pipe and a few locks/semaphores.", "When a process first puts an item on the queue a feeder thread is started which transfers objects from a buffer into the pipe.", "The usual queue.Empty and queue.Full exceptions from the standard library\u2019s queue module are raised to signal timeouts.", "Queue implements all the methods of queue.Queue except for task_done() and join().", "multiprocessing.Queue has a few additional methods not found in queue.Queue.", "These methods are usually unnecessary for most code:"]}
{"index": 3828, "name": "multiprocessing.Queue.qsize", "module": "multiprocessing", "doc": ["Return the approximate size of the queue.", "Because of multithreading/multiprocessing semantics, this number is not reliable.", "Note that this may raise NotImplementedError on Unix platforms like Mac OS X where sem_getvalue() is not implemented."]}
{"index": 3829, "name": "multiprocessing.Queue.empty", "module": "multiprocessing", "doc": ["Return True if the queue is empty, False otherwise.", "Because of multithreading/multiprocessing semantics, this is not reliable."]}
{"index": 3830, "name": "multiprocessing.Queue.full", "module": "multiprocessing", "doc": ["Return True if the queue is full, False otherwise.", "Because of multithreading/multiprocessing semantics, this is not reliable."]}
{"index": 3831, "name": "multiprocessing.Queue.put", "module": "multiprocessing", "doc": ["Put obj into the queue.", "If the optional argument block is True (the default) and timeout is None (the default), block if necessary until a free slot is available.", "If timeout is a positive number, it blocks at most timeout seconds and raises the queue.Full exception if no free slot was available within that time.", "Otherwise (block is False), put an item on the queue if a free slot is immediately available, else raise the queue.Full exception (timeout is ignored in that case)."]}
{"index": 3832, "name": "multiprocessing.Queue.put_nowait", "module": "multiprocessing", "doc": ["Equivalent to put(obj, False)."]}
{"index": 3833, "name": "multiprocessing.Queue.get", "module": "multiprocessing", "doc": ["Remove and return an item from the queue.", "If optional args block is True (the default) and timeout is None (the default), block if necessary until an item is available.", "If timeout is a positive number, it blocks at most timeout seconds and raises the queue.Empty exception if no item was available within that time.", "Otherwise (block is False), return an item if one is immediately available, else raise the queue.Empty exception (timeout is ignored in that case)."]}
{"index": 3834, "name": "multiprocessing.Queue.get_nowait", "module": "multiprocessing", "doc": ["Equivalent to get(False)."]}
{"index": 3835, "name": "multiprocessing.Queue.close", "module": "multiprocessing", "doc": ["Indicate that no more data will be put on this queue by the current process.", "The background thread will quit once it has flushed all buffered data to the pipe.", "This is called automatically when the queue is garbage collected."]}
{"index": 3836, "name": "multiprocessing.Queue.join_thread", "module": "multiprocessing", "doc": ["Join the background thread.", "This can only be used after close() has been called.", "It blocks until the background thread exits, ensuring that all data in the buffer has been flushed to the pipe.", "By default if a process is not the creator of the queue then on exit it will attempt to join the queue\u2019s background thread.", "The process can call cancel_join_thread() to make join_thread() do nothing."]}
{"index": 3837, "name": "multiprocessing.Queue.cancel_join_thread", "module": "multiprocessing", "doc": ["Prevent join_thread() from blocking.", "In particular, this prevents the background thread from being joined automatically when the process exits \u2013 see join_thread().", "A better name for this method might be allow_exit_without_flush().", "It is likely to cause enqueued data to lost, and you almost certainly will not need to use it.", "It is really only there if you need the current process to exit immediately without waiting to flush enqueued data to the underlying pipe, and you don\u2019t care about lost data."]}
{"index": 3838, "name": "multiprocessing.SimpleQueue", "module": "multiprocessing", "doc": ["It is a simplified Queue type, very close to a locked Pipe."]}
{"index": 3839, "name": "multiprocessing.SimpleQueue.empty", "module": "multiprocessing", "doc": ["Return True if the queue is empty, False otherwise."]}
{"index": 3840, "name": "multiprocessing.SimpleQueue.get", "module": "multiprocessing", "doc": ["Remove and return an item from the queue."]}
{"index": 3841, "name": "multiprocessing.SimpleQueue.put", "module": "multiprocessing", "doc": ["Put item into the queue."]}
{"index": 3842, "name": "multiprocessing.JoinableQueue", "module": "multiprocessing", "doc": ["JoinableQueue, a Queue subclass, is a queue which additionally has task_done() and join() methods."]}
{"index": 3843, "name": "multiprocessing.JoinableQueue.task_done", "module": "multiprocessing", "doc": ["Indicate that a formerly enqueued task is complete.", "Used by queue consumers.", "For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete.", "If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue).", "Raises a ValueError if called more times than there were items placed in the queue."]}
{"index": 3844, "name": "multiprocessing.JoinableQueue.join", "module": "multiprocessing", "doc": ["Block until all items in the queue have been gotten and processed.", "The count of unfinished tasks goes up whenever an item is added to the queue.", "The count goes down whenever a consumer calls task_done() to indicate that the item was retrieved and all work on it is complete.", "When the count of unfinished tasks drops to zero, join() unblocks."]}
{"index": 3845, "name": "multiprocessing.active_children", "module": "multiprocessing", "doc": ["Return list of all live children of the current process.", "Calling this has the side effect of \u201cjoining\u201d any processes which have already finished."]}
{"index": 3846, "name": "multiprocessing.cpu_count", "module": "multiprocessing", "doc": ["Return the number of CPUs in the system.", "This number is not equivalent to the number of CPUs the current process can use.", "The number of usable CPUs can be obtained with len(os.sched_getaffinity(0))", "May raise NotImplementedError."]}
{"index": 3847, "name": "multiprocessing.current_process", "module": "multiprocessing", "doc": ["Return the Process object corresponding to the current process.", "An analogue of threading.current_thread()."]}
{"index": 3848, "name": "multiprocessing.freeze_support", "module": "multiprocessing", "doc": ["Add support for when a program which uses multiprocessing has been frozen to produce a Windows executable.", "(Has been tested with py2exe, PyInstaller and cx_Freeze.)", "One needs to call this function straight after the if __name__ == '__main__' line of the main module.", "For example:", "If the freeze_support() line is omitted then trying to run the frozen executable will raise RuntimeError.", "Calling freeze_support() has no effect when invoked on any operating system other than Windows.", "In addition, if the module is being run normally by the Python interpreter on Windows (the program has not been frozen), then freeze_support() has no effect."]}
{"index": 3849, "name": "multiprocessing.get_all_start_methods", "module": "multiprocessing", "doc": ["Returns a list of the supported start methods, the first of which is the default.", "The possible start methods are 'fork', 'spawn' and 'forkserver'.", "On Windows only 'spawn' is available.", "On Unix 'fork' and 'spawn' are always supported, with 'fork' being the default."]}
{"index": 3850, "name": "multiprocessing.get_context", "module": "multiprocessing", "doc": ["Return a context object which has the same attributes as the multiprocessing module.", "If method is None then the default context is returned.", "Otherwise method should be 'fork', 'spawn', 'forkserver'.", "ValueError is raised if the specified start method is not available."]}
{"index": 3851, "name": "multiprocessing.get_start_method", "module": "multiprocessing", "doc": ["Return the name of start method used for starting processes.", "If the start method has not been fixed and allow_none is false, then the start method is fixed to the default and the name is returned.", "If the start method has not been fixed and allow_none is true then None is returned.", "The return value can be 'fork', 'spawn', 'forkserver' or None.", "'fork' is the default on Unix, while 'spawn' is the default on Windows."]}
{"index": 3852, "name": "multiprocessing.set_executable", "module": "multiprocessing", "doc": ["Sets the path of the Python interpreter to use when starting a child process.", "(By default sys.executable is used).", "Embedders will probably need to do some thing like", "before they can create child processes."]}
{"index": 3853, "name": "multiprocessing.set_start_method", "module": "multiprocessing", "doc": ["Set the method which should be used to start child processes.", "method can be 'fork', 'spawn' or 'forkserver'.", "Note that this should be called at most once, and it should be protected inside the if __name__ == '__main__' clause of the main module."]}
{"index": 3854, "name": "multiprocessing.connection.Connection.send", "module": "multiprocessing", "doc": ["Send an object to the other end of the connection which should be read using recv().", "The object must be picklable.", "Very large pickles (approximately 32 MiB+, though it depends on the OS) may raise a ValueError exception."]}
{"index": 3855, "name": "multiprocessing.connection.Connection.recv", "module": "multiprocessing", "doc": ["Return an object sent from the other end of the connection using send().", "Blocks until there is something to receive.", "Raises EOFError if there is nothing left to receive and the other end was closed."]}
{"index": 3856, "name": "multiprocessing.connection.Connection.fileno", "module": "multiprocessing", "doc": ["Return the file descriptor or handle used by the connection."]}
{"index": 3857, "name": "multiprocessing.connection.Connection.close", "module": "multiprocessing", "doc": ["Close the connection.", "This is called automatically when the connection is garbage collected."]}
{"index": 3858, "name": "multiprocessing.connection.Connection.poll", "module": "multiprocessing", "doc": ["Return whether there is any data available to be read.", "If timeout is not specified then it will return immediately.", "If timeout is a number then this specifies the maximum time in seconds to block.", "If timeout is None then an infinite timeout is used.", "Note that multiple connection objects may be polled at once by using multiprocessing.connection.wait()."]}
{"index": 3859, "name": "multiprocessing.connection.Connection.send_bytes", "module": "multiprocessing", "doc": ["Send byte data from a bytes-like object as a complete message.", "If offset is given then data is read from that position in buffer.", "If size is given then that many bytes will be read from buffer.", "Very large buffers (approximately 32 MiB+, though it depends on the OS) may raise a ValueError exception"]}
{"index": 3860, "name": "multiprocessing.connection.Connection.recv_bytes", "module": "multiprocessing", "doc": ["Return a complete message of byte data sent from the other end of the connection as a string.", "Blocks until there is something to receive.", "Raises EOFError if there is nothing left to receive and the other end has closed.", "If maxlength is specified and the message is longer than maxlength then OSError is raised and the connection will no longer be readable."]}
{"index": 3861, "name": "multiprocessing.connection.Connection.recv_bytes_into", "module": "multiprocessing", "doc": ["Read into buffer a complete message of byte data sent from the other end of the connection and return the number of bytes in the message.", "Blocks until there is something to receive.", "Raises EOFError if there is nothing left to receive and the other end was closed.", "buffer must be a writable bytes-like object.", "If offset is given then the message will be written into the buffer from that position.", "Offset must be a non-negative integer less than the length of buffer (in bytes).", "If the buffer is too short then a BufferTooShort exception is raised and the complete message is available as e.args[0] where e is the exception instance."]}
{"index": 3862, "name": "multiprocessing.Barrier", "module": "multiprocessing", "doc": ["A barrier object: a clone of threading.Barrier."]}
{"index": 3863, "name": "multiprocessing.BoundedSemaphore", "module": "multiprocessing", "doc": ["A bounded semaphore object: a close analog of threading.BoundedSemaphore.", "A solitary difference from its close analog exists: its acquire method\u2019s first argument is named block, as is consistent with Lock.acquire()."]}
{"index": 3864, "name": "multiprocessing.Condition", "module": "multiprocessing", "doc": ["A condition variable: an alias for threading.Condition.", "If lock is specified then it should be a Lock or RLock object from multiprocessing."]}
{"index": 3865, "name": "multiprocessing.Event", "module": "multiprocessing", "doc": ["A clone of threading.Event."]}
{"index": 3866, "name": "multiprocessing.Lock", "module": "multiprocessing", "doc": ["A non-recursive lock object: a close analog of threading.Lock.", "Once a process or thread has acquired a lock, subsequent attempts to acquire it from any process or thread will block until it is released; any process or thread may release it.", "The concepts and behaviors of threading.Lock as it applies to threads are replicated here in multiprocessing.Lock as it applies to either processes or threads, except as noted.", "Note that Lock is actually a factory function which returns an instance of multiprocessing.synchronize.Lock initialized with a default context.", "Lock supports the context manager protocol and thus may be used in with statements."]}
{"index": 3867, "name": "multiprocessing.Lock.acquire", "module": "multiprocessing", "doc": ["Acquire a lock, blocking or non-blocking.", "With the block argument set to True (the default), the method call will block until the lock is in an unlocked state, then set it to locked and return True.", "Note that the name of this first argument differs from that in threading.Lock.acquire().", "With the block argument set to False, the method call does not block.", "If the lock is currently in a locked state, return False; otherwise set the lock to a locked state and return True.", "When invoked with a positive, floating-point value for timeout, block for at most the number of seconds specified by timeout as long as the lock can not be acquired.", "Invocations with a negative value for timeout are equivalent to a timeout of zero.", "Invocations with a timeout value of None (the default) set the timeout period to infinite.", "Note that the treatment of negative or None values for timeout differs from the implemented behavior in threading.Lock.acquire().", "The timeout argument has no practical implications if the block argument is set to False and is thus ignored.", "Returns True if the lock has been acquired or False if the timeout period has elapsed."]}
{"index": 3868, "name": "multiprocessing.Lock.release", "module": "multiprocessing", "doc": ["Release a lock.", "This can be called from any process or thread, not only the process or thread which originally acquired the lock.", "Behavior is the same as in threading.Lock.release() except that when invoked on an unlocked lock, a ValueError is raised."]}
{"index": 3869, "name": "multiprocessing.RLock", "module": "multiprocessing", "doc": ["A recursive lock object: a close analog of threading.RLock.", "A recursive lock must be released by the process or thread that acquired it.", "Once a process or thread has acquired a recursive lock, the same process or thread may acquire it again without blocking; that process or thread must release it once for each time it has been acquired.", "Note that RLock is actually a factory function which returns an instance of multiprocessing.synchronize.RLock initialized with a default context.", "RLock supports the context manager protocol and thus may be used in with statements."]}
{"index": 3870, "name": "multiprocessing.RLock.acquire", "module": "multiprocessing", "doc": ["Acquire a lock, blocking or non-blocking.", "When invoked with the block argument set to True, block until the lock is in an unlocked state (not owned by any process or thread) unless the lock is already owned by the current process or thread.", "The current process or thread then takes ownership of the lock (if it does not already have ownership) and the recursion level inside the lock increments by one, resulting in a return value of True.", "Note that there are several differences in this first argument\u2019s behavior compared to the implementation of threading.RLock.acquire(), starting with the name of the argument itself.", "When invoked with the block argument set to False, do not block.", "If the lock has already been acquired (and thus is owned) by another process or thread, the current process or thread does not take ownership and the recursion level within the lock is not changed, resulting in a return value of False.", "If the lock is in an unlocked state, the current process or thread takes ownership and the recursion level is incremented, resulting in a return value of True.", "Use and behaviors of the timeout argument are the same as in Lock.acquire().", "Note that some of these behaviors of timeout differ from the implemented behaviors in threading.RLock.acquire()."]}
{"index": 3871, "name": "multiprocessing.RLock.release", "module": "multiprocessing", "doc": ["Release a lock, decrementing the recursion level.", "If after the decrement the recursion level is zero, reset the lock to unlocked (not owned by any process or thread) and if any other processes or threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.", "If after the decrement the recursion level is still nonzero, the lock remains locked and owned by the calling process or thread.", "Only call this method when the calling process or thread owns the lock.", "An AssertionError is raised if this method is called by a process or thread other than the owner or if the lock is in an unlocked (unowned) state.", "Note that the type of exception raised in this situation differs from the implemented behavior in threading.RLock.release()."]}
{"index": 3872, "name": "multiprocessing.Semaphore", "module": "multiprocessing", "doc": ["A semaphore object: a close analog of threading.Semaphore.", "A solitary difference from its close analog exists: its acquire method\u2019s first argument is named block, as is consistent with Lock.acquire()."]}
{"index": 3873, "name": "multiprocessing.Value", "module": "multiprocessing", "doc": ["Return a ctypes object allocated from shared memory.", "By default the return value is actually a synchronized wrapper for the object.", "The object itself can be accessed via the value attribute of a Value.", "typecode_or_type determines the type of the returned object: it is either a ctypes type or a one character typecode of the kind used by the array module.", "*args is passed on to the constructor for the type.", "If lock is True (the default) then a new recursive lock object is created to synchronize access to the value.", "If lock is a Lock or RLock object then that will be used to synchronize access to the value.", "If lock is False then access to the returned object will not be automatically protected by a lock, so it will not necessarily be \u201cprocess-safe\u201d.", "Operations like += which involve a read and write are not atomic.", "So if, for instance, you want to atomically increment a shared value it is insufficient to just do", "Assuming the associated lock is recursive (which it is by default) you can instead do", "Note that lock is a keyword-only argument."]}
{"index": 3874, "name": "multiprocessing.Array", "module": "multiprocessing", "doc": ["Return a ctypes array allocated from shared memory.", "By default the return value is actually a synchronized wrapper for the array.", "typecode_or_type determines the type of the elements of the returned array: it is either a ctypes type or a one character typecode of the kind used by the array module.", "If size_or_initializer is an integer, then it determines the length of the array, and the array will be initially zeroed.", "Otherwise, size_or_initializer is a sequence which is used to initialize the array and whose length determines the length of the array.", "If lock is True (the default) then a new lock object is created to synchronize access to the value.", "If lock is a Lock or RLock object then that will be used to synchronize access to the value.", "If lock is False then access to the returned object will not be automatically protected by a lock, so it will not necessarily be \u201cprocess-safe\u201d.", "Note that lock is a keyword only argument.", "Note that an array of ctypes.c_char has value and raw attributes which allow one to use it to store and retrieve strings."]}
{"index": 3875, "name": "multiprocessing.sharedctypes.RawArray", "module": "multiprocessing", "doc": ["Return a ctypes array allocated from shared memory.", "typecode_or_type determines the type of the elements of the returned array: it is either a ctypes type or a one character typecode of the kind used by the array module.", "If size_or_initializer is an integer then it determines the length of the array, and the array will be initially zeroed.", "Otherwise size_or_initializer is a sequence which is used to initialize the array and whose length determines the length of the array.", "Note that setting and getting an element is potentially non-atomic \u2013 use Array() instead to make sure that access is automatically synchronized using a lock."]}
{"index": 3876, "name": "multiprocessing.sharedctypes.RawValue", "module": "multiprocessing", "doc": ["Return a ctypes object allocated from shared memory.", "typecode_or_type determines the type of the returned object: it is either a ctypes type or a one character typecode of the kind used by the array module.", "*args is passed on to the constructor for the type.", "Note that setting and getting the value is potentially non-atomic \u2013 use Value() instead to make sure that access is automatically synchronized using a lock.", "Note that an array of ctypes.c_char has value and raw attributes which allow one to use it to store and retrieve strings \u2013 see documentation for ctypes."]}
{"index": 3877, "name": "multiprocessing.sharedctypes.Array", "module": "multiprocessing", "doc": ["The same as RawArray() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes array.", "If lock is True (the default) then a new lock object is created to synchronize access to the value.", "If lock is a Lock or RLock object then that will be used to synchronize access to the value.", "If lock is False then access to the returned object will not be automatically protected by a lock, so it will not necessarily be \u201cprocess-safe\u201d.", "Note that lock is a keyword-only argument."]}
{"index": 3878, "name": "multiprocessing.sharedctypes.Value", "module": "multiprocessing", "doc": ["The same as RawValue() except that depending on the value of lock a process-safe synchronization wrapper may be returned instead of a raw ctypes object.", "If lock is True (the default) then a new lock object is created to synchronize access to the value.", "If lock is a Lock or RLock object then that will be used to synchronize access to the value.", "If lock is False then access to the returned object will not be automatically protected by a lock, so it will not necessarily be \u201cprocess-safe\u201d.", "Note that lock is a keyword-only argument."]}
{"index": 3879, "name": "multiprocessing.sharedctypes.copy", "module": "multiprocessing", "doc": ["Return a ctypes object allocated from shared memory which is a copy of the ctypes object obj."]}
{"index": 3880, "name": "multiprocessing.sharedctypes.synchronized", "module": "multiprocessing", "doc": ["Return a process-safe wrapper object for a ctypes object which uses lock to synchronize access.", "If lock is None (the default) then a multiprocessing.RLock object is created automatically.", "A synchronized wrapper will have two methods in addition to those of the object it wraps: get_obj() returns the wrapped object and get_lock() returns the lock object used for synchronization.", "Note that accessing the ctypes object through the wrapper can be a lot slower than accessing the raw ctypes object."]}
{"index": 3881, "name": "multiprocessing.sharedctypes.multiprocessing.Manager", "module": "multiprocessing", "doc": ["Returns a started SyncManager object which can be used for sharing objects between processes.", "The returned manager object corresponds to a spawned child process and has methods which will create shared objects and return corresponding proxies."]}
{"index": 3882, "name": "multiprocessing.managers.BaseManager", "module": "multiprocessing", "doc": ["Create a BaseManager object.", "Once created one should call start() or get_server().serve_forever() to ensure that the manager object refers to a started manager process.", "address is the address on which the manager process listens for new connections.", "If address is None then an arbitrary one is chosen.", "authkey is the authentication key which will be used to check the validity of incoming connections to the server process.", "If authkey is None then current_process().authkey is used.", "Otherwise authkey is used and it must be a byte string.", "BaseManager instances also have one read-only property:"]}
{"index": 3883, "name": "multiprocessing.managers.BaseManager.start", "module": "multiprocessing", "doc": ["Start a subprocess to start the manager.", "If initializer is not None then the subprocess will call initializer(*initargs) when it starts."]}
{"index": 3884, "name": "multiprocessing.managers.BaseManager.get_server", "module": "multiprocessing", "doc": ["Returns a Server object which represents the actual server under the control of the Manager.", "The Server object supports the serve_forever() method:", "Server additionally has an address attribute."]}
{"index": 3885, "name": "multiprocessing.managers.BaseManager.connect", "module": "multiprocessing", "doc": ["Connect a local manager object to a remote manager process:"]}
{"index": 3886, "name": "multiprocessing.managers.BaseManager.shutdown", "module": "multiprocessing", "doc": ["Stop the process used by the manager.", "This is only available if start() has been used to start the server process.", "This can be called multiple times."]}
{"index": 3887, "name": "multiprocessing.managers.BaseManager.register", "module": "multiprocessing", "doc": ["A classmethod which can be used for registering a type or callable with the manager class.", "typeid is a \u201ctype identifier\u201d which is used to identify a particular type of shared object.", "This must be a string.", "callable is a callable used for creating objects for this type identifier.", "If a manager instance will be connected to the server using the connect() method, or if the create_method argument is False then this can be left as None.", "proxytype is a subclass of BaseProxy which is used to create proxies for shared objects with this typeid.", "If None then a proxy class is created automatically.", "exposed is used to specify a sequence of method names which proxies for this typeid should be allowed to access using BaseProxy._callmethod().", "(If exposed is None then proxytype._exposed_ is used instead if it exists.)", "In the case where no exposed list is specified, all \u201cpublic methods\u201d of the shared object will be accessible.", "(Here a \u201cpublic method\u201d means any attribute which has a __call__() method and whose name does not begin with '_'.)", "method_to_typeid is a mapping used to specify the return type of those exposed methods which should return a proxy.", "It maps method names to typeid strings.", "(If method_to_typeid is None then proxytype._method_to_typeid_ is used instead if it exists.)", "If a method\u2019s name is not a key of this mapping or if the mapping is None then the object returned by the method will be copied by value.", "create_method determines whether a method should be created with name typeid which can be used to tell the server process to create a new shared object and return a proxy for it.", "By default it is True."]}
{"index": 3888, "name": "multiprocessing.managers.BaseManager.address", "module": "multiprocessing", "doc": ["The address used by the manager."]}
{"index": 3889, "name": "multiprocessing.managers.SyncManager", "module": "multiprocessing", "doc": ["A subclass of BaseManager which can be used for the synchronization of processes.", "Objects of this type are returned by multiprocessing.Manager().", "Its methods create and return Proxy Objects for a number of commonly used data types to be synchronized across processes.", "This notably includes shared lists and dictionaries."]}
{"index": 3890, "name": "multiprocessing.managers.SyncManager.Barrier", "module": "multiprocessing", "doc": ["Create a shared threading.Barrier object and return a proxy for it."]}
{"index": 3891, "name": "multiprocessing.managers.SyncManager.BoundedSemaphore", "module": "multiprocessing", "doc": ["Create a shared threading.BoundedSemaphore object and return a proxy for it."]}
{"index": 3892, "name": "multiprocessing.managers.SyncManager.Condition", "module": "multiprocessing", "doc": ["Create a shared threading.Condition object and return a proxy for it.", "If lock is supplied then it should be a proxy for a threading.Lock or threading.RLock object."]}
{"index": 3893, "name": "multiprocessing.managers.SyncManager.Event", "module": "multiprocessing", "doc": ["Create a shared threading.Event object and return a proxy for it."]}
{"index": 3894, "name": "multiprocessing.managers.SyncManager.Lock", "module": "multiprocessing", "doc": ["Create a shared threading.Lock object and return a proxy for it."]}
{"index": 3895, "name": "multiprocessing.managers.SyncManager.Namespace", "module": "multiprocessing", "doc": ["Create a shared Namespace object and return a proxy for it."]}
{"index": 3896, "name": "multiprocessing.managers.SyncManager.Queue", "module": "multiprocessing", "doc": ["Create a shared queue.Queue object and return a proxy for it."]}
{"index": 3897, "name": "multiprocessing.managers.SyncManager.RLock", "module": "multiprocessing", "doc": ["Create a shared threading.RLock object and return a proxy for it."]}
{"index": 3898, "name": "multiprocessing.managers.SyncManager.Semaphore", "module": "multiprocessing", "doc": ["Create a shared threading.Semaphore object and return a proxy for it."]}
{"index": 3899, "name": "multiprocessing.managers.SyncManager.Array", "module": "multiprocessing", "doc": ["Create an array and return a proxy for it."]}
{"index": 3900, "name": "multiprocessing.managers.SyncManager.Value", "module": "multiprocessing", "doc": ["Create an object with a writable value attribute and return a proxy for it."]}
{"index": 3901, "name": "multiprocessing.managers.SyncManager.dict", "module": "multiprocessing", "doc": ["Create a shared dict object and return a proxy for it."]}
{"index": 3902, "name": "multiprocessing.managers.SyncManager.list", "module": "multiprocessing", "doc": ["Create a shared list object and return a proxy for it."]}
{"index": 3903, "name": "multiprocessing.managers.Namespace", "module": "multiprocessing", "doc": ["A type that can register with SyncManager.", "A namespace object has no public methods, but does have writable attributes.", "Its representation shows the values of its attributes.", "However, when using a proxy for a namespace object, an attribute beginning with '_' will be an attribute of the proxy and not an attribute of the referent:"]}
{"index": 3904, "name": "multiprocessing.managers.BaseProxy", "module": "multiprocessing", "doc": ["Proxy objects are instances of subclasses of BaseProxy."]}
{"index": 3905, "name": "multiprocessing.managers.BaseProxy._callmethod", "module": "multiprocessing", "doc": ["Call and return the result of a method of the proxy\u2019s referent.", "If proxy is a proxy whose referent is obj then the expression", "will evaluate the expression", "in the manager\u2019s process.", "The returned value will be a copy of the result of the call or a proxy to a new shared object \u2013 see documentation for the method_to_typeid argument of BaseManager.register().", "If an exception is raised by the call, then is re-raised by _callmethod().", "If some other exception is raised in the manager\u2019s process then this is converted into a RemoteError exception and is raised by _callmethod().", "Note in particular that an exception will be raised if methodname has not been exposed.", "An example of the usage of _callmethod():"]}
{"index": 3906, "name": "multiprocessing.managers.BaseProxy._getvalue", "module": "multiprocessing", "doc": ["Return a copy of the referent.", "If the referent is unpicklable then this will raise an exception."]}
{"index": 3907, "name": "multiprocessing.managers.BaseProxy.__repr__", "module": "multiprocessing", "doc": ["Return a representation of the proxy object."]}
{"index": 3908, "name": "multiprocessing.managers.BaseProxy.__str__", "module": "multiprocessing", "doc": ["Return the representation of the referent."]}
{"index": 3909, "name": "multiprocessing.pool.Pool", "module": "multiprocessing", "doc": ["A process pool object which controls a pool of worker processes to which jobs can be submitted.", "It supports asynchronous results with timeouts and callbacks and has a parallel map implementation.", "processes is the number of worker processes to use.", "If processes is None then the number returned by os.cpu_count() is used.", "If initializer is not None then each worker process will call initializer(*initargs) when it starts.", "maxtasksperchild is the number of tasks a worker process can complete before it will exit and be replaced with a fresh worker process, to enable unused resources to be freed.", "The default maxtasksperchild is None, which means worker processes will live as long as the pool.", "context can be used to specify the context used for starting the worker processes.", "Usually a pool is created using the function multiprocessing.Pool() or the Pool() method of a context object.", "In both cases context is set appropriately.", "Note that the methods of the pool object should only be called by the process which created the pool."]}
{"index": 3910, "name": "multiprocessing.pool.Pool.apply", "module": "multiprocessing", "doc": ["Call func with arguments args and keyword arguments kwds.", "It blocks until the result is ready.", "Given this blocks, apply_async() is better suited for performing work in parallel.", "Additionally, func is only executed in one of the workers of the pool."]}
{"index": 3911, "name": "multiprocessing.pool.Pool.apply_async", "module": "multiprocessing", "doc": ["A variant of the apply() method which returns a result object.", "If callback is specified then it should be a callable which accepts a single argument.", "When the result becomes ready callback is applied to it, that is unless the call failed, in which case the error_callback is applied instead.", "If error_callback is specified then it should be a callable which accepts a single argument.", "If the target function fails, then the error_callback is called with the exception instance.", "Callbacks should complete immediately since otherwise the thread which handles the results will get blocked."]}
{"index": 3912, "name": "multiprocessing.pool.Pool.map", "module": "multiprocessing", "doc": ["A parallel equivalent of the map() built-in function (it supports only one iterable argument though).", "It blocks until the result is ready.", "This method chops the iterable into a number of chunks which it submits to the process pool as separate tasks.", "The (approximate) size of these chunks can be specified by setting chunksize to a positive integer.", "Note that it may cause high memory usage for very long iterables.", "Consider using imap() or imap_unordered() with explicit chunksize option for better efficiency."]}
{"index": 3913, "name": "multiprocessing.pool.Pool.map_async", "module": "multiprocessing", "doc": ["A variant of the map() method which returns a result object.", "If callback is specified then it should be a callable which accepts a single argument.", "When the result becomes ready callback is applied to it, that is unless the call failed, in which case the error_callback is applied instead.", "If error_callback is specified then it should be a callable which accepts a single argument.", "If the target function fails, then the error_callback is called with the exception instance.", "Callbacks should complete immediately since otherwise the thread which handles the results will get blocked."]}
{"index": 3914, "name": "multiprocessing.pool.Pool.imap", "module": "multiprocessing", "doc": ["A lazier version of map().", "The chunksize argument is the same as the one used by the map() method.", "For very long iterables using a large value for chunksize can make the job complete much faster than using the default value of 1.", "Also if chunksize is 1 then the next() method of the iterator returned by the imap() method has an optional timeout parameter: next(timeout) will raise multiprocessing.TimeoutError if the result cannot be returned within timeout seconds."]}
{"index": 3915, "name": "multiprocessing.pool.Pool.imap_unordered", "module": "multiprocessing", "doc": ["The same as imap() except that the ordering of the results from the returned iterator should be considered arbitrary.", "(Only when there is only one worker process is the order guaranteed to be \u201ccorrect\u201d.)"]}
{"index": 3916, "name": "multiprocessing.pool.Pool.starmap", "module": "multiprocessing", "doc": ["Like map() except that the elements of the iterable are expected to be iterables that are unpacked as arguments.", "Hence an iterable of [(1,2), (3, 4)] results in [func(1,2), func(3,4)]."]}
{"index": 3917, "name": "multiprocessing.pool.Pool.starmap_async", "module": "multiprocessing", "doc": ["A combination of starmap() and map_async() that iterates over iterable of iterables and calls func with the iterables unpacked.", "Returns a result object."]}
{"index": 3918, "name": "multiprocessing.pool.Pool.close", "module": "multiprocessing", "doc": ["Prevents any more tasks from being submitted to the pool.", "Once all the tasks have been completed the worker processes will exit."]}
{"index": 3919, "name": "multiprocessing.pool.Pool.terminate", "module": "multiprocessing", "doc": ["Stops the worker processes immediately without completing outstanding work.", "When the pool object is garbage collected terminate() will be called immediately."]}
{"index": 3920, "name": "multiprocessing.pool.Pool.join", "module": "multiprocessing", "doc": ["Wait for the worker processes to exit.", "One must call close() or terminate() before using join()."]}
{"index": 3921, "name": "multiprocessing.pool.AsyncResult", "module": "multiprocessing", "doc": ["The class of the result returned by Pool.apply_async() and Pool.map_async()."]}
{"index": 3922, "name": "multiprocessing.pool.AsyncResult.get", "module": "multiprocessing", "doc": ["Return the result when it arrives.", "If timeout is not None and the result does not arrive within timeout seconds then multiprocessing.TimeoutError is raised.", "If the remote call raised an exception then that exception will be reraised by get()."]}
{"index": 3923, "name": "multiprocessing.pool.AsyncResult.wait", "module": "multiprocessing", "doc": ["Wait until the result is available or until timeout seconds pass."]}
{"index": 3924, "name": "multiprocessing.pool.AsyncResult.ready", "module": "multiprocessing", "doc": ["Return whether the call has completed."]}
{"index": 3925, "name": "multiprocessing.pool.AsyncResult.successful", "module": "multiprocessing", "doc": ["Return whether the call completed without raising an exception.", "Will raise AssertionError if the result is not ready."]}
{"index": 3926, "name": "multiprocessing.connection.deliver_challenge", "module": "multiprocessing", "doc": ["Send a randomly generated message to the other end of the connection and wait for a reply.", "If the reply matches the digest of the message using authkey as the key then a welcome message is sent to the other end of the connection.", "Otherwise AuthenticationError is raised."]}
{"index": 3927, "name": "multiprocessing.connection.answer_challenge", "module": "multiprocessing", "doc": ["Receive a message, calculate the digest of the message using authkey as the key, and then send the digest back.", "If a welcome message is not received, then AuthenticationError is raised."]}
{"index": 3928, "name": "multiprocessing.connection.Client", "module": "multiprocessing", "doc": ["Attempt to set up a connection to the listener which is using address address, returning a Connection.", "The type of the connection is determined by family argument, but this can generally be omitted since it can usually be inferred from the format of address.", "(See Address Formats)", "If authkey is given and not None, it should be a byte string and will be used as the secret key for an HMAC-based authentication challenge.", "No authentication is done if authkey is None.", "AuthenticationError is raised if authentication fails.", "See Authentication keys."]}
{"index": 3929, "name": "multiprocessing.connection.Listener", "module": "multiprocessing", "doc": ["A wrapper for a bound socket or Windows named pipe which is \u2018listening\u2019 for connections.", "address is the address to be used by the bound socket or named pipe of the listener object.", "family is the type of socket (or named pipe) to use.", "This can be one of the strings 'AF_INET' (for a TCP socket), 'AF_UNIX' (for a Unix domain socket) or 'AF_PIPE' (for a Windows named pipe).", "Of these only the first is guaranteed to be available.", "If family is None then the family is inferred from the format of address.", "If address is also None then a default is chosen.", "This default is the family which is assumed to be the fastest available.", "See Address Formats.", "Note that if family is 'AF_UNIX' and address is None then the socket will be created in a private temporary directory created using tempfile.mkstemp().", "If the listener object uses a socket then backlog (1 by default) is passed to the listen() method of the socket once it has been bound.", "If authkey is given and not None, it should be a byte string and will be used as the secret key for an HMAC-based authentication challenge.", "No authentication is done if authkey is None.", "AuthenticationError is raised if authentication fails.", "See Authentication keys.", "Listener objects have the following read-only properties:"]}
{"index": 3930, "name": "multiprocessing.connection.Listener.accept", "module": "multiprocessing", "doc": ["Accept a connection on the bound socket or named pipe of the listener object and return a Connection object.", "If authentication is attempted and fails, then AuthenticationError is raised."]}
{"index": 3931, "name": "multiprocessing.connection.Listener.close", "module": "multiprocessing", "doc": ["Close the bound socket or named pipe of the listener object.", "This is called automatically when the listener is garbage collected.", "However it is advisable to call it explicitly."]}
{"index": 3932, "name": "multiprocessing.connection.Listener.address", "module": "multiprocessing", "doc": ["The address which is being used by the Listener object."]}
{"index": 3933, "name": "multiprocessing.connection.Listener.last_accepted", "module": "multiprocessing", "doc": ["The address from which the last accepted connection came.", "If this is unavailable then it is None."]}
{"index": 3934, "name": "multiprocessing.connection.wait", "module": "multiprocessing", "doc": ["Wait till an object in object_list is ready.", "Returns the list of those objects in object_list which are ready.", "If timeout is a float then the call blocks for at most that many seconds.", "If timeout is None then it will block for an unlimited period.", "A negative timeout is equivalent to a zero timeout.", "For both Unix and Windows, an object can appear in object_list if it is", "A connection or socket object is ready when there is data available to be read from it, or the other end has been closed.", "Unix: wait(object_list, timeout) almost equivalent select.select(object_list, [], [], timeout).", "The difference is that, if select.select() is interrupted by a signal, it can raise OSError with an error number of EINTR, whereas wait() will not.", "Windows: An item in object_list must either be an integer handle which is waitable (according to the definition used by the documentation of the Win32 function WaitForMultipleObjects()) or it can be an object with a fileno() method which returns a socket handle or pipe handle.", "(Note that pipe handles and socket handles are not waitable handles.)"]}
{"index": 3935, "name": "multiprocessing.get_logger", "module": "multiprocessing", "doc": ["Returns the logger used by multiprocessing.", "If necessary, a new one will be created.", "When first created the logger has level logging.NOTSET and no default handler.", "Messages sent to this logger will not by default propagate to the root logger.", "Note that on Windows child processes will only inherit the level of the parent process\u2019s logger \u2013 any other customization of the logger will not be inherited."]}
{"index": 3936, "name": "multiprocessing.log_to_stderr", "module": "multiprocessing", "doc": ["This function performs a call to get_logger() but in addition to returning the logger created by get_logger, it adds a handler which sends output to sys.stderr using format '[%(levelname)s/%(processName)s] %(message)s'."]}
{"index": 3937, "name": "netrc.netrc", "module": "netrc", "doc": ["A netrc instance or subclass instance encapsulates data from  a netrc file.", "The initialization argument, if present, specifies the file to parse.", "If no argument is given, the file .netrc in the user\u2019s home directory \u2013 as determined by os.path.expanduser() \u2013 will be read.", "Otherwise, a FileNotFoundError exception will be raised.", "Parse errors will raise NetrcParseError with diagnostic information including the file name, line number, and terminating token.", "If no argument is specified on a POSIX system, the presence of passwords in the .netrc file will raise a NetrcParseError if the file ownership or permissions are insecure (owned by a user other than the user running the process, or accessible for read or write by any other user).", "This implements security behavior equivalent to that of ftp and other programs that use .netrc."]}
{"index": 3938, "name": "netrc.NetrcParseError", "module": "netrc", "doc": ["Exception raised by the netrc class when syntactical errors are encountered in source text.", "Instances of this exception provide three interesting attributes:  msg is a textual explanation of the error, filename is the name of the source file, and lineno gives the line number on which the error was found."]}
{"index": 3939, "name": "netrc.netrc.authenticators", "module": "netrc", "doc": ["Return a 3-tuple (login, account, password) of authenticators for host.", "If the netrc file did not contain an entry for the given host, return the tuple associated with the \u2018default\u2019 entry.", "If neither matching host nor default entry is available, return None."]}
{"index": 3940, "name": "netrc.netrc.__repr__", "module": "netrc", "doc": ["Dump the class data as a string in the format of a netrc file.", "(This discards comments and may reorder the entries.)"]}
{"index": 3941, "name": "netrc.netrc.hosts", "module": "netrc", "doc": ["Dictionary mapping host names to (login, account, password) tuples.", "The \u2018default\u2019 entry, if any, is represented as a pseudo-host by that name."]}
{"index": 3942, "name": "netrc.netrc.macros", "module": "netrc", "doc": ["Dictionary mapping macro names to string lists."]}
{"index": 3943, "name": "nis.match", "module": "nis", "doc": ["Return the match for key in map mapname, or raise an error (nis.error) if there is none.", "Both should be strings, key is 8-bit clean.", "Return value is an arbitrary array of bytes (may contain NULL and other joys).", "Note that mapname is first checked if it is an alias to another name.", "The domain argument allows overriding the NIS domain used for the lookup.", "If unspecified, lookup is in the default NIS domain."]}
{"index": 3944, "name": "nis.cat", "module": "nis", "doc": ["Return a dictionary mapping key to value such that match(key, mapname)==value.", "Note that both keys and values of the dictionary are arbitrary arrays of bytes.", "Note that mapname is first checked if it is an alias to another name.", "The domain argument allows overriding the NIS domain used for the lookup.", "If unspecified, lookup is in the default NIS domain."]}
{"index": 3945, "name": "nis.maps", "module": "nis", "doc": ["Return a list of all valid maps.", "The domain argument allows overriding the NIS domain used for the lookup.", "If unspecified, lookup is in the default NIS domain."]}
{"index": 3946, "name": "nis.get_default_domain", "module": "nis", "doc": ["Return the system default NIS domain."]}
{"index": 3947, "name": "nis.error", "module": "nis", "doc": ["An error raised when a NIS function returns an error code."]}
{"index": 3948, "name": "nntplib.NNTP", "module": "nntplib", "doc": ["Return a new NNTP object, representing a connection to the NNTP server running on host host, listening at port port.", "An optional timeout can be specified for the socket connection.", "If the optional user and password are provided, or if suitable credentials are present in /.netrc and the optional flag usenetrc is true, the AUTHINFO USER and AUTHINFO PASS commands are used to identify and authenticate the user to the server.", "If the optional flag readermode is true, then a mode reader command is sent before authentication is performed.", "Reader mode is sometimes necessary if you are connecting to an NNTP server on the local machine and intend to call reader-specific commands, such as group.", "If you get unexpected NNTPPermanentErrors, you might need to set readermode.", "The NNTP class supports the with statement to unconditionally consume OSError exceptions and to close the NNTP connection when done, e.g.", ":"]}
{"index": 3949, "name": "nntplib.NNTP_SSL", "module": "nntplib", "doc": ["Return a new NNTP_SSL object, representing an encrypted connection to the NNTP server running on host host, listening at port port.", "NNTP_SSL objects have the same methods as NNTP objects.", "If port is omitted, port 563 (NNTPS) is used.", "ssl_context is also optional, and is a SSLContext object.", "Please read Security considerations for best practices.", "All other parameters behave the same as for NNTP.", "Note that SSL-on-563 is discouraged per RFC 4642, in favor of STARTTLS as described below.", "However, some servers only support the former."]}
{"index": 3950, "name": "nntplib.NNTPError", "module": "nntplib", "doc": ["Derived from the standard exception Exception, this is the base class for all exceptions raised by the nntplib module.", "Instances of this class have the following attribute:"]}
{"index": 3951, "name": "nntplib.NNTPError.response", "module": "nntplib", "doc": ["The response of the server if available, as a str object."]}
{"index": 3952, "name": "nntplib.NNTPReplyError", "module": "nntplib", "doc": ["Exception raised when an unexpected reply is received from the server."]}
{"index": 3953, "name": "nntplib.NNTPTemporaryError", "module": "nntplib", "doc": ["Exception raised when a response code in the range 400\u2013499 is received."]}
{"index": 3954, "name": "nntplib.NNTPPermanentError", "module": "nntplib", "doc": ["Exception raised when a response code in the range 500\u2013599 is received."]}
{"index": 3955, "name": "nntplib.NNTPProtocolError", "module": "nntplib", "doc": ["Exception raised when a reply is received from the server that does not begin with a digit in the range 1\u20135."]}
{"index": 3956, "name": "nntplib.NNTPDataError", "module": "nntplib", "doc": ["Exception raised when there is some error in the response data."]}
{"index": 3957, "name": "nntplib.NNTP.nntp_version", "module": "nntplib", "doc": ["An integer representing the version of the NNTP protocol supported by the server.", "In practice, this should be 2 for servers advertising RFC 3977 compliance and 1 for others."]}
{"index": 3958, "name": "nntplib.NNTP.nntp_implementation", "module": "nntplib", "doc": ["A string describing the software name and version of the NNTP server, or None if not advertised by the server."]}
{"index": 3959, "name": "nntplib.NNTP.quit", "module": "nntplib", "doc": ["Send a QUIT command and close the connection.", "Once this method has been called, no other methods of the NNTP object should be called."]}
{"index": 3960, "name": "nntplib.NNTP.getwelcome", "module": "nntplib", "doc": ["Return the welcome message sent by the server in reply to the initial connection.", "(This message sometimes contains disclaimers or help information that may be relevant to the user.)"]}
{"index": 3961, "name": "nntplib.NNTP.getcapabilities", "module": "nntplib", "doc": ["Return the RFC 3977 capabilities advertised by the server, as a dict instance mapping capability names to (possibly empty) lists of values.", "On legacy servers which don\u2019t understand the CAPABILITIES command, an empty dictionary is returned instead."]}
{"index": 3962, "name": "nntplib.NNTP.login", "module": "nntplib", "doc": ["Send AUTHINFO commands with the user name and password.", "If user and password are None and usenetrc is true, credentials from ~/.netrc will be used if possible.", "Unless intentionally delayed, login is normally performed during the NNTP object initialization and separately calling this function is unnecessary.", "To force authentication to be delayed, you must not set user or password when creating the object, and must set usenetrc to False."]}
{"index": 3963, "name": "nntplib.NNTP.starttls", "module": "nntplib", "doc": ["Send a STARTTLS command.", "This will enable encryption on the NNTP connection.", "The context argument is optional and should be a ssl.SSLContext object.", "Please read Security considerations for best practices.", "Note that this may not be done after authentication information has been transmitted, and authentication occurs by default if possible during a NNTP object initialization.", "See NNTP.login() for information on suppressing this behavior."]}
{"index": 3964, "name": "nntplib.NNTP.newgroups", "module": "nntplib", "doc": ["Send a NEWGROUPS command.", "The date argument should be a datetime.date or datetime.datetime object.", "Return a pair (response, groups) where groups is a list representing the groups that are new since the given date.", "If file is supplied, though, then groups will be empty."]}
{"index": 3965, "name": "nntplib.NNTP.newnews", "module": "nntplib", "doc": ["Send a NEWNEWS command.", "Here, group is a group name or '*', and date has the same meaning as for newgroups().", "Return a pair (response, articles) where articles is a list of message ids.", "This command is frequently disabled by NNTP server administrators."]}
{"index": 3966, "name": "nntplib.NNTP.list", "module": "nntplib", "doc": ["Send a LIST or LIST ACTIVE command.", "Return a pair (response, list) where list is a list of tuples representing all the groups available from this NNTP server, optionally matching the pattern string group_pattern.", "Each tuple has the form (group, last, first, flag), where group is a group name, last and first are the last and first article numbers, and flag usually takes one of these values:", "If flag has another value, then the status of the newsgroup should be considered unknown.", "This command can return very large results, especially if group_pattern is not specified.", "It is best to cache the results offline unless you really need to refresh them."]}
{"index": 3967, "name": "nntplib.NNTP.descriptions", "module": "nntplib", "doc": ["Send a LIST NEWSGROUPS command, where grouppattern is a wildmat string as specified in RFC 3977 (it\u2019s essentially the same as DOS or UNIX shell wildcard strings).", "Return a pair (response, descriptions), where descriptions is a dictionary mapping group names to textual descriptions."]}
{"index": 3968, "name": "nntplib.NNTP.description", "module": "nntplib", "doc": ["Get a description for a single group group.", "If more than one group matches (if \u2018group\u2019 is a real wildmat string), return the first match.", "If no group matches, return an empty string.", "This elides the response code from the server.", "If the response code is needed, use descriptions()."]}
{"index": 3969, "name": "nntplib.NNTP.group", "module": "nntplib", "doc": ["Send a GROUP command, where name is the group name.", "The group is selected as the current group, if it exists.", "Return a tuple (response, count, first, last, name) where count is the (estimated) number of articles in the group, first is the first article number in the group, last is the last article number in the group, and name is the group name."]}
{"index": 3970, "name": "nntplib.NNTP.over", "module": "nntplib", "doc": ["Send an OVER command, or an XOVER command on legacy servers.", "message_spec can be either a string representing a message id, or a (first, last) tuple of numbers indicating a range of articles in the current group, or a (first, None) tuple indicating a range of articles starting from first to the last article in the current group, or None to select the current article in the current group.", "Return a pair (response, overviews).", "overviews is a list of (article_number, overview) tuples, one for each article selected by message_spec.", "Each overview is a dictionary with the same number of items, but this number depends on the server.", "These items are either message headers (the key is then the lower-cased header name) or metadata items (the key is then the metadata name prepended with \":\").", "The following items are guaranteed to be present by the NNTP specification:", "The value of each item is either a string, or None if not present.", "It is advisable to use the decode_header() function on header values when they may contain non-ASCII characters:"]}
{"index": 3971, "name": "nntplib.NNTP.help", "module": "nntplib", "doc": ["Send a HELP command.", "Return a pair (response, list) where list is a list of help strings."]}
{"index": 3972, "name": "nntplib.NNTP.stat", "module": "nntplib", "doc": ["Send a STAT command, where message_spec is either a message id (enclosed in '<' and '>') or an article number in the current group.", "If message_spec is omitted or None, the current article in the current group is considered.", "Return a triple (response, number, id) where number is the article number and id is the message id."]}
{"index": 3973, "name": "nntplib.NNTP.next", "module": "nntplib", "doc": ["Send a NEXT command.", "Return as for stat()."]}
{"index": 3974, "name": "nntplib.NNTP.last", "module": "nntplib", "doc": ["Send a LAST command.", "Return as for stat()."]}
{"index": 3975, "name": "nntplib.NNTP.article", "module": "nntplib", "doc": ["Send an ARTICLE command, where message_spec has the same meaning as for stat().", "Return a tuple (response, info) where info is a namedtuple with three attributes number, message_id and lines (in that order).", "number is the article number in the group (or 0 if the information is not available), message_id the message id as a string, and lines a list of lines (without terminating newlines) comprising the raw message including headers and body."]}
{"index": 3976, "name": "nntplib.NNTP.head", "module": "nntplib", "doc": ["Same as article(), but sends a HEAD command.", "The lines returned (or written to file) will only contain the message headers, not the body."]}
{"index": 3977, "name": "nntplib.NNTP.body", "module": "nntplib", "doc": ["Same as article(), but sends a BODY command.", "The lines returned (or written to file) will only contain the message body, not the headers."]}
{"index": 3978, "name": "nntplib.NNTP.post", "module": "nntplib", "doc": ["Post an article using the POST command.", "The data argument is either a file object opened for binary reading, or any iterable of bytes objects (representing raw lines of the article to be posted).", "It should represent a well-formed news article, including the required headers.", "The post() method automatically escapes lines beginning with .", "and appends the termination line.", "If the method succeeds, the server\u2019s response is returned.", "If the server refuses posting, a NNTPReplyError is raised."]}
{"index": 3979, "name": "nntplib.NNTP.ihave", "module": "nntplib", "doc": ["Send an IHAVE command.", "message_id is the id of the message to send to the server (enclosed in  '<' and '>').", "The data parameter and the return value are the same as for post()."]}
{"index": 3980, "name": "nntplib.NNTP.date", "module": "nntplib", "doc": ["Return a pair (response, date).", "date is a datetime object containing the current date and time of the server."]}
{"index": 3981, "name": "nntplib.NNTP.slave", "module": "nntplib", "doc": ["Send a SLAVE command.", "Return the server\u2019s response."]}
{"index": 3982, "name": "nntplib.NNTP.set_debuglevel", "module": "nntplib", "doc": ["Set the instance\u2019s debugging level.", "This controls the amount of debugging output printed.", "The default, 0, produces no debugging output.", "A value of 1 produces a moderate amount of debugging output, generally a single line per request or response.", "A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the connection (including message text)."]}
{"index": 3983, "name": "nntplib.NNTP.xhdr", "module": "nntplib", "doc": ["Send an XHDR command.", "The hdr argument is a header keyword, e.g.", "'subject'.", "The str argument should have the form 'first-last' where first and last are the first and last article numbers to search.", "Return a pair (response, list), where list is a list of pairs (id, text), where id is an article number (as a string) and text is the text of the requested header for that article.", "If the file parameter is supplied, then the output of the  XHDR command is stored in a file.", "If file is a string, then the method will open a file with that name, write to it  then close it.", "If file is a file object, then it will start calling write() on it to store the lines of the command output.", "If file is supplied, then the returned list is an empty list."]}
{"index": 3984, "name": "nntplib.NNTP.xover", "module": "nntplib", "doc": ["Send an XOVER command.", "start and end are article numbers delimiting the range of articles to select.", "The return value is the same of for over().", "It is recommended to use over() instead, since it will automatically use the newer OVER command if available."]}
{"index": 3985, "name": "nntplib.NNTP.xpath", "module": "nntplib", "doc": ["Return a pair (resp, path), where path is the directory path to the article with message ID id.", "Most of the time, this extension is not enabled by NNTP server administrators."]}
{"index": 3986, "name": "nntplib.decode_header", "module": "nntplib", "doc": ["Decode a header value, un-escaping any escaped non-ASCII characters.", "header_str must be a str object.", "The unescaped value is returned.", "Using this function is recommended to display some headers in a human readable form:"]}
{"index": 3987, "name": "numbers.Number", "module": "numbers", "doc": ["The root of the numeric hierarchy.", "If you just want to check if an argument x is a number, without caring what kind, use isinstance(x, Number)."]}
{"index": 3988, "name": "numbers.Complex", "module": "numbers", "doc": ["Subclasses of this type describe complex numbers and include the operations that work on the built-in complex type.", "These are: conversions to complex and bool, real, imag, +, -, *, /, abs(), conjugate(), ==, and !=.", "All except - and != are abstract."]}
{"index": 3989, "name": "numbers.Complex.real", "module": "numbers", "doc": ["Abstract.", "Retrieves the real component of this number."]}
{"index": 3990, "name": "numbers.Complex.imag", "module": "numbers", "doc": ["Abstract.", "Retrieves the imaginary component of this number."]}
{"index": 3991, "name": "numbers.Complex.conjugate", "module": "numbers", "doc": ["Abstract.", "Returns the complex conjugate.", "For example, (1+3j).conjugate() == (1-3j)."]}
{"index": 3992, "name": "numbers.Real", "module": "numbers", "doc": ["To Complex, Real adds the operations that work on real numbers.", "In short, those are: a conversion to float, math.trunc(), round(), math.floor(), math.ceil(), divmod(), //, %, <, <=, >, and >=.", "Real also provides defaults for complex(), real, imag, and conjugate()."]}
{"index": 3993, "name": "numbers.Rational", "module": "numbers", "doc": ["Subtypes Real and adds numerator and denominator properties, which should be in lowest terms.", "With these, it provides a default for float()."]}
{"index": 3994, "name": "numbers.Rational.numerator", "module": "numbers", "doc": ["Abstract."]}
{"index": 3995, "name": "numbers.Rational.denominator", "module": "numbers", "doc": ["Abstract."]}
{"index": 3996, "name": "numbers.Integral", "module": "numbers", "doc": ["Subtypes Rational and adds a conversion to int.", "Provides defaults for float(), numerator, and denominator.", "Adds abstract methods for ** and bit-string operations: <<, >>, &, ^, |, ~."]}
{"index": 3997, "name": "operator.lt", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 3998, "name": "operator.le", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 3999, "name": "operator.eq", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4000, "name": "operator.ne", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4001, "name": "operator.ge", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4002, "name": "operator.gt", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4003, "name": "operator.__lt__", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4004, "name": "operator.__le__", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4005, "name": "operator.__eq__", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4006, "name": "operator.__ne__", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4007, "name": "operator.__ge__", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4008, "name": "operator.__gt__", "module": "operator", "doc": ["Perform \u201crich comparisons\u201d between a and b.", "Specifically, lt(a, b) is equivalent to a < b, le(a, b) is equivalent to a <= b, eq(a, b) is equivalent to a == b, ne(a, b) is equivalent to a != b, gt(a, b) is equivalent to a > b and ge(a, b) is equivalent to a >= b.", "Note that these functions can return any value, which may or may not be interpretable as a Boolean value.", "See Comparisons for more information about rich comparisons."]}
{"index": 4009, "name": "operator.not_", "module": "operator", "doc": ["Return the outcome of not obj.", "(Note that there is no __not__() method for object instances; only the interpreter core defines this operation.", "The result is affected by the __bool__() and __len__() methods.)"]}
{"index": 4010, "name": "operator.__not__", "module": "operator", "doc": ["Return the outcome of not obj.", "(Note that there is no __not__() method for object instances; only the interpreter core defines this operation.", "The result is affected by the __bool__() and __len__() methods.)"]}
{"index": 4011, "name": "operator.truth", "module": "operator", "doc": ["Return True if obj is true, and False otherwise.", "This is equivalent to using the bool constructor."]}
{"index": 4012, "name": "operator.is_", "module": "operator", "doc": ["Return a is b.", "Tests object identity."]}
{"index": 4013, "name": "operator.is_not", "module": "operator", "doc": ["Return a is not b.", "Tests object identity."]}
{"index": 4014, "name": "operator.abs", "module": "operator", "doc": ["Return the absolute value of obj."]}
{"index": 4015, "name": "operator.__abs__", "module": "operator", "doc": ["Return the absolute value of obj."]}
{"index": 4016, "name": "operator.add", "module": "operator", "doc": ["Return a + b, for a and b numbers."]}
{"index": 4017, "name": "operator.__add__", "module": "operator", "doc": ["Return a + b, for a and b numbers."]}
{"index": 4018, "name": "operator.and_", "module": "operator", "doc": ["Return the bitwise and of a and b."]}
{"index": 4019, "name": "operator.__and__", "module": "operator", "doc": ["Return the bitwise and of a and b."]}
{"index": 4020, "name": "operator.floordiv", "module": "operator", "doc": ["Return a // b."]}
{"index": 4021, "name": "operator.__floordiv__", "module": "operator", "doc": ["Return a // b."]}
{"index": 4022, "name": "operator.index", "module": "operator", "doc": ["Return a converted to an integer.", "Equivalent to a.__index__()."]}
{"index": 4023, "name": "operator.__index__", "module": "operator", "doc": ["Return a converted to an integer.", "Equivalent to a.__index__()."]}
{"index": 4024, "name": "operator.inv", "module": "operator", "doc": ["Return the bitwise inverse of the number obj.", "This is equivalent to ~obj."]}
{"index": 4025, "name": "operator.invert", "module": "operator", "doc": ["Return the bitwise inverse of the number obj.", "This is equivalent to ~obj."]}
{"index": 4026, "name": "operator.__inv__", "module": "operator", "doc": ["Return the bitwise inverse of the number obj.", "This is equivalent to ~obj."]}
{"index": 4027, "name": "operator.__invert__", "module": "operator", "doc": ["Return the bitwise inverse of the number obj.", "This is equivalent to ~obj."]}
{"index": 4028, "name": "operator.lshift", "module": "operator", "doc": ["Return a shifted left by b."]}
{"index": 4029, "name": "operator.__lshift__", "module": "operator", "doc": ["Return a shifted left by b."]}
{"index": 4030, "name": "operator.mod", "module": "operator", "doc": ["Return a % b."]}
{"index": 4031, "name": "operator.__mod__", "module": "operator", "doc": ["Return a % b."]}
{"index": 4032, "name": "operator.mul", "module": "operator", "doc": ["Return a * b, for a and b numbers."]}
{"index": 4033, "name": "operator.__mul__", "module": "operator", "doc": ["Return a * b, for a and b numbers."]}
{"index": 4034, "name": "operator.matmul", "module": "operator", "doc": ["Return a @ b."]}
{"index": 4035, "name": "operator.__matmul__", "module": "operator", "doc": ["Return a @ b."]}
{"index": 4036, "name": "operator.neg", "module": "operator", "doc": ["Return obj negated (-obj)."]}
{"index": 4037, "name": "operator.__neg__", "module": "operator", "doc": ["Return obj negated (-obj)."]}
{"index": 4038, "name": "operator.or_", "module": "operator", "doc": ["Return the bitwise or of a and b."]}
{"index": 4039, "name": "operator.__or__", "module": "operator", "doc": ["Return the bitwise or of a and b."]}
{"index": 4040, "name": "operator.pos", "module": "operator", "doc": ["Return obj positive (+obj)."]}
{"index": 4041, "name": "operator.__pos__", "module": "operator", "doc": ["Return obj positive (+obj)."]}
{"index": 4042, "name": "operator.pow", "module": "operator", "doc": ["Return a ** b, for a and b numbers."]}
{"index": 4043, "name": "operator.__pow__", "module": "operator", "doc": ["Return a ** b, for a and b numbers."]}
{"index": 4044, "name": "operator.rshift", "module": "operator", "doc": ["Return a shifted right by b."]}
{"index": 4045, "name": "operator.__rshift__", "module": "operator", "doc": ["Return a shifted right by b."]}
{"index": 4046, "name": "operator.sub", "module": "operator", "doc": ["Return a - b."]}
{"index": 4047, "name": "operator.__sub__", "module": "operator", "doc": ["Return a - b."]}
{"index": 4048, "name": "operator.truediv", "module": "operator", "doc": ["Return a / b where 2/3 is .66 rather than 0.", "This is also known as \u201ctrue\u201d division."]}
{"index": 4049, "name": "operator.__truediv__", "module": "operator", "doc": ["Return a / b where 2/3 is .66 rather than 0.", "This is also known as \u201ctrue\u201d division."]}
{"index": 4050, "name": "operator.xor", "module": "operator", "doc": ["Return the bitwise exclusive or of a and b."]}
{"index": 4051, "name": "operator.__xor__", "module": "operator", "doc": ["Return the bitwise exclusive or of a and b."]}
{"index": 4052, "name": "operator.concat", "module": "operator", "doc": ["Return a + b for a and b sequences."]}
{"index": 4053, "name": "operator.__concat__", "module": "operator", "doc": ["Return a + b for a and b sequences."]}
{"index": 4054, "name": "operator.contains", "module": "operator", "doc": ["Return the outcome of the test b in a.", "Note the reversed operands."]}
{"index": 4055, "name": "operator.__contains__", "module": "operator", "doc": ["Return the outcome of the test b in a.", "Note the reversed operands."]}
{"index": 4056, "name": "operator.countOf", "module": "operator", "doc": ["Return the number of occurrences of b in a."]}
{"index": 4057, "name": "operator.delitem", "module": "operator", "doc": ["Remove the value of a at index b."]}
{"index": 4058, "name": "operator.__delitem__", "module": "operator", "doc": ["Remove the value of a at index b."]}
{"index": 4059, "name": "operator.getitem", "module": "operator", "doc": ["Return the value of a at index b."]}
{"index": 4060, "name": "operator.__getitem__", "module": "operator", "doc": ["Return the value of a at index b."]}
{"index": 4061, "name": "operator.indexOf", "module": "operator", "doc": ["Return the index of the first of occurrence of b in a."]}
{"index": 4062, "name": "operator.setitem", "module": "operator", "doc": ["Set the value of a at index b to c."]}
{"index": 4063, "name": "operator.__setitem__", "module": "operator", "doc": ["Set the value of a at index b to c."]}
{"index": 4064, "name": "operator.length_hint", "module": "operator", "doc": ["Return an estimated length for the object o.", "First try to return its actual length, then an estimate using object.__length_hint__(), and finally return the default value."]}
{"index": 4065, "name": "operator.attrgetter", "module": "operator", "doc": ["Return a callable object that fetches attr from its operand.", "If more than one attribute is requested, returns a tuple of attributes.", "The attribute names can also contain dots.", "For example:", "Equivalent to:"]}
{"index": 4066, "name": "operator.itemgetter", "module": "operator", "doc": ["Return a callable object that fetches item from its operand using the operand\u2019s __getitem__() method.", "If multiple items are specified, returns a tuple of lookup values.", "For example:", "Equivalent to:", "The items can be any type accepted by the operand\u2019s __getitem__() method.", "Dictionaries accept any hashable value.", "Lists, tuples, and strings accept an index or a slice:", "Example of using itemgetter() to retrieve specific fields from a tuple record:"]}
{"index": 4067, "name": "operator.methodcaller", "module": "operator", "doc": ["Return a callable object that calls the method name on its operand.", "If additional arguments and/or keyword arguments are given, they will be given to the method as well.", "For example:", "Equivalent to:"]}
{"index": 4068, "name": "operator.iadd", "module": "operator", "doc": ["a = iadd(a, b) is equivalent to a += b."]}
{"index": 4069, "name": "operator.__iadd__", "module": "operator", "doc": ["a = iadd(a, b) is equivalent to a += b."]}
{"index": 4070, "name": "operator.iand", "module": "operator", "doc": ["a = iand(a, b) is equivalent to a &= b."]}
{"index": 4071, "name": "operator.__iand__", "module": "operator", "doc": ["a = iand(a, b) is equivalent to a &= b."]}
{"index": 4072, "name": "operator.iconcat", "module": "operator", "doc": ["a = iconcat(a, b) is equivalent to a += b for a and b sequences."]}
{"index": 4073, "name": "operator.__iconcat__", "module": "operator", "doc": ["a = iconcat(a, b) is equivalent to a += b for a and b sequences."]}
{"index": 4074, "name": "operator.ifloordiv", "module": "operator", "doc": ["a = ifloordiv(a, b) is equivalent to a //= b."]}
{"index": 4075, "name": "operator.__ifloordiv__", "module": "operator", "doc": ["a = ifloordiv(a, b) is equivalent to a //= b."]}
{"index": 4076, "name": "operator.ilshift", "module": "operator", "doc": ["a = ilshift(a, b) is equivalent to a <<= b."]}
{"index": 4077, "name": "operator.__ilshift__", "module": "operator", "doc": ["a = ilshift(a, b) is equivalent to a <<= b."]}
{"index": 4078, "name": "operator.imod", "module": "operator", "doc": ["a = imod(a, b) is equivalent to a %= b."]}
{"index": 4079, "name": "operator.__imod__", "module": "operator", "doc": ["a = imod(a, b) is equivalent to a %= b."]}
{"index": 4080, "name": "operator.imul", "module": "operator", "doc": ["a = imul(a, b) is equivalent to a *= b."]}
{"index": 4081, "name": "operator.__imul__", "module": "operator", "doc": ["a = imul(a, b) is equivalent to a *= b."]}
{"index": 4082, "name": "operator.imatmul", "module": "operator", "doc": ["a = imatmul(a, b) is equivalent to a @= b."]}
{"index": 4083, "name": "operator.__imatmul__", "module": "operator", "doc": ["a = imatmul(a, b) is equivalent to a @= b."]}
{"index": 4084, "name": "operator.ior", "module": "operator", "doc": ["a = ior(a, b) is equivalent to a |= b."]}
{"index": 4085, "name": "operator.__ior__", "module": "operator", "doc": ["a = ior(a, b) is equivalent to a |= b."]}
{"index": 4086, "name": "operator.ipow", "module": "operator", "doc": ["a = ipow(a, b) is equivalent to a **= b."]}
{"index": 4087, "name": "operator.__ipow__", "module": "operator", "doc": ["a = ipow(a, b) is equivalent to a **= b."]}
{"index": 4088, "name": "operator.irshift", "module": "operator", "doc": ["a = irshift(a, b) is equivalent to a >>= b."]}
{"index": 4089, "name": "operator.__irshift__", "module": "operator", "doc": ["a = irshift(a, b) is equivalent to a >>= b."]}
{"index": 4090, "name": "operator.isub", "module": "operator", "doc": ["a = isub(a, b) is equivalent to a -= b."]}
{"index": 4091, "name": "operator.__isub__", "module": "operator", "doc": ["a = isub(a, b) is equivalent to a -= b."]}
{"index": 4092, "name": "operator.itruediv", "module": "operator", "doc": ["a = itruediv(a, b) is equivalent to a /= b."]}
{"index": 4093, "name": "operator.__itruediv__", "module": "operator", "doc": ["a = itruediv(a, b) is equivalent to a /= b."]}
{"index": 4094, "name": "operator.ixor", "module": "operator", "doc": ["a = ixor(a, b) is equivalent to a ^= b."]}
{"index": 4095, "name": "operator.__ixor__", "module": "operator", "doc": ["a = ixor(a, b) is equivalent to a ^= b."]}
{"index": 4096, "name": "optparse.OptionGroup", "module": "optparse", "doc": ["where"]}
{"index": 4097, "name": "optparse.OptionParser.get_option_group", "module": "optparse", "doc": ["Return the OptionGroup to which the short or long option string opt_str (e.g.", "'-o' or '--option') belongs.", "If there\u2019s no such OptionGroup, return None."]}
{"index": 4098, "name": "optparse.OptionParser.print_version", "module": "optparse", "doc": ["Print the version message for the current program (self.version) to file (default stdout).", "As with print_usage(), any occurrence of %prog in self.version is replaced with the name of the current program.", "Does nothing if self.version is empty or undefined."]}
{"index": 4099, "name": "optparse.OptionParser.get_version", "module": "optparse", "doc": ["Same as print_version() but returns the version string instead of printing it."]}
{"index": 4100, "name": "optparse.OptionParser", "module": "optparse", "doc": ["The OptionParser constructor has no required arguments, but a number of optional keyword arguments.", "You should always pass them as keyword arguments, i.e.", "do not rely on the order in which the arguments are declared."]}
{"index": 4101, "name": "optparse.OptionParser.add_option", "module": "optparse", "doc": ["To define an option with only a short option string:", "And to define an option with only a long option string:", "The keyword arguments define attributes of the new Option object.", "The most important option attribute is action, and it largely determines which other attributes are relevant or required.", "If you pass irrelevant option attributes, or fail to pass required ones, optparse raises an OptionError exception explaining your mistake.", "An option\u2019s action determines what optparse does when it encounters this option on the command-line.", "The standard option actions hard-coded into optparse are:", "(If you don\u2019t supply an action, the default is \"store\".", "For this action, you may also supply type and dest option attributes; see Standard option actions.)"]}
{"index": 4102, "name": "optparse.Option.action", "module": "optparse", "doc": ["(default: \"store\")", "Determines optparse\u2019s behaviour when this option is seen on the command line; the available options are documented here."]}
{"index": 4103, "name": "optparse.Option.type", "module": "optparse", "doc": ["(default: \"string\")", "The argument type expected by this option (e.g., \"string\" or \"int\"); the available option types are documented here."]}
{"index": 4104, "name": "optparse.Option.dest", "module": "optparse", "doc": ["(default: derived from option strings)", "If the option\u2019s action implies writing or modifying a value somewhere, this tells optparse where to write it: dest names an attribute of the options object that optparse builds as it parses the command line."]}
{"index": 4105, "name": "optparse.Option.default", "module": "optparse", "doc": ["The value to use for this option\u2019s destination if the option is not seen on the command line.", "See also OptionParser.set_defaults()."]}
{"index": 4106, "name": "optparse.Option.nargs", "module": "optparse", "doc": ["(default: 1)", "How many arguments of type type should be consumed when this option is seen.", "If > 1, optparse will store a tuple of values to dest."]}
{"index": 4107, "name": "optparse.Option.const", "module": "optparse", "doc": ["For actions that store a constant value, the constant value to store."]}
{"index": 4108, "name": "optparse.Option.choices", "module": "optparse", "doc": ["For options of type \"choice\", the list of strings the user may choose from."]}
{"index": 4109, "name": "optparse.Option.callback", "module": "optparse", "doc": ["For options with action \"callback\", the callable to call when this option is seen.", "See section Option Callbacks for detail on the arguments passed to the callable."]}
{"index": 4110, "name": "optparse.Option.callback_args", "module": "optparse", "doc": ["Additional positional and keyword arguments to pass to callback after the four standard callback arguments."]}
{"index": 4111, "name": "optparse.Option.callback_kwargs", "module": "optparse", "doc": ["Additional positional and keyword arguments to pass to callback after the four standard callback arguments."]}
{"index": 4112, "name": "optparse.Option.help", "module": "optparse", "doc": ["Help text to print for this option when listing all available options after the user supplies a help option (such as --help).", "If no help text is supplied, the option will be listed without help text.", "To hide this option, use the special value optparse.SUPPRESS_HELP."]}
{"index": 4113, "name": "optparse.Option.metavar", "module": "optparse", "doc": ["(default: derived from option strings)", "Stand-in for the option argument(s) to use when printing help text.", "See section Tutorial for an example."]}
{"index": 4114, "name": "optparse.OptionParser.disable_interspersed_args", "module": "optparse", "doc": ["Set parsing to stop on the first non-option.", "For example, if -a and -b are both simple options that take no arguments, optparse normally accepts this syntax:", "and treats it as equivalent to", "To disable this feature, call disable_interspersed_args().", "This restores traditional Unix syntax, where option parsing stops with the first non-option argument.", "Use this if you have a command processor which runs another command which has options of its own and you want to make sure these options don\u2019t get confused.", "For example, each command might have a different set of options."]}
{"index": 4115, "name": "optparse.OptionParser.enable_interspersed_args", "module": "optparse", "doc": ["Set parsing to not stop on the first non-option, allowing interspersing switches with command arguments.", "This is the default behavior."]}
{"index": 4116, "name": "optparse.OptionParser.get_option", "module": "optparse", "doc": ["Returns the Option instance with the option string opt_str, or None if no options have that option string."]}
{"index": 4117, "name": "optparse.OptionParser.has_option", "module": "optparse", "doc": ["Return true if the OptionParser has an option with option string opt_str (e.g., -q or --verbose)."]}
{"index": 4118, "name": "optparse.OptionParser.remove_option", "module": "optparse", "doc": ["If the OptionParser has an option corresponding to opt_str, that option is removed.", "If that option provided any other option strings, all of those option strings become invalid.", "If opt_str does not occur in any option belonging to this OptionParser, raises ValueError."]}
{"index": 4119, "name": "optparse.OptionParser.set_usage", "module": "optparse", "doc": ["Set the usage string according to the rules described above for the usage constructor keyword argument.", "Passing None sets the default usage string; use optparse.SUPPRESS_USAGE to suppress a usage message."]}
{"index": 4120, "name": "optparse.OptionParser.print_usage", "module": "optparse", "doc": ["Print the usage message for the current program (self.usage) to file (default stdout).", "Any occurrence of the string %prog in self.usage is replaced with the name of the current program.", "Does nothing if self.usage is empty or not defined."]}
{"index": 4121, "name": "optparse.OptionParser.get_usage", "module": "optparse", "doc": ["Same as print_usage() but returns the usage string instead of printing it."]}
{"index": 4122, "name": "optparse.OptionParser.set_defaults", "module": "optparse", "doc": ["Set default values for several option destinations at once.", "Using set_defaults() is the preferred way to set default values for options, since multiple options can share the same destination.", "For example, if several \u201cmode\u201d options all set the same destination, any one of them can set the default, and the last one wins:", "To avoid this confusion, use set_defaults():"]}
{"index": 4123, "name": "optparse.Option.TYPES", "module": "optparse", "doc": ["A tuple of type names; in your subclass, simply define a new tuple TYPES that builds on the standard one."]}
{"index": 4124, "name": "optparse.Option.TYPE_CHECKER", "module": "optparse", "doc": ["A dictionary mapping type names to type-checking functions.", "A type-checking function has the following signature:", "where option is an Option instance, opt is an option string (e.g., -f), and value is the string from the command line that must be checked and converted to your desired type.", "check_mytype() should return an object of the hypothetical type mytype.", "The value returned by a type-checking function will wind up in the OptionValues instance returned by OptionParser.parse_args(), or be passed to a callback as the value parameter.", "Your type-checking function should raise OptionValueError if it encounters any problems.", "OptionValueError takes a single string argument, which is passed as-is to OptionParser\u2019s error() method, which in turn prepends the program name and the string \"error:\" and prints everything to stderr before terminating the process."]}
{"index": 4125, "name": "optparse.Option.ACTIONS", "module": "optparse", "doc": ["All actions must be listed in ACTIONS."]}
{"index": 4126, "name": "optparse.Option.STORE_ACTIONS", "module": "optparse", "doc": ["\u201cstore\u201d actions are additionally listed here."]}
{"index": 4127, "name": "optparse.Option.TYPED_ACTIONS", "module": "optparse", "doc": ["\u201ctyped\u201d actions are additionally listed here."]}
{"index": 4128, "name": "optparse.Option.ALWAYS_TYPED_ACTIONS", "module": "optparse", "doc": ["Actions that always take a type (i.e.", "whose options always take a value) are additionally listed here.", "The only effect of this is that optparse assigns the default type, \"string\", to options with no explicit type whose action is listed in ALWAYS_TYPED_ACTIONS."]}
{"index": 4129, "name": "os.error", "module": "os", "doc": ["An alias for the built-in OSError exception."]}
{"index": 4130, "name": "os.name", "module": "os", "doc": ["The name of the operating system dependent module imported.", "The following names have currently been registered: 'posix', 'nt', 'java'."]}
{"index": 4131, "name": "os.ctermid", "module": "os", "doc": ["Return the filename corresponding to the controlling terminal of the process.", "Availability: Unix."]}
{"index": 4132, "name": "os.environ", "module": "os", "doc": ["A mapping object representing the string environment.", "For example, environ['HOME'] is the pathname of your home directory (on some platforms), and is equivalent to getenv(\"HOME\") in C.", "This mapping is captured the first time the os module is imported, typically during Python startup as part of processing site.py.", "Changes to the environment made after this time are not reflected in os.environ, except for changes made by modifying os.environ directly.", "If the platform supports the putenv() function, this mapping may be used to modify the environment as well as query the environment.", "putenv() will be called automatically when the mapping is modified.", "On Unix, keys and values use sys.getfilesystemencoding() and 'surrogateescape' error handler.", "Use environb if you would like to use a different encoding.", "If putenv() is not provided, a modified copy of this mapping  may be passed to the appropriate process-creation functions to cause  child processes to use a modified environment.", "If the platform supports the unsetenv() function, you can delete items in this mapping to unset environment variables.", "unsetenv() will be called automatically when an item is deleted from os.environ, and when one of the pop() or clear() methods is called."]}
{"index": 4133, "name": "os.environb", "module": "os", "doc": ["Bytes version of environ: a mapping object representing the environment as byte strings.", "environ and environb are synchronized (modify environb updates environ, and vice versa).", "environb is only available if supports_bytes_environ is True."]}
{"index": 4134, "name": "os.fsencode", "module": "os", "doc": ["Encode path-like filename to the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return bytes unchanged.", "fsdecode() is the reverse function."]}
{"index": 4135, "name": "os.fsdecode", "module": "os", "doc": ["Decode the path-like filename from the filesystem encoding with 'surrogateescape' error handler, or 'strict' on Windows; return str unchanged.", "fsencode() is the reverse function."]}
{"index": 4136, "name": "os.fspath", "module": "os", "doc": ["Return the file system representation of the path.", "If str or bytes is passed in, it is returned unchanged.", "Otherwise __fspath__() is called and its value is returned as long as it is a str or bytes object.", "In all other cases, TypeError is raised."]}
{"index": 4137, "name": "os.PathLike", "module": "os", "doc": ["An abstract base class for objects representing a file system path, e.g.", "pathlib.PurePath."]}
{"index": 4138, "name": "os.PathLike.__fspath__", "module": "os", "doc": ["Return the file system path representation of the object.", "The method should only return a str or bytes object, with the preference being for str."]}
{"index": 4139, "name": "os.getenv", "module": "os", "doc": ["Return the value of the environment variable key if it exists, or default if it doesn\u2019t.", "key, default and the result are str.", "On Unix, keys and values are decoded with sys.getfilesystemencoding() and 'surrogateescape' error handler.", "Use os.getenvb() if you would like to use a different encoding.", "Availability: most flavors of Unix, Windows."]}
{"index": 4140, "name": "os.getenvb", "module": "os", "doc": ["Return the value of the environment variable key if it exists, or default if it doesn\u2019t.", "key, default and the result are bytes.", "getenvb() is only available if supports_bytes_environ is True.", "Availability: most flavors of Unix."]}
{"index": 4141, "name": "os.get_exec_path", "module": "os", "doc": ["Returns the list of directories that will be searched for a named executable, similar to a shell, when launching a process.", "env, when specified, should be an environment variable dictionary to lookup the PATH in.", "By default, when env is None, environ is used."]}
{"index": 4142, "name": "os.getegid", "module": "os", "doc": ["Return the effective group id of the current process.", "This corresponds to the \u201cset id\u201d bit on the file being executed in the current process.", "Availability: Unix."]}
{"index": 4143, "name": "os.geteuid", "module": "os", "doc": ["Return the current process\u2019s effective user id.", "Availability: Unix."]}
{"index": 4144, "name": "os.getgid", "module": "os", "doc": ["Return the real group id of the current process.", "Availability: Unix."]}
{"index": 4145, "name": "os.getgrouplist", "module": "os", "doc": ["Return list of group ids that user belongs to.", "If group is not in the list, it is included; typically, group is specified as the group ID field from the password record for user.", "Availability: Unix."]}
{"index": 4146, "name": "os.getgroups", "module": "os", "doc": ["Return list of supplemental group ids associated with the current process.", "Availability: Unix."]}
{"index": 4147, "name": "os.getlogin", "module": "os", "doc": ["Return the name of the user logged in on the controlling terminal of the process.", "For most purposes, it is more useful to use getpass.getuser() since the latter checks the environment variables LOGNAME or USERNAME to find out who the user is, and falls back to pwd.getpwuid(os.getuid())[0] to get the login name of the current real user id.", "Availability: Unix, Windows."]}
{"index": 4148, "name": "os.getpgid", "module": "os", "doc": ["Return the process group id of the process with process id pid.", "If pid is 0, the process group id of the current process is returned.", "Availability: Unix."]}
{"index": 4149, "name": "os.getpgrp", "module": "os", "doc": ["Return the id of the current process group.", "Availability: Unix."]}
{"index": 4150, "name": "os.getpid", "module": "os", "doc": ["Return the current process id."]}
{"index": 4151, "name": "os.getppid", "module": "os", "doc": ["Return the parent\u2019s process id.", "When the parent process has exited, on Unix the id returned is the one of the init process (1), on Windows it is still the same id, which may be already reused by another process.", "Availability: Unix, Windows."]}
{"index": 4152, "name": "os.getpriority", "module": "os", "doc": ["Get program scheduling priority.", "The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER).", "A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.", "Availability: Unix."]}
{"index": 4153, "name": "os.PRIO_PROCESS", "module": "os", "doc": ["Parameters for the getpriority() and setpriority() functions.", "Availability: Unix."]}
{"index": 4154, "name": "os.PRIO_PGRP", "module": "os", "doc": ["Parameters for the getpriority() and setpriority() functions.", "Availability: Unix."]}
{"index": 4155, "name": "os.PRIO_USER", "module": "os", "doc": ["Parameters for the getpriority() and setpriority() functions.", "Availability: Unix."]}
{"index": 4156, "name": "os.getresuid", "module": "os", "doc": ["Return a tuple (ruid, euid, suid) denoting the current process\u2019s real, effective, and saved user ids.", "Availability: Unix."]}
{"index": 4157, "name": "os.getresgid", "module": "os", "doc": ["Return a tuple (rgid, egid, sgid) denoting the current process\u2019s real, effective, and saved group ids.", "Availability: Unix."]}
{"index": 4158, "name": "os.getuid", "module": "os", "doc": ["Return the current process\u2019s real user id.", "Availability: Unix."]}
{"index": 4159, "name": "os.initgroups", "module": "os", "doc": ["Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id.", "Availability: Unix."]}
{"index": 4160, "name": "os.putenv", "module": "os", "doc": ["Set the environment variable named key to the string value.", "Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().", "Availability: most flavors of Unix, Windows.", "When putenv() is supported, assignments to items in os.environ are automatically translated into corresponding calls to putenv(); however, calls to putenv() don\u2019t update os.environ, so it is actually preferable to assign to items of os.environ."]}
{"index": 4161, "name": "os.setegid", "module": "os", "doc": ["Set the current process\u2019s effective group id.", "Availability: Unix."]}
{"index": 4162, "name": "os.seteuid", "module": "os", "doc": ["Set the current process\u2019s effective user id.", "Availability: Unix."]}
{"index": 4163, "name": "os.setgid", "module": "os", "doc": ["Set the current process\u2019 group id.", "Availability: Unix."]}
{"index": 4164, "name": "os.setgroups", "module": "os", "doc": ["Set the list of supplemental group ids associated with the current process to groups.", "groups must be a sequence, and each element must be an integer identifying a group.", "This operation is typically available only to the superuser.", "Availability: Unix."]}
{"index": 4165, "name": "os.setpgrp", "module": "os", "doc": ["Call the system call setpgrp() or setpgrp(0, 0) depending on which version is implemented (if any).", "See the Unix manual for the semantics.", "Availability: Unix."]}
{"index": 4166, "name": "os.setpgid", "module": "os", "doc": ["Call the system call setpgid() to set the process group id of the process with id pid to the process group with id pgrp.", "See the Unix manual for the semantics.", "Availability: Unix."]}
{"index": 4167, "name": "os.setpriority", "module": "os", "doc": ["Set program scheduling priority.", "The value which is one of PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who is interpreted relative to which (a process identifier for PRIO_PROCESS, process group identifier for PRIO_PGRP, and a user ID for PRIO_USER).", "A zero value for who denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.", "priority is a value in the range -20 to 19.", "The default priority is 0; lower priorities cause more favorable scheduling.", "Availability: Unix."]}
{"index": 4168, "name": "os.setregid", "module": "os", "doc": ["Set the current process\u2019s real and effective group ids.", "Availability: Unix."]}
{"index": 4169, "name": "os.setresgid", "module": "os", "doc": ["Set the current process\u2019s real, effective, and saved group ids.", "Availability: Unix."]}
{"index": 4170, "name": "os.setresuid", "module": "os", "doc": ["Set the current process\u2019s real, effective, and saved user ids.", "Availability: Unix."]}
{"index": 4171, "name": "os.setreuid", "module": "os", "doc": ["Set the current process\u2019s real and effective user ids.", "Availability: Unix."]}
{"index": 4172, "name": "os.getsid", "module": "os", "doc": ["Call the system call getsid().", "See the Unix manual for the semantics.", "Availability: Unix."]}
{"index": 4173, "name": "os.setsid", "module": "os", "doc": ["Call the system call setsid().", "See the Unix manual for the semantics.", "Availability: Unix."]}
{"index": 4174, "name": "os.setuid", "module": "os", "doc": ["Set the current process\u2019s user id.", "Availability: Unix."]}
{"index": 4175, "name": "os.strerror", "module": "os", "doc": ["Return the error message corresponding to the error code in code.", "On platforms where strerror() returns NULL when given an unknown error number, ValueError is raised."]}
{"index": 4176, "name": "os.supports_bytes_environ", "module": "os", "doc": ["True if the native OS type of the environment is bytes (eg.", "False on Windows)."]}
{"index": 4177, "name": "os.umask", "module": "os", "doc": ["Set the current numeric umask and return the previous umask."]}
{"index": 4178, "name": "os.uname", "module": "os", "doc": ["Returns information identifying the current operating system.", "The return value is an object with five attributes:", "For backwards compatibility, this object is also iterable, behaving like a five-tuple containing sysname, nodename, release, version, and machine in that order.", "Some systems truncate nodename to 8 characters or to the leading component; a better way to get the hostname is socket.gethostname()  or even socket.gethostbyaddr(socket.gethostname()).", "Availability: recent flavors of Unix."]}
{"index": 4179, "name": "os.unsetenv", "module": "os", "doc": ["Unset (delete) the environment variable named key.", "Such changes to the environment affect subprocesses started with os.system(), popen() or fork() and execv().", "When unsetenv() is supported, deletion of items in os.environ is automatically translated into a corresponding call to unsetenv(); however, calls to unsetenv() don\u2019t update os.environ, so it is actually preferable to delete items of os.environ.", "Availability: most flavors of Unix, Windows."]}
{"index": 4180, "name": "os.fdopen", "module": "os", "doc": ["Return an open file object connected to the file descriptor fd.", "This is an alias of the open() built-in function and accepts the same arguments.", "The only difference is that the first argument of fdopen() must always be an integer."]}
{"index": 4181, "name": "os.close", "module": "os", "doc": ["Close file descriptor fd."]}
{"index": 4182, "name": "os.closerange", "module": "os", "doc": ["Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors.", "Equivalent to (but much faster than):"]}
{"index": 4183, "name": "os.device_encoding", "module": "os", "doc": ["Return a string describing the encoding of the device associated with fd if it is connected to a terminal; else return None."]}
{"index": 4184, "name": "os.dup", "module": "os", "doc": ["Return a duplicate of file descriptor fd.", "The new file descriptor is non-inheritable.", "On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: stderr), the new file descriptor is inheritable."]}
{"index": 4185, "name": "os.dup2", "module": "os", "doc": ["Duplicate file descriptor fd to fd2, closing the latter first if necessary.", "Return fd2.", "The new file descriptor is inheritable by default or non-inheritable if inheritable is False."]}
{"index": 4186, "name": "os.fchmod", "module": "os", "doc": ["Change the mode of the file given by fd to the numeric mode.", "See the docs for chmod() for possible values of mode.", "As of Python 3.3, this is equivalent to os.chmod(fd, mode).", "Availability: Unix."]}
{"index": 4187, "name": "os.fchown", "module": "os", "doc": ["Change the owner and group id of the file given by fd to the numeric uid and gid.", "To leave one of the ids unchanged, set it to -1.", "See chown().", "As of Python 3.3, this is equivalent to os.chown(fd, uid, gid).", "Availability: Unix."]}
{"index": 4188, "name": "os.fdatasync", "module": "os", "doc": ["Force write of file with filedescriptor fd to disk.", "Does not force update of metadata.", "Availability: Unix."]}
{"index": 4189, "name": "os.fpathconf", "module": "os", "doc": ["Return system configuration information relevant to an open file.", "name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).", "Some platforms define additional names as well.", "The names known to the host operating system are given in the pathconf_names dictionary.", "For configuration variables not included in that mapping, passing an integer for name is also accepted.", "If name is a string and is not known, ValueError is raised.", "If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number.", "As of Python 3.3, this is equivalent to os.pathconf(fd, name).", "Availability: Unix."]}
{"index": 4190, "name": "os.fstat", "module": "os", "doc": ["Get the status of the file descriptor fd.", "Return a stat_result object.", "As of Python 3.3, this is equivalent to os.stat(fd)."]}
{"index": 4191, "name": "os.fstatvfs", "module": "os", "doc": ["Return information about the filesystem containing the file associated with file descriptor fd, like statvfs().", "As of Python 3.3, this is equivalent to os.statvfs(fd).", "Availability: Unix."]}
{"index": 4192, "name": "os.fsync", "module": "os", "doc": ["Force write of file with filedescriptor fd to disk.", "On Unix, this calls the native fsync() function; on Windows, the MS _commit() function.", "If you\u2019re starting with a buffered Python file object f, first do f.flush(), and then do os.fsync(f.fileno()), to ensure that all internal buffers associated with f are written to disk.", "Availability: Unix, Windows."]}
{"index": 4193, "name": "os.ftruncate", "module": "os", "doc": ["Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size.", "As of Python 3.3, this is equivalent to os.truncate(fd, length).", "Availability: Unix, Windows."]}
{"index": 4194, "name": "os.get_blocking", "module": "os", "doc": ["Get the blocking mode of the file descriptor: False if the O_NONBLOCK flag is set, True if the flag is cleared.", "See also set_blocking() and socket.socket.setblocking().", "Availability: Unix."]}
{"index": 4195, "name": "os.isatty", "module": "os", "doc": ["Return True if the file descriptor fd is open and connected to a tty(-like) device, else False."]}
{"index": 4196, "name": "os.lockf", "module": "os", "doc": ["Apply, test or remove a POSIX lock on an open file descriptor.", "fd is an open file descriptor.", "cmd specifies the command to use - one of F_LOCK, F_TLOCK, F_ULOCK or F_TEST.", "len specifies the section of the file to lock.", "Availability: Unix."]}
{"index": 4197, "name": "os.F_LOCK", "module": "os", "doc": ["Flags that specify what action lockf() will take.", "Availability: Unix."]}
{"index": 4198, "name": "os.F_TLOCK", "module": "os", "doc": ["Flags that specify what action lockf() will take.", "Availability: Unix."]}
{"index": 4199, "name": "os.F_ULOCK", "module": "os", "doc": ["Flags that specify what action lockf() will take.", "Availability: Unix."]}
{"index": 4200, "name": "os.F_TEST", "module": "os", "doc": ["Flags that specify what action lockf() will take.", "Availability: Unix."]}
{"index": 4201, "name": "os.lseek", "module": "os", "doc": ["Set the current position of file descriptor fd to position pos, modified by how: SEEK_SET or 0 to set the position relative to the beginning of the file; SEEK_CUR or 1 to set it relative to the current position; SEEK_END or 2 to set it relative to the end of the file.", "Return the new cursor position in bytes, starting from the beginning."]}
{"index": 4202, "name": "os.SEEK_SET", "module": "os", "doc": ["Parameters to the lseek() function.", "Their values are 0, 1, and 2, respectively."]}
{"index": 4203, "name": "os.SEEK_CUR", "module": "os", "doc": ["Parameters to the lseek() function.", "Their values are 0, 1, and 2, respectively."]}
{"index": 4204, "name": "os.SEEK_END", "module": "os", "doc": ["Parameters to the lseek() function.", "Their values are 0, 1, and 2, respectively."]}
{"index": 4205, "name": "os.open", "module": "os", "doc": ["Open the file path and set various flags according to flags and possibly its mode according to mode.", "When computing mode, the current umask value is first masked out.", "Return the file descriptor for the newly opened file.", "The new file descriptor is non-inheritable.", "For a description of the flag and mode values, see the C run-time documentation; flag constants (like O_RDONLY and O_WRONLY) are defined in the os module.", "In particular, on Windows adding O_BINARY is needed to open files in binary mode.", "This function can support paths relative to directory descriptors with the dir_fd parameter."]}
{"index": 4206, "name": "os.O_RDONLY", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4207, "name": "os.O_WRONLY", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4208, "name": "os.O_RDWR", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4209, "name": "os.O_APPEND", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4210, "name": "os.O_CREAT", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4211, "name": "os.O_EXCL", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4212, "name": "os.O_TRUNC", "module": "os", "doc": ["The above constants are available on Unix and Windows."]}
{"index": 4213, "name": "os.O_DSYNC", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4214, "name": "os.O_RSYNC", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4215, "name": "os.O_SYNC", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4216, "name": "os.O_NDELAY", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4217, "name": "os.O_NONBLOCK", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4218, "name": "os.O_NOCTTY", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4219, "name": "os.O_CLOEXEC", "module": "os", "doc": ["The above constants are only available on Unix."]}
{"index": 4220, "name": "os.O_BINARY", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4221, "name": "os.O_NOINHERIT", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4222, "name": "os.O_SHORT_LIVED", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4223, "name": "os.O_TEMPORARY", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4224, "name": "os.O_RANDOM", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4225, "name": "os.O_SEQUENTIAL", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4226, "name": "os.O_TEXT", "module": "os", "doc": ["The above constants are only available on Windows."]}
{"index": 4227, "name": "os.O_ASYNC", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4228, "name": "os.O_DIRECT", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4229, "name": "os.O_DIRECTORY", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4230, "name": "os.O_NOFOLLOW", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4231, "name": "os.O_NOATIME", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4232, "name": "os.O_PATH", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4233, "name": "os.O_TMPFILE", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4234, "name": "os.O_SHLOCK", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4235, "name": "os.O_EXLOCK", "module": "os", "doc": ["The above constants are extensions and not present if they are not defined by the C library."]}
{"index": 4236, "name": "os.openpty", "module": "os", "doc": ["Open a new pseudo-terminal pair.", "Return a pair of file descriptors (master, slave) for the pty and the tty, respectively.", "The new file descriptors are non-inheritable.", "For a (slightly) more portable approach, use the pty module.", "Availability: some flavors of Unix."]}
{"index": 4237, "name": "os.pipe", "module": "os", "doc": ["Create a pipe.", "Return a pair of file descriptors (r, w) usable for reading and writing, respectively.", "The new file descriptor is non-inheritable.", "Availability: Unix, Windows."]}
{"index": 4238, "name": "os.pipe2", "module": "os", "doc": ["Create a pipe with flags set atomically.", "flags can be constructed by ORing together one or more of these values: O_NONBLOCK, O_CLOEXEC.", "Return a pair of file descriptors (r, w) usable for reading and writing, respectively.", "Availability: some flavors of Unix."]}
{"index": 4239, "name": "os.posix_fallocate", "module": "os", "doc": ["Ensures that enough disk space is allocated for the file specified by fd starting from offset and continuing for len bytes.", "Availability: Unix."]}
{"index": 4240, "name": "os.posix_fadvise", "module": "os", "doc": ["Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations.", "The advice applies to the region of the file specified by fd starting at offset and continuing for len bytes.", "advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL, POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED or POSIX_FADV_DONTNEED.", "Availability: Unix."]}
{"index": 4241, "name": "os.POSIX_FADV_NORMAL", "module": "os", "doc": ["Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "Availability: Unix."]}
{"index": 4242, "name": "os.POSIX_FADV_SEQUENTIAL", "module": "os", "doc": ["Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "Availability: Unix."]}
{"index": 4243, "name": "os.POSIX_FADV_RANDOM", "module": "os", "doc": ["Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "Availability: Unix."]}
{"index": 4244, "name": "os.POSIX_FADV_NOREUSE", "module": "os", "doc": ["Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "Availability: Unix."]}
{"index": 4245, "name": "os.POSIX_FADV_WILLNEED", "module": "os", "doc": ["Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "Availability: Unix."]}
{"index": 4246, "name": "os.POSIX_FADV_DONTNEED", "module": "os", "doc": ["Flags that can be used in advice in posix_fadvise() that specify the access pattern that is likely to be used.", "Availability: Unix."]}
{"index": 4247, "name": "os.pread", "module": "os", "doc": ["Read at most n bytes from file descriptor fd at a position of offset, leaving the file offset unchanged.", "Return a bytestring containing the bytes read.", "If the end of the file referred to by fd has been reached, an empty bytes object is returned.", "Availability: Unix."]}
{"index": 4248, "name": "os.preadv", "module": "os", "doc": ["Read from a file descriptor fd at a position of offset into mutable bytes-like objects buffers, leaving the file offset unchanged.", "Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data.", "The flags argument contains a bitwise OR of zero or more of the following flags:", "Return the total number of bytes actually read which can be less than the total capacity of all the objects.", "The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.", "Combine the functionality of os.readv() and os.pread().", "Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer, OpenBSD 2.7 and newer.", "Using flags requires Linux 4.6 or newer."]}
{"index": 4249, "name": "os.RWF_NOWAIT", "module": "os", "doc": ["Do not wait for data which is not immediately available.", "If this flag is specified, the system call will return instantly if it would have to read data from the backing storage or wait for a lock.", "If some data was successfully read, it will return the number of bytes read.", "If no bytes were read, it will return -1 and set errno to errno.EAGAIN.", "Availability: Linux 4.14 and newer."]}
{"index": 4250, "name": "os.RWF_HIPRI", "module": "os", "doc": ["High priority read/write.", "Allows block-based filesystems to use polling of the device, which provides lower latency, but may use additional resources.", "Currently, on Linux, this feature is usable only on a file descriptor opened using the O_DIRECT flag.", "Availability: Linux 4.6 and newer."]}
{"index": 4251, "name": "os.pwrite", "module": "os", "doc": ["Write the bytestring in str to file descriptor fd at position of offset, leaving the file offset unchanged.", "Return the number of bytes actually written.", "Availability: Unix."]}
{"index": 4252, "name": "os.pwritev", "module": "os", "doc": ["Write the buffers contents to file descriptor fd at a offset offset, leaving the file offset unchanged.", "buffers must be a sequence of bytes-like objects.", "Buffers are processed in array order.", "Entire contents of the first buffer is written before proceeding to the second, and so on.", "The flags argument contains a bitwise OR of zero or more of the following flags:", "Return the total number of bytes actually written.", "The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.", "Combine the functionality of os.writev() and os.pwrite().", "Availability: Linux 2.6.30 and newer, FreeBSD 6.0 and newer, OpenBSD 2.7 and newer.", "Using flags requires Linux 4.7 or newer."]}
{"index": 4253, "name": "os.RWF_DSYNC", "module": "os", "doc": ["Provide a per-write equivalent of the O_DSYNC open(2) flag.", "This flag effect applies only to the data range written by the system call.", "Availability: Linux 4.7 and newer."]}
{"index": 4254, "name": "os.RWF_SYNC", "module": "os", "doc": ["Provide a per-write equivalent of the O_SYNC open(2) flag.", "This flag effect applies only to the data range written by the system call.", "Availability: Linux 4.7 and newer."]}
{"index": 4255, "name": "os.read", "module": "os", "doc": ["Read at most n bytes from file descriptor fd.", "Return a bytestring containing the bytes read.", "If the end of the file referred to by fd has been reached, an empty bytes object is returned."]}
{"index": 4256, "name": "os.sendfile", "module": "os", "doc": ["Copy count bytes from file descriptor in to file descriptor out starting at offset.", "Return the number of bytes sent.", "When EOF is reached return 0.", "The first function notation is supported by all platforms that define sendfile().", "On Linux, if offset is given as None, the bytes are read from the current position of in and the position of in is updated.", "The second case may be used on Mac OS X and FreeBSD where headers and trailers are arbitrary sequences of buffers that are written before and after the data from in is written.", "It returns the same as the first case.", "On Mac OS X and FreeBSD, a value of 0 for count specifies to send until the end of in is reached.", "All platforms support sockets as out file descriptor, and some platforms allow other types (e.g.", "regular file, pipe) as well.", "Cross-platform applications should not use headers, trailers and flags arguments.", "Availability: Unix."]}
{"index": 4257, "name": "os.set_blocking", "module": "os", "doc": ["Set the blocking mode of the specified file descriptor.", "Set the O_NONBLOCK flag if blocking is False, clear the flag otherwise.", "See also get_blocking() and socket.socket.setblocking().", "Availability: Unix."]}
{"index": 4258, "name": "os.SF_NODISKIO", "module": "os", "doc": ["Parameters to the sendfile() function, if the implementation supports them.", "Availability: Unix."]}
{"index": 4259, "name": "os.SF_MNOWAIT", "module": "os", "doc": ["Parameters to the sendfile() function, if the implementation supports them.", "Availability: Unix."]}
{"index": 4260, "name": "os.SF_SYNC", "module": "os", "doc": ["Parameters to the sendfile() function, if the implementation supports them.", "Availability: Unix."]}
{"index": 4261, "name": "os.readv", "module": "os", "doc": ["Read from a file descriptor fd into a number of mutable bytes-like objects buffers.", "Transfer data into each buffer until it is full and then move on to the next buffer in the sequence to hold the rest of the data.", "Return the total number of bytes actually read which can be less than the total capacity of all the objects.", "The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.", "Availability: Unix."]}
{"index": 4262, "name": "os.tcgetpgrp", "module": "os", "doc": ["Return the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()).", "Availability: Unix."]}
{"index": 4263, "name": "os.tcsetpgrp", "module": "os", "doc": ["Set the process group associated with the terminal given by fd (an open file descriptor as returned by os.open()) to pg.", "Availability: Unix."]}
{"index": 4264, "name": "os.ttyname", "module": "os", "doc": ["Return a string which specifies the terminal device associated with file descriptor fd.", "If fd is not associated with a terminal device, an exception is raised.", "Availability: Unix."]}
{"index": 4265, "name": "os.write", "module": "os", "doc": ["Write the bytestring in str to file descriptor fd.", "Return the number of bytes actually written."]}
{"index": 4266, "name": "os.writev", "module": "os", "doc": ["Write the contents of buffers to file descriptor fd.", "buffers must be a sequence of bytes-like objects.", "Buffers are processed in array order.", "Entire contents of the first buffer is written before proceeding to the second, and so on.", "Returns the total number of bytes actually written.", "The operating system may set a limit (sysconf() value 'SC_IOV_MAX') on the number of buffers that can be used.", "Availability: Unix."]}
{"index": 4267, "name": "os.get_terminal_size", "module": "os", "doc": ["Return the size of the terminal window as (columns, lines), tuple of type terminal_size.", "The optional argument fd (default STDOUT_FILENO, or standard output) specifies which file descriptor should be queried.", "If the file descriptor is not connected to a terminal, an OSError is raised.", "shutil.get_terminal_size() is the high-level function which should normally be used, os.get_terminal_size is the low-level implementation.", "Availability: Unix, Windows."]}
{"index": 4268, "name": "os.terminal_size", "module": "os", "doc": ["A subclass of tuple, holding (columns, lines) of the terminal window size."]}
{"index": 4269, "name": "os.terminal_size.columns", "module": "os", "doc": ["Width of the terminal window in characters."]}
{"index": 4270, "name": "os.terminal_size.lines", "module": "os", "doc": ["Height of the terminal window in characters."]}
{"index": 4271, "name": "os.get_inheritable", "module": "os", "doc": ["Get the \u201cinheritable\u201d flag of the specified file descriptor (a boolean)."]}
{"index": 4272, "name": "os.set_inheritable", "module": "os", "doc": ["Set the \u201cinheritable\u201d flag of the specified file descriptor."]}
{"index": 4273, "name": "os.get_handle_inheritable", "module": "os", "doc": ["Get the \u201cinheritable\u201d flag of the specified handle (a boolean).", "Availability: Windows."]}
{"index": 4274, "name": "os.set_handle_inheritable", "module": "os", "doc": ["Set the \u201cinheritable\u201d flag of the specified handle.", "Availability: Windows."]}
{"index": 4275, "name": "os.access", "module": "os", "doc": ["Use the real uid/gid to test for access to path.", "Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path.", "mode should be F_OK to test the existence of path, or it can be the inclusive OR of one or more of R_OK, W_OK, and X_OK to test permissions.", "Return True if access is allowed, False if not.", "See the Unix man page access(2) for more information.", "This function can support specifying paths relative to directory descriptors and not following symlinks.", "If effective_ids is True, access() will perform its access checks using the effective uid/gid instead of the real uid/gid.", "effective_ids may not be supported on your platform; you can check whether or not it is available using os.supports_effective_ids.", "If it is unavailable, using it will raise a NotImplementedError."]}
{"index": 4276, "name": "os.F_OK", "module": "os", "doc": ["Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively."]}
{"index": 4277, "name": "os.R_OK", "module": "os", "doc": ["Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively."]}
{"index": 4278, "name": "os.W_OK", "module": "os", "doc": ["Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively."]}
{"index": 4279, "name": "os.X_OK", "module": "os", "doc": ["Values to pass as the mode parameter of access() to test the existence, readability, writability and executability of path, respectively."]}
{"index": 4280, "name": "os.chdir", "module": "os", "doc": ["Change the current working directory to path.", "This function can support specifying a file descriptor.", "The descriptor must refer to an opened directory, not an open file.", "This function can raise OSError and subclasses such as FileNotFoundError, PermissionError, and NotADirectoryError."]}
{"index": 4281, "name": "os.chflags", "module": "os", "doc": ["Set the flags of path to the numeric flags.", "flags may take a combination (bitwise OR) of the following values (as defined in the stat module):", "This function can support not following symlinks.", "Availability: Unix."]}
{"index": 4282, "name": "os.chmod", "module": "os", "doc": ["Change the mode of path to the numeric mode.", "mode may take one of the following values (as defined in the stat module) or bitwise ORed combinations of them:", "This function can support specifying a file descriptor, paths relative to directory descriptors and not following symlinks."]}
{"index": 4283, "name": "os.chown", "module": "os", "doc": ["Change the owner and group id of path to the numeric uid and gid.", "To leave one of the ids unchanged, set it to -1.", "This function can support specifying a file descriptor, paths relative to directory descriptors and not following symlinks.", "See shutil.chown() for a higher-level function that accepts names in addition to numeric ids.", "Availability: Unix."]}
{"index": 4284, "name": "os.chroot", "module": "os", "doc": ["Change the root directory of the current process to path.", "Availability: Unix."]}
{"index": 4285, "name": "os.fchdir", "module": "os", "doc": ["Change the current working directory to the directory represented by the file descriptor fd.", "The descriptor must refer to an opened directory, not an open file.", "As of Python 3.3, this is equivalent to os.chdir(fd).", "Availability: Unix."]}
{"index": 4286, "name": "os.getcwd", "module": "os", "doc": ["Return a string representing the current working directory."]}
{"index": 4287, "name": "os.getcwdb", "module": "os", "doc": ["Return a bytestring representing the current working directory."]}
{"index": 4288, "name": "os.lchflags", "module": "os", "doc": ["Set the flags of path to the numeric flags, like chflags(), but do not follow symbolic links.", "As of Python 3.3, this is equivalent to os.chflags(path, flags, follow_symlinks=False).", "Availability: Unix."]}
{"index": 4289, "name": "os.lchmod", "module": "os", "doc": ["Change the mode of path to the numeric mode.", "If path is a symlink, this affects the symlink rather than the target.", "See the docs for chmod() for possible values of mode.", "As of Python 3.3, this is equivalent to os.chmod(path, mode, follow_symlinks=False).", "Availability: Unix."]}
{"index": 4290, "name": "os.lchown", "module": "os", "doc": ["Change the owner and group id of path to the numeric uid and gid.", "This function will not follow symbolic links.", "As of Python 3.3, this is equivalent to os.chown(path, uid, gid, follow_symlinks=False).", "Availability: Unix."]}
{"index": 4291, "name": "os.link", "module": "os", "doc": ["Create a hard link pointing to src named dst.", "This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors, and not following symlinks.", "Availability: Unix, Windows."]}
{"index": 4292, "name": "os.listdir", "module": "os", "doc": ["Return a list containing the names of the entries in the directory given by path.", "The list is in arbitrary order, and does not include the special entries '.'", "and '..' even if they are present in the directory.", "path may be a path-like object.", "If path is of type bytes (directly or indirectly through the PathLike interface), the filenames returned will also be of type bytes; in all other circumstances, they will be of type str.", "This function can also support specifying a file descriptor; the file descriptor must refer to a directory."]}
{"index": 4293, "name": "os.lstat", "module": "os", "doc": ["Perform the equivalent of an lstat() system call on the given path.", "Similar to stat(), but does not follow symbolic links.", "Return a stat_result object.", "On platforms that do not support symbolic links, this is an alias for stat().", "As of Python 3.3, this is equivalent to os.stat(path, dir_fd=dir_fd, follow_symlinks=False).", "This function can also support paths relative to directory descriptors."]}
{"index": 4294, "name": "os.mkdir", "module": "os", "doc": ["Create a directory named path with numeric mode mode.", "If the directory already exists, FileExistsError is raised.", "On some systems, mode is ignored.", "Where it is used, the current umask value is first masked out.", "If bits other than the last 9 (i.e.", "the last 3 digits of the octal representation of the mode) are set, their meaning is platform-dependent.", "On some platforms, they are ignored and you should call chmod() explicitly to set them.", "This function can also support paths relative to directory descriptors.", "It is also possible to create temporary directories; see the tempfile module\u2019s tempfile.mkdtemp() function."]}
{"index": 4295, "name": "os.makedirs", "module": "os", "doc": ["Recursive directory creation function.", "Like mkdir(), but makes all intermediate-level directories needed to contain the leaf directory.", "The mode parameter is passed to mkdir() for creating the leaf directory; see the mkdir() description for how it is interpreted.", "To set the file permission bits of any newly-created parent directories you can set the umask before invoking makedirs().", "The file permission bits of existing parent directories are not changed.", "If exist_ok is False (the default), an FileExistsError is raised if the target directory already exists.", "This function handles UNC paths correctly."]}
{"index": 4296, "name": "os.mkfifo", "module": "os", "doc": ["Create a FIFO (a named pipe) named path with numeric mode mode.", "The current umask value is first masked out from the mode.", "This function can also support paths relative to directory descriptors.", "FIFOs are pipes that can be accessed like regular files.", "FIFOs exist until they are deleted (for example with os.unlink()).", "Generally, FIFOs are used as rendezvous between \u201cclient\u201d and \u201cserver\u201d type processes: the server opens the FIFO for reading, and the client opens it for writing.", "Note that mkfifo() doesn\u2019t open the FIFO \u2014 it just creates the rendezvous point.", "Availability: Unix."]}
{"index": 4297, "name": "os.mknod", "module": "os", "doc": ["Create a filesystem node (file, device special file or named pipe) named path.", "mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of stat.S_IFREG, stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are available in stat).", "For stat.S_IFCHR and stat.S_IFBLK, device defines the newly created device special file (probably using os.makedev()), otherwise it is ignored.", "This function can also support paths relative to directory descriptors.", "Availability: Unix."]}
{"index": 4298, "name": "os.major", "module": "os", "doc": ["Extract the device major number from a raw device number (usually the st_dev or st_rdev field from stat)."]}
{"index": 4299, "name": "os.minor", "module": "os", "doc": ["Extract the device minor number from a raw device number (usually the st_dev or st_rdev field from stat)."]}
{"index": 4300, "name": "os.makedev", "module": "os", "doc": ["Compose a raw device number from the major and minor device numbers."]}
{"index": 4301, "name": "os.pathconf", "module": "os", "doc": ["Return system configuration information relevant to a named file.", "name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others).", "Some platforms define additional names as well.", "The names known to the host operating system are given in the pathconf_names dictionary.", "For configuration variables not included in that mapping, passing an integer for name is also accepted.", "If name is a string and is not known, ValueError is raised.", "If a specific value for name is not supported by the host system, even if it is included in pathconf_names, an OSError is raised with errno.EINVAL for the error number.", "This function can support specifying a file descriptor.", "Availability: Unix."]}
{"index": 4302, "name": "os.pathconf_names", "module": "os", "doc": ["Dictionary mapping names accepted by pathconf() and fpathconf() to the integer values defined for those names by the host operating system.", "This can be used to determine the set of names known to the system.", "Availability: Unix."]}
{"index": 4303, "name": "os.readlink", "module": "os", "doc": ["Return a string representing the path to which the symbolic link points.", "The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using os.path.join(os.path.dirname(path), result).", "If the path is a string object (directly or indirectly through a PathLike interface), the result will also be a string object, and the call may raise a UnicodeDecodeError.", "If the path is a bytes object (direct or indirectly), the result will be a bytes object.", "This function can also support paths relative to directory descriptors.", "Availability: Unix, Windows."]}
{"index": 4304, "name": "os.remove", "module": "os", "doc": ["Remove (delete) the file path.", "If path is a directory, an IsADirectoryError is raised.", "Use rmdir() to remove directories.", "This function can support paths relative to directory descriptors.", "On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use.", "This function is semantically identical to unlink()."]}
{"index": 4305, "name": "os.removedirs", "module": "os", "doc": ["Remove directories recursively.", "Works like rmdir() except that, if the leaf directory is successfully removed, removedirs()  tries to successively remove every parent directory mentioned in  path until an error is raised (which is ignored, because it generally means that a parent directory is not empty).", "For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty.", "Raises OSError if the leaf directory could not be successfully removed."]}
{"index": 4306, "name": "os.rename", "module": "os", "doc": ["Rename the file or directory src to dst.", "If dst exists, the operation will fail with an OSError subclass in a number of cases:", "On Windows, if dst exists a FileExistsError is always raised.", "On Unix, if src is a file and dst is a directory or vice-versa, an IsADirectoryError or a NotADirectoryError will be raised respectively.", "If both are directories and dst is empty, dst will be silently replaced.", "If dst is a non-empty directory, an OSError is raised.", "If both are files, dst it will be replaced silently if the user has permission.", "The operation may fail on some Unix flavors if src and dst are on different filesystems.", "If successful, the renaming will be an atomic operation (this is a POSIX requirement).", "This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors.", "If you want cross-platform overwriting of the destination, use replace()."]}
{"index": 4307, "name": "os.renames", "module": "os", "doc": ["Recursive directory or file renaming function.", "Works like rename(), except creation of any intermediate directories needed to make the new pathname good is attempted first.", "After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using removedirs()."]}
{"index": 4308, "name": "os.replace", "module": "os", "doc": ["Rename the file or directory src to dst.", "If dst is a directory, OSError will be raised.", "If dst exists and is a file, it will be replaced silently if the user has permission.", "The operation may fail if src and dst are on different filesystems.", "If successful, the renaming will be an atomic operation (this is a POSIX requirement).", "This function can support specifying src_dir_fd and/or dst_dir_fd to supply paths relative to directory descriptors."]}
{"index": 4309, "name": "os.rmdir", "module": "os", "doc": ["Remove (delete) the directory path.", "If the directory does not exist or is not empty, an FileNotFoundError or an OSError is raised respectively.", "In order to remove whole directory trees, shutil.rmtree() can be used.", "This function can support paths relative to directory descriptors."]}
{"index": 4310, "name": "os.scandir", "module": "os", "doc": ["Return an iterator of os.DirEntry objects corresponding to the entries in the directory given by path.", "The entries are yielded in arbitrary order, and the special entries '.'", "and '..' are not included.", "Using scandir() instead of listdir() can significantly increase the performance of code that also needs file type or file attribute information, because os.DirEntry objects expose this information if the operating system provides it when scanning a directory.", "All os.DirEntry methods may perform a system call, but is_dir() and is_file() usually only require a system call for symbolic links; os.DirEntry.stat() always requires a system call on Unix but only requires one for symbolic links on Windows.", "path may be a path-like object.", "If path is of type bytes (directly or indirectly through the PathLike interface), the type of the name and path attributes of each os.DirEntry will be bytes; in all other circumstances, they will be of type str.", "This function can also support specifying a file descriptor; the file descriptor must refer to a directory.", "The scandir() iterator supports the context manager protocol and has the following method:", "The following example shows a simple use of scandir() to display all the files (excluding directories) in the given path that don\u2019t start with '.'.", "The entry.is_file() call will generally not make an additional system call:"]}
{"index": 4311, "name": "os.scandir.close", "module": "os", "doc": ["Close the iterator and free acquired resources.", "This is called automatically when the iterator is exhausted or garbage collected, or when an error happens during iterating.", "However it is advisable to call it explicitly or use the with statement."]}
{"index": 4312, "name": "os.DirEntry", "module": "os", "doc": ["Object yielded by scandir() to expose the file path and other file attributes of a directory entry.", "scandir() will provide as much of this information as possible without making additional system calls.", "When a stat() or lstat() system call is made, the os.DirEntry object will cache the result.", "os.DirEntry instances are not intended to be stored in long-lived data structures; if you know the file metadata has changed or if a long time has elapsed since calling scandir(), call os.stat(entry.path) to fetch up-to-date information.", "Because the os.DirEntry methods can make operating system calls, they may also raise OSError.", "If you need very fine-grained control over errors, you can catch OSError when calling one of the os.DirEntry methods and handle as appropriate.", "To be directly usable as a path-like object, os.DirEntry implements the PathLike interface.", "Attributes and methods on a os.DirEntry instance are as follows:", "Note that there is a nice correspondence between several attributes and methods of os.DirEntry and of pathlib.Path.", "In particular, the name attribute has the same meaning, as do the is_dir(), is_file(), is_symlink() and stat() methods."]}
{"index": 4313, "name": "os.DirEntry.name", "module": "os", "doc": ["The entry\u2019s base filename, relative to the scandir() path argument.", "The name attribute will be bytes if the scandir() path argument is of type bytes and str otherwise.", "Use fsdecode() to decode byte filenames."]}
{"index": 4314, "name": "os.DirEntry.path", "module": "os", "doc": ["The entry\u2019s full path name: equivalent to os.path.join(scandir_path, entry.name) where scandir_path is the scandir() path argument.", "The path is only absolute if the scandir() path argument was absolute.", "If the scandir() path argument was a file descriptor, the path attribute is the same as the name attribute.", "The path attribute will be bytes if the scandir() path argument is of type bytes and str otherwise.", "Use fsdecode() to decode byte filenames."]}
{"index": 4315, "name": "os.DirEntry.inode", "module": "os", "doc": ["Return the inode number of the entry.", "The result is cached on the os.DirEntry object.", "Use os.stat(entry.path, follow_symlinks=False).st_ino to fetch up-to-date information.", "On the first, uncached call, a system call is required on Windows but not on Unix."]}
{"index": 4316, "name": "os.DirEntry.is_dir", "module": "os", "doc": ["Return True if this entry is a directory or a symbolic link pointing to a directory; return False if the entry is or points to any other kind of file, or if it doesn\u2019t exist anymore.", "If follow_symlinks is False, return True only if this entry is a directory (without following symlinks); return False if the entry is any other kind of file or if it doesn\u2019t exist anymore.", "The result is cached on the os.DirEntry object, with a separate cache for follow_symlinks True and False.", "Call os.stat() along with stat.S_ISDIR() to fetch up-to-date information.", "On the first, uncached call, no system call is required in most cases.", "Specifically, for non-symlinks, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return dirent.d_type == DT_UNKNOWN.", "If the entry is a symlink, a system call will be required to follow the symlink unless follow_symlinks is False.", "This method can raise OSError, such as PermissionError, but FileNotFoundError is caught and not raised."]}
{"index": 4317, "name": "os.DirEntry.is_file", "module": "os", "doc": ["Return True if this entry is a file or a symbolic link pointing to a file; return False if the entry is or points to a directory or other non-file entry, or if it doesn\u2019t exist anymore.", "If follow_symlinks is False, return True only if this entry is a file (without following symlinks); return False if the entry is a directory or other non-file entry, or if it doesn\u2019t exist anymore.", "The result is cached on the os.DirEntry object.", "Caching, system calls made, and exceptions raised are as per is_dir()."]}
{"index": 4318, "name": "os.DirEntry.is_symlink", "module": "os", "doc": ["Return True if this entry is a symbolic link (even if broken); return False if the entry points to a directory or any kind of file, or if it doesn\u2019t exist anymore.", "The result is cached on the os.DirEntry object.", "Call os.path.islink() to fetch up-to-date information.", "On the first, uncached call, no system call is required in most cases.", "Specifically, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return dirent.d_type == DT_UNKNOWN.", "This method can raise OSError, such as PermissionError, but FileNotFoundError is caught and not raised."]}
{"index": 4319, "name": "os.DirEntry.stat", "module": "os", "doc": ["Return a stat_result object for this entry.", "This method follows symbolic links by default; to stat a symbolic link add the follow_symlinks=False argument.", "On Unix, this method always requires a system call.", "On Windows, it only requires a system call if follow_symlinks is True and the entry is a symbolic link.", "On Windows, the st_ino, st_dev and st_nlink attributes of the stat_result are always set to zero.", "Call os.stat() to get these attributes.", "The result is cached on the os.DirEntry object, with a separate cache for follow_symlinks True and False.", "Call os.stat() to fetch up-to-date information."]}
{"index": 4320, "name": "os.stat", "module": "os", "doc": ["Get the status of a file or a file descriptor.", "Perform the equivalent of a stat() system call on the given path.", "path may be specified as either a string or bytes \u2013 directly or indirectly through the PathLike interface \u2013 or as an open file descriptor.", "Return a stat_result object.", "This function normally follows symlinks; to stat a symlink add the argument follow_symlinks=False, or use lstat().", "This function can support specifying a file descriptor and not following symlinks.", "Example:"]}
{"index": 4321, "name": "os.stat_result", "module": "os", "doc": ["Object whose attributes correspond roughly to the members of the stat structure.", "It is used for the result of os.stat(), os.fstat() and os.lstat().", "Attributes:", "Timestamps:", "On some Unix systems (such as Linux), the following attributes may also be available:", "On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them):", "On Solaris and derivatives, the following attributes may also be available:", "On Mac OS systems, the following attributes may also be available:", "On Windows systems, the following attribute is also available:", "The standard module stat defines functions and constants that are useful for extracting information from a stat structure.", "(On Windows, some items are filled with dummy values.)", "For backward compatibility, a stat_result instance is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the stat structure, in the order st_mode, st_ino, st_dev, st_nlink, st_uid, st_gid, st_size, st_atime, st_mtime, st_ctime.", "More items may be added at the end by some implementations.", "For compatibility with older Python versions, accessing stat_result as a tuple always returns integers."]}
{"index": 4322, "name": "os.stat_result.st_mode", "module": "os", "doc": ["File mode: file type and file mode bits (permissions)."]}
{"index": 4323, "name": "os.stat_result.st_ino", "module": "os", "doc": ["Platform dependent, but if non-zero, uniquely identifies the file for a given value of st_dev.", "Typically:"]}
{"index": 4324, "name": "os.stat_result.st_dev", "module": "os", "doc": ["Identifier of the device on which this file resides."]}
{"index": 4325, "name": "os.stat_result.st_nlink", "module": "os", "doc": ["Number of hard links."]}
{"index": 4326, "name": "os.stat_result.st_uid", "module": "os", "doc": ["User identifier of the file owner."]}
{"index": 4327, "name": "os.stat_result.st_gid", "module": "os", "doc": ["Group identifier of the file owner."]}
{"index": 4328, "name": "os.stat_result.st_size", "module": "os", "doc": ["Size of the file in bytes, if it is a regular file or a symbolic link.", "The size of a symbolic link is the length of the pathname it contains, without a terminating null byte."]}
{"index": 4329, "name": "os.stat_result.st_atime", "module": "os", "doc": ["Time of most recent access expressed in seconds."]}
{"index": 4330, "name": "os.stat_result.st_mtime", "module": "os", "doc": ["Time of most recent content modification expressed in seconds."]}
{"index": 4331, "name": "os.stat_result.st_ctime", "module": "os", "doc": ["Platform dependent:"]}
{"index": 4332, "name": "os.stat_result.st_atime_ns", "module": "os", "doc": ["Time of most recent access expressed in nanoseconds as an integer."]}
{"index": 4333, "name": "os.stat_result.st_mtime_ns", "module": "os", "doc": ["Time of most recent content modification expressed in nanoseconds as an integer."]}
{"index": 4334, "name": "os.stat_result.st_ctime_ns", "module": "os", "doc": ["Platform dependent:"]}
{"index": 4335, "name": "os.stat_result.st_blocks", "module": "os", "doc": ["Number of 512-byte blocks allocated for file.", "This may be smaller than st_size/512 when the file has holes."]}
{"index": 4336, "name": "os.stat_result.st_blksize", "module": "os", "doc": ["\u201cPreferred\u201d blocksize for efficient file system I/O.", "Writing to a file in smaller chunks may cause an inefficient read-modify-rewrite."]}
{"index": 4337, "name": "os.stat_result.st_rdev", "module": "os", "doc": ["Type of device if an inode device."]}
{"index": 4338, "name": "os.stat_result.st_flags", "module": "os", "doc": ["User defined flags for file."]}
{"index": 4339, "name": "os.stat_result.st_gen", "module": "os", "doc": ["File generation number."]}
{"index": 4340, "name": "os.stat_result.st_birthtime", "module": "os", "doc": ["Time of file creation."]}
{"index": 4341, "name": "os.stat_result.st_fstype", "module": "os", "doc": ["String that uniquely identifies the type of the filesystem that contains the file."]}
{"index": 4342, "name": "os.stat_result.st_rsize", "module": "os", "doc": ["Real size of the file."]}
{"index": 4343, "name": "os.stat_result.st_creator", "module": "os", "doc": ["Creator of the file."]}
{"index": 4344, "name": "os.stat_result.st_type", "module": "os", "doc": ["File type."]}
{"index": 4345, "name": "os.stat_result.st_file_attributes", "module": "os", "doc": ["Windows file attributes: dwFileAttributes member of the BY_HANDLE_FILE_INFORMATION structure returned by GetFileInformationByHandle().", "See the FILE_ATTRIBUTE_* constants in the stat module."]}
{"index": 4346, "name": "os.statvfs", "module": "os", "doc": ["Perform a statvfs() system call on the given path.", "The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the statvfs structure, namely: f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax, f_fsid.", "Two module-level constants are defined for the f_flag attribute\u2019s bit-flags: if ST_RDONLY is set, the filesystem is mounted read-only, and if ST_NOSUID is set, the semantics of setuid/setgid bits are disabled or not supported.", "Additional module-level constants are defined for GNU/glibc based systems.", "These are ST_NODEV (disallow access to device special files), ST_NOEXEC (disallow program execution), ST_SYNCHRONOUS (writes are synced at once), ST_MANDLOCK (allow mandatory locks on an FS), ST_WRITE (write on file/directory/symlink), ST_APPEND (append-only file), ST_IMMUTABLE (immutable file), ST_NOATIME (do not update access times), ST_NODIRATIME (do not update directory access times), ST_RELATIME (update atime relative to mtime/ctime).", "This function can support specifying a file descriptor.", "Availability: Unix."]}
{"index": 4347, "name": "os.supports_dir_fd", "module": "os", "doc": ["A Set object indicating which functions in the os module permit use of their dir_fd parameter.", "Different platforms provide different functionality, and an option that might work on one might be unsupported on another.", "For consistency\u2019s sakes, functions that support dir_fd always allow specifying the parameter, but will raise an exception if the functionality is not actually available.", "To check whether a particular function permits use of its dir_fd parameter, use the in operator on supports_dir_fd.", "As an example, this expression determines whether the dir_fd parameter of os.stat() is locally available:", "Currently dir_fd parameters only work on Unix platforms; none of them work on Windows."]}
{"index": 4348, "name": "os.supports_effective_ids", "module": "os", "doc": ["A Set object indicating which functions in the os module permit use of the effective_ids parameter for os.access().", "If the local platform supports it, the collection will contain os.access(), otherwise it will be empty.", "To check whether you can use the effective_ids parameter for os.access(), use the in operator on supports_effective_ids, like so:", "Currently effective_ids only works on Unix platforms; it does not work on Windows."]}
{"index": 4349, "name": "os.supports_fd", "module": "os", "doc": ["A Set object indicating which functions in the os module permit specifying their path parameter as an open file descriptor.", "Different platforms provide different functionality, and an option that might work on one might be unsupported on another.", "For consistency\u2019s sakes, functions that support fd always allow specifying the parameter, but will raise an exception if the functionality is not actually available.", "To check whether a particular function permits specifying an open file descriptor for its path parameter, use the in operator on supports_fd.", "As an example, this expression determines whether os.chdir() accepts open file descriptors when called on your local platform:"]}
{"index": 4350, "name": "os.supports_follow_symlinks", "module": "os", "doc": ["A Set object indicating which functions in the os module permit use of their follow_symlinks parameter.", "Different platforms provide different functionality, and an option that might work on one might be unsupported on another.", "For consistency\u2019s sakes, functions that support follow_symlinks always allow specifying the parameter, but will raise an exception if the functionality is not actually available.", "To check whether a particular function permits use of its follow_symlinks parameter, use the in operator on supports_follow_symlinks.", "As an example, this expression determines whether the follow_symlinks parameter of os.stat() is locally available:"]}
{"index": 4351, "name": "os.symlink", "module": "os", "doc": ["Create a symbolic link pointing to src named dst.", "On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically.", "If the target is present, the type of the symlink will be created to match.", "Otherwise, the symlink will be created as a directory if target_is_directory is True or a file symlink (the default) otherwise.", "On non-Windows platforms, target_is_directory is ignored.", "Symbolic link support was introduced in Windows 6.0 (Vista).", "symlink() will raise a NotImplementedError on Windows versions earlier than 6.0.", "This function can support paths relative to directory descriptors.", "Availability: Unix, Windows."]}
{"index": 4352, "name": "os.sync", "module": "os", "doc": ["Force write of everything to disk.", "Availability: Unix."]}
{"index": 4353, "name": "os.truncate", "module": "os", "doc": ["Truncate the file corresponding to path, so that it is at most length bytes in size.", "This function can support specifying a file descriptor.", "Availability: Unix, Windows."]}
{"index": 4354, "name": "os.unlink", "module": "os", "doc": ["Remove (delete) the file path.", "This function is semantically identical to remove(); the unlink name is its traditional Unix name.", "Please see the documentation for remove() for further information."]}
{"index": 4355, "name": "os.utime", "module": "os", "doc": ["Set the access and modified times of the file specified by path.", "utime() takes two optional parameters, times and ns.", "These specify the times set on path and are used as follows:", "It is an error to specify tuples for both times and ns.", "Whether a directory can be given for path depends on whether the operating system implements directories as files (for example, Windows does not).", "Note that the exact times you set here may not be returned by a subsequent stat() call, depending on the resolution with which your operating system records access and modification times; see stat().", "The best way to preserve exact times is to use the st_atime_ns and st_mtime_ns fields from the os.stat() result object with the ns parameter to utime.", "This function can support specifying a file descriptor, paths relative to directory descriptors and not following symlinks."]}
{"index": 4356, "name": "os.walk", "module": "os", "doc": ["Generate the file names in a directory tree by walking the tree either top-down or bottom-up.", "For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames).", "dirpath is a string, the path to the directory.", "dirnames is a list of the names of the subdirectories in dirpath (excluding '.'", "and '..').", "filenames is a list of the names of the non-directory files in dirpath.", "Note that the names in the lists contain no path components.", "To get a full path (which begins with top) to a file or directory in dirpath, do os.path.join(dirpath, name).", "If optional argument topdown is True or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down).", "If topdown is False, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up).", "No matter the value of topdown, the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated.", "When topdown is True, the caller can modify the dirnames list in-place (perhaps using del or slice assignment), and walk() will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform walk() about directories the caller creates or renames before it resumes walk() again.", "Modifying dirnames when topdown is False has no effect on the behavior of the walk, because in bottom-up mode the directories in dirnames are generated before dirpath itself is generated.", "By default, errors from the scandir() call are ignored.", "If optional argument onerror is specified, it should be a function; it will be called with one argument, an OSError instance.", "It can report the error to continue with the walk, or raise the exception to abort the walk.", "Note that the filename is available as the filename attribute of the exception object.", "By default, walk() will not walk down into symbolic links that resolve to directories.", "Set followlinks to True to visit directories pointed to by symlinks, on systems that support them.", "This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn\u2019t look under any CVS subdirectory:", "In the next example (simple implementation of shutil.rmtree()), walking the tree bottom-up is essential, rmdir() doesn\u2019t allow deleting a directory before the directory is empty:"]}
{"index": 4357, "name": "os.fwalk", "module": "os", "doc": ["This behaves exactly like walk(), except that it yields a 4-tuple (dirpath, dirnames, filenames, dirfd), and it supports dir_fd.", "dirpath, dirnames and filenames are identical to walk() output, and dirfd is a file descriptor referring to the directory dirpath.", "This function always supports paths relative to directory descriptors and not following symlinks.", "Note however that, unlike other functions, the fwalk() default value for follow_symlinks is False.", "This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn\u2019t look under any CVS subdirectory:", "In the next example, walking the tree bottom-up is essential: rmdir() doesn\u2019t allow deleting a directory before the directory is empty:", "Availability: Unix."]}
{"index": 4358, "name": "os.getxattr", "module": "os", "doc": ["Return the value of the extended filesystem attribute attribute for path.", "attribute can be bytes or str (directly or indirectly through the PathLike interface).", "If it is str, it is encoded with the filesystem encoding.", "This function can support specifying a file descriptor and not following symlinks."]}
{"index": 4359, "name": "os.listxattr", "module": "os", "doc": ["Return a list of the extended filesystem attributes on path.", "The attributes in the list are represented as strings decoded with the filesystem encoding.", "If path is None, listxattr() will examine the current directory.", "This function can support specifying a file descriptor and not following symlinks."]}
{"index": 4360, "name": "os.removexattr", "module": "os", "doc": ["Removes the extended filesystem attribute attribute from path.", "attribute should be bytes or str (directly or indirectly through the PathLike interface).", "If it is a string, it is encoded with the filesystem encoding.", "This function can support specifying a file descriptor and not following symlinks."]}
{"index": 4361, "name": "os.setxattr", "module": "os", "doc": ["Set the extended filesystem attribute attribute on path to value.", "attribute must be a bytes or str with no embedded NULs (directly or indirectly through the PathLike interface).", "If it is a str, it is encoded with the filesystem encoding.", "flags may be XATTR_REPLACE or XATTR_CREATE.", "If XATTR_REPLACE is given and the attribute does not exist, EEXISTS will be raised.", "If XATTR_CREATE is given and the attribute already exists, the attribute will not be created and ENODATA will be raised.", "This function can support specifying a file descriptor and not following symlinks."]}
{"index": 4362, "name": "os.XATTR_SIZE_MAX", "module": "os", "doc": ["The maximum size the value of an extended attribute can be.", "Currently, this is 64 KiB on Linux."]}
{"index": 4363, "name": "os.XATTR_CREATE", "module": "os", "doc": ["This is a possible value for the flags argument in setxattr().", "It indicates the operation must create an attribute."]}
{"index": 4364, "name": "os.XATTR_REPLACE", "module": "os", "doc": ["This is a possible value for the flags argument in setxattr().", "It indicates the operation must replace an existing attribute."]}
{"index": 4365, "name": "os.abort", "module": "os", "doc": ["Generate a SIGABRT signal to the current process.", "On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of 3.", "Be aware that calling this function will not call the Python signal handler registered for SIGABRT with signal.signal()."]}
{"index": 4366, "name": "os.execl", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4367, "name": "os.execle", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4368, "name": "os.execlp", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4369, "name": "os.execlpe", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4370, "name": "os.execv", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4371, "name": "os.execve", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4372, "name": "os.execvp", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4373, "name": "os.execvpe", "module": "os", "doc": ["These functions all execute a new program, replacing the current process; they do not return.", "On Unix, the new executable is loaded into the current process, and will have the same process id as the caller.", "Errors will be reported as OSError exceptions.", "The current process is replaced immediately.", "Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using sys.stdout.flush() or os.fsync() before calling an exec* function.", "The \u201cl\u201d and \u201cv\u201d variants of the exec* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the execl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.", "The variants which include a \u201cp\u201d near the end (execlp(), execlpe(), execvp(), and execvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the exec*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, execl(), execle(), execv(), and execve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For execle(), execlpe(), execve(), and execvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process\u2019 environment); the functions execl(), execlp(), execv(), and execvp() all cause the new process to inherit the environment of the current process.", "For execve() on some platforms, path may also be specified as an open file descriptor.", "This functionality may not be supported on your platform; you can check whether or not it is available using os.supports_fd.", "If it is unavailable, using it will raise a NotImplementedError.", "Availability: Unix, Windows."]}
{"index": 4374, "name": "os._exit", "module": "os", "doc": ["Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc."]}
{"index": 4375, "name": "os.EX_OK", "module": "os", "doc": ["Exit code that means no error occurred.", "Availability: Unix."]}
{"index": 4376, "name": "os.EX_USAGE", "module": "os", "doc": ["Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given.", "Availability: Unix."]}
{"index": 4377, "name": "os.EX_DATAERR", "module": "os", "doc": ["Exit code that means the input data was incorrect.", "Availability: Unix."]}
{"index": 4378, "name": "os.EX_NOINPUT", "module": "os", "doc": ["Exit code that means an input file did not exist or was not readable.", "Availability: Unix."]}
{"index": 4379, "name": "os.EX_NOUSER", "module": "os", "doc": ["Exit code that means a specified user did not exist.", "Availability: Unix."]}
{"index": 4380, "name": "os.EX_NOHOST", "module": "os", "doc": ["Exit code that means a specified host did not exist.", "Availability: Unix."]}
{"index": 4381, "name": "os.EX_UNAVAILABLE", "module": "os", "doc": ["Exit code that means that a required service is unavailable.", "Availability: Unix."]}
{"index": 4382, "name": "os.EX_SOFTWARE", "module": "os", "doc": ["Exit code that means an internal software error was detected.", "Availability: Unix."]}
{"index": 4383, "name": "os.EX_OSERR", "module": "os", "doc": ["Exit code that means an operating system error was detected, such as the inability to fork or create a pipe.", "Availability: Unix."]}
{"index": 4384, "name": "os.EX_OSFILE", "module": "os", "doc": ["Exit code that means some system file did not exist, could not be opened, or had some other kind of error.", "Availability: Unix."]}
{"index": 4385, "name": "os.EX_CANTCREAT", "module": "os", "doc": ["Exit code that means a user specified output file could not be created.", "Availability: Unix."]}
{"index": 4386, "name": "os.EX_IOERR", "module": "os", "doc": ["Exit code that means that an error occurred while doing I/O on some file.", "Availability: Unix."]}
{"index": 4387, "name": "os.EX_TEMPFAIL", "module": "os", "doc": ["Exit code that means a temporary failure occurred.", "This indicates something that may not really be an error, such as a network connection that couldn\u2019t be made during a retryable operation.", "Availability: Unix."]}
{"index": 4388, "name": "os.EX_PROTOCOL", "module": "os", "doc": ["Exit code that means that a protocol exchange was illegal, invalid, or not understood.", "Availability: Unix."]}
{"index": 4389, "name": "os.EX_NOPERM", "module": "os", "doc": ["Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems).", "Availability: Unix."]}
{"index": 4390, "name": "os.EX_CONFIG", "module": "os", "doc": ["Exit code that means that some kind of configuration error occurred.", "Availability: Unix."]}
{"index": 4391, "name": "os.EX_NOTFOUND", "module": "os", "doc": ["Exit code that means something like \u201can entry was not found\u201d.", "Availability: Unix."]}
{"index": 4392, "name": "os.fork", "module": "os", "doc": ["Fork a child process.", "Return 0 in the child and the child\u2019s process id in the parent.", "If an error occurs OSError is raised.", "Note that some platforms including FreeBSD <= 6.3 and Cygwin have known issues when using fork() from a thread.", "Availability: Unix."]}
{"index": 4393, "name": "os.forkpty", "module": "os", "doc": ["Fork a child process, using a new pseudo-terminal as the child\u2019s controlling terminal.", "Return a pair of (pid, fd), where pid is 0 in the child, the new child\u2019s process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal.", "For a more portable approach, use the pty module.", "If an error occurs OSError is raised.", "Availability: some flavors of Unix."]}
{"index": 4394, "name": "os.kill", "module": "os", "doc": ["Send signal sig to the process pid.", "Constants for the specific signals available on the host platform are defined in the signal module.", "Windows: The signal.CTRL_C_EVENT and signal.CTRL_BREAK_EVENT signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses.", "Any other value for sig will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to sig.", "The Windows version of kill() additionally takes process handles to be killed.", "See also signal.pthread_kill()."]}
{"index": 4395, "name": "os.killpg", "module": "os", "doc": ["Send the signal sig to the process group pgid.", "Availability: Unix."]}
{"index": 4396, "name": "os.nice", "module": "os", "doc": ["Add increment to the process\u2019s \u201cniceness\u201d.", "Return the new niceness.", "Availability: Unix."]}
{"index": 4397, "name": "os.plock", "module": "os", "doc": ["Lock program segments into memory.", "The value of op (defined in <sys/lock.h>) determines which segments are locked.", "Availability: Unix."]}
{"index": 4398, "name": "os.popen", "module": "os", "doc": ["Open a pipe to or from command cmd.", "The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is 'r' (default) or 'w'.", "The buffering argument has the same meaning as the corresponding argument to the built-in open() function.", "The returned file object reads or writes text strings rather than bytes.", "The close method returns None if the subprocess exited successfully, or the subprocess\u2019s return code if there was an error.", "On POSIX systems, if the return code is positive it represents the return value of the process left-shifted by one byte.", "If the return code is negative, the process was terminated by the signal given by the negated value of the return code.", "(For example, the return value might be - signal.SIGKILL if the subprocess was killed.)", "On Windows systems, the return value contains the signed integer return code from the child process.", "This is implemented using subprocess.Popen; see that class\u2019s documentation for more powerful ways to manage and communicate with subprocesses."]}
{"index": 4399, "name": "os.register_at_fork", "module": "os", "doc": ["Register callables to be executed when a new child process is forked using os.fork() or similar process cloning APIs.", "The parameters are optional and keyword-only.", "Each specifies a different call point.", "These calls are only made if control is expected to return to the Python interpreter.", "A typical subprocess launch will not trigger them as the child is not going to re-enter the interpreter.", "Functions registered for execution before forking are called in reverse registration order.", "Functions registered for execution after forking (either in the parent or in the child) are called in registration order.", "Note that fork() calls made by third-party C code may not call those functions, unless it explicitly calls PyOS_BeforeFork(), PyOS_AfterFork_Parent() and PyOS_AfterFork_Child().", "There is no way to unregister a function.", "Availability: Unix."]}
{"index": 4400, "name": "os.spawnl", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4401, "name": "os.spawnle", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4402, "name": "os.spawnlp", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4403, "name": "os.spawnlpe", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4404, "name": "os.spawnv", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4405, "name": "os.spawnve", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4406, "name": "os.spawnvp", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4407, "name": "os.spawnvpe", "module": "os", "doc": ["Execute the program path in a new process.", "(Note that the subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions.", "Check especially the Replacing Older Functions with the subprocess Module section.)", "If mode is P_NOWAIT, this function returns the process id of the new process; if mode is P_WAIT, returns the process\u2019s exit code if it exits normally, or -signal, where signal is the signal that killed the process.", "On Windows, the process id will actually be the process handle, so can be used with the waitpid() function.", "The \u201cl\u201d and \u201cv\u201d variants of the spawn* functions differ in how command-line arguments are passed.", "The \u201cl\u201d variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the spawnl*() functions.", "The \u201cv\u201d variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter.", "In either case, the arguments to the child process must start with the name of the command being run.", "The variants which include a second \u201cp\u201d near the end (spawnlp(), spawnlpe(), spawnvp(), and spawnvpe()) will use the PATH environment variable to locate the program file.", "When the environment is being replaced (using one of the spawn*e variants, discussed in the next paragraph), the new environment is used as the source of the PATH variable.", "The other variants, spawnl(), spawnle(), spawnv(), and spawnve(), will not use the PATH variable to locate the executable; path must contain an appropriate absolute or relative path.", "For spawnle(), spawnlpe(), spawnve(), and spawnvpe() (note that these all end in \u201ce\u201d), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process\u2019 environment); the functions spawnl(), spawnlp(), spawnv(), and spawnvp() all cause the new process to inherit the environment of the current process.", "Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of 127.", "As an example, the following calls to spawnlp() and spawnvpe() are equivalent:", "Availability: Unix, Windows.", "spawnlp(), spawnlpe(), spawnvp() and spawnvpe() are not available on Windows.", "spawnle() and spawnve() are not thread-safe on Windows; we advise you to use the subprocess module instead."]}
{"index": 4408, "name": "os.P_NOWAIT", "module": "os", "doc": ["Possible values for the mode parameter to the spawn* family of functions.", "If either of these values is given, the spawn*() functions will return as soon as the new process has been created, with the process id as the return value.", "Availability: Unix, Windows."]}
{"index": 4409, "name": "os.P_NOWAITO", "module": "os", "doc": ["Possible values for the mode parameter to the spawn* family of functions.", "If either of these values is given, the spawn*() functions will return as soon as the new process has been created, with the process id as the return value.", "Availability: Unix, Windows."]}
{"index": 4410, "name": "os.P_WAIT", "module": "os", "doc": ["Possible value for the mode parameter to the spawn* family of functions.", "If this is given as mode, the spawn*() functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or -signal if a signal kills the process.", "Availability: Unix, Windows."]}
{"index": 4411, "name": "os.P_DETACH", "module": "os", "doc": ["Possible values for the mode parameter to the spawn* family of functions.", "These are less portable than those listed above.", "P_DETACH is similar to P_NOWAIT, but the new process is detached from the console of the calling process.", "If P_OVERLAY is used, the current process will be replaced; the spawn* function will not return.", "Availability: Windows."]}
{"index": 4412, "name": "os.P_OVERLAY", "module": "os", "doc": ["Possible values for the mode parameter to the spawn* family of functions.", "These are less portable than those listed above.", "P_DETACH is similar to P_NOWAIT, but the new process is detached from the console of the calling process.", "If P_OVERLAY is used, the current process will be replaced; the spawn* function will not return.", "Availability: Windows."]}
{"index": 4413, "name": "os.startfile", "module": "os", "doc": ["Start a file with its associated application.", "When operation is not specified or 'open', this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the start command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated.", "When another operation is given, it must be a \u201ccommand verb\u201d that specifies what should be done with the file.", "Common verbs documented by Microsoft are 'print' and  'edit' (to be used on files) as well as 'explore' and 'find' (to be used on directories).", "startfile() returns as soon as the associated application is launched.", "There is no option to wait for the application to close, and no way to retrieve the application\u2019s exit status.", "The path parameter is relative to the current directory.", "If you want to use an absolute path, make sure the first character is not a slash ('/'); the underlying Win32 ShellExecute() function doesn\u2019t work if it is.", "Use the os.path.normpath() function to ensure that the path is properly encoded for Win32.", "To reduce interpreter startup overhead, the Win32 ShellExecute() function is not resolved until this function is first called.", "If the function cannot be resolved, NotImplementedError will be raised.", "Availability: Windows."]}
{"index": 4414, "name": "os.system", "module": "os", "doc": ["Execute the command (a string) in a subshell.", "This is implemented by calling the Standard C function system(), and has the same limitations.", "Changes to sys.stdin, etc.", "are not reflected in the environment of the executed command.", "If command generates any output, it will be sent to the interpreter standard output stream.", "On Unix, the return value is the exit status of the process encoded in the format specified for wait().", "Note that POSIX does not specify the meaning of the return value of the C system() function, so the return value of the Python function is system-dependent.", "On Windows, the return value is that returned by the system shell after running command.", "The shell is given by the Windows environment variable COMSPEC: it is usually cmd.exe, which returns the exit status of the command run; on systems using a non-native shell, consult your shell documentation.", "The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function.", "See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes.", "Availability: Unix, Windows."]}
{"index": 4415, "name": "os.times", "module": "os", "doc": ["Returns the current global process times.", "The return value is an object with five attributes:", "For backwards compatibility, this object also behaves like a five-tuple containing user, system, children_user, children_system, and elapsed in that order.", "See the Unix manual page times(2) and times(3) manual page on Unix or the GetProcessTimes MSDN <https://docs.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesstimes> _ on Windows.", "On Windows, only user and system are known; the other attributes are zero.", "Availability: Unix, Windows."]}
{"index": 4416, "name": "os.wait", "module": "os", "doc": ["Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced.", "Availability: Unix."]}
{"index": 4417, "name": "os.waitid", "module": "os", "doc": ["Wait for the completion of one or more child processes.", "idtype can be P_PID, P_PGID or P_ALL.", "id specifies the pid to wait on.", "options is constructed from the ORing of one or more of WEXITED, WSTOPPED or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT.", "The return value is an object representing the data contained in the siginfo_t structure, namely: si_pid, si_uid, si_signo, si_status, si_code or None if WNOHANG is specified and there are no children in a waitable state.", "Availability: Unix."]}
{"index": 4418, "name": "os.P_PID", "module": "os", "doc": ["These are the possible values for idtype in waitid().", "They affect how id is interpreted.", "Availability: Unix."]}
{"index": 4419, "name": "os.P_PGID", "module": "os", "doc": ["These are the possible values for idtype in waitid().", "They affect how id is interpreted.", "Availability: Unix."]}
{"index": 4420, "name": "os.P_ALL", "module": "os", "doc": ["These are the possible values for idtype in waitid().", "They affect how id is interpreted.", "Availability: Unix."]}
{"index": 4421, "name": "os.WEXITED", "module": "os", "doc": ["Flags that can be used in options in waitid() that specify what child signal to wait for.", "Availability: Unix."]}
{"index": 4422, "name": "os.WSTOPPED", "module": "os", "doc": ["Flags that can be used in options in waitid() that specify what child signal to wait for.", "Availability: Unix."]}
{"index": 4423, "name": "os.WNOWAIT", "module": "os", "doc": ["Flags that can be used in options in waitid() that specify what child signal to wait for.", "Availability: Unix."]}
{"index": 4424, "name": "os.CLD_EXITED", "module": "os", "doc": ["These are the possible values for si_code in the result returned by waitid().", "Availability: Unix."]}
{"index": 4425, "name": "os.CLD_DUMPED", "module": "os", "doc": ["These are the possible values for si_code in the result returned by waitid().", "Availability: Unix."]}
{"index": 4426, "name": "os.CLD_TRAPPED", "module": "os", "doc": ["These are the possible values for si_code in the result returned by waitid().", "Availability: Unix."]}
{"index": 4427, "name": "os.CLD_CONTINUED", "module": "os", "doc": ["These are the possible values for si_code in the result returned by waitid().", "Availability: Unix."]}
{"index": 4428, "name": "os.waitpid", "module": "os", "doc": ["The details of this function differ on Unix and Windows.", "On Unix: Wait for completion of a child process given by process id pid, and return a tuple containing its process id and exit status indication (encoded as for wait()).", "The semantics of the call are affected by the value of the integer options, which should be 0 for normal operation.", "If pid is greater than 0, waitpid() requests status information for that specific process.", "If pid is 0, the request is for the status of any child in the process group of the current process.", "If pid is -1, the request pertains to any child of the current process.", "If pid is less than -1, status is requested for any process in the process group -pid (the absolute value of pid).", "An OSError is raised with the value of errno when the syscall returns -1.", "On Windows: Wait for completion of a process given by process handle pid, and return a tuple containing pid, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier).", "A pid less than or equal to 0 has no special meaning on Windows, and raises an exception.", "The value of integer options has no effect.", "pid can refer to any process whose id is known, not necessarily a child process.", "The spawn* functions called with P_NOWAIT return suitable process handles."]}
{"index": 4429, "name": "os.wait3", "module": "os", "doc": ["Similar to waitpid(), except no process id argument is given and a 3-element tuple containing the child\u2019s process id, exit status indication, and resource usage information is returned.", "Refer to resource.getrusage() for details on resource usage information.", "The option argument is the same as that provided to waitpid() and wait4().", "Availability: Unix."]}
{"index": 4430, "name": "os.wait4", "module": "os", "doc": ["Similar to waitpid(), except a 3-element tuple, containing the child\u2019s process id, exit status indication, and resource usage information is returned.", "Refer to resource.getrusage() for details on resource usage information.", "The arguments to wait4() are the same as those provided to waitpid().", "Availability: Unix."]}
{"index": 4431, "name": "os.WNOHANG", "module": "os", "doc": ["The option for waitpid() to return immediately if no child process status is available immediately.", "The function returns (0, 0) in this case.", "Availability: Unix."]}
{"index": 4432, "name": "os.WCONTINUED", "module": "os", "doc": ["This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported.", "Availability: some Unix systems."]}
{"index": 4433, "name": "os.WUNTRACED", "module": "os", "doc": ["This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped.", "Availability: Unix."]}
{"index": 4434, "name": "os.WCOREDUMP", "module": "os", "doc": ["Return True if a core dump was generated for the process, otherwise return False.", "Availability: Unix."]}
{"index": 4435, "name": "os.WIFCONTINUED", "module": "os", "doc": ["Return True if the process has been continued from a job control stop, otherwise return False.", "Availability: Unix."]}
{"index": 4436, "name": "os.WIFSTOPPED", "module": "os", "doc": ["Return True if the process has been stopped, otherwise return False.", "Availability: Unix."]}
{"index": 4437, "name": "os.WIFSIGNALED", "module": "os", "doc": ["Return True if the process exited due to a signal, otherwise return False.", "Availability: Unix."]}
{"index": 4438, "name": "os.WIFEXITED", "module": "os", "doc": ["Return True if the process exited using the exit(2) system call, otherwise return False.", "Availability: Unix."]}
{"index": 4439, "name": "os.WEXITSTATUS", "module": "os", "doc": ["If WIFEXITED(status) is true, return the integer parameter to the exit(2) system call.", "Otherwise, the return value is meaningless.", "Availability: Unix."]}
{"index": 4440, "name": "os.WSTOPSIG", "module": "os", "doc": ["Return the signal which caused the process to stop.", "Availability: Unix."]}
{"index": 4441, "name": "os.WTERMSIG", "module": "os", "doc": ["Return the signal which caused the process to exit.", "Availability: Unix."]}
{"index": 4442, "name": "os.SCHED_OTHER", "module": "os", "doc": ["The default scheduling policy."]}
{"index": 4443, "name": "os.SCHED_BATCH", "module": "os", "doc": ["Scheduling policy for CPU-intensive processes that tries to preserve interactivity on the rest of the computer."]}
{"index": 4444, "name": "os.SCHED_IDLE", "module": "os", "doc": ["Scheduling policy for extremely low priority background tasks."]}
{"index": 4445, "name": "os.SCHED_SPORADIC", "module": "os", "doc": ["Scheduling policy for sporadic server programs."]}
{"index": 4446, "name": "os.SCHED_FIFO", "module": "os", "doc": ["A First In First Out scheduling policy."]}
{"index": 4447, "name": "os.SCHED_RR", "module": "os", "doc": ["A round-robin scheduling policy."]}
{"index": 4448, "name": "os.SCHED_RESET_ON_FORK", "module": "os", "doc": ["This flag can be OR\u2019ed with any other scheduling policy.", "When a process with this flag set forks, its child\u2019s scheduling policy and priority are reset to the default."]}
{"index": 4449, "name": "os.sched_param", "module": "os", "doc": ["This class represents tunable scheduling parameters used in sched_setparam(), sched_setscheduler(), and sched_getparam().", "It is immutable.", "At the moment, there is only one possible parameter:"]}
{"index": 4450, "name": "os.sched_param.sched_priority", "module": "os", "doc": ["The scheduling priority for a scheduling policy."]}
{"index": 4451, "name": "os.sched_get_priority_min", "module": "os", "doc": ["Get the minimum priority value for policy.", "policy is one of the scheduling policy constants above."]}
{"index": 4452, "name": "os.sched_get_priority_max", "module": "os", "doc": ["Get the maximum priority value for policy.", "policy is one of the scheduling policy constants above."]}
{"index": 4453, "name": "os.sched_setscheduler", "module": "os", "doc": ["Set the scheduling policy for the process with PID pid.", "A pid of 0 means the calling process.", "policy is one of the scheduling policy constants above.", "param is a sched_param instance."]}
{"index": 4454, "name": "os.sched_getscheduler", "module": "os", "doc": ["Return the scheduling policy for the process with PID pid.", "A pid of 0 means the calling process.", "The result is one of the scheduling policy constants above."]}
{"index": 4455, "name": "os.sched_setparam", "module": "os", "doc": ["Set a scheduling parameters for the process with PID pid.", "A pid of 0 means the calling process.", "param is a sched_param instance."]}
{"index": 4456, "name": "os.sched_getparam", "module": "os", "doc": ["Return the scheduling parameters as a sched_param instance for the process with PID pid.", "A pid of 0 means the calling process."]}
{"index": 4457, "name": "os.sched_rr_get_interval", "module": "os", "doc": ["Return the round-robin quantum in seconds for the process with PID pid.", "A pid of 0 means the calling process."]}
{"index": 4458, "name": "os.sched_yield", "module": "os", "doc": ["Voluntarily relinquish the CPU."]}
{"index": 4459, "name": "os.sched_setaffinity", "module": "os", "doc": ["Restrict the process with PID pid (or the current process if zero) to a set of CPUs.", "mask is an iterable of integers representing the set of CPUs to which the process should be restricted."]}
{"index": 4460, "name": "os.sched_getaffinity", "module": "os", "doc": ["Return the set of CPUs the process with PID pid (or the current process if zero) is restricted to."]}
{"index": 4461, "name": "os.confstr", "module": "os", "doc": ["Return string-valued system configuration values.", "name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others).", "Some platforms define additional names as well.", "The names known to the host operating system are given as the keys of the confstr_names dictionary.", "For configuration variables not included in that mapping, passing an integer for name is also accepted.", "If the configuration value specified by name isn\u2019t defined, None is returned.", "If name is a string and is not known, ValueError is raised.", "If a specific value for name is not supported by the host system, even if it is included in confstr_names, an OSError is raised with errno.EINVAL for the error number.", "Availability: Unix."]}
{"index": 4462, "name": "os.confstr_names", "module": "os", "doc": ["Dictionary mapping names accepted by confstr() to the integer values defined for those names by the host operating system.", "This can be used to determine the set of names known to the system.", "Availability: Unix."]}
{"index": 4463, "name": "os.cpu_count", "module": "os", "doc": ["Return the number of CPUs in the system.", "Returns None if undetermined.", "This number is not equivalent to the number of CPUs the current process can use.", "The number of usable CPUs can be obtained with len(os.sched_getaffinity(0))"]}
{"index": 4464, "name": "os.getloadavg", "module": "os", "doc": ["Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises OSError if the load average was unobtainable.", "Availability: Unix."]}
{"index": 4465, "name": "os.sysconf", "module": "os", "doc": ["Return integer-valued system configuration values.", "If the configuration value specified by name isn\u2019t defined, -1 is returned.", "The comments regarding the name parameter for confstr() apply here as well; the dictionary that provides information on the known names is given by sysconf_names.", "Availability: Unix."]}
{"index": 4466, "name": "os.sysconf_names", "module": "os", "doc": ["Dictionary mapping names accepted by sysconf() to the integer values defined for those names by the host operating system.", "This can be used to determine the set of names known to the system.", "Availability: Unix."]}
{"index": 4467, "name": "os.curdir", "module": "os", "doc": ["The constant string used by the operating system to refer to the current directory.", "This is '.'", "for Windows and POSIX.", "Also available via os.path."]}
{"index": 4468, "name": "os.pardir", "module": "os", "doc": ["The constant string used by the operating system to refer to the parent directory.", "This is '..' for Windows and POSIX.", "Also available via os.path."]}
{"index": 4469, "name": "os.sep", "module": "os", "doc": ["The character used by the operating system to separate pathname components.", "This is '/' for POSIX and '\\\\' for Windows.", "Note that knowing this is not sufficient to be able to parse or concatenate pathnames \u2014 use os.path.split() and os.path.join() \u2014 but it is occasionally useful.", "Also available via os.path."]}
{"index": 4470, "name": "os.altsep", "module": "os", "doc": ["An alternative character used by the operating system to separate pathname components, or None if only one separator character exists.", "This is set to '/' on Windows systems where sep is a backslash.", "Also available via os.path."]}
{"index": 4471, "name": "os.extsep", "module": "os", "doc": ["The character which separates the base filename from the extension; for example, the '.'", "in os.py.", "Also available via os.path."]}
{"index": 4472, "name": "os.pathsep", "module": "os", "doc": ["The character conventionally used by the operating system to separate search path components (as in PATH), such as ':' for POSIX or ';' for Windows.", "Also available via os.path."]}
{"index": 4473, "name": "os.defpath", "module": "os", "doc": ["The default search path used by exec*p* and spawn*p* if the environment doesn\u2019t have a 'PATH' key.", "Also available via os.path."]}
{"index": 4474, "name": "os.linesep", "module": "os", "doc": ["The string used to separate (or, rather, terminate) lines on the current platform.", "This may be a single character, such as '\\n' for POSIX, or multiple characters, for example, '\\r\\n' for Windows.", "Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\\n' instead, on all platforms."]}
{"index": 4475, "name": "os.devnull", "module": "os", "doc": ["The file path of the null device.", "For example: '/dev/null' for POSIX, 'nul' for Windows.", "Also available via os.path."]}
{"index": 4476, "name": "os.RTLD_LAZY", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4477, "name": "os.RTLD_NOW", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4478, "name": "os.RTLD_GLOBAL", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4479, "name": "os.RTLD_LOCAL", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4480, "name": "os.RTLD_NODELETE", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4481, "name": "os.RTLD_NOLOAD", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4482, "name": "os.RTLD_DEEPBIND", "module": "os", "doc": ["Flags for use with the setdlopenflags() and getdlopenflags() functions.", "See the Unix manual page dlopen(3) for what the different flags mean."]}
{"index": 4483, "name": "os.getrandom", "module": "os", "doc": ["Get up to size random bytes.", "The function can return less bytes than requested.", "These bytes can be used to seed user-space random number generators or for cryptographic purposes.", "getrandom() relies on entropy gathered from device drivers and other sources of environmental noise.", "Unnecessarily reading large quantities of data will have a negative impact on  other users  of the /dev/random and /dev/urandom devices.", "The flags argument is a bit mask that can contain zero or more of the following values ORed together: os.GRND_RANDOM and GRND_NONBLOCK.", "See also the Linux getrandom() manual page.", "Availability: Linux 3.17 and newer."]}
{"index": 4484, "name": "os.urandom", "module": "os", "doc": ["Return a string of size random bytes suitable for cryptographic use.", "This function returns random bytes from an OS-specific randomness source.", "The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation.", "On Linux, if the getrandom() syscall is available, it is used in blocking mode: block until the system urandom entropy pool is initialized (128 bits of entropy are collected by the kernel).", "See the PEP 524 for the rationale.", "On Linux, the getrandom() function can be used to get random bytes in non-blocking mode (using the GRND_NONBLOCK flag) or to poll until the system urandom entropy pool is initialized.", "On a Unix-like system, random bytes are read from the /dev/urandom device.", "If the /dev/urandom device is not available or not readable, the NotImplementedError exception is raised.", "On Windows, it will use CryptGenRandom()."]}
{"index": 4485, "name": "os.GRND_NONBLOCK", "module": "os", "doc": ["By  default, when reading from /dev/random, getrandom() blocks if no random bytes are available, and when reading from /dev/urandom, it blocks if the entropy pool has not yet been initialized.", "If the GRND_NONBLOCK flag is set, then getrandom() does not block in these cases, but instead immediately raises BlockingIOError."]}
{"index": 4486, "name": "os.GRND_RANDOM", "module": "os", "doc": ["If  this  bit  is  set,  then  random bytes are drawn from the /dev/random pool instead of the /dev/urandom pool."]}
{"index": 4487, "name": "os.path.abspath", "module": "os", "doc": ["Return a normalized absolutized version of the pathname path.", "On most platforms, this is equivalent to calling the function normpath() as follows: normpath(join(os.getcwd(), path))."]}
{"index": 4488, "name": "os.path.basename", "module": "os", "doc": ["Return the base name of pathname path.", "This is the second element of the pair returned by passing path to the function split().", "Note that the result of this function is different from the Unix basename program; where basename for '/foo/bar/' returns 'bar', the basename() function returns an empty string ('')."]}
{"index": 4489, "name": "os.path.commonpath", "module": "os", "doc": ["Return the longest common sub-path of each pathname in the sequence paths.", "Raise ValueError if paths contains both absolute and relative pathnames, or if paths is empty.", "Unlike commonprefix(), this returns a valid path.", "Availability: Unix, Windows."]}
{"index": 4490, "name": "os.path.commonprefix", "module": "os", "doc": ["Return the longest path prefix (taken character-by-character) that is a prefix of all paths in  list.", "If list is empty, return the empty string ('')."]}
{"index": 4491, "name": "os.path.dirname", "module": "os", "doc": ["Return the directory name of pathname path.", "This is the first element of the pair returned by passing path to the function split()."]}
{"index": 4492, "name": "os.path.exists", "module": "os", "doc": ["Return True if path refers to an existing path or an open file descriptor.", "Returns False for broken symbolic links.", "On some platforms, this function may return False if permission is not granted to execute os.stat() on the requested file, even if the path physically exists."]}
{"index": 4493, "name": "os.path.lexists", "module": "os", "doc": ["Return True if path refers to an existing path.", "Returns True for broken symbolic links.", "Equivalent to exists() on platforms lacking os.lstat()."]}
{"index": 4494, "name": "os.path.expanduser", "module": "os", "doc": ["On Unix and Windows, return the argument with an initial component of ~ or ~user replaced by that user\u2019s home directory.", "On Unix, an initial ~ is replaced by the environment variable HOME if it is set; otherwise the current user\u2019s home directory is looked up in the password directory through the built-in module pwd.", "An initial ~user is looked up directly in the password directory.", "On Windows, HOME and USERPROFILE will be used if set, otherwise a combination of HOMEPATH and HOMEDRIVE will be used.", "An initial ~user is handled by stripping the last directory component from the created user path derived above.", "If the expansion fails or if the path does not begin with a tilde, the path is returned unchanged."]}
{"index": 4495, "name": "os.path.expandvars", "module": "os", "doc": ["Return the argument with environment variables expanded.", "Substrings of the form $name or ${name} are replaced by the value of environment variable name.", "Malformed variable names and references to non-existing variables are left unchanged.", "On Windows, %name% expansions are supported in addition to $name and ${name}."]}
{"index": 4496, "name": "os.path.getatime", "module": "os", "doc": ["Return the time of last access of path.", "The return value is a floating point number giving the number of seconds since the epoch (see the  time module).", "Raise OSError if the file does not exist or is inaccessible."]}
{"index": 4497, "name": "os.path.getmtime", "module": "os", "doc": ["Return the time of last modification of path.", "The return value is a floating point number giving the number of seconds since the epoch (see the  time module).", "Raise OSError if the file does not exist or is inaccessible."]}
{"index": 4498, "name": "os.path.getctime", "module": "os", "doc": ["Return the system\u2019s ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for path.", "The return value is a number giving the number of seconds since the epoch (see the  time module).", "Raise OSError if the file does not exist or is inaccessible."]}
{"index": 4499, "name": "os.path.getsize", "module": "os", "doc": ["Return the size, in bytes, of path.", "Raise OSError if the file does not exist or is inaccessible."]}
{"index": 4500, "name": "os.path.isabs", "module": "os", "doc": ["Return True if path is an absolute pathname.", "On Unix, that means it begins with a slash, on Windows that it begins with a (back)slash after chopping off a potential drive letter."]}
{"index": 4501, "name": "os.path.isfile", "module": "os", "doc": ["Return True if path is an existing regular file.", "This follows symbolic links, so both islink() and isfile() can be true for the same path."]}
{"index": 4502, "name": "os.path.isdir", "module": "os", "doc": ["Return True if path is an existing directory.", "This follows symbolic links, so both islink() and isdir() can be true for the same path."]}
{"index": 4503, "name": "os.path.islink", "module": "os", "doc": ["Return True if path refers to an existing directory entry that is a symbolic link.", "Always False if symbolic links are not supported by the Python runtime."]}
{"index": 4504, "name": "os.path.ismount", "module": "os", "doc": ["Return True if pathname path is a mount point: a point in a file system where a different file system has been mounted.", "On POSIX, the function checks whether path\u2019s parent, path/.., is on a different device than path, or whether path/.. and path point to the same i-node on the same device \u2014 this should detect mount points for all Unix and POSIX variants.", "It is not able to reliably detect bind mounts on the same filesystem.", "On Windows, a drive letter root and a share UNC are always mount points, and for any other path GetVolumePathName is called to see if it is different from the input path."]}
{"index": 4505, "name": "os.path.join", "module": "os", "doc": ["Join one or more path components intelligently.", "The return value is the concatenation of path and any members of *paths with exactly one directory separator (os.sep) following each non-empty part except the last, meaning that the result will only end in a separator if the last part is empty.", "If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.", "On Windows, the drive letter is not reset when an absolute path component (e.g., r'\\foo') is encountered.", "If a component contains a drive letter, all previous components are thrown away and the drive letter is reset.", "Note that since there is a current directory for each drive, os.path.join(\"c:\", \"foo\") represents a path relative to the current directory on drive C: (c:foo), not c:\\foo."]}
{"index": 4506, "name": "os.path.normcase", "module": "os", "doc": ["Normalize the case of a pathname.", "On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes.", "On other operating systems, return the path unchanged.", "Raise a TypeError if the type of path is not str or bytes (directly or indirectly through the os.PathLike interface)."]}
{"index": 4507, "name": "os.path.normpath", "module": "os", "doc": ["Normalize a pathname by collapsing redundant separators and up-level references so that A//B, A/B/, A/./B and A/foo/../B all become A/B.", "This string manipulation may change the meaning of a path that contains symbolic links.", "On Windows, it converts forward slashes to backward slashes.", "To normalize case, use normcase()."]}
{"index": 4508, "name": "os.path.realpath", "module": "os", "doc": ["Return the canonical path of the specified filename, eliminating any symbolic links encountered in the path (if they are supported by the operating system)."]}
{"index": 4509, "name": "os.path.relpath", "module": "os", "doc": ["Return a relative filepath to path either from the current directory or from an optional start directory.", "This is a path computation:  the filesystem is not accessed to confirm the existence or nature of path or start.", "start defaults to os.curdir.", "Availability: Unix, Windows."]}
{"index": 4510, "name": "os.path.samefile", "module": "os", "doc": ["Return True if both pathname arguments refer to the same file or directory.", "This is determined by the device number and i-node number and raises an exception if an os.stat() call on either pathname fails.", "Availability: Unix, Windows."]}
{"index": 4511, "name": "os.path.sameopenfile", "module": "os", "doc": ["Return True if the file descriptors fp1 and fp2 refer to the same file.", "Availability: Unix, Windows."]}
{"index": 4512, "name": "os.path.samestat", "module": "os", "doc": ["Return True if the stat tuples stat1 and stat2 refer to the same file.", "These structures may have been returned by os.fstat(), os.lstat(), or os.stat().", "This function implements the underlying comparison used by samefile() and sameopenfile().", "Availability: Unix, Windows."]}
{"index": 4513, "name": "os.path.split", "module": "os", "doc": ["Split the pathname path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that.", "The tail part will never contain a slash; if path ends in a slash, tail will be empty.", "If there is no slash in path, head will be empty.", "If path is empty, both head and tail are empty.", "Trailing slashes are stripped from head unless it is the root (one or more slashes only).", "In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ).", "Also see the functions dirname() and basename()."]}
{"index": 4514, "name": "os.path.splitdrive", "module": "os", "doc": ["Split the pathname path into a pair (drive, tail) where drive is either a mount point or the empty string.", "On systems which do not use drive specifications, drive will always be the empty string.", "In all cases, drive + tail will be the same as path.", "On Windows, splits a pathname into drive/UNC sharepoint and relative path.", "If the path contains a drive letter, drive will contain everything up to and including the colon.", "e.g.", "splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")", "If the path contains a UNC path, drive will contain the host name and share, up to but not including the fourth separator.", "e.g.", "splitdrive(\"//host/computer/dir\") returns (\"//host/computer\", \"/dir\")"]}
{"index": 4515, "name": "os.path.splitext", "module": "os", "doc": ["Split the pathname path into a pair (root, ext)  such that root + ext == path, and ext is empty or begins with a period and contains at most one period.", "Leading periods on the basename are  ignored; splitext('.cshrc') returns  ('.cshrc', '')."]}
{"index": 4516, "name": "os.path.supports_unicode_filenames", "module": "os", "doc": ["True if arbitrary Unicode strings can be used as file names (within limitations imposed by the file system)."]}
{"index": 4517, "name": "ossaudiodev.OSSAudioError", "module": "ossaudiodev", "doc": ["This exception is raised on certain errors.", "The argument is a string describing what went wrong.", "(If ossaudiodev receives an error from a system call such as open(), write(), or ioctl(), it raises OSError.", "Errors detected directly by ossaudiodev result in OSSAudioError.)", "(For backwards compatibility, the exception class is also available as ossaudiodev.error.)"]}
{"index": 4518, "name": "ossaudiodev.open", "module": "ossaudiodev", "doc": ["Open an audio device and return an OSS audio device object.", "This object supports many file-like methods, such as read(), write(), and fileno() (although there are subtle differences between conventional Unix read/write semantics and those of OSS audio devices).", "It also supports a number of audio-specific methods; see below for the complete list of methods.", "device is the audio device filename to use.", "If it is not specified, this module first looks in the environment variable AUDIODEV for a device to use.", "If not found, it falls back to /dev/dsp.", "mode is one of 'r' for read-only (record) access, 'w' for write-only (playback) access and 'rw' for both.", "Since many sound cards only allow one process to have the recorder or player open at a time, it is a good idea to open the device only for the activity needed.", "Further, some sound cards are half-duplex: they can be opened for reading or writing, but not both at once.", "Note the unusual calling syntax: the first argument is optional, and the second is required.", "This is a historical artifact for compatibility with the older linuxaudiodev module which ossaudiodev supersedes."]}
{"index": 4519, "name": "ossaudiodev.openmixer", "module": "ossaudiodev", "doc": ["Open a mixer device and return an OSS mixer device object.", "device is the mixer device filename to use.", "If it is not specified, this module first looks in the environment variable MIXERDEV for a device to use.", "If not found, it falls back to /dev/mixer."]}
{"index": 4520, "name": "ossaudiodev.oss_audio_device.close", "module": "ossaudiodev", "doc": ["Explicitly close the audio device.", "When you are done writing to or reading from an audio device, you should explicitly close it.", "A closed device cannot be used again."]}
{"index": 4521, "name": "ossaudiodev.oss_audio_device.fileno", "module": "ossaudiodev", "doc": ["Return the file descriptor associated with the device."]}
{"index": 4522, "name": "ossaudiodev.oss_audio_device.read", "module": "ossaudiodev", "doc": ["Read size bytes from the audio input and return them as a Python string.", "Unlike most Unix device drivers, OSS audio devices in blocking mode (the default) will block read() until the entire requested amount of data is available."]}
{"index": 4523, "name": "ossaudiodev.oss_audio_device.write", "module": "ossaudiodev", "doc": ["Write a bytes-like object data to the audio device and return the number of bytes written.", "If the audio device is in blocking mode (the default), the entire data is always written (again, this is different from usual Unix device semantics).", "If the device is in non-blocking mode, some data may not be written\u2014see writeall()."]}
{"index": 4524, "name": "ossaudiodev.oss_audio_device.writeall", "module": "ossaudiodev", "doc": ["Write a bytes-like object data to the audio device: waits until the audio device is able to accept data, writes as much data as it will accept, and repeats until data has been completely written.", "If the device is in blocking mode (the default), this has the same effect as write(); writeall() is only useful in non-blocking mode.", "Has no return value, since the amount of data written is always equal to the amount of data supplied."]}
{"index": 4525, "name": "ossaudiodev.oss_audio_device.nonblock", "module": "ossaudiodev", "doc": ["Put the device into non-blocking mode.", "Once in non-blocking mode, there is no way to return it to blocking mode."]}
{"index": 4526, "name": "ossaudiodev.oss_audio_device.getfmts", "module": "ossaudiodev", "doc": ["Return a bitmask of the audio output formats supported by the soundcard.", "Some of the formats supported by OSS are:", "Consult the OSS documentation for a full list of audio formats, and note that most devices support only a subset of these formats.", "Some older devices only support AFMT_U8; the most common format used today is AFMT_S16_LE."]}
{"index": 4527, "name": "ossaudiodev.oss_audio_device.setfmt", "module": "ossaudiodev", "doc": ["Try to set the current audio format to format\u2014see getfmts() for a list.", "Returns the audio format that the device was set to, which may not be the requested format.", "May also be used to return the current audio format\u2014do this by passing an \u201caudio format\u201d of AFMT_QUERY."]}
{"index": 4528, "name": "ossaudiodev.oss_audio_device.channels", "module": "ossaudiodev", "doc": ["Set the number of output channels to nchannels.", "A value of 1 indicates monophonic sound, 2 stereophonic.", "Some devices may have more than 2 channels, and some high-end devices may not support mono.", "Returns the number of channels the device was set to."]}
{"index": 4529, "name": "ossaudiodev.oss_audio_device.speed", "module": "ossaudiodev", "doc": ["Try to set the audio sampling rate to samplerate samples per second.", "Returns the rate actually set.", "Most sound devices don\u2019t support arbitrary sampling rates.", "Common rates are:"]}
{"index": 4530, "name": "ossaudiodev.oss_audio_device.sync", "module": "ossaudiodev", "doc": ["Wait until the sound device has played every byte in its buffer.", "(This happens implicitly when the device is closed.)", "The OSS documentation recommends closing and re-opening the device rather than using sync()."]}
{"index": 4531, "name": "ossaudiodev.oss_audio_device.reset", "module": "ossaudiodev", "doc": ["Immediately stop playing or recording and return the device to a state where it can accept commands.", "The OSS documentation recommends closing and re-opening the device after calling reset()."]}
{"index": 4532, "name": "ossaudiodev.oss_audio_device.post", "module": "ossaudiodev", "doc": ["Tell the driver that there is likely to be a pause in the output, making it possible for the device to handle the pause more intelligently.", "You might use this after playing a spot sound effect, before waiting for user input, or before doing disk I/O."]}
{"index": 4533, "name": "ossaudiodev.oss_audio_device.setparameters", "module": "ossaudiodev", "doc": ["Set the key audio sampling parameters\u2014sample format, number of channels, and sampling rate\u2014in one method call.", "format,  nchannels, and samplerate should be as specified in the setfmt(), channels(), and speed()  methods.", "If strict is true, setparameters() checks to see if each parameter was actually set to the requested value, and raises OSSAudioError if not.", "Returns a tuple (format, nchannels, samplerate) indicating the parameter values that were actually set by the device driver (i.e., the same as the return values of setfmt(), channels(), and speed()).", "For example,", "is equivalent to"]}
{"index": 4534, "name": "ossaudiodev.oss_audio_device.bufsize", "module": "ossaudiodev", "doc": ["Returns the size of the hardware buffer, in samples."]}
{"index": 4535, "name": "ossaudiodev.oss_audio_device.obufcount", "module": "ossaudiodev", "doc": ["Returns the number of samples that are in the hardware buffer yet to be played."]}
{"index": 4536, "name": "ossaudiodev.oss_audio_device.obuffree", "module": "ossaudiodev", "doc": ["Returns the number of samples that could be queued into the hardware buffer to be played without blocking."]}
{"index": 4537, "name": "ossaudiodev.oss_audio_device.closed", "module": "ossaudiodev", "doc": ["Boolean indicating whether the device has been closed."]}
{"index": 4538, "name": "ossaudiodev.oss_audio_device.name", "module": "ossaudiodev", "doc": ["String containing the name of the device file."]}
{"index": 4539, "name": "ossaudiodev.oss_audio_device.mode", "module": "ossaudiodev", "doc": ["The I/O mode for the file, either \"r\", \"rw\", or \"w\"."]}
{"index": 4540, "name": "ossaudiodev.oss_mixer_device.close", "module": "ossaudiodev", "doc": ["This method closes the open mixer device file.", "Any further attempts to use the mixer after this file is closed will raise an OSError."]}
{"index": 4541, "name": "ossaudiodev.oss_mixer_device.fileno", "module": "ossaudiodev", "doc": ["Returns the file handle number of the open mixer device file."]}
{"index": 4542, "name": "ossaudiodev.oss_mixer_device.controls", "module": "ossaudiodev", "doc": ["This method returns a bitmask specifying the available mixer controls (\u201cControl\u201d being a specific mixable \u201cchannel\u201d, such as SOUND_MIXER_PCM or SOUND_MIXER_SYNTH).", "This bitmask indicates a subset of all available mixer controls\u2014the SOUND_MIXER_* constants defined at module level.", "To determine if, for example, the current mixer object supports a PCM mixer, use the following Python code:", "For most purposes, the SOUND_MIXER_VOLUME (master volume) and SOUND_MIXER_PCM controls should suffice\u2014but code that uses the mixer should be flexible when it comes to choosing mixer controls.", "On the Gravis Ultrasound, for example, SOUND_MIXER_VOLUME does not exist."]}
{"index": 4543, "name": "ossaudiodev.oss_mixer_device.stereocontrols", "module": "ossaudiodev", "doc": ["Returns a bitmask indicating stereo mixer controls.", "If a bit is set, the corresponding control is stereo; if it is unset, the control is either monophonic or not supported by the mixer (use in combination with controls() to determine which).", "See the code example for the controls() function for an example of getting data from a bitmask."]}
{"index": 4544, "name": "ossaudiodev.oss_mixer_device.reccontrols", "module": "ossaudiodev", "doc": ["Returns a bitmask specifying the mixer controls that may be used to record.", "See the code example for controls() for an example of reading from a bitmask."]}
{"index": 4545, "name": "ossaudiodev.oss_mixer_device.get", "module": "ossaudiodev", "doc": ["Returns the volume of a given mixer control.", "The returned volume is a 2-tuple (left_volume,right_volume).", "Volumes are specified as numbers from 0 (silent) to 100 (full volume).", "If the control is monophonic, a 2-tuple is still returned, but both volumes are the same.", "Raises OSSAudioError if an invalid control is specified, or OSError if an unsupported control is specified."]}
{"index": 4546, "name": "ossaudiodev.oss_mixer_device.set", "module": "ossaudiodev", "doc": ["Sets the volume for a given mixer control to (left,right).", "left and right must be ints and between 0 (silent) and 100 (full volume).", "On success, the new volume is returned as a 2-tuple.", "Note that this may not be exactly the same as the volume specified, because of the limited resolution of some soundcard\u2019s mixers.", "Raises OSSAudioError if an invalid mixer control was specified, or if the specified volumes were out-of-range."]}
{"index": 4547, "name": "ossaudiodev.oss_mixer_device.get_recsrc", "module": "ossaudiodev", "doc": ["This method returns a bitmask indicating which control(s) are currently being used as a recording source."]}
{"index": 4548, "name": "ossaudiodev.oss_mixer_device.set_recsrc", "module": "ossaudiodev", "doc": ["Call this function to specify a recording source.", "Returns a bitmask indicating the new recording source (or sources) if successful; raises OSError if an invalid source was specified.", "To set the current recording source to the microphone input:"]}
{"index": 4549, "name": "parser.expr", "module": "parser", "doc": ["The expr() function parses the parameter source as if it were an input to compile(source, 'file.py', 'eval').", "If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised."]}
{"index": 4550, "name": "parser.suite", "module": "parser", "doc": ["The suite() function parses the parameter source as if it were an input to compile(source, 'file.py', 'exec').", "If the parse succeeds, an ST object is created to hold the internal parse tree representation, otherwise an appropriate exception is raised."]}
{"index": 4551, "name": "parser.sequence2st", "module": "parser", "doc": ["This function accepts a parse tree represented as a sequence and builds an internal representation if possible.", "If it can validate that the tree conforms to the Python grammar and all nodes are valid node types in the host version of Python, an ST object is created from the internal representation and returned to the called.", "If there is a problem creating the internal representation, or if the tree cannot be validated, a ParserError exception is raised.", "An ST object created this way should not be assumed to compile correctly; normal exceptions raised by compilation may still be initiated when the ST object is passed to compilest().", "This may indicate problems not related to syntax (such as a MemoryError exception), but may also be due to constructs such as the result of parsing del f(0), which escapes the Python parser but is checked by the bytecode compiler.", "Sequences representing terminal tokens may be represented as either two-element lists of the form (1, 'name') or as three-element lists of the form (1, 'name', 56).", "If the third element is present, it is assumed to be a valid line number.", "The line number may be specified for any subset of the terminal symbols in the input tree."]}
{"index": 4552, "name": "parser.tuple2st", "module": "parser", "doc": ["This is the same function as sequence2st().", "This entry point is maintained for backward compatibility."]}
{"index": 4553, "name": "parser.st2list", "module": "parser", "doc": ["This function accepts an ST object from the caller in st and returns a Python list representing the equivalent parse tree.", "The resulting list representation can be used for inspection or the creation of a new parse tree in list form.", "This function does not fail so long as memory is available to build the list representation.", "If the parse tree will only be used for inspection, st2tuple() should be used instead to reduce memory consumption and fragmentation.", "When the list representation is required, this function is significantly faster than retrieving a tuple representation and converting that to nested lists.", "If line_info is true, line number information will be included for all terminal tokens as a third element of the list representing the token.", "Note that the line number provided specifies the line on which the token ends.", "This information is omitted if the flag is false or omitted."]}
{"index": 4554, "name": "parser.st2tuple", "module": "parser", "doc": ["This function accepts an ST object from the caller in st and returns a Python tuple representing the equivalent parse tree.", "Other than returning a tuple instead of a list, this function is identical to st2list().", "If line_info is true, line number information will be included for all terminal tokens as a third element of the list representing the token.", "This information is omitted if the flag is false or omitted."]}
{"index": 4555, "name": "parser.compilest", "module": "parser", "doc": ["The Python byte compiler can be invoked on an ST object to produce code objects which can be used as part of a call to the built-in exec() or eval() functions.", "This function provides the interface to the compiler, passing the internal parse tree from st to the parser, using the source file name specified by the filename parameter.", "The default value supplied for filename indicates that the source was an ST object.", "Compiling an ST object may result in exceptions related to compilation; an example would be a SyntaxError caused by the parse tree for del f(0): this statement is considered legal within the formal grammar for Python but is not a legal language construct.", "The SyntaxError raised for this condition is actually generated by the Python byte-compiler normally, which is why it can be raised at this point by the parser module.", "Most causes of compilation failure can be diagnosed programmatically by inspection of the parse tree."]}
{"index": 4556, "name": "parser.isexpr", "module": "parser", "doc": ["When st represents an 'eval' form, this function returns true, otherwise it returns false.", "This is useful, since code objects normally cannot be queried for this information using existing built-in functions.", "Note that the code objects created by compilest() cannot be queried like this either, and are identical to those created by the built-in compile() function."]}
{"index": 4557, "name": "parser.issuite", "module": "parser", "doc": ["This function mirrors isexpr() in that it reports whether an ST object represents an 'exec' form, commonly known as a \u201csuite.\u201d  It is not safe to assume that this function is equivalent to not isexpr(st), as additional syntactic fragments may be supported in the future."]}
{"index": 4558, "name": "parser.ParserError", "module": "parser", "doc": ["Exception raised when a failure occurs within the parser module.", "This is generally produced for validation failures rather than the built-in SyntaxError raised during normal parsing.", "The exception argument is either a string describing the reason of the failure or a tuple containing a sequence causing the failure from a parse tree passed to sequence2st() and an explanatory string.", "Calls to sequence2st() need to be able to handle either type of exception, while calls to other functions in the module will only need to be aware of the simple string values."]}
{"index": 4559, "name": "parser.STType", "module": "parser", "doc": ["The type of the objects returned by expr(), suite() and sequence2st()."]}
{"index": 4560, "name": "parser.ST.compile", "module": "parser", "doc": ["Same as compilest(st, filename)."]}
{"index": 4561, "name": "parser.ST.isexpr", "module": "parser", "doc": ["Same as isexpr(st)."]}
{"index": 4562, "name": "parser.ST.issuite", "module": "parser", "doc": ["Same as issuite(st)."]}
{"index": 4563, "name": "parser.ST.tolist", "module": "parser", "doc": ["Same as st2list(st, line_info, col_info)."]}
{"index": 4564, "name": "parser.ST.totuple", "module": "parser", "doc": ["Same as st2tuple(st, line_info, col_info)."]}
{"index": 4565, "name": "pathlib.PurePath", "module": "pathlib", "doc": ["A generic class that represents the system\u2019s path flavour (instantiating it creates either a PurePosixPath or a PureWindowsPath):", "Each element of pathsegments can be either a string representing a path segment, an object implementing the os.PathLike interface which returns a string, or another path object:", "When pathsegments is empty, the current directory is assumed:", "When several absolute paths are given, the last is taken as an anchor (mimicking os.path.join()\u2019s behaviour):", "However, in a Windows path, changing the local root doesn\u2019t discard the previous drive setting:", "Spurious slashes and single dots are collapsed, but double dots ('..') are not, since this would change the meaning of a path in the face of symbolic links:", "(a na\u00efve approach would make PurePosixPath('foo/../bar') equivalent to PurePosixPath('bar'), which is wrong if foo is a symbolic link to another directory)", "Pure path objects implement the os.PathLike interface, allowing them to be used anywhere the interface is accepted."]}
{"index": 4566, "name": "pathlib.PurePosixPath", "module": "pathlib", "doc": ["A subclass of PurePath, this path flavour represents non-Windows filesystem paths:", "pathsegments is specified similarly to PurePath."]}
{"index": 4567, "name": "pathlib.PureWindowsPath", "module": "pathlib", "doc": ["A subclass of PurePath, this path flavour represents Windows filesystem paths:", "pathsegments is specified similarly to PurePath."]}
{"index": 4568, "name": "pathlib.PurePath.parts", "module": "pathlib", "doc": ["A tuple giving access to the path\u2019s various components:", "(note how the drive and local root are regrouped in a single part)"]}
{"index": 4569, "name": "pathlib.PurePath.drive", "module": "pathlib", "doc": ["A string representing the drive letter or name, if any:", "UNC shares are also considered drives:"]}
{"index": 4570, "name": "pathlib.PurePath.root", "module": "pathlib", "doc": ["A string representing the (local or global) root, if any:", "UNC shares always have a root:"]}
{"index": 4571, "name": "pathlib.PurePath.anchor", "module": "pathlib", "doc": ["The concatenation of the drive and root:"]}
{"index": 4572, "name": "pathlib.PurePath.parents", "module": "pathlib", "doc": ["An immutable sequence providing access to the logical ancestors of the path:"]}
{"index": 4573, "name": "pathlib.PurePath.parent", "module": "pathlib", "doc": ["The logical parent of the path:", "You cannot go past an anchor, or empty path:"]}
{"index": 4574, "name": "pathlib.PurePath.name", "module": "pathlib", "doc": ["A string representing the final path component, excluding the drive and root, if any:", "UNC drive names are not considered:"]}
{"index": 4575, "name": "pathlib.PurePath.suffix", "module": "pathlib", "doc": ["The file extension of the final component, if any:"]}
{"index": 4576, "name": "pathlib.PurePath.suffixes", "module": "pathlib", "doc": ["A list of the path\u2019s file extensions:"]}
{"index": 4577, "name": "pathlib.PurePath.stem", "module": "pathlib", "doc": ["The final path component, without its suffix:"]}
{"index": 4578, "name": "pathlib.PurePath.as_posix", "module": "pathlib", "doc": ["Return a string representation of the path with forward slashes (/):"]}
{"index": 4579, "name": "pathlib.PurePath.as_uri", "module": "pathlib", "doc": ["Represent the path as a file URI.", "ValueError is raised if the path isn\u2019t absolute."]}
{"index": 4580, "name": "pathlib.PurePath.is_absolute", "module": "pathlib", "doc": ["Return whether the path is absolute or not.", "A path is considered absolute if it has both a root and (if the flavour allows) a drive:"]}
{"index": 4581, "name": "pathlib.PurePath.is_reserved", "module": "pathlib", "doc": ["With PureWindowsPath, return True if the path is considered reserved under Windows, False otherwise.", "With PurePosixPath, False is always returned.", "File system calls on reserved paths can fail mysteriously or have unintended effects."]}
{"index": 4582, "name": "pathlib.PurePath.joinpath", "module": "pathlib", "doc": ["Calling this method is equivalent to combining the path with each of the other arguments in turn:"]}
{"index": 4583, "name": "pathlib.PurePath.match", "module": "pathlib", "doc": ["Match this path against the provided glob-style pattern.", "Return True if matching is successful, False otherwise.", "If pattern is relative, the path can be either relative or absolute, and matching is done from the right:", "If pattern is absolute, the path must be absolute, and the whole path must match:", "As with other methods, case-sensitivity is observed:"]}
{"index": 4584, "name": "pathlib.PurePath.relative_to", "module": "pathlib", "doc": ["Compute a version of this path relative to the path represented by other.", "If it\u2019s impossible, ValueError is raised:"]}
{"index": 4585, "name": "pathlib.PurePath.with_name", "module": "pathlib", "doc": ["Return a new path with the name changed.", "If the original path doesn\u2019t have a name, ValueError is raised:"]}
{"index": 4586, "name": "pathlib.PurePath.with_suffix", "module": "pathlib", "doc": ["Return a new path with the suffix changed.", "If the original path doesn\u2019t have a suffix, the new suffix is appended instead.", "If the suffix is an empty string, the original suffix is removed:"]}
{"index": 4587, "name": "pathlib.Path", "module": "pathlib", "doc": ["A subclass of PurePath, this class represents concrete paths of the system\u2019s path flavour (instantiating it creates either a PosixPath or a WindowsPath):", "pathsegments is specified similarly to PurePath."]}
{"index": 4588, "name": "pathlib.PosixPath", "module": "pathlib", "doc": ["A subclass of Path and PurePosixPath, this class represents concrete non-Windows filesystem paths:", "pathsegments is specified similarly to PurePath."]}
{"index": 4589, "name": "pathlib.WindowsPath", "module": "pathlib", "doc": ["A subclass of Path and PureWindowsPath, this class represents concrete Windows filesystem paths:", "pathsegments is specified similarly to PurePath."]}
{"index": 4590, "name": "pathlib.Path.cwd", "module": "pathlib", "doc": ["Return a new path object representing the current directory (as returned by os.getcwd()):"]}
{"index": 4591, "name": "pathlib.Path.home", "module": "pathlib", "doc": ["Return a new path object representing the user\u2019s home directory (as returned by os.path.expanduser() with ~ construct):"]}
{"index": 4592, "name": "pathlib.Path.stat", "module": "pathlib", "doc": ["Return information about this path (similarly to os.stat()).", "The result is looked up at each call to this method."]}
{"index": 4593, "name": "pathlib.Path.chmod", "module": "pathlib", "doc": ["Change the file mode and permissions, like os.chmod():"]}
{"index": 4594, "name": "pathlib.Path.exists", "module": "pathlib", "doc": ["Whether the path points to an existing file or directory:"]}
{"index": 4595, "name": "pathlib.Path.expanduser", "module": "pathlib", "doc": ["Return a new path with expanded ~ and ~user constructs, as returned by os.path.expanduser():"]}
{"index": 4596, "name": "pathlib.Path.glob", "module": "pathlib", "doc": ["Glob the given relative pattern in the directory represented by this path, yielding all matching files (of any kind):", "The \u201c**\u201d pattern means \u201cthis directory and all subdirectories, recursively\u201d.", "In other words, it enables recursive globbing:"]}
{"index": 4597, "name": "pathlib.Path.group", "module": "pathlib", "doc": ["Return the name of the group owning the file.", "KeyError is raised if the file\u2019s gid isn\u2019t found in the system database."]}
{"index": 4598, "name": "pathlib.Path.is_dir", "module": "pathlib", "doc": ["Return True if the path points to a directory (or a symbolic link pointing to a directory), False if it points to another kind of file.", "False is also returned if the path doesn\u2019t exist or is a broken symlink; other errors (such as permission errors) are propagated."]}
{"index": 4599, "name": "pathlib.Path.is_file", "module": "pathlib", "doc": ["Return True if the path points to a regular file (or a symbolic link pointing to a regular file), False if it points to another kind of file.", "False is also returned if the path doesn\u2019t exist or is a broken symlink; other errors (such as permission errors) are propagated."]}
{"index": 4600, "name": "pathlib.Path.is_mount", "module": "pathlib", "doc": ["Return True if the path is a mount point: a point in a file system where a different file system has been mounted.", "On POSIX, the function checks whether path\u2019s parent, path/.., is on a different device than path, or whether path/.. and path point to the same i-node on the same device \u2014 this should detect mount points for all Unix and POSIX variants.", "Not implemented on Windows."]}
{"index": 4601, "name": "pathlib.Path.is_symlink", "module": "pathlib", "doc": ["Return True if the path points to a symbolic link, False otherwise.", "False is also returned if the path doesn\u2019t exist; other errors (such as permission errors) are propagated."]}
{"index": 4602, "name": "pathlib.Path.is_socket", "module": "pathlib", "doc": ["Return True if the path points to a Unix socket (or a symbolic link pointing to a Unix socket), False if it points to another kind of file.", "False is also returned if the path doesn\u2019t exist or is a broken symlink; other errors (such as permission errors) are propagated."]}
{"index": 4603, "name": "pathlib.Path.is_fifo", "module": "pathlib", "doc": ["Return True if the path points to a FIFO (or a symbolic link pointing to a FIFO), False if it points to another kind of file.", "False is also returned if the path doesn\u2019t exist or is a broken symlink; other errors (such as permission errors) are propagated."]}
{"index": 4604, "name": "pathlib.Path.is_block_device", "module": "pathlib", "doc": ["Return True if the path points to a block device (or a symbolic link pointing to a block device), False if it points to another kind of file.", "False is also returned if the path doesn\u2019t exist or is a broken symlink; other errors (such as permission errors) are propagated."]}
{"index": 4605, "name": "pathlib.Path.is_char_device", "module": "pathlib", "doc": ["Return True if the path points to a character device (or a symbolic link pointing to a character device), False if it points to another kind of file.", "False is also returned if the path doesn\u2019t exist or is a broken symlink; other errors (such as permission errors) are propagated."]}
{"index": 4606, "name": "pathlib.Path.iterdir", "module": "pathlib", "doc": ["When the path points to a directory, yield path objects of the directory contents:"]}
{"index": 4607, "name": "pathlib.Path.lchmod", "module": "pathlib", "doc": ["Like Path.chmod() but, if the path points to a symbolic link, the symbolic link\u2019s mode is changed rather than its target\u2019s."]}
{"index": 4608, "name": "pathlib.Path.lstat", "module": "pathlib", "doc": ["Like Path.stat() but, if the path points to a symbolic link, return the symbolic link\u2019s information rather than its target\u2019s."]}
{"index": 4609, "name": "pathlib.Path.mkdir", "module": "pathlib", "doc": ["Create a new directory at this given path.", "If mode is given, it is combined with the process\u2019 umask value to determine the file mode and access flags.", "If the path already exists, FileExistsError is raised.", "If parents is true, any missing parents of this path are created as needed; they are created with the default permissions without taking mode into account (mimicking the POSIX mkdir -p command).", "If parents is false (the default), a missing parent raises FileNotFoundError.", "If exist_ok is false (the default), FileExistsError is raised if the target directory already exists.", "If exist_ok is true, FileExistsError exceptions will be ignored (same behavior as the POSIX mkdir -p command), but only if the last path component is not an existing non-directory file."]}
{"index": 4610, "name": "pathlib.Path.open", "module": "pathlib", "doc": ["Open the file pointed to by the path, like the built-in open() function does:"]}
{"index": 4611, "name": "pathlib.Path.owner", "module": "pathlib", "doc": ["Return the name of the user owning the file.", "KeyError is raised if the file\u2019s uid isn\u2019t found in the system database."]}
{"index": 4612, "name": "pathlib.Path.read_bytes", "module": "pathlib", "doc": ["Return the binary contents of the pointed-to file as a bytes object:"]}
{"index": 4613, "name": "pathlib.Path.read_text", "module": "pathlib", "doc": ["Return the decoded contents of the pointed-to file as a string:", "The file is opened and then closed.", "The optional parameters have the same meaning as in open()."]}
{"index": 4614, "name": "pathlib.Path.rename", "module": "pathlib", "doc": ["Rename this file or directory to the given target.", "On Unix, if target exists and is a file, it will be replaced silently if the user has permission.", "target can be either a string or another path object:"]}
{"index": 4615, "name": "pathlib.Path.replace", "module": "pathlib", "doc": ["Rename this file or directory to the given target.", "If target points to an existing file or directory, it will be unconditionally replaced."]}
{"index": 4616, "name": "pathlib.Path.resolve", "module": "pathlib", "doc": ["Make the path absolute, resolving any symlinks.", "A new path object is returned:", "\u201c..\u201d components are also eliminated (this is the only method to do so):", "If the path doesn\u2019t exist and strict is True, FileNotFoundError is raised.", "If strict is False, the path is resolved as far as possible and any remainder is appended without checking whether it exists.", "If an infinite loop is encountered along the resolution path, RuntimeError is raised."]}
{"index": 4617, "name": "pathlib.Path.rglob", "module": "pathlib", "doc": ["This is like calling Path.glob() with \u201c**/\u201d added in front of the given relative pattern:"]}
{"index": 4618, "name": "pathlib.Path.rmdir", "module": "pathlib", "doc": ["Remove this directory.", "The directory must be empty."]}
{"index": 4619, "name": "pathlib.Path.samefile", "module": "pathlib", "doc": ["Return whether this path points to the same file as other_path, which can be either a Path object, or a string.", "The semantics are similar to os.path.samefile() and os.path.samestat().", "An OSError can be raised if either file cannot be accessed for some reason."]}
{"index": 4620, "name": "pathlib.Path.symlink_to", "module": "pathlib", "doc": ["Make this path a symbolic link to target.", "Under Windows, target_is_directory must be true (default False) if the link\u2019s target is a directory.", "Under POSIX, target_is_directory\u2019s value is ignored."]}
{"index": 4621, "name": "pathlib.Path.touch", "module": "pathlib", "doc": ["Create a file at this given path.", "If mode is given, it is combined with the process\u2019 umask value to determine the file mode and access flags.", "If the file already exists, the function succeeds if exist_ok is true (and its modification time is updated to the current time), otherwise FileExistsError is raised."]}
{"index": 4622, "name": "pathlib.Path.unlink", "module": "pathlib", "doc": ["Remove this file or symbolic link.", "If the path points to a directory, use Path.rmdir() instead."]}
{"index": 4623, "name": "pathlib.Path.write_bytes", "module": "pathlib", "doc": ["Open the file pointed to in bytes mode, write data to it, and close the file:", "An existing file of the same name is overwritten."]}
{"index": 4624, "name": "pathlib.Path.write_text", "module": "pathlib", "doc": ["Open the file pointed to in text mode, write data to it, and close the file:"]}
{"index": 4625, "name": "pdb.run", "module": "pdb", "doc": ["Execute the statement (given as a string or a code object) under debugger control.", "The debugger prompt appears before any code is executed; you can set breakpoints and type continue, or you can step through the statement using step or next (all these commands are explained below).", "The optional globals and locals arguments specify the environment in which the code is executed; by default the dictionary of the module __main__ is used.", "(See the explanation of the built-in exec() or eval() functions.)"]}
{"index": 4626, "name": "pdb.runeval", "module": "pdb", "doc": ["Evaluate the expression (given as a string or a code object) under debugger control.", "When runeval() returns, it returns the value of the expression.", "Otherwise this function is similar to run()."]}
{"index": 4627, "name": "pdb.runcall", "module": "pdb", "doc": ["Call the function (a function or method object, not a string) with the given arguments.", "When runcall() returns, it returns whatever the function call returned.", "The debugger prompt appears as soon as the function is entered."]}
{"index": 4628, "name": "pdb.set_trace", "module": "pdb", "doc": ["Enter the debugger at the calling stack frame.", "This is useful to hard-code a breakpoint at a given point in a program, even if the code is not otherwise being debugged (e.g.", "when an assertion fails).", "If given, header is printed to the console just before debugging begins."]}
{"index": 4629, "name": "pdb.post_mortem", "module": "pdb", "doc": ["Enter post-mortem debugging of the given traceback object.", "If no traceback is given, it uses the one of the exception that is currently being handled (an exception must be being handled if the default is to be used)."]}
{"index": 4630, "name": "pdb.pm", "module": "pdb", "doc": ["Enter post-mortem debugging of the traceback found in sys.last_traceback."]}
{"index": 4631, "name": "pdb.Pdb", "module": "pdb", "doc": ["Pdb is the debugger class.", "The completekey, stdin and stdout arguments are passed to the underlying cmd.Cmd class; see the description there.", "The skip argument, if given, must be an iterable of glob-style module name patterns.", "The debugger will not step into frames that originate in a module that matches one of these patterns.", "1", "By default, Pdb sets a handler for the SIGINT signal (which is sent when the user presses Ctrl-C on the console) when you give a continue command.", "This allows you to break into the debugger again by pressing Ctrl-C.", "If you want Pdb not to touch the SIGINT handler, set nosigint to true.", "The readrc argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem.", "Example call to enable tracing with skip:"]}
{"index": 4632, "name": "pdb.Pdb.run", "module": "pdb", "doc": ["See the documentation for the functions explained above."]}
{"index": 4633, "name": "pdb.Pdb.runeval", "module": "pdb", "doc": ["See the documentation for the functions explained above."]}
{"index": 4634, "name": "pdb.Pdb.runcall", "module": "pdb", "doc": ["See the documentation for the functions explained above."]}
{"index": 4635, "name": "pdb.Pdb.set_trace", "module": "pdb", "doc": ["See the documentation for the functions explained above."]}
{"index": 4636, "name": "pdbcommand-help", "module": "pdb", "doc": ["Without argument, print the list of available commands.", "With a command as argument, print help about that command.", "help pdb displays the full documentation (the docstring of the pdb module).", "Since the command argument must be an identifier, help exec must be entered to get help on the !", "command."]}
{"index": 4637, "name": "pdbcommand-where", "module": "pdb", "doc": ["Print a stack trace, with the most recent frame at the bottom.", "An arrow indicates the current frame, which determines the context of most commands."]}
{"index": 4638, "name": "pdbcommand-down", "module": "pdb", "doc": ["Move the current frame count (default one) levels down in the stack trace (to a newer frame)."]}
{"index": 4639, "name": "pdbcommand-up", "module": "pdb", "doc": ["Move the current frame count (default one) levels up in the stack trace (to an older frame)."]}
{"index": 4640, "name": "pdbcommand-break", "module": "pdb", "doc": ["With a lineno argument, set a break there in the current file.", "With a function argument, set a break at the first executable statement within that function.", "The line number may be prefixed with a filename and a colon, to specify a breakpoint in another file (probably one that hasn\u2019t been loaded yet).", "The file is searched on sys.path.", "Note that each breakpoint is assigned a number to which all the other breakpoint commands refer.", "If a second argument is present, it is an expression which must evaluate to true before the breakpoint is honored.", "Without argument, list all breaks, including for each breakpoint, the number of times that breakpoint has been hit, the current ignore count, and the associated condition if any."]}
{"index": 4641, "name": "pdbcommand-tbreak", "module": "pdb", "doc": ["Temporary breakpoint, which is removed automatically when it is first hit.", "The arguments are the same as for break."]}
{"index": 4642, "name": "pdbcommand-clear", "module": "pdb", "doc": ["With a filename:lineno argument, clear all the breakpoints at this line.", "With a space separated list of breakpoint numbers, clear those breakpoints.", "Without argument, clear all breaks (but first ask confirmation)."]}
{"index": 4643, "name": "pdbcommand-disable", "module": "pdb", "doc": ["Disable the breakpoints given as a space separated list of breakpoint numbers.", "Disabling a breakpoint means it cannot cause the program to stop execution, but unlike clearing a breakpoint, it remains in the list of breakpoints and can be (re-)enabled."]}
{"index": 4644, "name": "pdbcommand-enable", "module": "pdb", "doc": ["Enable the breakpoints specified."]}
{"index": 4645, "name": "pdbcommand-ignore", "module": "pdb", "doc": ["Set the ignore count for the given breakpoint number.", "If count is omitted, the ignore count is set to 0.", "A breakpoint becomes active when the ignore count is zero.", "When non-zero, the count is decremented each time the breakpoint is reached and the breakpoint is not disabled and any associated condition evaluates to true."]}
{"index": 4646, "name": "pdbcommand-condition", "module": "pdb", "doc": ["Set a new condition for the breakpoint, an expression which must evaluate to true before the breakpoint is honored.", "If condition is absent, any existing condition is removed; i.e., the breakpoint is made unconditional."]}
{"index": 4647, "name": "pdbcommand-commands", "module": "pdb", "doc": ["Specify a list of commands for breakpoint number bpnumber.", "The commands themselves appear on the following lines.", "Type a line containing just end to terminate the commands.", "An example:", "To remove all commands from a breakpoint, type commands and follow it immediately with end; that is, give no commands.", "With no bpnumber argument, commands refers to the last breakpoint set.", "You can use breakpoint commands to start your program up again.", "Simply use the continue command, or step, or any other command that resumes execution.", "Specifying any command resuming execution (currently continue, step, next, return, jump, quit and their abbreviations) terminates the command list (as if that command was immediately followed by end).", "This is because any time you resume execution (even with a simple next or step), you may encounter another breakpoint\u2014which could have its own command list, leading to ambiguities about which list to execute.", "If you use the \u2018silent\u2019 command in the command list, the usual message about stopping at a breakpoint is not printed.", "This may be desirable for breakpoints that are to print a specific message and then continue.", "If none of the other commands print anything, you see no sign that the breakpoint was reached."]}
{"index": 4648, "name": "pdbcommand-step", "module": "pdb", "doc": ["Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function)."]}
{"index": 4649, "name": "pdbcommand-next", "module": "pdb", "doc": ["Continue execution until the next line in the current function is reached or it returns.", "(The difference between next and step is that step stops inside a called function, while next executes called functions at (nearly) full speed, only stopping at the next line in the current function.)"]}
{"index": 4650, "name": "pdbcommand-until", "module": "pdb", "doc": ["Without argument, continue execution until the line with a number greater than the current one is reached.", "With a line number, continue execution until a line with a number greater or equal to that is reached.", "In both cases, also stop when the current frame returns."]}
{"index": 4651, "name": "pdbcommand-return", "module": "pdb", "doc": ["Continue execution until the current function returns."]}
{"index": 4652, "name": "pdbcommand-continue", "module": "pdb", "doc": ["Continue execution, only stop when a breakpoint is encountered."]}
{"index": 4653, "name": "pdbcommand-jump", "module": "pdb", "doc": ["Set the next line that will be executed.", "Only available in the bottom-most frame.", "This lets you jump back and execute code again, or jump forward to skip code that you don\u2019t want to run.", "It should be noted that not all jumps are allowed \u2013 for instance it is not possible to jump into the middle of a for loop or out of a finally clause."]}
{"index": 4654, "name": "pdbcommand-list", "module": "pdb", "doc": ["List source code for the current file.", "Without arguments, list 11 lines around the current line or continue the previous listing.", "With .", "as argument, list 11 lines around the current line.", "With one argument, list 11 lines around at that line.", "With two arguments, list the given range; if the second argument is less than the first, it is interpreted as a count.", "The current line in the current frame is indicated by ->.", "If an exception is being debugged, the line where the exception was originally raised or propagated is indicated by >>, if it differs from the current line."]}
{"index": 4655, "name": "pdbcommand-ll", "module": "pdb", "doc": ["List all source code for the current function or frame.", "Interesting lines are marked as for list."]}
{"index": 4656, "name": "pdbcommand-args", "module": "pdb", "doc": ["Print the argument list of the current function."]}
{"index": 4657, "name": "pdbcommand-p", "module": "pdb", "doc": ["Evaluate the expression in the current context and print its value."]}
{"index": 4658, "name": "pdbcommand-pp", "module": "pdb", "doc": ["Like the p command, except the value of the expression is pretty-printed using the pprint module."]}
{"index": 4659, "name": "pdbcommand-whatis", "module": "pdb", "doc": ["Print the type of the expression."]}
{"index": 4660, "name": "pdbcommand-source", "module": "pdb", "doc": ["Try to get source code for the given object and display it."]}
{"index": 4661, "name": "pdbcommand-display", "module": "pdb", "doc": ["Display the value of the expression if it changed, each time execution stops in the current frame.", "Without expression, list all display expressions for the current frame."]}
{"index": 4662, "name": "pdbcommand-undisplay", "module": "pdb", "doc": ["Do not display the expression any more in the current frame.", "Without expression, clear all display expressions for the current frame."]}
{"index": 4663, "name": "pdbcommand-interact", "module": "pdb", "doc": ["Start an interactive interpreter (using the code module) whose global namespace contains all the (global and local) names found in the current scope."]}
{"index": 4664, "name": "pdbcommand-alias", "module": "pdb", "doc": ["Create an alias called name that executes command.", "The command must not be enclosed in quotes.", "Replaceable parameters can be indicated by %1, %2, and so on, while %* is replaced by all the parameters.", "If no command is given, the current alias for name is shown.", "If no arguments are given, all aliases are listed.", "Aliases may be nested and can contain anything that can be legally typed at the pdb prompt.", "Note that internal pdb commands can be overridden by aliases.", "Such a command is then hidden until the alias is removed.", "Aliasing is recursively applied to the first word of the command line; all other words in the line are left alone.", "As an example, here are two useful aliases (especially when placed in the .pdbrc file):"]}
{"index": 4665, "name": "pdbcommand-unalias", "module": "pdb", "doc": ["Delete the specified alias."]}
{"index": 4666, "name": "pdbcommand-0", "module": "pdb", "doc": ["Execute the (one-line) statement in the context of the current stack frame.", "The exclamation point can be omitted unless the first word of the statement resembles a debugger command.", "To set a global variable, you can prefix the assignment command with a global statement on the same line, e.g.", ":"]}
{"index": 4667, "name": "pdbcommand-run", "module": "pdb", "doc": ["Restart the debugged Python program.", "If an argument is supplied, it is split with shlex and the result is used as the new sys.argv.", "History, breakpoints, actions and debugger options are preserved.", "restart is an alias for run."]}
{"index": 4668, "name": "pdbcommand-restart", "module": "pdb", "doc": ["Restart the debugged Python program.", "If an argument is supplied, it is split with shlex and the result is used as the new sys.argv.", "History, breakpoints, actions and debugger options are preserved.", "restart is an alias for run."]}
{"index": 4669, "name": "pdbcommand-quit", "module": "pdb", "doc": ["Quit from the debugger.", "The program being executed is aborted."]}
{"index": 4670, "name": "id3", "module": "pdb", "doc": ["Whether a frame is considered to originate in a certain module is determined by the __name__ in the frame globals."]}
{"index": 4671, "name": "pickle.HIGHEST_PROTOCOL", "module": "pickle", "doc": ["An integer, the highest protocol version available.", "This value can be passed as a protocol value to functions dump() and dumps() as well as the Pickler constructor."]}
{"index": 4672, "name": "pickle.DEFAULT_PROTOCOL", "module": "pickle", "doc": ["An integer, the default protocol version used for pickling.", "May be less than HIGHEST_PROTOCOL.", "Currently the default protocol is 3, a new protocol designed for Python 3."]}
{"index": 4673, "name": "pickle.dump", "module": "pickle", "doc": ["Write the pickled representation of the object obj to the open file object file.", "This is equivalent to Pickler(file, protocol).dump(obj).", "The optional protocol argument, an integer, tells the pickler to use the given protocol; supported protocols are 0 to HIGHEST_PROTOCOL.", "If not specified, the default is DEFAULT_PROTOCOL.", "If a negative number is specified, HIGHEST_PROTOCOL is selected.", "The file argument must have a write() method that accepts a single bytes argument.", "It can thus be an on-disk file opened for binary writing, an io.BytesIO instance, or any other custom object that meets this interface.", "If fix_imports is true and protocol is less than 3, pickle will try to map the new Python 3 names to the old module names used in Python 2, so that the pickle data stream is readable with Python 2."]}
{"index": 4674, "name": "pickle.dumps", "module": "pickle", "doc": ["Return the pickled representation of the object obj as a bytes object, instead of writing it to a file.", "Arguments protocol and fix_imports have the same meaning as in dump()."]}
{"index": 4675, "name": "pickle.load", "module": "pickle", "doc": ["Read the pickled representation of an object from the open file object file and return the reconstituted object hierarchy specified therein.", "This is equivalent to Unpickler(file).load().", "The protocol version of the pickle is detected automatically, so no protocol argument is needed.", "Bytes past the pickled representation of the object are ignored.", "The argument file must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.", "Both methods should return bytes.", "Thus file can be an on-disk file opened for binary reading, an io.BytesIO object, or any other custom object that meets this interface.", "Optional keyword arguments are fix_imports, encoding and errors, which are used to control compatibility support for pickle stream generated by Python 2.", "If fix_imports is true, pickle will try to map the old Python 2 names to the new names used in Python 3.", "The encoding and errors tell pickle how to decode 8-bit string instances pickled by Python 2; these default to \u2018ASCII\u2019 and \u2018strict\u2019, respectively.", "The encoding can be \u2018bytes\u2019 to read these 8-bit string instances as bytes objects.", "Using encoding='latin1' is required for unpickling NumPy arrays and instances of datetime, date and time pickled by Python 2."]}
{"index": 4676, "name": "pickle.loads", "module": "pickle", "doc": ["Return the reconstituted object hierarchy of the pickled representation bytes_object of an object.", "The protocol version of the pickle is detected automatically, so no protocol argument is needed.", "Bytes past the pickled representation of the object are ignored.", "Optional keyword arguments are fix_imports, encoding and errors, which are used to control compatibility support for pickle stream generated by Python 2.", "If fix_imports is true, pickle will try to map the old Python 2 names to the new names used in Python 3.", "The encoding and errors tell pickle how to decode 8-bit string instances pickled by Python 2; these default to \u2018ASCII\u2019 and \u2018strict\u2019, respectively.", "The encoding can be \u2018bytes\u2019 to read these 8-bit string instances as bytes objects.", "Using encoding='latin1' is required for unpickling NumPy arrays and instances of datetime, date and time pickled by Python 2."]}
{"index": 4677, "name": "pickle.PickleError", "module": "pickle", "doc": ["Common base class for the other pickling exceptions.", "It inherits Exception."]}
{"index": 4678, "name": "pickle.PicklingError", "module": "pickle", "doc": ["Error raised when an unpicklable object is encountered by Pickler.", "It inherits PickleError.", "Refer to What can be pickled and unpickled?", "to learn what kinds of objects can be pickled."]}
{"index": 4679, "name": "pickle.UnpicklingError", "module": "pickle", "doc": ["Error raised when there is a problem unpickling an object, such as a data corruption or a security violation.", "It inherits PickleError.", "Note that other exceptions may also be raised during unpickling, including (but not necessarily limited to) AttributeError, EOFError, ImportError, and IndexError."]}
{"index": 4680, "name": "pickle.Pickler", "module": "pickle", "doc": ["This takes a binary file for writing a pickle data stream.", "The optional protocol argument, an integer, tells the pickler to use the given protocol; supported protocols are 0 to HIGHEST_PROTOCOL.", "If not specified, the default is DEFAULT_PROTOCOL.", "If a negative number is specified, HIGHEST_PROTOCOL is selected.", "The file argument must have a write() method that accepts a single bytes argument.", "It can thus be an on-disk file opened for binary writing, an io.BytesIO instance, or any other custom object that meets this interface.", "If fix_imports is true and protocol is less than 3, pickle will try to map the new Python 3 names to the old module names used in Python 2, so that the pickle data stream is readable with Python 2."]}
{"index": 4681, "name": "pickle.Pickler.dump", "module": "pickle", "doc": ["Write the pickled representation of obj to the open file object given in the constructor."]}
{"index": 4682, "name": "pickle.Pickler.persistent_id", "module": "pickle", "doc": ["Do nothing by default.", "This exists so a subclass can override it.", "If persistent_id() returns None, obj is pickled as usual.", "Any other value causes Pickler to emit the returned value as a persistent ID for obj.", "The meaning of this persistent ID should be defined by Unpickler.persistent_load().", "Note that the value returned by persistent_id() cannot itself have a persistent ID.", "See Persistence of External Objects for details and examples of uses."]}
{"index": 4683, "name": "pickle.Pickler.dispatch_table", "module": "pickle", "doc": ["A pickler object\u2019s dispatch table is a registry of reduction functions of the kind which can be declared using copyreg.pickle().", "It is a mapping whose keys are classes and whose values are reduction functions.", "A reduction function takes a single argument of the associated class and should conform to the same interface as a __reduce__() method.", "By default, a pickler object will not have a dispatch_table attribute, and it will instead use the global dispatch table managed by the copyreg module.", "However, to customize the pickling for a specific pickler object one can set the dispatch_table attribute to a dict-like object.", "Alternatively, if a subclass of Pickler has a dispatch_table attribute then this will be used as the default dispatch table for instances of that class.", "See Dispatch Tables for usage examples."]}
{"index": 4684, "name": "pickle.Pickler.fast", "module": "pickle", "doc": ["Deprecated.", "Enable fast mode if set to a true value.", "The fast mode disables the usage of memo, therefore speeding the pickling process by not generating superfluous PUT opcodes.", "It should not be used with self-referential objects, doing otherwise will cause Pickler to recurse infinitely.", "Use pickletools.optimize() if you need more compact pickles."]}
{"index": 4685, "name": "pickle.Unpickler", "module": "pickle", "doc": ["This takes a binary file for reading a pickle data stream.", "The protocol version of the pickle is detected automatically, so no protocol argument is needed.", "The argument file must have two methods, a read() method that takes an integer argument, and a readline() method that requires no arguments.", "Both methods should return bytes.", "Thus file can be an on-disk file object opened for binary reading, an io.BytesIO object, or any other custom object that meets this interface.", "Optional keyword arguments are fix_imports, encoding and errors, which are used to control compatibility support for pickle stream generated by Python 2.", "If fix_imports is true, pickle will try to map the old Python 2 names to the new names used in Python 3.", "The encoding and errors tell pickle how to decode 8-bit string instances pickled by Python 2; these default to \u2018ASCII\u2019 and \u2018strict\u2019, respectively.", "The encoding can be \u2018bytes\u2019 to read these 8-bit string instances as bytes objects."]}
{"index": 4686, "name": "pickle.Unpickler.load", "module": "pickle", "doc": ["Read the pickled representation of an object from the open file object given in the constructor, and return the reconstituted object hierarchy specified therein.", "Bytes past the pickled representation of the object are ignored."]}
{"index": 4687, "name": "pickle.Unpickler.persistent_load", "module": "pickle", "doc": ["Raise an UnpicklingError by default.", "If defined, persistent_load() should return the object specified by the persistent ID pid.", "If an invalid persistent ID is encountered, an UnpicklingError should be raised.", "See Persistence of External Objects for details and examples of uses."]}
{"index": 4688, "name": "pickle.Unpickler.find_class", "module": "pickle", "doc": ["Import module if necessary and return the object called name from it, where the module and name arguments are str objects.", "Note, unlike its name suggests, find_class() is also used for finding functions.", "Subclasses may override this to gain control over what type of objects and how they can be loaded, potentially reducing security risks.", "Refer to Restricting Globals for details."]}
{"index": 4689, "name": "object.__getnewargs_ex__", "module": "object", "doc": ["In protocols 2 and newer, classes that implements the __getnewargs_ex__() method can dictate the values passed to the __new__() method upon unpickling.", "The method must return a pair (args, kwargs) where args is a tuple of positional arguments and kwargs a dictionary of named arguments for constructing the object.", "Those will be passed to the __new__() method upon unpickling.", "You should implement this method if the __new__() method of your class requires keyword-only arguments.", "Otherwise, it is recommended for compatibility to implement __getnewargs__()."]}
{"index": 4690, "name": "object.__getnewargs__", "module": "object", "doc": ["This method serves a similar purpose as __getnewargs_ex__(), but supports only positional arguments.", "It must return a tuple of arguments args which will be passed to the __new__() method upon unpickling.", "__getnewargs__() will not be called if __getnewargs_ex__() is defined."]}
{"index": 4691, "name": "object.__getstate__", "module": "object", "doc": ["Classes can further influence how their instances are pickled; if the class defines the method __getstate__(), it is called and the returned object is pickled as the contents for the instance, instead of the contents of the instance\u2019s dictionary.", "If the __getstate__() method is absent, the instance\u2019s __dict__ is pickled as usual."]}
{"index": 4692, "name": "object.__setstate__", "module": "object", "doc": ["Upon unpickling, if the class defines __setstate__(), it is called with the unpickled state.", "In that case, there is no requirement for the state object to be a dictionary.", "Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance\u2019s dictionary."]}
{"index": 4693, "name": "object.__reduce__", "module": "object", "doc": ["The interface is currently defined as follows.", "The __reduce__() method takes no argument and shall return either a string or preferably a tuple (the returned object is often referred to as the \u201creduce value\u201d).", "If a string is returned, the string should be interpreted as the name of a global variable.", "It should be the object\u2019s local name relative to its module; the pickle module searches the module namespace to determine the object\u2019s module.", "This behaviour is typically useful for singletons.", "When a tuple is returned, it must be between two and five items long.", "Optional items can either be omitted, or None can be provided as their value.", "The semantics of each item are in order:"]}
{"index": 4694, "name": "object.__reduce_ex__", "module": "object", "doc": ["Alternatively, a __reduce_ex__() method may be defined.", "The only difference is this method should take a single integer argument, the protocol version.", "When defined, pickle will prefer it over the __reduce__() method.", "In addition, __reduce__() automatically becomes a synonym for the extended version.", "The main use for this method is to provide backwards-compatible reduce values for older Python releases."]}
{"index": 4695, "name": "id6", "module": "pickle", "doc": ["Don\u2019t confuse this with the marshal module"]}
{"index": 4696, "name": "id7", "module": "pickle", "doc": ["Don\u2019t confuse this with the marshal module"]}
{"index": 4697, "name": "id8", "module": "pickle", "doc": ["Don\u2019t confuse this with the marshal module"]}
{"index": 4698, "name": "id9", "module": "pickle", "doc": ["Don\u2019t confuse this with the marshal module"]}
{"index": 4699, "name": "id10", "module": "pickle", "doc": ["Don\u2019t confuse this with the marshal module"]}
{"index": 4700, "name": "cmdoption-pickletools-a", "module": "pickletools", "doc": ["Annotate each line with a short opcode description."]}
{"index": 4701, "name": "cmdoption-pickletools-o", "module": "pickletools", "doc": ["Name of a file where the output should be written."]}
{"index": 4702, "name": "cmdoption-pickletools-l", "module": "pickletools", "doc": ["The number of blanks by which to indent a new MARK level."]}
{"index": 4703, "name": "cmdoption-pickletools-m", "module": "pickletools", "doc": ["When multiple objects are disassembled, preserve memo between disassemblies."]}
{"index": 4704, "name": "cmdoption-pickletools-p", "module": "pickletools", "doc": ["When more than one pickle file are specified, print given preamble before each disassembly."]}
{"index": 4705, "name": "pickletools.dis", "module": "pickletools", "doc": ["Outputs a symbolic disassembly of the pickle to the file-like object out, defaulting to sys.stdout.", "pickle can be a string or a file-like object.", "memo can be a Python dictionary that will be used as the pickle\u2019s memo; it can be used to perform disassemblies across multiple pickles created by the same pickler.", "Successive levels, indicated by MARK opcodes in the stream, are indented by indentlevel spaces.", "If a nonzero value is given to annotate, each opcode in the output is annotated with a short description.", "The value of annotate is used as a hint for the column where annotation should start."]}
{"index": 4706, "name": "pickletools.genops", "module": "pickletools", "doc": ["Provides an iterator over all of the opcodes in a pickle, returning a sequence of (opcode, arg, pos) triples.", "opcode is an instance of an OpcodeInfo class; arg is the decoded value, as a Python object, of the opcode\u2019s argument; pos is the position at which this opcode is located.", "pickle can be a string or a file-like object."]}
{"index": 4707, "name": "pickletools.optimize", "module": "pickletools", "doc": ["Returns a new equivalent pickle string after eliminating unused PUT opcodes.", "The optimized pickle is shorter, takes less transmission time, requires less storage space, and unpickles more efficiently."]}
{"index": 4708, "name": "pipes.Template", "module": "pipes", "doc": ["An abstraction of a pipeline."]}
{"index": 4709, "name": "pipes.Template.reset", "module": "pipes", "doc": ["Restore a pipeline template to its initial state."]}
{"index": 4710, "name": "pipes.Template.clone", "module": "pipes", "doc": ["Return a new, equivalent, pipeline template."]}
{"index": 4711, "name": "pipes.Template.debug", "module": "pipes", "doc": ["If flag is true, turn debugging on.", "Otherwise, turn debugging off.", "When debugging is on, commands to be executed are printed, and the shell is given set -x command to be more verbose."]}
{"index": 4712, "name": "pipes.Template.append", "module": "pipes", "doc": ["Append a new action at the end.", "The cmd variable must be a valid bourne shell command.", "The kind variable consists of two letters.", "The first letter can be either of '-' (which means the command reads its standard input), 'f' (which means the commands reads a given file on the command line) or '.'", "(which means the commands reads no input, and hence must be first.)", "Similarly, the second letter can be either of '-' (which means  the command writes to standard output), 'f' (which means the  command writes a file on the command line) or '.'", "(which means the command does not write anything, and hence must be last.)"]}
{"index": 4713, "name": "pipes.Template.prepend", "module": "pipes", "doc": ["Add a new action at the beginning.", "See append() for explanations of the arguments."]}
{"index": 4714, "name": "pipes.Template.open", "module": "pipes", "doc": ["Return a file-like object, open to file, but read from or written to by the pipeline.", "Note that only one of 'r', 'w' may be given."]}
{"index": 4715, "name": "pipes.Template.copy", "module": "pipes", "doc": ["Copy infile to outfile through the pipe."]}
{"index": 4716, "name": "pkgutil.ModuleInfo", "module": "pkgutil", "doc": ["A namedtuple that holds a brief summary of a module\u2019s info."]}
{"index": 4717, "name": "pkgutil.extend_path", "module": "pkgutil", "doc": ["Extend the search path for the modules which comprise a package.", "Intended use is to place the following code in a package\u2019s __init__.py:", "This will add to the package\u2019s __path__ all subdirectories of directories on sys.path named after the package.", "This is useful if one wants to distribute different parts of a single logical package as multiple directories.", "It also looks for *.pkg files beginning where * matches the name argument.", "This feature is similar to *.pth files (see the site module for more information), except that it doesn\u2019t special-case lines starting with import.", "A *.pkg file is trusted at face value: apart from checking for duplicates, all entries found in a *.pkg file are added to the path, regardless of whether they exist on the filesystem.", "(This is a feature.)", "If the input path is not a list (as is the case for frozen packages) it is returned unchanged.", "The input path is not modified; an extended copy is returned.", "Items are only appended to the copy at the end.", "It is assumed that sys.path is a sequence.", "Items of sys.path that are not strings referring to existing directories are ignored.", "Unicode items on sys.path that cause errors when used as filenames may cause this function to raise an exception (in line with os.path.isdir() behavior)."]}
{"index": 4718, "name": "pkgutil.ImpImporter", "module": "pkgutil", "doc": ["PEP 302 Finder that wraps Python\u2019s \u201cclassic\u201d import algorithm.", "If dirname is a string, a PEP 302 finder is created that searches that directory.", "If dirname is None, a PEP 302 finder is created that searches the current sys.path, plus any modules that are frozen or built-in.", "Note that ImpImporter does not currently support being used by placement on sys.meta_path."]}
{"index": 4719, "name": "pkgutil.ImpLoader", "module": "pkgutil", "doc": ["Loader that wraps Python\u2019s \u201cclassic\u201d import algorithm."]}
{"index": 4720, "name": "pkgutil.find_loader", "module": "pkgutil", "doc": ["Retrieve a module loader for the given fullname.", "This is a backwards compatibility wrapper around importlib.util.find_spec() that converts most failures to ImportError and only returns the loader rather than the full ModuleSpec."]}
{"index": 4721, "name": "pkgutil.get_importer", "module": "pkgutil", "doc": ["Retrieve a finder for the given path_item.", "The returned finder is cached in sys.path_importer_cache if it was newly created by a path hook.", "The cache (or part of it) can be cleared manually if a rescan of sys.path_hooks is necessary."]}
{"index": 4722, "name": "pkgutil.get_loader", "module": "pkgutil", "doc": ["Get a loader object for module_or_name.", "If the module or package is accessible via the normal import mechanism, a wrapper around the relevant part of that machinery is returned.", "Returns None if the module cannot be found or imported.", "If the named module is not already imported, its containing package (if any) is imported, in order to establish the package __path__."]}
{"index": 4723, "name": "pkgutil.iter_importers", "module": "pkgutil", "doc": ["Yield finder objects for the given module name.", "If fullname contains a \u2018.\u2019, the finders will be for the package containing fullname, otherwise they will be all registered top level finders (i.e.", "those on both sys.meta_path and sys.path_hooks).", "If the named module is in a package, that package is imported as a side effect of invoking this function.", "If no module name is specified, all top level finders are produced."]}
{"index": 4724, "name": "pkgutil.iter_modules", "module": "pkgutil", "doc": ["Yields ModuleInfo for all submodules on path, or, if path is None, all top-level modules on sys.path.", "path should be either None or a list of paths to look for modules in.", "prefix is a string to output on the front of every module name on output."]}
{"index": 4725, "name": "pkgutil.walk_packages", "module": "pkgutil", "doc": ["Yields ModuleInfo for all modules recursively on path, or, if path is None, all accessible modules.", "path should be either None or a list of paths to look for modules in.", "prefix is a string to output on the front of every module name on output.", "Note that this function must import all packages (not all modules!)", "on the given path, in order to access the __path__ attribute to find submodules.", "onerror is a function which gets called with one argument (the name of the package which was being imported) if any exception occurs while trying to import a package.", "If no onerror function is supplied, ImportErrors are caught and ignored, while all other exceptions are propagated, terminating the search.", "Examples:"]}
{"index": 4726, "name": "pkgutil.get_data", "module": "pkgutil", "doc": ["Get a resource from a package.", "This is a wrapper for the loader get_data API.", "The package argument should be the name of a package, in standard module format (foo.bar).", "The resource argument should be in the form of a relative filename, using / as the path separator.", "The parent directory name .. is not allowed, and nor is a rooted name (starting with a /).", "The function returns a binary string that is the contents of the specified resource.", "For packages located in the filesystem, which have already been imported, this is the rough equivalent of:", "If the package cannot be located or loaded, or it uses a loader which does not support get_data, then None is returned.", "In particular, the loader for namespace packages does not support get_data."]}
{"index": 4727, "name": "platform.architecture", "module": "platform", "doc": ["Queries the given executable (defaults to the Python interpreter binary) for various architecture information.", "Returns a tuple (bits, linkage) which contain information about the bit architecture and the linkage format used for the executable.", "Both values are returned as strings.", "Values that cannot be determined are returned as given by the parameter presets.", "If bits is given as '', the sizeof(pointer) (or sizeof(long) on Python version < 1.5.2) is used as indicator for the supported pointer size.", "The function relies on the system\u2019s file command to do the actual work.", "This is available on most if not all Unix  platforms and some non-Unix platforms and then only if the executable points to the Python interpreter.", "Reasonable defaults are used when the above needs are not met."]}
{"index": 4728, "name": "platform.machine", "module": "platform", "doc": ["Returns the machine type, e.g.", "'i386'.", "An empty string is returned if the value cannot be determined."]}
{"index": 4729, "name": "platform.node", "module": "platform", "doc": ["Returns the computer\u2019s network name (may not be fully qualified!).", "An empty string is returned if the value cannot be determined."]}
{"index": 4730, "name": "platform.platform", "module": "platform", "doc": ["Returns a single string identifying the underlying platform with as much useful information as possible.", "The output is intended to be human readable rather than machine parseable.", "It may look different on different platforms and this is intended.", "If aliased is true, the function will use aliases for various platforms that report system names which differ from their common names, for example SunOS will be reported as Solaris.", "The system_alias() function is used to implement this.", "Setting terse to true causes the function to return only the absolute minimum information needed to identify the platform."]}
{"index": 4731, "name": "platform.processor", "module": "platform", "doc": ["Returns the (real) processor name, e.g.", "'amdk6'.", "An empty string is returned if the value cannot be determined.", "Note that many platforms do not provide this information or simply return the same value as for machine().", "NetBSD does this."]}
{"index": 4732, "name": "platform.python_build", "module": "platform", "doc": ["Returns a tuple (buildno, builddate) stating the Python build number and date as strings."]}
{"index": 4733, "name": "platform.python_compiler", "module": "platform", "doc": ["Returns a string identifying the compiler used for compiling Python."]}
{"index": 4734, "name": "platform.python_branch", "module": "platform", "doc": ["Returns a string identifying the Python implementation SCM branch."]}
{"index": 4735, "name": "platform.python_implementation", "module": "platform", "doc": ["Returns a string identifying the Python implementation.", "Possible return values are: \u2018CPython\u2019, \u2018IronPython\u2019, \u2018Jython\u2019, \u2018PyPy\u2019."]}
{"index": 4736, "name": "platform.python_revision", "module": "platform", "doc": ["Returns a string identifying the Python implementation SCM revision."]}
{"index": 4737, "name": "platform.python_version", "module": "platform", "doc": ["Returns the Python version as string 'major.minor.patchlevel'.", "Note that unlike the Python sys.version, the returned value will always include the patchlevel (it defaults to 0)."]}
{"index": 4738, "name": "platform.python_version_tuple", "module": "platform", "doc": ["Returns the Python version as tuple (major, minor, patchlevel) of strings.", "Note that unlike the Python sys.version, the returned value will always include the patchlevel (it defaults to '0')."]}
{"index": 4739, "name": "platform.release", "module": "platform", "doc": ["Returns the system\u2019s release, e.g.", "'2.2.0' or 'NT' An empty string is returned if the value cannot be determined."]}
{"index": 4740, "name": "platform.system", "module": "platform", "doc": ["Returns the system/OS name, e.g.", "'Linux', 'Windows', or 'Java'.", "An empty string is returned if the value cannot be determined."]}
{"index": 4741, "name": "platform.system_alias", "module": "platform", "doc": ["Returns (system, release, version) aliased to common marketing names used for some systems.", "It also does some reordering of the information in some cases where it would otherwise cause confusion."]}
{"index": 4742, "name": "platform.version", "module": "platform", "doc": ["Returns the system\u2019s release version, e.g.", "'#3 on degas'.", "An empty string is returned if the value cannot be determined."]}
{"index": 4743, "name": "platform.uname", "module": "platform", "doc": ["Fairly portable uname interface.", "Returns a namedtuple() containing six attributes: system, node, release, version, machine, and processor.", "Note that this adds a sixth attribute (processor) not present in the os.uname() result.", "Also, the attribute names are different for the first two attributes; os.uname() names them sysname and nodename.", "Entries which cannot be determined are set to ''."]}
{"index": 4744, "name": "platform.java_ver", "module": "platform", "doc": ["Version interface for Jython.", "Returns a tuple (release, vendor, vminfo, osinfo) with vminfo being a tuple (vm_name, vm_release, vm_vendor) and osinfo being a tuple (os_name, os_version, os_arch).", "Values which cannot be determined are set to the defaults given as parameters (which all default to '')."]}
{"index": 4745, "name": "platform.win32_ver", "module": "platform", "doc": ["Get additional version information from the Windows Registry and return a tuple (release, version, csd, ptype) referring to OS release, version number, CSD level (service pack) and OS type (multi/single processor).", "As a hint: ptype is 'Uniprocessor Free' on single processor NT machines and 'Multiprocessor Free' on multi processor machines.", "The \u2018Free\u2019 refers to the OS version being free of debugging code.", "It could also state \u2018Checked\u2019 which means the OS version uses debugging code, i.e.", "code that checks arguments, ranges, etc."]}
{"index": 4746, "name": "platform.popen", "module": "platform", "doc": ["Portable popen() interface.", "Find a working popen implementation preferring win32pipe.popen().", "On Windows NT, win32pipe.popen() should work; on Windows 9x it hangs due to bugs in the MS C library."]}
{"index": 4747, "name": "platform.mac_ver", "module": "platform", "doc": ["Get Mac OS version information and return it as tuple (release, versioninfo, machine) with versioninfo being a tuple (version, dev_stage, non_release_version).", "Entries which cannot be determined are set to ''.", "All tuple entries are strings."]}
{"index": 4748, "name": "platform.dist", "module": "platform", "doc": ["This is another name for linux_distribution()."]}
{"index": 4749, "name": "platform.linux_distribution", "module": "platform", "doc": ["Tries to determine the name of the Linux OS distribution name.", "supported_dists may be given to define the set of Linux distributions to look for.", "It defaults to a list of currently supported Linux distributions identified by their release file name.", "If full_distribution_name is true (default), the full distribution read from the OS is returned.", "Otherwise the short name taken from supported_dists is used.", "Returns a tuple (distname,version,id) which defaults to the args given as parameters.", "id is the item in parentheses after the version number.", "It is usually the version codename."]}
{"index": 4750, "name": "platform.libc_ver", "module": "platform", "doc": ["Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked.", "Returns a tuple of strings (lib, version) which default to the given parameters in case the lookup fails.", "Note that this function has intimate knowledge of how different libc versions add symbols to the executable is probably only usable for executables compiled using gcc.", "The file is read and scanned in chunks of chunksize bytes."]}
{"index": 4751, "name": "plistlib.load", "module": "plistlib", "doc": ["Read a plist file.", "fp should be a readable and binary file object.", "Return the unpacked root object (which usually is a dictionary).", "The fmt is the format of the file and the following values are valid:", "If use_builtin_types is true (the default) binary data will be returned as instances of bytes, otherwise it is returned as instances of Data.", "The dict_type is the type used for dictionaries that are read from the plist file.", "XML data for the FMT_XML format is parsed using the Expat parser from xml.parsers.expat \u2013 see its documentation for possible exceptions on ill-formed XML.", "Unknown elements will simply be ignored by the plist parser.", "The parser for the binary format raises InvalidFileException when the file cannot be parsed."]}
{"index": 4752, "name": "plistlib.loads", "module": "plistlib", "doc": ["Load a plist from a bytes object.", "See load() for an explanation of the keyword arguments."]}
{"index": 4753, "name": "plistlib.dump", "module": "plistlib", "doc": ["Write value to a plist file.", "Fp should be a writable, binary file object.", "The fmt argument specifies the format of the plist file and can be one of the following values:", "When sort_keys is true (the default) the keys for dictionaries will be written to the plist in sorted order, otherwise they will be written in the iteration order of the dictionary.", "When skipkeys is false (the default) the function raises TypeError when a key of a dictionary is not a string, otherwise such keys are skipped.", "A TypeError will be raised if the object is of an unsupported type or a container that contains objects of unsupported types.", "An OverflowError will be raised for integer values that cannot be represented in (binary) plist files."]}
{"index": 4754, "name": "plistlib.dumps", "module": "plistlib", "doc": ["Return value as a plist-formatted bytes object.", "See the documentation for dump() for an explanation of the keyword arguments of this function."]}
{"index": 4755, "name": "plistlib.readPlist", "module": "plistlib", "doc": ["Read a plist file.", "pathOrFile may be either a file name or a (readable and binary) file object.", "Returns the unpacked root object (which usually is a dictionary).", "This function calls load() to do the actual work, see the documentation of that function for an explanation of the keyword arguments."]}
{"index": 4756, "name": "plistlib.writePlist", "module": "plistlib", "doc": ["Write rootObject to an XML plist file.", "pathOrFile may be either a file name or a (writable and binary) file object"]}
{"index": 4757, "name": "plistlib.readPlistFromBytes", "module": "plistlib", "doc": ["Read a plist data from a bytes object.", "Return the root object.", "See load() for a description of the keyword arguments."]}
{"index": 4758, "name": "plistlib.writePlistToBytes", "module": "plistlib", "doc": ["Return rootObject as an XML plist-formatted bytes object."]}
{"index": 4759, "name": "plistlib.Data", "module": "plistlib", "doc": ["Return a \u201cdata\u201d wrapper object around the bytes object data.", "This is used in functions converting from/to plists to represent the <data> type available in plists.", "It has one attribute, data, that can be used to retrieve the Python bytes object stored in it."]}
{"index": 4760, "name": "plistlib.FMT_XML", "module": "plistlib", "doc": ["The XML format for plist files."]}
{"index": 4761, "name": "plistlib.FMT_BINARY", "module": "plistlib", "doc": ["The binary format for plist files"]}
{"index": 4762, "name": "poplib.POP3", "module": "poplib", "doc": ["This class implements the actual POP3 protocol.", "The connection is created when the instance is initialized.", "If port is omitted, the standard POP3 port (110) is used.", "The optional timeout parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used)."]}
{"index": 4763, "name": "poplib.POP3_SSL", "module": "poplib", "doc": ["This is a subclass of POP3 that connects to the server over an SSL encrypted socket.", "If port is not specified, 995, the standard POP3-over-SSL port is used.", "timeout works as in the POP3 constructor.", "context is an optional ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.", "Please read Security considerations for best practices.", "keyfile and certfile are a legacy alternative to context - they can point to PEM-formatted private key and certificate chain files, respectively, for the SSL connection."]}
{"index": 4764, "name": "poplib.error_proto", "module": "poplib", "doc": ["Exception raised on any errors from this module (errors from socket module are not caught).", "The reason for the exception is passed to the constructor as a string."]}
{"index": 4765, "name": "poplib.POP3.set_debuglevel", "module": "poplib", "doc": ["Set the instance\u2019s debugging level.", "This controls the amount of debugging output printed.", "The default, 0, produces no debugging output.", "A value of 1 produces a moderate amount of debugging output, generally a single line per request.", "A value of 2 or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection."]}
{"index": 4766, "name": "poplib.POP3.getwelcome", "module": "poplib", "doc": ["Returns the greeting string sent by the POP3 server."]}
{"index": 4767, "name": "poplib.POP3.capa", "module": "poplib", "doc": ["Query the server\u2019s capabilities as specified in RFC 2449.", "Returns a dictionary in the form {'name': ['param'...]}."]}
{"index": 4768, "name": "poplib.POP3.user", "module": "poplib", "doc": ["Send user command, response should indicate that a password is required."]}
{"index": 4769, "name": "poplib.POP3.pass_", "module": "poplib", "doc": ["Send password, response includes message count and mailbox size.", "Note: the mailbox on the server is locked until quit() is called."]}
{"index": 4770, "name": "poplib.POP3.apop", "module": "poplib", "doc": ["Use the more secure APOP authentication to log into the POP3 server."]}
{"index": 4771, "name": "poplib.POP3.rpop", "module": "poplib", "doc": ["Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server."]}
{"index": 4772, "name": "poplib.POP3.stat", "module": "poplib", "doc": ["Get mailbox status.", "The result is a tuple of 2 integers: (message count, mailbox size)."]}
{"index": 4773, "name": "poplib.POP3.list", "module": "poplib", "doc": ["Request message list, result is in the form (response, ['mesg_num octets', ...], octets).", "If which is set, it is the message to list."]}
{"index": 4774, "name": "poplib.POP3.retr", "module": "poplib", "doc": ["Retrieve whole message number which, and set its seen flag.", "Result is in form (response, ['line', ...], octets)."]}
{"index": 4775, "name": "poplib.POP3.dele", "module": "poplib", "doc": ["Flag message number which for deletion.", "On most servers deletions are not actually performed until QUIT (the major exception is Eudora QPOP, which deliberately violates the RFCs by doing pending deletes on any disconnect)."]}
{"index": 4776, "name": "poplib.POP3.rset", "module": "poplib", "doc": ["Remove any deletion marks for the mailbox."]}
{"index": 4777, "name": "poplib.POP3.noop", "module": "poplib", "doc": ["Do nothing.", "Might be used as a keep-alive."]}
{"index": 4778, "name": "poplib.POP3.quit", "module": "poplib", "doc": ["Signoff:  commit changes, unlock mailbox, drop connection."]}
{"index": 4779, "name": "poplib.POP3.top", "module": "poplib", "doc": ["Retrieves the message header plus howmuch lines of the message after the header of message number which.", "Result is in form (response, ['line', ...], octets).", "The POP3 TOP command this method uses, unlike the RETR command, doesn\u2019t set the message\u2019s seen flag; unfortunately, TOP is poorly specified in the RFCs and is frequently broken in off-brand servers.", "Test this method by hand against the POP3 servers you will use before trusting it."]}
{"index": 4780, "name": "poplib.POP3.uidl", "module": "poplib", "doc": ["Return message digest (unique id) list.", "If which is specified, result contains the unique id for that message in the form 'response mesgnum uid, otherwise result is list (response, ['mesgnum uid', ...], octets)."]}
{"index": 4781, "name": "poplib.POP3.utf8", "module": "poplib", "doc": ["Try to switch to UTF-8 mode.", "Returns the server response if successful, raises error_proto if not.", "Specified in RFC 6856."]}
{"index": 4782, "name": "poplib.POP3.stls", "module": "poplib", "doc": ["Start a TLS session on the active connection as specified in RFC 2595.", "This is only allowed before user authentication", "context parameter is a ssl.SSLContext object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure.", "Please read Security considerations for best practices.", "This method supports hostname checking via ssl.SSLContext.check_hostname and Server Name Indication (see ssl.HAS_SNI)."]}
{"index": 4783, "name": "posix.environ", "module": "posix", "doc": ["A dictionary representing the string environment at the time the interpreter was started.", "Keys and values are bytes on Unix and str on Windows.", "For example, environ[b'HOME'] (environ['HOME'] on Windows) is the pathname of your home directory, equivalent to getenv(\"HOME\") in C.", "Modifying this dictionary does not affect the string environment passed on by execv(), popen() or system(); if you need to change the environment, pass environ to execve() or add variable assignments and export statements to the command string for system() or popen()."]}
{"index": 4784, "name": "pprint.PrettyPrinter", "module": "pprint", "doc": ["Construct a PrettyPrinter instance.", "This constructor understands several keyword parameters.", "An output stream may be set using the stream keyword; the only method used on the stream object is the file protocol\u2019s write() method.", "If not specified, the PrettyPrinter adopts sys.stdout.", "The amount of indentation added for each recursive level is specified by indent; the default is one.", "Other values can cause output to look a little odd, but can make nesting easier to spot.", "The number of levels which may be printed is controlled by depth; if the data structure being printed is too deep, the next contained level is replaced by ....  By default, there is no constraint on the depth of the objects being formatted.", "The desired output width is constrained using the width parameter; the default is 80 characters.", "If a structure cannot be formatted within the constrained width, a best effort will be made.", "If compact is false (the default) each item of a long sequence will be formatted on a separate line.", "If compact is true, as many items as will fit within the width will be formatted on each output line."]}
{"index": 4785, "name": "pprint.pformat", "module": "pprint", "doc": ["Return the formatted representation of object as a string.", "indent, width, depth and compact will be passed to the PrettyPrinter constructor as formatting parameters."]}
{"index": 4786, "name": "pprint.pprint", "module": "pprint", "doc": ["Prints the formatted representation of object on stream, followed by a newline.", "If stream is None, sys.stdout is used.", "This may be used in the interactive interpreter instead of the print() function for inspecting values (you can even reassign print = pprint.pprint for use within a scope).", "indent, width, depth and compact will be passed to the PrettyPrinter constructor as formatting parameters."]}
{"index": 4787, "name": "pprint.isreadable", "module": "pprint", "doc": ["Determine if the formatted representation of object is \u201creadable,\u201d or can be used to reconstruct the value using eval().", "This always returns False for recursive objects."]}
{"index": 4788, "name": "pprint.isrecursive", "module": "pprint", "doc": ["Determine if object requires a recursive representation."]}
{"index": 4789, "name": "pprint.saferepr", "module": "pprint", "doc": ["Return a string representation of object, protected against recursive data structures.", "If the representation of object exposes a recursive entry, the recursive reference will be represented as <Recursion on typename with id=number>.", "The representation is not otherwise formatted."]}
{"index": 4790, "name": "pprint.PrettyPrinter.pformat", "module": "pprint", "doc": ["Return the formatted representation of object.", "This takes into account the options passed to the PrettyPrinter constructor."]}
{"index": 4791, "name": "pprint.PrettyPrinter.pprint", "module": "pprint", "doc": ["Print the formatted representation of object on the configured stream, followed by a newline."]}
{"index": 4792, "name": "pprint.PrettyPrinter.isreadable", "module": "pprint", "doc": ["Determine if the formatted representation of the object is \u201creadable,\u201d or can be used to reconstruct the value using eval().", "Note that this returns False for recursive objects.", "If the depth parameter of the PrettyPrinter is set and the object is deeper than allowed, this returns False."]}
{"index": 4793, "name": "pprint.PrettyPrinter.isrecursive", "module": "pprint", "doc": ["Determine if the object requires a recursive representation."]}
{"index": 4794, "name": "pprint.PrettyPrinter.format", "module": "pprint", "doc": ["Returns three values: the formatted version of object as a string, a flag indicating whether the result is readable, and a flag indicating whether recursion was detected.", "The first argument is the object to be presented.", "The second is a dictionary which contains the id() of objects that are part of the current presentation context (direct and indirect containers for object that are affecting the presentation) as the keys; if an object needs to be presented which is already represented in context, the third return value should be True.", "Recursive calls to the format() method should add additional entries for containers to this dictionary.", "The third argument, maxlevels, gives the requested limit to recursion; this will be 0 if there is no requested limit.", "This argument should be passed unmodified to recursive calls.", "The fourth argument, level, gives the current level; recursive calls should be passed a value less than that of the current call."]}
{"index": 4795, "name": "profile.run", "module": "profile", "doc": ["This function takes a single argument that can be passed to the exec() function, and an optional file name.", "In all cases this routine executes:", "and gathers profiling statistics from the execution.", "If no file name is present, then this function automatically creates a Stats instance and prints a simple profiling report.", "If the sort value is specified, it is passed to this Stats instance to control how the results are sorted."]}
{"index": 4796, "name": "profile.runctx", "module": "profile", "doc": ["This function is similar to run(), with added arguments to supply the globals and locals dictionaries for the command string.", "This routine executes:", "and gathers profiling statistics as in the run() function above."]}
{"index": 4797, "name": "profile.Profile", "module": "profile", "doc": ["This class is normally only used if more precise control over profiling is needed than what the cProfile.run() function provides.", "A custom timer can be supplied for measuring how long code takes to run via the timer argument.", "This must be a function that returns a single number representing the current time.", "If the number is an integer, the timeunit specifies a multiplier that specifies the duration of each unit of time.", "For example, if the timer returns times measured in thousands of seconds, the time unit would be .001.", "Directly using the Profile class allows formatting profile results without writing the profile data to a file:"]}
{"index": 4798, "name": "profile.Profile.enable", "module": "profile", "doc": ["Start collecting profiling data."]}
{"index": 4799, "name": "profile.Profile.disable", "module": "profile", "doc": ["Stop collecting profiling data."]}
{"index": 4800, "name": "profile.Profile.create_stats", "module": "profile", "doc": ["Stop collecting profiling data and record the results internally as the current profile."]}
{"index": 4801, "name": "profile.Profile.print_stats", "module": "profile", "doc": ["Create a Stats object based on the current profile and print the results to stdout."]}
{"index": 4802, "name": "profile.Profile.dump_stats", "module": "profile", "doc": ["Write the results of the current profile to filename."]}
{"index": 4803, "name": "profile.Profile.run", "module": "profile", "doc": ["Profile the cmd via exec()."]}
{"index": 4804, "name": "profile.Profile.runctx", "module": "profile", "doc": ["Profile the cmd via exec() with the specified global and local environment."]}
{"index": 4805, "name": "profile.Profile.runcall", "module": "profile", "doc": ["Profile func(*args, **kwargs)"]}
{"index": 4806, "name": "pstats.Stats", "module": "pstats", "doc": ["This class constructor creates an instance of a \u201cstatistics object\u201d from a filename (or list of filenames) or from a Profile instance.", "Output will be printed to the stream specified by stream.", "The file selected by the above constructor must have been created by the corresponding version of profile or cProfile.", "To be specific, there is no file compatibility guaranteed with future versions of this profiler, and there is no compatibility with files produced by other profilers, or the same profiler run on a different operating system.", "If several files are provided, all the statistics for identical functions will be coalesced, so that an overall view of several processes can be considered in a single report.", "If additional files need to be combined with data in an existing Stats object, the add() method can be used.", "Instead of reading the profile data from a file, a cProfile.Profile or profile.Profile object can be used as the profile data source.", "Stats objects have the following methods:"]}
{"index": 4807, "name": "pstats.Stats.strip_dirs", "module": "pstats", "doc": ["This method for the Stats class removes all leading path information from file names.", "It is very useful in reducing the size of the printout to fit within (close to) 80 columns.", "This method modifies the object, and the stripped information is lost.", "After performing a strip operation, the object is considered to have its entries in a \u201crandom\u201d order, as it was just after object initialization and loading.", "If strip_dirs() causes two function names to be indistinguishable (they are on the same line of the same filename, and have the same function name), then the statistics for these two entries are accumulated into a single entry."]}
{"index": 4808, "name": "pstats.Stats.add", "module": "pstats", "doc": ["This method of the Stats class accumulates additional profiling information into the current profiling object.", "Its arguments should refer to filenames created by the corresponding version of profile.run() or cProfile.run().", "Statistics for identically named (re: file, line, name) functions are automatically accumulated into single function statistics."]}
{"index": 4809, "name": "pstats.Stats.dump_stats", "module": "pstats", "doc": ["Save the data loaded into the Stats object to a file named filename.", "The file is created if it does not exist, and is overwritten if it already exists.", "This is equivalent to the method of the same name on the profile.Profile and cProfile.Profile classes."]}
{"index": 4810, "name": "pstats.Stats.sort_stats", "module": "pstats", "doc": ["This method modifies the Stats object by sorting it according to the supplied criteria.", "The argument can be either a string or a SortKey enum identifying the basis of a sort (example: 'time', 'name', SortKey.TIME or SortKey.NAME).", "The SortKey enums argument have advantage over the string argument in that it is more robust and less error prone.", "When more than one key is provided, then additional keys are used as secondary criteria when there is equality in all keys selected before them.", "For example, sort_stats(SortKey.NAME, SortKey.FILE) will sort all the entries according to their function name, and resolve all ties (identical function names) by sorting by file name.", "For the string argument, abbreviations can be used for any key names, as long as the abbreviation is unambiguous.", "The following are the valid string and SortKey:", "Note that all sorts on statistics are in descending order (placing most time consuming items first), where as name, file, and line number searches are in ascending order (alphabetical).", "The subtle distinction between SortKey.NFL and SortKey.STDNAME is that the standard name is a sort of the name as printed, which means that the embedded line numbers get compared in an odd way.", "For example, lines 3, 20, and 40 would (if the file names were the same) appear in the string order 20, 3 and 40.", "In contrast, SortKey.NFL does a numeric compare of the line numbers.", "In fact, sort_stats(SortKey.NFL) is the same as sort_stats(SortKey.NAME, SortKey.FILENAME, SortKey.LINE).", "For backward-compatibility reasons, the numeric arguments -1, 0, 1, and 2 are permitted.", "They are interpreted as 'stdname', 'calls', 'time', and 'cumulative' respectively.", "If this old style format (numeric) is used, only one sort key (the numeric key) will be used, and additional arguments will be silently ignored."]}
{"index": 4811, "name": "pstats.Stats.reverse_order", "module": "pstats", "doc": ["This method for the Stats class reverses the ordering of the basic list within the object.", "Note that by default ascending vs descending order is properly selected based on the sort key of choice."]}
{"index": 4812, "name": "pstats.Stats.print_stats", "module": "pstats", "doc": ["This method for the Stats class prints out a report as described in the profile.run() definition.", "The order of the printing is based on the last sort_stats() operation done on the object (subject to caveats in add() and strip_dirs()).", "The arguments provided (if any) can be used to limit the list down to the significant entries.", "Initially, the list is taken to be the complete set of profiled functions.", "Each restriction is either an integer (to select a count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to select a percentage of lines), or a string that will interpreted as a regular expression (to pattern match the standard name that is printed).", "If several restrictions are provided, then they are applied sequentially.", "For example:", "would first limit the printing to first 10% of list, and then only print functions that were part of filename .*foo:.", "In contrast, the command:", "would limit the list to all functions having file names .", "*foo:, and then proceed to only print the first 10% of them."]}
{"index": 4813, "name": "pstats.Stats.print_callers", "module": "pstats", "doc": ["This method for the Stats class prints a list of all functions that called each function in the profiled database.", "The ordering is identical to that provided by print_stats(), and the definition of the restricting argument is also identical.", "Each caller is reported on its own line.", "The format differs slightly depending on the profiler that produced the stats:"]}
{"index": 4814, "name": "pstats.Stats.print_callees", "module": "pstats", "doc": ["This method for the Stats class prints a list of all function that were called by the indicated function.", "Aside from this reversal of direction of calls (re: called vs was called by), the arguments and ordering are identical to the print_callers() method."]}
{"index": 4815, "name": "pty.fork", "module": "pty", "doc": ["Fork.", "Connect the child\u2019s controlling terminal to a pseudo-terminal.", "Return value is (pid, fd).", "Note that the child  gets pid 0, and the fd is invalid.", "The parent\u2019s return value is the pid of the child, and fd is a file descriptor connected to the child\u2019s controlling terminal (and also to the child\u2019s standard input and output)."]}
{"index": 4816, "name": "pty.openpty", "module": "pty", "doc": ["Open a new pseudo-terminal pair, using os.openpty() if possible, or emulation code for generic Unix systems.", "Return a pair of file descriptors (master, slave), for the master and the slave end, respectively."]}
{"index": 4817, "name": "pty.spawn", "module": "pty", "doc": ["Spawn a process, and connect its controlling terminal with the current process\u2019s standard io.", "This is often used to baffle programs which insist on reading from the controlling terminal.", "It is expected that the process spawned behind the pty will eventually terminate, and when it does spawn will return.", "The functions master_read and stdin_read are passed a file descriptor which they should read from, and they should always return a byte string.", "In order to force spawn to return before the child process exits an OSError should be thrown.", "The default implementation for both functions will read and return up to 1024 bytes each time the function is called.", "The master_read callback is passed the pseudoterminal\u2019s master file descriptor to read output from the child process, and stdin_read is passed file descriptor 0, to read from the parent process\u2019s standard input.", "Returning an empty byte string from either callback is interpreted as an end-of-file (EOF) condition, and that callback will not be called after that.", "If stdin_read signals EOF the controlling terminal can no longer communicate with the parent process OR the child process.", "Unless the child process will quit without any input, spawn will then loop forever.", "If master_read signals EOF the same behavior results (on linux at least).", "If both callbacks signal EOF then spawn will probably never return, unless select throws an error on your platform when passed three empty lists.", "This is a bug, documented in issue 26228."]}
{"index": 4818, "name": "pwd.getpwuid", "module": "pwd", "doc": ["Return the password database entry for the given numeric user ID."]}
{"index": 4819, "name": "pwd.getpwnam", "module": "pwd", "doc": ["Return the password database entry for the given user name."]}
{"index": 4820, "name": "pwd.getpwall", "module": "pwd", "doc": ["Return a list of all available password database entries, in arbitrary order."]}
{"index": 4821, "name": "pyclbr.readmodule", "module": "pyclbr", "doc": ["Return a dictionary mapping module-level class names to class descriptors.", "If possible, descriptors for imported base classes are included.", "Parameter module is a string with the name of the module to read; it may be the name of a module within a package.", "If given, path is a sequence of directory paths prepended to sys.path, which is used to locate the module source code."]}
{"index": 4822, "name": "pyclbr.readmodule_ex", "module": "pyclbr", "doc": ["Return a dictionary-based tree containing a function or class descriptors for each function and class defined in the module with a def or class statement.", "The returned dictionary maps module-level function and class names to their descriptors.", "Nested objects are entered into the children dictionary of their parent.", "As with readmodule, module names the module to be read and path is prepended to sys.path.", "If the module being read is a package, the returned dictionary has a key '__path__' whose value is a list containing the package search path."]}
{"index": 4823, "name": "pyclbr.Function.file", "module": "pyclbr", "doc": ["Name of the file in which the function is defined."]}
{"index": 4824, "name": "pyclbr.Function.module", "module": "pyclbr", "doc": ["The name of the module defining the function described."]}
{"index": 4825, "name": "pyclbr.Function.name", "module": "pyclbr", "doc": ["The name of the function."]}
{"index": 4826, "name": "pyclbr.Function.lineno", "module": "pyclbr", "doc": ["The line number in the file where the definition starts."]}
{"index": 4827, "name": "pyclbr.Function.parent", "module": "pyclbr", "doc": ["For top-level functions, None.", "For nested functions, the parent."]}
{"index": 4828, "name": "pyclbr.Function.children", "module": "pyclbr", "doc": ["A dictionary mapping names to descriptors for nested functions and classes."]}
{"index": 4829, "name": "pyclbr.Class.file", "module": "pyclbr", "doc": ["Name of the file in which the class is defined."]}
{"index": 4830, "name": "pyclbr.Class.module", "module": "pyclbr", "doc": ["The name of the module defining the class described."]}
{"index": 4831, "name": "pyclbr.Class.name", "module": "pyclbr", "doc": ["The name of the class."]}
{"index": 4832, "name": "pyclbr.Class.lineno", "module": "pyclbr", "doc": ["The line number in the file where the definition starts."]}
{"index": 4833, "name": "pyclbr.Class.parent", "module": "pyclbr", "doc": ["For top-level classes, None.", "For nested classes, the parent."]}
{"index": 4834, "name": "pyclbr.Class.children", "module": "pyclbr", "doc": ["A dictionary mapping names to descriptors for nested functions and classes."]}
{"index": 4835, "name": "pyclbr.Class.super", "module": "pyclbr", "doc": ["A list of Class objects which describe the immediate base classes of the class being described.", "Classes which are named as superclasses but which are not discoverable by readmodule_ex() are listed as a string with the class name instead of as Class objects."]}
{"index": 4836, "name": "pyclbr.Class.methods", "module": "pyclbr", "doc": ["A dictionary mapping method names to line numbers.", "This can be derived from the newer children dictionary, but remains for back-compatibility."]}
{"index": 4837, "name": "xml.parsers.expat.ExpatError", "module": "xml", "doc": ["The exception raised when Expat reports an error.", "See section ExpatError Exceptions for more information on interpreting Expat errors."]}
{"index": 4838, "name": "xml.parsers.expat.error", "module": "xml", "doc": ["Alias for ExpatError."]}
{"index": 4839, "name": "xml.parsers.expat.XMLParserType", "module": "xml", "doc": ["The type of the return values from the ParserCreate() function."]}
{"index": 4840, "name": "xml.parsers.expat.ErrorString", "module": "xml", "doc": ["Returns an explanatory string for a given error number errno."]}
{"index": 4841, "name": "xml.parsers.expat.ParserCreate", "module": "xml", "doc": ["Creates and returns a new xmlparser object.", "encoding, if specified, must be a string naming the encoding  used by the XML data.", "Expat doesn\u2019t support as many encodings as Python does, and its repertoire of encodings can\u2019t be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.", "If encoding 1 is given it will override the implicit or explicit encoding of the document.", "Expat can optionally do XML namespace processing for you, enabled by providing a value for namespace_separator.", "The value must be a one-character string; a ValueError will be raised if the string has an illegal length (None is considered the same as omission).", "When namespace processing is enabled, element type names and attribute names that belong to a namespace will be expanded.", "The element name passed to the element handlers StartElementHandler and EndElementHandler will be the concatenation of the namespace URI, the namespace separator character, and the local part of the name.", "If the namespace separator is a zero byte (chr(0)) then the namespace URI and the local part will be concatenated without any separator.", "For example, if namespace_separator is set to a space character (' ') and the following document is parsed:", "StartElementHandler will receive the following strings for each element:", "Due to limitations in the Expat library used by pyexpat, the xmlparser instance returned can only be used to parse a single XML document.", "Call ParserCreate for each document to provide unique parser instances."]}
{"index": 4842, "name": "xml.parsers.expat.xmlparser.Parse", "module": "xml", "doc": ["Parses the contents of the string data, calling the appropriate handler functions to process the parsed data.", "isfinal must be true on the final call to this method; it allows the parsing of a single file in fragments, not the submission of multiple files.", "data can be the empty string at any time."]}
{"index": 4843, "name": "xml.parsers.expat.xmlparser.ParseFile", "module": "xml", "doc": ["Parse XML data reading from the object file.", "file only needs to provide the read(nbytes) method, returning the empty string when there\u2019s no more data."]}
{"index": 4844, "name": "xml.parsers.expat.xmlparser.SetBase", "module": "xml", "doc": ["Sets the base to be used for resolving relative URIs in system identifiers in declarations.", "Resolving relative identifiers is left to the application: this value will be passed through as the base argument to the ExternalEntityRefHandler(), NotationDeclHandler(), and UnparsedEntityDeclHandler() functions."]}
{"index": 4845, "name": "xml.parsers.expat.xmlparser.GetBase", "module": "xml", "doc": ["Returns a string containing the base set by a previous call to SetBase(), or None if  SetBase() hasn\u2019t been called."]}
{"index": 4846, "name": "xml.parsers.expat.xmlparser.GetInputContext", "module": "xml", "doc": ["Returns the input data that generated the current event as a string.", "The data is in the encoding of the entity which contains the text.", "When called while an event handler is not active, the return value is None."]}
{"index": 4847, "name": "xml.parsers.expat.xmlparser.ExternalEntityParserCreate", "module": "xml", "doc": ["Create a \u201cchild\u201d parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser.", "The context parameter should be the string passed to the ExternalEntityRefHandler() handler function, described below.", "The child parser is created with the ordered_attributes and specified_attributes set to the values of this parser."]}
{"index": 4848, "name": "xml.parsers.expat.xmlparser.SetParamEntityParsing", "module": "xml", "doc": ["Control parsing of parameter entities (including the external DTD subset).", "Possible flag values are XML_PARAM_ENTITY_PARSING_NEVER, XML_PARAM_ENTITY_PARSING_UNLESS_STANDALONE and XML_PARAM_ENTITY_PARSING_ALWAYS.", "Return true if setting the flag was successful."]}
{"index": 4849, "name": "xml.parsers.expat.xmlparser.UseForeignDTD", "module": "xml", "doc": ["Calling this with a true value for flag (the default) will cause Expat to call the ExternalEntityRefHandler with None for all arguments to allow an alternate DTD to be loaded.", "If the document does not contain a document type declaration, the ExternalEntityRefHandler will still be called, but the StartDoctypeDeclHandler and EndDoctypeDeclHandler will not be called.", "Passing a false value for flag will cancel a previous call that passed a true value, but otherwise has no effect.", "This method can only be called before the Parse() or ParseFile() methods are called; calling it after either of those have been called causes ExpatError to be raised with the code attribute set to errors.codes[errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING]."]}
{"index": 4850, "name": "xml.parsers.expat.xmlparser.buffer_size", "module": "xml", "doc": ["The size of the buffer used when buffer_text is true.", "A new buffer size can be set by assigning a new integer value to this attribute.", "When the size is changed, the buffer will be flushed."]}
{"index": 4851, "name": "xml.parsers.expat.xmlparser.buffer_text", "module": "xml", "doc": ["Setting this to true causes the xmlparser object to buffer textual content returned by Expat to avoid multiple calls to the CharacterDataHandler() callback whenever possible.", "This can improve performance substantially since Expat normally breaks character data into chunks at every line ending.", "This attribute is false by default, and may be changed at any time."]}
{"index": 4852, "name": "xml.parsers.expat.xmlparser.buffer_used", "module": "xml", "doc": ["If buffer_text is enabled, the number of bytes stored in the buffer.", "These bytes represent UTF-8 encoded text.", "This attribute has no meaningful interpretation when buffer_text is false."]}
{"index": 4853, "name": "xml.parsers.expat.xmlparser.ordered_attributes", "module": "xml", "doc": ["Setting this attribute to a non-zero integer causes the attributes to be reported as a list rather than a dictionary.", "The attributes are presented in the order found in the document text.", "For each attribute, two list entries are presented: the attribute name and the attribute value.", "(Older versions of this module also used this format.)", "By default, this attribute is false; it may be changed at any time."]}
{"index": 4854, "name": "xml.parsers.expat.xmlparser.specified_attributes", "module": "xml", "doc": ["If set to a non-zero integer, the parser will report only those attributes which were specified in the document instance and not those which were derived from attribute declarations.", "Applications which set this need to be especially careful to use what additional information is available from the declarations as needed to comply with the standards for the behavior of XML processors.", "By default, this attribute is false; it may be changed at any time."]}
{"index": 4855, "name": "xml.parsers.expat.xmlparser.ErrorByteIndex", "module": "xml", "doc": ["Byte index at which an error occurred."]}
{"index": 4856, "name": "xml.parsers.expat.xmlparser.ErrorCode", "module": "xml", "doc": ["Numeric code specifying the problem.", "This value can be passed to the ErrorString() function, or compared to one of the constants defined in the errors object."]}
{"index": 4857, "name": "xml.parsers.expat.xmlparser.ErrorColumnNumber", "module": "xml", "doc": ["Column number at which an error occurred."]}
{"index": 4858, "name": "xml.parsers.expat.xmlparser.ErrorLineNumber", "module": "xml", "doc": ["Line number at which an error occurred."]}
{"index": 4859, "name": "xml.parsers.expat.xmlparser.CurrentByteIndex", "module": "xml", "doc": ["Current byte index in the parser input."]}
{"index": 4860, "name": "xml.parsers.expat.xmlparser.CurrentColumnNumber", "module": "xml", "doc": ["Current column number in the parser input."]}
{"index": 4861, "name": "xml.parsers.expat.xmlparser.CurrentLineNumber", "module": "xml", "doc": ["Current line number in the parser input."]}
{"index": 4862, "name": "xml.parsers.expat.xmlparser.XmlDeclHandler", "module": "xml", "doc": ["Called when the XML declaration is parsed.", "The XML declaration is the (optional) declaration of the applicable version of the XML recommendation, the encoding of the document text, and an optional \u201cstandalone\u201d declaration.", "version and encoding will be strings, and standalone will be 1 if the document is declared standalone, 0 if it is declared not to be standalone, or -1 if the standalone clause was omitted.", "This is only available with Expat version 1.95.0 or newer."]}
{"index": 4863, "name": "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler", "module": "xml", "doc": ["Called when Expat begins parsing the document type declaration (<!DOCTYPE ...).", "The doctypeName is provided exactly as presented.", "The systemId and publicId parameters give the system and public identifiers if specified, or None if omitted.", "has_internal_subset will be true if the document contains and internal document declaration subset.", "This requires Expat version 1.2 or newer."]}
{"index": 4864, "name": "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler", "module": "xml", "doc": ["Called when Expat is done parsing the document type declaration.", "This requires Expat version 1.2 or newer."]}
{"index": 4865, "name": "xml.parsers.expat.xmlparser.ElementDeclHandler", "module": "xml", "doc": ["Called once for each element type declaration.", "name is the name of the element type, and model is a representation of the content model."]}
{"index": 4866, "name": "xml.parsers.expat.xmlparser.AttlistDeclHandler", "module": "xml", "doc": ["Called for each declared attribute for an element type.", "If an attribute list declaration declares three attributes, this handler is called three times, once for each attribute.", "elname is the name of the element to which the declaration applies and attname is the name of the attribute declared.", "The attribute type is a string passed as type; the possible values are 'CDATA', 'ID', 'IDREF', \u2026 default gives the default value for the attribute used when the attribute is not specified by the document instance, or None if there is no default value (#IMPLIED values).", "If the attribute is required to be given in the document instance, required will be true.", "This requires Expat version 1.95.0 or newer."]}
{"index": 4867, "name": "xml.parsers.expat.xmlparser.StartElementHandler", "module": "xml", "doc": ["Called for the start of every element.", "name is a string containing the element name, and attributes is the element attributes.", "If ordered_attributes is true, this is a list (see ordered_attributes for a full description).", "Otherwise it\u2019s a dictionary mapping names to values."]}
{"index": 4868, "name": "xml.parsers.expat.xmlparser.EndElementHandler", "module": "xml", "doc": ["Called for the end of every element."]}
{"index": 4869, "name": "xml.parsers.expat.xmlparser.ProcessingInstructionHandler", "module": "xml", "doc": ["Called for every processing instruction."]}
{"index": 4870, "name": "xml.parsers.expat.xmlparser.CharacterDataHandler", "module": "xml", "doc": ["Called for character data.", "This will be called for normal character data, CDATA marked content, and ignorable whitespace.", "Applications which must distinguish these cases can use the StartCdataSectionHandler, EndCdataSectionHandler, and ElementDeclHandler callbacks to collect the required information."]}
{"index": 4871, "name": "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler", "module": "xml", "doc": ["Called for unparsed (NDATA) entity declarations.", "This is only present for version 1.2 of the Expat library; for more recent versions, use EntityDeclHandler instead.", "(The underlying function in the Expat library has been declared obsolete.)"]}
{"index": 4872, "name": "xml.parsers.expat.xmlparser.EntityDeclHandler", "module": "xml", "doc": ["Called for all entity declarations.", "For parameter and internal entities, value will be a string giving the declared contents of the entity; this will be None for external entities.", "The notationName parameter will be None for parsed entities, and the name of the notation for unparsed entities.", "is_parameter_entity will be true if the entity is a parameter entity or false for general entities (most applications only need to be concerned with general entities).", "This is only available starting with version 1.95.0 of the Expat library."]}
{"index": 4873, "name": "xml.parsers.expat.xmlparser.NotationDeclHandler", "module": "xml", "doc": ["Called for notation declarations.", "notationName, base, and systemId, and publicId are strings if given.", "If the public identifier is omitted, publicId will be None."]}
{"index": 4874, "name": "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler", "module": "xml", "doc": ["Called when an element contains a namespace declaration.", "Namespace declarations are processed before the StartElementHandler is called for the element on which declarations are placed."]}
{"index": 4875, "name": "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler", "module": "xml", "doc": ["Called when the closing tag is reached for an element  that contained a namespace declaration.", "This is called once for each namespace declaration on the element in the reverse of the order for which the StartNamespaceDeclHandler was called to indicate the start of each namespace declaration\u2019s scope.", "Calls to this handler are made after the corresponding EndElementHandler for the end of the element."]}
{"index": 4876, "name": "xml.parsers.expat.xmlparser.CommentHandler", "module": "xml", "doc": ["Called for comments.", "data is the text of the comment, excluding the leading '<!--' and trailing '-->'."]}
{"index": 4877, "name": "xml.parsers.expat.xmlparser.StartCdataSectionHandler", "module": "xml", "doc": ["Called at the start of a CDATA section.", "This and EndCdataSectionHandler are needed to be able to identify the syntactical start and end for CDATA sections."]}
{"index": 4878, "name": "xml.parsers.expat.xmlparser.EndCdataSectionHandler", "module": "xml", "doc": ["Called at the end of a CDATA section."]}
{"index": 4879, "name": "xml.parsers.expat.xmlparser.DefaultHandler", "module": "xml", "doc": ["Called for any characters in the XML document for which no applicable handler has been specified.", "This means characters that are part of a construct which could be reported, but for which no handler has been supplied."]}
{"index": 4880, "name": "xml.parsers.expat.xmlparser.DefaultHandlerExpand", "module": "xml", "doc": ["This is the same as the DefaultHandler(),  but doesn\u2019t inhibit expansion of internal entities.", "The entity reference will not be passed to the default handler."]}
{"index": 4881, "name": "xml.parsers.expat.xmlparser.NotStandaloneHandler", "module": "xml", "doc": ["Called if the XML document hasn\u2019t been declared as being a standalone document.", "This happens when there is an external subset or a reference to a parameter entity, but the XML declaration does not set standalone to yes in an XML declaration.", "If this handler returns 0, then the parser will raise an XML_ERROR_NOT_STANDALONE error.", "If this handler is not set, no exception is raised by the parser for this condition."]}
{"index": 4882, "name": "xml.parsers.expat.xmlparser.ExternalEntityRefHandler", "module": "xml", "doc": ["Called for references to external entities.", "base is the current base, as set by a previous call to SetBase().", "The public and system identifiers, systemId and publicId, are strings if given; if the public identifier is not given, publicId will be None.", "The context value is opaque and should only be used as described below.", "For external entities to be parsed, this handler must be implemented.", "It is responsible for creating the sub-parser using ExternalEntityParserCreate(context), initializing it with the appropriate callbacks, and parsing the entity.", "This handler should return an integer; if it returns 0, the parser will raise an XML_ERROR_EXTERNAL_ENTITY_HANDLING error, otherwise parsing will continue.", "If this handler is not provided, external entities are reported by the DefaultHandler callback, if provided."]}
{"index": 4883, "name": "xml.parsers.expat.ExpatError.code", "module": "xml", "doc": ["Expat\u2019s internal error number for the specific error.", "The errors.messages dictionary maps these error numbers to Expat\u2019s error messages.", "For example:", "The errors module also provides error message constants and a dictionary codes mapping these messages back to the error codes, see below."]}
{"index": 4884, "name": "xml.parsers.expat.ExpatError.lineno", "module": "xml", "doc": ["Line number on which the error was detected.", "The first line is numbered 1."]}
{"index": 4885, "name": "xml.parsers.expat.ExpatError.offset", "module": "xml", "doc": ["Character offset into the line where the error occurred.", "The first column is numbered 0."]}
{"index": 4886, "name": "xml.parsers.expat.errors.codes", "module": "xml", "doc": ["A dictionary mapping numeric error codes to their string descriptions."]}
{"index": 4887, "name": "xml.parsers.expat.errors.messages", "module": "xml", "doc": ["A dictionary mapping string descriptions to their error codes."]}
{"index": 4888, "name": "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF", "module": "xml", "doc": ["An entity reference in an attribute value referred to an external entity instead of an internal entity."]}
{"index": 4889, "name": "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF", "module": "xml", "doc": ["A character reference referred to a character which is illegal in XML (for example, character 0, or \u2018&#0;\u2019)."]}
{"index": 4890, "name": "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF", "module": "xml", "doc": ["An entity reference referred to an entity which was declared with a notation, so cannot be parsed."]}
{"index": 4891, "name": "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE", "module": "xml", "doc": ["An attribute was used more than once in a start tag."]}
{"index": 4892, "name": "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN", "module": "xml", "doc": ["Raised when an input byte could not properly be assigned to a character; for example, a NUL byte (value 0) in a UTF-8 input stream."]}
{"index": 4893, "name": "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT", "module": "xml", "doc": ["Something other than whitespace occurred after the document element."]}
{"index": 4894, "name": "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI", "module": "xml", "doc": ["An XML declaration was found somewhere other than the start of the input data."]}
{"index": 4895, "name": "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS", "module": "xml", "doc": ["The document contains no elements (XML requires all documents to contain exactly one top-level element).."]}
{"index": 4896, "name": "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY", "module": "xml", "doc": ["Expat was not able to allocate memory internally."]}
{"index": 4897, "name": "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF", "module": "xml", "doc": ["A parameter entity reference was found where it was not allowed."]}
{"index": 4898, "name": "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR", "module": "xml", "doc": ["An incomplete character was found in the input."]}
{"index": 4899, "name": "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF", "module": "xml", "doc": ["An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly."]}
{"index": 4900, "name": "xml.parsers.expat.errors.XML_ERROR_SYNTAX", "module": "xml", "doc": ["Some unspecified syntax error was encountered."]}
{"index": 4901, "name": "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH", "module": "xml", "doc": ["An end tag did not match the innermost open start tag."]}
{"index": 4902, "name": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN", "module": "xml", "doc": ["Some token (such as a start tag) was not closed before the end of the stream or the next token was encountered."]}
{"index": 4903, "name": "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY", "module": "xml", "doc": ["A reference was made to an entity which was not defined."]}
{"index": 4904, "name": "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING", "module": "xml", "doc": ["The document encoding is not supported by Expat."]}
{"index": 4905, "name": "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION", "module": "xml", "doc": ["A CDATA marked section was not closed."]}
{"index": 4906, "name": "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE", "module": "xml", "doc": ["The parser determined that the document was not \u201cstandalone\u201d though it declared itself to be in the XML declaration, and the NotStandaloneHandler was set and returned 0."]}
{"index": 4907, "name": "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD", "module": "xml", "doc": ["An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support.", "This should never be reported by a standard build of the xml.parsers.expat module."]}
{"index": 4908, "name": "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING", "module": "xml", "doc": ["A behavioral change was requested after parsing started that can only be changed before parsing has started.", "This is (currently) only raised by UseForeignDTD()."]}
{"index": 4909, "name": "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX", "module": "xml", "doc": ["An undeclared prefix was found when namespace processing was enabled."]}
{"index": 4910, "name": "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX", "module": "xml", "doc": ["The document attempted to remove the namespace declaration associated with a prefix."]}
{"index": 4911, "name": "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE", "module": "xml", "doc": ["A parameter entity contained incomplete markup."]}
{"index": 4912, "name": "xml.parsers.expat.errors.XML_ERROR_XML_DECL", "module": "xml", "doc": ["The document contained no document element at all."]}
{"index": 4913, "name": "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL", "module": "xml", "doc": ["There was an error parsing a text declaration in an external entity."]}
{"index": 4914, "name": "xml.parsers.expat.errors.XML_ERROR_PUBLICID", "module": "xml", "doc": ["Characters were found in the public id that are not allowed."]}
{"index": 4915, "name": "xml.parsers.expat.errors.XML_ERROR_SUSPENDED", "module": "xml", "doc": ["The requested operation was made on a suspended parser, but isn\u2019t allowed.", "This includes attempts to provide additional input or to stop the parser."]}
{"index": 4916, "name": "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED", "module": "xml", "doc": ["An attempt to resume the parser was made when the parser had not been suspended."]}
{"index": 4917, "name": "xml.parsers.expat.errors.XML_ERROR_ABORTED", "module": "xml", "doc": ["This should not be reported to Python applications."]}
{"index": 4918, "name": "xml.parsers.expat.errors.XML_ERROR_FINISHED", "module": "xml", "doc": ["The requested operation was made on a parser which was finished parsing input, but isn\u2019t allowed.", "This includes attempts to provide additional input or to stop the parser."]}
{"index": 4919, "name": "id3", "module": "pyexpat", "doc": ["The encoding string included in XML output should conform to the appropriate standards.", "For example, \u201cUTF-8\u201d is valid, but \u201cUTF8\u201d is not.", "See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and https://www.iana.org/assignments/character-sets/character-sets.xhtml."]}
{"index": 4920, "name": "py_compile.PyCompileError", "module": "py_compile", "doc": ["Exception raised when an error occurs while attempting to compile the file."]}
{"index": 4921, "name": "py_compile.compile", "module": "py_compile", "doc": ["Compile a source file to byte-code and write out the byte-code cache file.", "The source code is loaded from the file named file.", "The byte-code is written to cfile, which defaults to the PEP 3147/PEP 488 path, ending in .pyc.", "For example, if file is /foo/bar/baz.py cfile will default to /foo/bar/__pycache__/baz.cpython-32.pyc for Python 3.2.", "If dfile is specified, it is used as the name of the source file in error messages when instead of file.", "If doraise is true, a PyCompileError is raised when an error is encountered while compiling file.", "If doraise is false (the default), an error string is written to sys.stderr, but no exception is raised.", "This function returns the path to byte-compiled file, i.e.", "whatever cfile value was used.", "If the path that cfile becomes (either explicitly specified or computed) is a symlink or non-regular file, FileExistsError will be raised.", "This is to act as a warning that import will turn those paths into regular files if it is allowed to write byte-compiled files to those paths.", "This is a side-effect of import using file renaming to place the final byte-compiled file into place to prevent concurrent file writing issues.", "optimize controls the optimization level and is passed to the built-in compile() function.", "The default of -1 selects the optimization level of the current interpreter.", "invalidation_mode should be a member of the PycInvalidationMode enum and controls how the generated bytecode cache is invalidated at runtime.", "The default is PycInvalidationMode.CHECKED_HASH if the SOURCE_DATE_EPOCH environment variable is set, otherwise the default is PycInvalidationMode.TIMESTAMP."]}
{"index": 4922, "name": "py_compile.PycInvalidationMode", "module": "py_compile", "doc": ["A enumeration of possible methods the interpreter can use to determine whether a bytecode file is up to date with a source file.", "The .pyc file indicates the desired invalidation mode in its header.", "See Cached bytecode invalidation for more information on how Python invalidates .pyc files at runtime."]}
{"index": 4923, "name": "py_compile.PycInvalidationMode.TIMESTAMP", "module": "py_compile", "doc": ["The .pyc file includes the timestamp and size of the source file, which Python will compare against the metadata of the source file at runtime to determine if the .pyc file needs to be regenerated."]}
{"index": 4924, "name": "py_compile.PycInvalidationMode.CHECKED_HASH", "module": "py_compile", "doc": ["The .pyc file includes a hash of the source file content, which Python will compare against the source at runtime to determine if the .pyc file needs to be regenerated."]}
{"index": 4925, "name": "py_compile.PycInvalidationMode.UNCHECKED_HASH", "module": "py_compile", "doc": ["Like CHECKED_HASH, the .pyc file includes a hash of the source file content.", "However, Python will at runtime assume the .pyc file is up to date and not validate the .pyc against the source file at all.", "This option is useful when the .pycs are kept up to date by some system external to Python like a build system."]}
{"index": 4926, "name": "py_compile.main", "module": "py_compile", "doc": ["Compile several source files.", "The files named in args (or on the command line, if args is None) are compiled and the resulting byte-code is cached in the normal manner.", "This function does not search a directory structure to locate source files; it only compiles files named explicitly.", "If '-' is the only parameter in args, the list of files is taken from standard input."]}
{"index": 4927, "name": "queue.Queue", "module": "queue", "doc": ["Constructor for a FIFO queue.", "maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.", "Insertion will block once this size has been reached, until queue items are consumed.", "If maxsize is less than or equal to zero, the queue size is infinite."]}
{"index": 4928, "name": "queue.LifoQueue", "module": "queue", "doc": ["Constructor for a LIFO queue.", "maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.", "Insertion will block once this size has been reached, until queue items are consumed.", "If maxsize is less than or equal to zero, the queue size is infinite."]}
{"index": 4929, "name": "queue.PriorityQueue", "module": "queue", "doc": ["Constructor for a priority queue.", "maxsize is an integer that sets the upperbound limit on the number of items that can be placed in the queue.", "Insertion will block once this size has been reached, until queue items are consumed.", "If maxsize is less than or equal to zero, the queue size is infinite.", "The lowest valued entries are retrieved first (the lowest valued entry is the one returned by sorted(list(entries))[0]).", "A typical pattern for entries is a tuple in the form: (priority_number, data).", "If the data elements are not comparable, the data can be wrapped in a class that ignores the data item and only compares the priority number:"]}
{"index": 4930, "name": "queue.SimpleQueue", "module": "queue", "doc": ["Constructor for an unbounded FIFO queue.", "Simple queues lack advanced functionality such as task tracking."]}
{"index": 4931, "name": "queue.Empty", "module": "queue", "doc": ["Exception raised when non-blocking get() (or get_nowait()) is called on a Queue object which is empty."]}
{"index": 4932, "name": "queue.Full", "module": "queue", "doc": ["Exception raised when non-blocking put() (or put_nowait()) is called on a Queue object which is full."]}
{"index": 4933, "name": "queue.Queue.qsize", "module": "queue", "doc": ["Return the approximate size of the queue.", "Note, qsize() > 0 doesn\u2019t guarantee that a subsequent get() will not block, nor will qsize() < maxsize guarantee that put() will not block."]}
{"index": 4934, "name": "queue.Queue.empty", "module": "queue", "doc": ["Return True if the queue is empty, False otherwise.", "If empty() returns True it doesn\u2019t guarantee that a subsequent call to put() will not block.", "Similarly, if empty() returns False it doesn\u2019t guarantee that a subsequent call to get() will not block."]}
{"index": 4935, "name": "queue.Queue.full", "module": "queue", "doc": ["Return True if the queue is full, False otherwise.", "If full() returns True it doesn\u2019t guarantee that a subsequent call to get() will not block.", "Similarly, if full() returns False it doesn\u2019t guarantee that a subsequent call to put() will not block."]}
{"index": 4936, "name": "queue.Queue.put", "module": "queue", "doc": ["Put item into the queue.", "If optional args block is true and timeout is None (the default), block if necessary until a free slot is available.", "If timeout is a positive number, it blocks at most timeout seconds and raises the Full exception if no free slot was available within that time.", "Otherwise (block is false), put an item on the queue if a free slot is immediately available, else raise the Full exception (timeout is ignored in that case)."]}
{"index": 4937, "name": "queue.Queue.put_nowait", "module": "queue", "doc": ["Equivalent to put(item, False)."]}
{"index": 4938, "name": "queue.Queue.get", "module": "queue", "doc": ["Remove and return an item from the queue.", "If optional args block is true and timeout is None (the default), block if necessary until an item is available.", "If timeout is a positive number, it blocks at most timeout seconds and raises the Empty exception if no item was available within that time.", "Otherwise (block is false), return an item if one is immediately available, else raise the Empty exception (timeout is ignored in that case).", "Prior to 3.0 on POSIX systems, and for all versions on Windows, if block is true and timeout is None, this operation goes into an uninterruptible wait on an underlying lock.", "This means that no exceptions can occur, and in particular a SIGINT will not trigger a KeyboardInterrupt."]}
{"index": 4939, "name": "queue.Queue.get_nowait", "module": "queue", "doc": ["Equivalent to get(False)."]}
{"index": 4940, "name": "queue.Queue.task_done", "module": "queue", "doc": ["Indicate that a formerly enqueued task is complete.", "Used by queue consumer threads.", "For each get() used to fetch a task, a subsequent call to task_done() tells the queue that the processing on the task is complete.", "If a join() is currently blocking, it will resume when all items have been processed (meaning that a task_done() call was received for every item that had been put() into the queue).", "Raises a ValueError if called more times than there were items placed in the queue."]}
{"index": 4941, "name": "queue.Queue.join", "module": "queue", "doc": ["Blocks until all items in the queue have been gotten and processed.", "The count of unfinished tasks goes up whenever an item is added to the queue.", "The count goes down whenever a consumer thread calls task_done() to indicate that the item was retrieved and all work on it is complete.", "When the count of unfinished tasks drops to zero, join() unblocks."]}
{"index": 4942, "name": "queue.SimpleQueue.qsize", "module": "queue", "doc": ["Return the approximate size of the queue.", "Note, qsize() > 0 doesn\u2019t guarantee that a subsequent get() will not block."]}
{"index": 4943, "name": "queue.SimpleQueue.empty", "module": "queue", "doc": ["Return True if the queue is empty, False otherwise.", "If empty() returns False it doesn\u2019t guarantee that a subsequent call to get() will not block."]}
{"index": 4944, "name": "queue.SimpleQueue.put", "module": "queue", "doc": ["Put item into the queue.", "The method never blocks and always succeeds (except for potential low-level errors such as failure to allocate memory).", "The optional args block and timeout are ignored and only provided for compatibility with Queue.put()."]}
{"index": 4945, "name": "queue.SimpleQueue.put_nowait", "module": "queue", "doc": ["Equivalent to put(item), provided for compatibility with Queue.put_nowait()."]}
{"index": 4946, "name": "queue.SimpleQueue.get", "module": "queue", "doc": ["Remove and return an item from the queue.", "If optional args block is true and timeout is None (the default), block if necessary until an item is available.", "If timeout is a positive number, it blocks at most timeout seconds and raises the Empty exception if no item was available within that time.", "Otherwise (block is false), return an item if one is immediately available, else raise the Empty exception (timeout is ignored in that case)."]}
{"index": 4947, "name": "queue.SimpleQueue.get_nowait", "module": "queue", "doc": ["Equivalent to get(False)."]}
{"index": 4948, "name": "quopri.decode", "module": "quopri", "doc": ["Decode the contents of the input file and write the resulting decoded binary data to the output file.", "input and output must be binary file objects.", "If the optional argument header is present and true, underscore will be decoded as space.", "This is used to decode \u201cQ\u201d-encoded headers as described in RFC 1522: \u201cMIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Text\u201d."]}
{"index": 4949, "name": "quopri.encode", "module": "quopri", "doc": ["Encode the contents of the input file and write the resulting quoted-printable data to the output file.", "input and output must be binary file objects.", "quotetabs, a non-optional flag which controls whether to encode embedded spaces and tabs; when true it encodes such embedded whitespace, and when false it leaves them unencoded.", "Note that spaces and tabs appearing at the end of lines are always encoded, as per RFC 1521.  header is a flag which controls if spaces are encoded as underscores as per RFC 1522."]}
{"index": 4950, "name": "quopri.decodestring", "module": "quopri", "doc": ["Like decode(), except that it accepts a source bytes and returns the corresponding decoded bytes."]}
{"index": 4951, "name": "quopri.encodestring", "module": "quopri", "doc": ["Like encode(), except that it accepts a source bytes and returns the corresponding encoded bytes.", "By default, it sends a False value to quotetabs parameter of the encode() function."]}
{"index": 4952, "name": "random.seed", "module": "random", "doc": ["Initialize the random number generator.", "If a is omitted or None, the current system time is used.", "If randomness sources are provided by the operating system, they are used instead of the system time (see the os.urandom() function for details on availability).", "If a is an int, it is used directly.", "With version 2 (the default), a str, bytes, or bytearray object gets converted to an int and all of its bits are used.", "With version 1 (provided for reproducing random sequences from older versions of Python), the algorithm for str and bytes generates a narrower range of seeds."]}
{"index": 4953, "name": "random.getstate", "module": "random", "doc": ["Return an object capturing the current internal state of the generator.", "This object can be passed to setstate() to restore the state."]}
{"index": 4954, "name": "random.setstate", "module": "random", "doc": ["state should have been obtained from a previous call to getstate(), and setstate() restores the internal state of the generator to what it was at the time getstate() was called."]}
{"index": 4955, "name": "random.getrandbits", "module": "random", "doc": ["Returns a Python integer with k random bits.", "This method is supplied with the MersenneTwister generator and some other generators may also provide it as an optional part of the API.", "When available, getrandbits() enables randrange() to handle arbitrarily large ranges."]}
{"index": 4956, "name": "random.randrange", "module": "random", "doc": ["Return a randomly selected element from range(start, stop, step).", "This is equivalent to choice(range(start, stop, step)), but doesn\u2019t actually build a range object.", "The positional argument pattern matches that of range().", "Keyword arguments should not be used because the function may use them in unexpected ways."]}
{"index": 4957, "name": "random.randint", "module": "random", "doc": ["Return a random integer N such that a <= N <= b.  Alias for randrange(a, b+1)."]}
{"index": 4958, "name": "random.choice", "module": "random", "doc": ["Return a random element from the non-empty sequence seq.", "If seq is empty, raises IndexError."]}
{"index": 4959, "name": "random.choices", "module": "random", "doc": ["Return a k sized list of elements chosen from the population with replacement.", "If the population is empty, raises IndexError.", "If a weights sequence is specified, selections are made according to the relative weights.", "Alternatively, if a cum_weights sequence is given, the selections are made according to the cumulative weights (perhaps computed using itertools.accumulate()).", "For example, the relative weights [10, 5, 30, 5] are equivalent to the cumulative weights [10, 15, 45, 50].", "Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work.", "If neither weights nor cum_weights are specified, selections are made with equal probability.", "If a weights sequence is supplied, it must be the same length as the population sequence.", "It is a TypeError to specify both weights and cum_weights.", "The weights or cum_weights can use any numeric type that interoperates with the float values returned by random() (that includes integers, floats, and fractions but excludes decimals).", "For a given seed, the choices() function with equal weighting typically produces a different sequence than repeated calls to choice().", "The algorithm used by choices() uses floating point arithmetic for internal consistency and speed.", "The algorithm used by choice() defaults to integer arithmetic with repeated selections to avoid small biases from round-off error."]}
{"index": 4960, "name": "random.shuffle", "module": "random", "doc": ["Shuffle the sequence x in place.", "The optional argument random is a 0-argument function returning a random float in [0.0, 1.0); by default, this is the function random().", "To shuffle an immutable sequence and return a new shuffled list, use sample(x, k=len(x)) instead.", "Note that even for small len(x), the total number of permutations of x can quickly grow larger than the period of most random number generators.", "This implies that most permutations of a long sequence can never be generated.", "For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator."]}
{"index": 4961, "name": "random.sample", "module": "random", "doc": ["Return a k length list of unique elements chosen from the population sequence or set.", "Used for random sampling without replacement.", "Returns a new list containing elements from the population while leaving the original population unchanged.", "The resulting list is in selection order so that all sub-slices will also be valid random samples.", "This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices).", "Members of the population need not be hashable or unique.", "If the population contains repeats, then each occurrence is a possible selection in the sample.", "To choose a sample from a range of integers, use a range() object as an argument.", "This is especially fast and space efficient for sampling from a large population:  sample(range(10000000), k=60).", "If the sample size is larger than the population size, a ValueError is raised."]}
{"index": 4962, "name": "random.random", "module": "random", "doc": ["Return the next random floating point number in the range [0.0, 1.0)."]}
{"index": 4963, "name": "random.uniform", "module": "random", "doc": ["Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a.", "The end-point value b may or may not be included in the range depending on floating-point rounding in the equation a + (b-a) * random()."]}
{"index": 4964, "name": "random.triangular", "module": "random", "doc": ["Return a random floating point number N such that low <= N <= high and with the specified mode between those bounds.", "The low and high bounds default to zero and one.", "The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution."]}
{"index": 4965, "name": "random.betavariate", "module": "random", "doc": ["Beta distribution.", "Conditions on the parameters are alpha > 0 and beta > 0.", "Returned values range between 0 and 1."]}
{"index": 4966, "name": "random.expovariate", "module": "random", "doc": ["Exponential distribution.", "lambd is 1.0 divided by the desired mean.", "It should be nonzero.", "(The parameter would be called \u201clambda\u201d, but that is a reserved word in Python.)", "Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative."]}
{"index": 4967, "name": "random.gammavariate", "module": "random", "doc": ["Gamma distribution.", "(Not the gamma function!)", "Conditions on the parameters are alpha > 0 and beta > 0.", "The probability distribution function is:"]}
{"index": 4968, "name": "random.gauss", "module": "random", "doc": ["Gaussian distribution.", "mu is the mean, and sigma is the standard deviation.", "This is slightly faster than the normalvariate() function defined below."]}
{"index": 4969, "name": "random.lognormvariate", "module": "random", "doc": ["Log normal distribution.", "If you take the natural logarithm of this distribution, you\u2019ll get a normal distribution with mean mu and standard deviation sigma.", "mu can have any value, and sigma must be greater than zero."]}
{"index": 4970, "name": "random.normalvariate", "module": "random", "doc": ["Normal distribution.", "mu is the mean, and sigma is the standard deviation."]}
{"index": 4971, "name": "random.vonmisesvariate", "module": "random", "doc": ["mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero.", "If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi."]}
{"index": 4972, "name": "random.paretovariate", "module": "random", "doc": ["Pareto distribution.", "alpha is the shape parameter."]}
{"index": 4973, "name": "random.weibullvariate", "module": "random", "doc": ["Weibull distribution.", "alpha is the scale parameter and beta is the shape parameter."]}
{"index": 4974, "name": "random.Random", "module": "random", "doc": ["Class that implements the default pseudo-random number generator used by the random module."]}
{"index": 4975, "name": "random.SystemRandom", "module": "random", "doc": ["Class that uses the os.urandom() function for generating random numbers from sources provided by the operating system.", "Not available on all systems.", "Does not rely on software state, and sequences are not reproducible.", "Accordingly, the seed() method has no effect and is ignored.", "The getstate() and setstate() methods raise NotImplementedError if called."]}
{"index": 4976, "name": "re.compile", "module": "re", "doc": ["Compile a regular expression pattern into a regular expression object, which can be used for matching using its match(), search() and other methods, described below.", "The expression\u2019s behaviour can be modified by specifying a flags value.", "Values can be any of the following variables, combined using bitwise OR (the | operator).", "The sequence", "is equivalent to", "but using re.compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program."]}
{"index": 4977, "name": "re.A", "module": "re", "doc": ["Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "This is only meaningful for Unicode patterns, and is ignored for byte patterns.", "Corresponds to the inline flag (?a).", "Note that for backward compatibility, the re.U flag still exists (as well as its synonym re.UNICODE and its embedded counterpart (?u)), but these are redundant in Python 3 since matches are Unicode by default for strings (and Unicode matching isn\u2019t allowed for bytes)."]}
{"index": 4978, "name": "re.ASCII", "module": "re", "doc": ["Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching.", "This is only meaningful for Unicode patterns, and is ignored for byte patterns.", "Corresponds to the inline flag (?a).", "Note that for backward compatibility, the re.U flag still exists (as well as its synonym re.UNICODE and its embedded counterpart (?u)), but these are redundant in Python 3 since matches are Unicode by default for strings (and Unicode matching isn\u2019t allowed for bytes)."]}
{"index": 4979, "name": "re.DEBUG", "module": "re", "doc": ["Display debug information about compiled expression.", "No corresponding inline flag."]}
{"index": 4980, "name": "re.I", "module": "re", "doc": ["Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "Full Unicode matching (such as \u00dc matching \u00fc) also works unless the re.ASCII flag is used to disable non-ASCII matches.", "The current locale does not change the effect of this flag unless the re.LOCALE flag is also used.", "Corresponds to the inline flag (?i).", "Note that when the Unicode patterns [a-z] or [A-Z] are used in combination with the IGNORECASE flag, they will match the 52 ASCII letters and 4 additional non-ASCII letters: \u2018\u0130\u2019 (U+0130, Latin capital letter I with dot above), \u2018\u0131\u2019 (U+0131, Latin small letter dotless i), \u2018\u017f\u2019 (U+017F, Latin small letter long s) and \u2018\u212a\u2019 (U+212A, Kelvin sign).", "If the ASCII flag is used, only letters \u2018a\u2019 to \u2018z\u2019 and \u2018A\u2019 to \u2018Z\u2019 are matched."]}
{"index": 4981, "name": "re.IGNORECASE", "module": "re", "doc": ["Perform case-insensitive matching; expressions like [A-Z] will also match lowercase letters.", "Full Unicode matching (such as \u00dc matching \u00fc) also works unless the re.ASCII flag is used to disable non-ASCII matches.", "The current locale does not change the effect of this flag unless the re.LOCALE flag is also used.", "Corresponds to the inline flag (?i).", "Note that when the Unicode patterns [a-z] or [A-Z] are used in combination with the IGNORECASE flag, they will match the 52 ASCII letters and 4 additional non-ASCII letters: \u2018\u0130\u2019 (U+0130, Latin capital letter I with dot above), \u2018\u0131\u2019 (U+0131, Latin small letter dotless i), \u2018\u017f\u2019 (U+017F, Latin small letter long s) and \u2018\u212a\u2019 (U+212A, Kelvin sign).", "If the ASCII flag is used, only letters \u2018a\u2019 to \u2018z\u2019 and \u2018A\u2019 to \u2018Z\u2019 are matched."]}
{"index": 4982, "name": "re.L", "module": "re", "doc": ["Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "This flag can be used only with bytes patterns.", "The use of this flag is discouraged as the locale mechanism is very unreliable, it only handles one \u201cculture\u201d at a time, and it only works with 8-bit locales.", "Unicode matching is already enabled by default in Python 3 for Unicode (str) patterns, and it is able to handle different locales/languages.", "Corresponds to the inline flag (?L)."]}
{"index": 4983, "name": "re.LOCALE", "module": "re", "doc": ["Make \\w, \\W, \\b, \\B and case-insensitive matching dependent on the current locale.", "This flag can be used only with bytes patterns.", "The use of this flag is discouraged as the locale mechanism is very unreliable, it only handles one \u201cculture\u201d at a time, and it only works with 8-bit locales.", "Unicode matching is already enabled by default in Python 3 for Unicode (str) patterns, and it is able to handle different locales/languages.", "Corresponds to the inline flag (?L)."]}
{"index": 4984, "name": "re.M", "module": "re", "doc": ["When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string.", "Corresponds to the inline flag (?m)."]}
{"index": 4985, "name": "re.MULTILINE", "module": "re", "doc": ["When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline).", "By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string.", "Corresponds to the inline flag (?m)."]}
{"index": 4986, "name": "re.S", "module": "re", "doc": ["Make the '.'", "special character match any character at all, including a newline; without this flag, '.'", "will match anything except a newline.", "Corresponds to the inline flag (?s)."]}
{"index": 4987, "name": "re.DOTALL", "module": "re", "doc": ["Make the '.'", "special character match any character at all, including a newline; without this flag, '.'", "will match anything except a newline.", "Corresponds to the inline flag (?s)."]}
{"index": 4988, "name": "re.X", "module": "re", "doc": ["This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like *?, (?", ": or (?P<...>.", "When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored.", "This means that the two following regular expression objects that match a decimal number are functionally equal:", "Corresponds to the inline flag (?x)."]}
{"index": 4989, "name": "re.VERBOSE", "module": "re", "doc": ["This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.", "Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like *?, (?", ": or (?P<...>.", "When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored.", "This means that the two following regular expression objects that match a decimal number are functionally equal:", "Corresponds to the inline flag (?x)."]}
{"index": 4990, "name": "re.search", "module": "re", "doc": ["Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding match object.", "Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string."]}
{"index": 4991, "name": "re.match", "module": "re", "doc": ["If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object.", "Return None if the string does not match the pattern; note that this is different from a zero-length match.", "Note that even in MULTILINE mode, re.match() will only match at the beginning of the string and not at the beginning of each line.", "If you want to locate a match anywhere in string, use search() instead (see also search() vs. match())."]}
{"index": 4992, "name": "re.fullmatch", "module": "re", "doc": ["If the whole string matches the regular expression pattern, return a corresponding match object.", "Return None if the string does not match the pattern; note that this is different from a zero-length match."]}
{"index": 4993, "name": "re.split", "module": "re", "doc": ["Split string by the occurrences of pattern.", "If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list.", "If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list.", "If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string.", "The same holds for the end of the string:", "That way, separator components are always found at the same relative indices within the result list.", "Empty matches for the pattern split the string only when not adjacent to a previous empty match."]}
{"index": 4994, "name": "re.findall", "module": "re", "doc": ["Return all non-overlapping matches of pattern in string, as a list of strings.", "The string is scanned left-to-right, and matches are returned in the order found.", "If one or more groups are present in the pattern, return a list of groups; this will be a list of tuples if the pattern has more than one group.", "Empty matches are included in the result."]}
{"index": 4995, "name": "re.finditer", "module": "re", "doc": ["Return an iterator yielding match objects over all non-overlapping matches for the RE pattern in string.", "The string is scanned left-to-right, and matches are returned in the order found.", "Empty matches are included in the result."]}
{"index": 4996, "name": "re.sub", "module": "re", "doc": ["Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.", "If the pattern isn\u2019t found, string is returned unchanged.", "repl can be a string or a function; if it is a string, any backslash escapes in it are processed.", "That is, \\n is converted to a single newline character, \\r is converted to a carriage return, and so forth.", "Unknown escapes of ASCII letters are reserved for future use and treated as errors.", "Other unknown escapes such as \\& are left alone.", "Backreferences, such as \\6, are replaced with the substring matched by group 6 in the pattern.", "For example:", "If repl is a function, it is called for every non-overlapping occurrence of pattern.", "The function takes a single match object argument, and returns the replacement string.", "For example:", "The pattern may be a string or a pattern object.", "The optional argument count is the maximum number of pattern occurrences to be replaced; count must be a non-negative integer.", "If omitted or zero, all occurrences will be replaced.", "Empty matches for the pattern are replaced only when not adjacent to a previous empty match, so sub('x*', '-', 'abxd') returns '-a-b--d-'.", "In string-type repl arguments, in addition to the character escapes and backreferences described above, \\g<name> will use the substring matched by the group named name, as defined by the (?P<name>...) syntax.", "\\g<number> uses the corresponding group number; \\g<2> is therefore equivalent to \\2, but isn\u2019t ambiguous in a replacement such as \\g<2>0.", "\\20 would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character '0'.", "The backreference \\g<0> substitutes in the entire substring matched by the RE."]}
{"index": 4997, "name": "re.subn", "module": "re", "doc": ["Perform the same operation as sub(), but return a tuple (new_string, number_of_subs_made)."]}
{"index": 4998, "name": "re.escape", "module": "re", "doc": ["Escape special characters in pattern.", "This is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.", "For example:", "This function must not be used for the replacement string in sub() and subn(), only backslashes should be escaped.", "For example:"]}
{"index": 4999, "name": "re.purge", "module": "re", "doc": ["Clear the regular expression cache."]}
{"index": 5000, "name": "re.error", "module": "re", "doc": ["Exception raised when a string passed to one of the functions here is not a valid regular expression (for example, it might contain unmatched parentheses) or when some other error occurs during compilation or matching.", "It is never an error if a string contains no match for a pattern.", "The error instance has the following additional attributes:"]}
{"index": 5001, "name": "re.error.msg", "module": "re", "doc": ["The unformatted error message."]}
{"index": 5002, "name": "re.error.pattern", "module": "re", "doc": ["The regular expression pattern."]}
{"index": 5003, "name": "re.error.pos", "module": "re", "doc": ["The index in pattern where compilation failed (may be None)."]}
{"index": 5004, "name": "re.error.lineno", "module": "re", "doc": ["The line corresponding to pos (may be None)."]}
{"index": 5005, "name": "re.error.colno", "module": "re", "doc": ["The column corresponding to pos (may be None)."]}
{"index": 5006, "name": "re.Pattern.search", "module": "re", "doc": ["Scan through string looking for the first location where this regular expression produces a match, and return a corresponding match object.", "Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.", "The optional second parameter pos gives an index in the string where the search is to start; it defaults to 0.", "This is not completely equivalent to slicing the string; the '^' pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start.", "The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match.", "If endpos is less than pos, no match will be found; otherwise, if rx is a compiled regular expression object, rx.search(string, 0, 50) is equivalent to rx.search(string[:50], 0)."]}
{"index": 5007, "name": "re.Pattern.match", "module": "re", "doc": ["If zero or more characters at the beginning of string match this regular expression, return a corresponding match object.", "Return None if the string does not match the pattern; note that this is different from a zero-length match.", "The optional pos and endpos parameters have the same meaning as for the search() method.", "If you want to locate a match anywhere in string, use search() instead (see also search() vs. match())."]}
{"index": 5008, "name": "re.Pattern.fullmatch", "module": "re", "doc": ["If the whole string matches this regular expression, return a corresponding match object.", "Return None if the string does not match the pattern; note that this is different from a zero-length match.", "The optional pos and endpos parameters have the same meaning as for the search() method."]}
{"index": 5009, "name": "re.Pattern.split", "module": "re", "doc": ["Identical to the split() function, using the compiled pattern."]}
{"index": 5010, "name": "re.Pattern.findall", "module": "re", "doc": ["Similar to the findall() function, using the compiled pattern, but also accepts optional pos and endpos parameters that limit the search region like for search()."]}
{"index": 5011, "name": "re.Pattern.finditer", "module": "re", "doc": ["Similar to the finditer() function, using the compiled pattern, but also accepts optional pos and endpos parameters that limit the search region like for search()."]}
{"index": 5012, "name": "re.Pattern.sub", "module": "re", "doc": ["Identical to the sub() function, using the compiled pattern."]}
{"index": 5013, "name": "re.Pattern.subn", "module": "re", "doc": ["Identical to the subn() function, using the compiled pattern."]}
{"index": 5014, "name": "re.Pattern.flags", "module": "re", "doc": ["The regex matching flags.", "This is a combination of the flags given to compile(), any (?...)", "inline flags in the pattern, and implicit flags such as UNICODE if the pattern is a Unicode string."]}
{"index": 5015, "name": "re.Pattern.groups", "module": "re", "doc": ["The number of capturing groups in the pattern."]}
{"index": 5016, "name": "re.Pattern.groupindex", "module": "re", "doc": ["A dictionary mapping any symbolic group names defined by (?P<id>) to group numbers.", "The dictionary is empty if no symbolic groups were used in the pattern."]}
{"index": 5017, "name": "re.Pattern.pattern", "module": "re", "doc": ["The pattern string from which the pattern object was compiled."]}
{"index": 5018, "name": "re.Match.expand", "module": "re", "doc": ["Return the string obtained by doing backslash substitution on the template string template, as done by the sub() method.", "Escapes such as \\n are converted to the appropriate characters, and numeric backreferences (\\1, \\2) and named backreferences (\\g<1>, \\g<name>) are replaced by the contents of the corresponding group."]}
{"index": 5019, "name": "re.Match.group", "module": "re", "doc": ["Returns one or more subgroups of the match.", "If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument.", "Without arguments, group1 defaults to zero (the whole match is returned).", "If a groupN argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group.", "If a group number is negative or larger than the number of groups defined in the pattern, an IndexError exception is raised.", "If a group is contained in a part of the pattern that did not match, the corresponding result is None.", "If a group is contained in a part of the pattern that matched multiple times, the last match is returned.", "If the regular expression uses the (?P<name>...) syntax, the groupN arguments may also be strings identifying groups by their group name.", "If a string argument is not used as a group name in the pattern, an IndexError exception is raised.", "A moderately complicated example:", "Named groups can also be referred to by their index:", "If a group matches multiple times, only the last match is accessible:"]}
{"index": 5020, "name": "re.Match.__getitem__", "module": "re", "doc": ["This is identical to m.group(g).", "This allows easier access to an individual group from a match:"]}
{"index": 5021, "name": "re.Match.groups", "module": "re", "doc": ["Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern.", "The default argument is used for groups that did not participate in the match; it defaults to None.", "For example:", "If we make the decimal place and everything after it optional, not all groups might participate in the match.", "These groups will default to None unless the default argument is given:"]}
{"index": 5022, "name": "re.Match.groupdict", "module": "re", "doc": ["Return a dictionary containing all the named subgroups of the match, keyed by the subgroup name.", "The default argument is used for groups that did not participate in the match; it defaults to None.", "For example:"]}
{"index": 5023, "name": "re.Match.start", "module": "re", "doc": ["Return the indices of the start and end of the substring matched by group; group defaults to zero (meaning the whole matched substring).", "Return -1 if group exists but did not contribute to the match.", "For a match object m, and a group g that did contribute to the match, the substring matched by group g (equivalent to m.group(g)) is", "Note that m.start(group) will equal m.end(group) if group matched a null string.", "For example, after m = re.search('b(c?", ")', 'cba'), m.start(0) is 1, m.end(0) is 2, m.start(1) and m.end(1) are both 2, and m.start(2) raises an IndexError exception.", "An example that will remove remove_this from email addresses:"]}
{"index": 5024, "name": "re.Match.end", "module": "re", "doc": ["Return the indices of the start and end of the substring matched by group; group defaults to zero (meaning the whole matched substring).", "Return -1 if group exists but did not contribute to the match.", "For a match object m, and a group g that did contribute to the match, the substring matched by group g (equivalent to m.group(g)) is", "Note that m.start(group) will equal m.end(group) if group matched a null string.", "For example, after m = re.search('b(c?", ")', 'cba'), m.start(0) is 1, m.end(0) is 2, m.start(1) and m.end(1) are both 2, and m.start(2) raises an IndexError exception.", "An example that will remove remove_this from email addresses:"]}
{"index": 5025, "name": "re.Match.span", "module": "re", "doc": ["For a match m, return the 2-tuple (m.start(group), m.end(group)).", "Note that if group did not contribute to the match, this is (-1, -1).", "group defaults to zero, the entire match."]}
{"index": 5026, "name": "re.Match.pos", "module": "re", "doc": ["The value of pos which was passed to the search() or match() method of a regex object.", "This is the index into the string at which the RE engine started looking for a match."]}
{"index": 5027, "name": "re.Match.endpos", "module": "re", "doc": ["The value of endpos which was passed to the search() or match() method of a regex object.", "This is the index into the string beyond which the RE engine will not go."]}
{"index": 5028, "name": "re.Match.lastindex", "module": "re", "doc": ["The integer index of the last matched capturing group, or None if no group was matched at all.", "For example, the expressions (a)b, ((a)(b)), and ((ab)) will have lastindex == 1 if applied to the string 'ab', while the expression (a)(b) will have lastindex == 2, if applied to the same string."]}
{"index": 5029, "name": "re.Match.lastgroup", "module": "re", "doc": ["The name of the last matched capturing group, or None if the group didn\u2019t have a name, or if no group was matched at all."]}
{"index": 5030, "name": "re.Match.re", "module": "re", "doc": ["The regular expression object whose match() or search() method produced this match instance."]}
{"index": 5031, "name": "re.Match.string", "module": "re", "doc": ["The string passed to match() or search()."]}
{"index": 5032, "name": "frie09", "module": "re", "doc": ["Friedl, Jeffrey.", "Mastering Regular Expressions.", "3rd ed., O\u2019Reilly Media, 2009.", "The third edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail."]}
{"index": 5033, "name": "readline.parse_and_bind", "module": "readline", "doc": ["Execute the init line provided in the string argument.", "This calls rl_parse_and_bind() in the underlying library."]}
{"index": 5034, "name": "readline.read_init_file", "module": "readline", "doc": ["Execute a readline initialization file.", "The default filename is the last filename used.", "This calls rl_read_init_file() in the underlying library."]}
{"index": 5035, "name": "readline.get_line_buffer", "module": "readline", "doc": ["Return the current contents of the line buffer (rl_line_buffer in the underlying library)."]}
{"index": 5036, "name": "readline.insert_text", "module": "readline", "doc": ["Insert text into the line buffer at the cursor position.", "This calls rl_insert_text() in the underlying library, but ignores the return value."]}
{"index": 5037, "name": "readline.redisplay", "module": "readline", "doc": ["Change what\u2019s displayed on the screen to reflect the current contents of the line buffer.", "This calls rl_redisplay() in the underlying library."]}
{"index": 5038, "name": "readline.read_history_file", "module": "readline", "doc": ["Load a readline history file, and append it to the history list.", "The default filename is ~/.history.", "This calls read_history() in the underlying library."]}
{"index": 5039, "name": "readline.write_history_file", "module": "readline", "doc": ["Save the history list to a readline history file, overwriting any existing file.", "The default filename is ~/.history.", "This calls write_history() in the underlying library."]}
{"index": 5040, "name": "readline.append_history_file", "module": "readline", "doc": ["Append the last nelements items of history to a file.", "The default filename is ~/.history.", "The file must already exist.", "This calls append_history() in the underlying library.", "This function only exists if Python was compiled for a version of the library that supports it."]}
{"index": 5041, "name": "readline.get_history_length", "module": "readline", "doc": ["Set or return the desired number of lines to save in the history file.", "The write_history_file() function uses this value to truncate the history file, by calling history_truncate_file() in the underlying library.", "Negative values imply unlimited history file size."]}
{"index": 5042, "name": "readline.set_history_length", "module": "readline", "doc": ["Set or return the desired number of lines to save in the history file.", "The write_history_file() function uses this value to truncate the history file, by calling history_truncate_file() in the underlying library.", "Negative values imply unlimited history file size."]}
{"index": 5043, "name": "readline.clear_history", "module": "readline", "doc": ["Clear the current history.", "This calls clear_history() in the underlying library.", "The Python function only exists if Python was compiled for a version of the library that supports it."]}
{"index": 5044, "name": "readline.get_current_history_length", "module": "readline", "doc": ["Return the number of items currently in the history.", "(This is different from get_history_length(), which returns the maximum number of lines that will be written to a history file.)"]}
{"index": 5045, "name": "readline.get_history_item", "module": "readline", "doc": ["Return the current contents of history item at index.", "The item index is one-based.", "This calls history_get() in the underlying library."]}
{"index": 5046, "name": "readline.remove_history_item", "module": "readline", "doc": ["Remove history item specified by its position from the history.", "The position is zero-based.", "This calls remove_history() in the underlying library."]}
{"index": 5047, "name": "readline.replace_history_item", "module": "readline", "doc": ["Replace history item specified by its position with line.", "The position is zero-based.", "This calls replace_history_entry() in the underlying library."]}
{"index": 5048, "name": "readline.add_history", "module": "readline", "doc": ["Append line to the history buffer, as if it was the last line typed.", "This calls add_history() in the underlying library."]}
{"index": 5049, "name": "readline.set_auto_history", "module": "readline", "doc": ["Enable or disable automatic calls to add_history() when reading input via readline.", "The enabled argument should be a Boolean value that when true, enables auto history, and that when false, disables auto history."]}
{"index": 5050, "name": "readline.set_startup_hook", "module": "readline", "doc": ["Set or remove the function invoked by the rl_startup_hook callback of the underlying library.", "If function is specified, it will be used as the new hook function; if omitted or None, any function already installed is removed.", "The hook is called with no arguments just before readline prints the first prompt."]}
{"index": 5051, "name": "readline.set_pre_input_hook", "module": "readline", "doc": ["Set or remove the function invoked by the rl_pre_input_hook callback of the underlying library.", "If function is specified, it will be used as the new hook function; if omitted or None, any function already installed is removed.", "The hook is called with no arguments after the first prompt has been printed and just before readline starts reading input characters.", "This function only exists if Python was compiled for a version of the library that supports it."]}
{"index": 5052, "name": "readline.set_completer", "module": "readline", "doc": ["Set or remove the completer function.", "If function is specified, it will be used as the new completer function; if omitted or None, any completer function already installed is removed.", "The completer function is called as function(text, state), for state in 0, 1, 2, \u2026, until it returns a non-string value.", "It should return the next possible completion starting with text.", "The installed completer function is invoked by the entry_func callback passed to rl_completion_matches() in the underlying library.", "The text string comes from the first parameter to the rl_attempted_completion_function callback of the underlying library."]}
{"index": 5053, "name": "readline.get_completer", "module": "readline", "doc": ["Get the completer function, or None if no completer function has been set."]}
{"index": 5054, "name": "readline.get_completion_type", "module": "readline", "doc": ["Get the type of completion being attempted.", "This returns the rl_completion_type variable in the underlying library as an integer."]}
{"index": 5055, "name": "readline.get_begidx", "module": "readline", "doc": ["Get the beginning or ending index of the completion scope.", "These indexes are the start and end arguments passed to the rl_attempted_completion_function callback of the underlying library."]}
{"index": 5056, "name": "readline.get_endidx", "module": "readline", "doc": ["Get the beginning or ending index of the completion scope.", "These indexes are the start and end arguments passed to the rl_attempted_completion_function callback of the underlying library."]}
{"index": 5057, "name": "readline.set_completer_delims", "module": "readline", "doc": ["Set or get the word delimiters for completion.", "These determine the start of the word to be considered for completion (the completion scope).", "These functions access the rl_completer_word_break_characters variable in the underlying library."]}
{"index": 5058, "name": "readline.get_completer_delims", "module": "readline", "doc": ["Set or get the word delimiters for completion.", "These determine the start of the word to be considered for completion (the completion scope).", "These functions access the rl_completer_word_break_characters variable in the underlying library."]}
{"index": 5059, "name": "readline.set_completion_display_matches_hook", "module": "readline", "doc": ["Set or remove the completion display function.", "If function is specified, it will be used as the new completion display function; if omitted or None, any completion display function already installed is removed.", "This sets or clears the rl_completion_display_matches_hook callback in the underlying library.", "The completion display function is called as function(substitution, [matches], longest_match_length) once each time matches need to be displayed."]}
{"index": 5060, "name": "reprlib.Repr", "module": "reprlib", "doc": ["Class which provides formatting services useful in implementing functions similar to the built-in repr(); size limits for  different object types are added to avoid the generation of representations which are excessively long."]}
{"index": 5061, "name": "reprlib.aRepr", "module": "reprlib", "doc": ["This is an instance of Repr which is used to provide the repr() function described below.", "Changing the attributes of this object will affect the size limits used by repr() and the Python debugger."]}
{"index": 5062, "name": "reprlib.repr", "module": "reprlib", "doc": ["This is the repr() method of aRepr.", "It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes."]}
{"index": 5063, "name": "reprlib.recursive_repr", "module": "reprlib", "doc": ["Decorator for __repr__() methods to detect recursive calls within the same thread.", "If a recursive call is made, the fillvalue is returned, otherwise, the usual __repr__() call is made.", "For example:"]}
{"index": 5064, "name": "reprlib.Repr.maxlevel", "module": "reprlib", "doc": ["Depth limit on the creation of recursive representations.", "The default is 6."]}
{"index": 5065, "name": "reprlib.Repr.maxdict", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5066, "name": "reprlib.Repr.maxlist", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5067, "name": "reprlib.Repr.maxtuple", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5068, "name": "reprlib.Repr.maxset", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5069, "name": "reprlib.Repr.maxfrozenset", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5070, "name": "reprlib.Repr.maxdeque", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5071, "name": "reprlib.Repr.maxarray", "module": "reprlib", "doc": ["Limits on the number of entries represented for the named object type.", "The default is 4 for maxdict, 5 for maxarray, and  6 for the others."]}
{"index": 5072, "name": "reprlib.Repr.maxlong", "module": "reprlib", "doc": ["Maximum number of characters in the representation for an integer.", "Digits are dropped from the middle.", "The default is 40."]}
{"index": 5073, "name": "reprlib.Repr.maxstring", "module": "reprlib", "doc": ["Limit on the number of characters in the representation of the string.", "Note that the \u201cnormal\u201d representation of the string is used as the character source: if escape sequences are needed in the representation, these may be mangled when the representation is shortened.", "The default is 30."]}
{"index": 5074, "name": "reprlib.Repr.maxother", "module": "reprlib", "doc": ["This limit is used to control the size of object types for which no specific formatting method is available on the Repr object.", "It is applied in a similar manner as maxstring.", "The default is 20."]}
{"index": 5075, "name": "reprlib.Repr.repr", "module": "reprlib", "doc": ["The equivalent to the built-in repr() that uses the formatting imposed by the instance."]}
{"index": 5076, "name": "reprlib.Repr.repr1", "module": "reprlib", "doc": ["Recursive implementation used by repr().", "This uses the type of obj to determine which formatting method to call, passing it obj and level.", "The type-specific methods should call repr1() to perform recursive formatting, with level - 1 for the value of level in the recursive  call."]}
{"index": 5077, "name": "resource.error", "module": "resource", "doc": ["A deprecated alias of OSError."]}
{"index": 5078, "name": "resource.RLIM_INFINITY", "module": "resource", "doc": ["Constant used to represent the limit for an unlimited resource."]}
{"index": 5079, "name": "resource.getrlimit", "module": "resource", "doc": ["Returns a tuple (soft, hard) with the current soft and hard limits of resource.", "Raises ValueError if an invalid resource is specified, or error if the underlying system call fails unexpectedly."]}
{"index": 5080, "name": "resource.setrlimit", "module": "resource", "doc": ["Sets new limits of consumption of resource.", "The limits argument must be a tuple (soft, hard) of two integers describing the new limits.", "A value of RLIM_INFINITY can be used to request a limit that is unlimited.", "Raises ValueError if an invalid resource is specified, if the new soft limit exceeds the hard limit, or if a process tries to raise its hard limit.", "Specifying a limit of RLIM_INFINITY when the hard or system limit for that resource is not unlimited will result in a ValueError.", "A process with the effective UID of super-user can request any valid limit value, including unlimited, but ValueError will still be raised if the requested limit exceeds the system imposed limit.", "setrlimit may also raise error if the underlying system call fails."]}
{"index": 5081, "name": "resource.prlimit", "module": "resource", "doc": ["Combines setrlimit() and getrlimit() in one function and supports to get and set the resources limits of an arbitrary process.", "If pid is 0, then the call applies to the current process.", "resource and limits have the same meaning as in setrlimit(), except that limits is optional.", "When limits is not given the function returns the resource limit of the process pid.", "When limits is given the resource limit of the process is set and the former resource limit is returned.", "Raises ProcessLookupError when pid can\u2019t be found and PermissionError when the user doesn\u2019t have CAP_SYS_RESOURCE for the process.", "Availability: Linux 2.6.36 or later with glibc 2.13 or later."]}
{"index": 5082, "name": "resource.RLIMIT_CORE", "module": "resource", "doc": ["The maximum size (in bytes) of a core file that the current process can create.", "This may result in the creation of a partial core file if a larger core would be required to contain the entire process image."]}
{"index": 5083, "name": "resource.RLIMIT_CPU", "module": "resource", "doc": ["The maximum amount of processor time (in seconds) that a process can use.", "If this limit is exceeded, a SIGXCPU signal is sent to the process.", "(See the signal module documentation for information about how to catch this signal and do something useful, e.g.", "flush open files to disk.)"]}
{"index": 5084, "name": "resource.RLIMIT_FSIZE", "module": "resource", "doc": ["The maximum size of a file which the process may create."]}
{"index": 5085, "name": "resource.RLIMIT_DATA", "module": "resource", "doc": ["The maximum size (in bytes) of the process\u2019s heap."]}
{"index": 5086, "name": "resource.RLIMIT_STACK", "module": "resource", "doc": ["The maximum size (in bytes) of the call stack for the current process.", "This only affects the stack of the main thread in a multi-threaded process."]}
{"index": 5087, "name": "resource.RLIMIT_RSS", "module": "resource", "doc": ["The maximum resident set size that should be made available to the process."]}
{"index": 5088, "name": "resource.RLIMIT_NPROC", "module": "resource", "doc": ["The maximum number of processes the current process may create."]}
{"index": 5089, "name": "resource.RLIMIT_NOFILE", "module": "resource", "doc": ["The maximum number of open file descriptors for the current process."]}
{"index": 5090, "name": "resource.RLIMIT_OFILE", "module": "resource", "doc": ["The BSD name for RLIMIT_NOFILE."]}
{"index": 5091, "name": "resource.RLIMIT_MEMLOCK", "module": "resource", "doc": ["The maximum address space which may be locked in memory."]}
{"index": 5092, "name": "resource.RLIMIT_VMEM", "module": "resource", "doc": ["The largest area of mapped memory which the process may occupy."]}
{"index": 5093, "name": "resource.RLIMIT_AS", "module": "resource", "doc": ["The maximum area (in bytes) of address space which may be taken by the process."]}
{"index": 5094, "name": "resource.RLIMIT_MSGQUEUE", "module": "resource", "doc": ["The number of bytes that can be allocated for POSIX message queues.", "Availability: Linux 2.6.8 or later."]}
{"index": 5095, "name": "resource.RLIMIT_NICE", "module": "resource", "doc": ["The ceiling for the process\u2019s nice level (calculated as 20 - rlim_cur).", "Availability: Linux 2.6.12 or later."]}
{"index": 5096, "name": "resource.RLIMIT_RTPRIO", "module": "resource", "doc": ["The ceiling of the real-time priority.", "Availability: Linux 2.6.12 or later."]}
{"index": 5097, "name": "resource.RLIMIT_RTTIME", "module": "resource", "doc": ["The time limit (in microseconds) on CPU time that a process can spend under real-time scheduling without making a blocking syscall.", "Availability: Linux 2.6.25 or later."]}
{"index": 5098, "name": "resource.RLIMIT_SIGPENDING", "module": "resource", "doc": ["The number of signals which the process may queue.", "Availability: Linux 2.6.8 or later."]}
{"index": 5099, "name": "resource.RLIMIT_SBSIZE", "module": "resource", "doc": ["The maximum size (in bytes) of socket buffer usage for this user.", "This limits the amount of network memory, and hence the amount of mbufs, that this user may hold at any time.", "Availability: FreeBSD 9 or later."]}
{"index": 5100, "name": "resource.RLIMIT_SWAP", "module": "resource", "doc": ["The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id\u2019s processes.", "This limit is enforced only if bit 1 of the vm.overcommit sysctl is set.", "Please see tuning(7) for a complete description of this sysctl.", "Availability: FreeBSD 9 or later."]}
{"index": 5101, "name": "resource.RLIMIT_NPTS", "module": "resource", "doc": ["The maximum number of pseudo-terminals created by this user id.", "Availability: FreeBSD 9 or later."]}
{"index": 5102, "name": "resource.getrusage", "module": "resource", "doc": ["This function returns an object that describes the resources consumed by either the current process or its children, as specified by the who parameter.", "The who parameter should be specified using one of the RUSAGE_* constants described below.", "The fields of the return value each describe how a particular system resource has been used, e.g.", "amount of time spent running is user mode or number of times the process was swapped out of main memory.", "Some values are dependent on the clock tick internal, e.g.", "the amount of memory the process is using.", "For backward compatibility, the return value is also accessible as a tuple of 16 elements.", "The fields ru_utime and ru_stime of the return value are floating point values representing the amount of time spent executing in user mode and the amount of time spent executing in system mode, respectively.", "The remaining values are integers.", "Consult the getrusage(2) man page for detailed information about these values.", "A brief summary is presented here:", "This function will raise a ValueError if an invalid who parameter is specified.", "It may also raise error exception in unusual circumstances."]}
{"index": 5103, "name": "resource.getpagesize", "module": "resource", "doc": ["Returns the number of bytes in a system page.", "(This need not be the same as the hardware page size.)"]}
{"index": 5104, "name": "resource.RUSAGE_SELF", "module": "resource", "doc": ["Pass to getrusage() to request resources consumed by the calling process, which is the sum of resources used by all threads in the process."]}
{"index": 5105, "name": "resource.RUSAGE_CHILDREN", "module": "resource", "doc": ["Pass to getrusage() to request resources consumed by child processes of the calling process which have been terminated and waited for."]}
{"index": 5106, "name": "resource.RUSAGE_BOTH", "module": "resource", "doc": ["Pass to getrusage() to request resources consumed by both the current process and child processes.", "May not be available on all systems."]}
{"index": 5107, "name": "resource.RUSAGE_THREAD", "module": "resource", "doc": ["Pass to getrusage() to request resources consumed by the current thread.", "May not be available on all systems."]}
{"index": 5108, "name": "rlcompleter.Completer.complete", "module": "rlcompleter", "doc": ["Return the stateth completion for text.", "If called for text that doesn\u2019t include a period character ('.", "'), it will complete from names currently defined in __main__, builtins and keywords (as defined by the keyword module).", "If called for a dotted name, it will try to evaluate anything without obvious side-effects (functions will not be evaluated, but it can generate calls to __getattr__()) up to the last part, and find matches for the rest via the dir() function.", "Any exception raised during the evaluation of the expression is caught, silenced and None is returned."]}
{"index": 5109, "name": "runpy.run_module", "module": "runpy", "doc": ["Execute the code of the specified module and return the resulting module globals dictionary.", "The module\u2019s code is first located using the standard import mechanism (refer to PEP 302 for details) and then executed in a fresh module namespace.", "The mod_name argument should be an absolute module name.", "If the module name refers to a package rather than a normal module, then that package is imported and the __main__ submodule within that package is then executed and the resulting module globals dictionary returned.", "The optional dictionary argument init_globals may be used to pre-populate the module\u2019s globals dictionary before the code is executed.", "The supplied dictionary will not be modified.", "If any of the special global variables below are defined in the supplied dictionary, those definitions are overridden by run_module().", "The special global variables __name__, __spec__, __file__, __cached__, __loader__ and __package__ are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail).", "__name__ is set to run_name if this optional argument is not None, to mod_name + '.__main__' if the named module is a package and to the mod_name argument otherwise.", "__spec__ will be set appropriately for the actually imported module (that is, __spec__.name will always be mod_name or mod_name + '.__main__, never run_name).", "__file__, __cached__, __loader__ and __package__ are set as normal based on the module spec.", "If the argument alter_sys is supplied and evaluates to True, then sys.argv[0] is updated with the value of __file__ and sys.modules[__name__] is updated with a temporary module object for the module being executed.", "Both sys.argv[0] and sys.modules[__name__] are restored to their original values before the function returns.", "Note that this manipulation of sys is not thread-safe.", "Other threads may see the partially initialised module, as well as the altered list of arguments.", "It is recommended that the sys module be left alone when invoking this function from threaded code."]}
{"index": 5110, "name": "runpy.run_path", "module": "runpy", "doc": ["Execute the code at the named filesystem location and return the resulting module globals dictionary.", "As with a script name supplied to the CPython command line, the supplied path may refer to a Python source file, a compiled bytecode file or a valid sys.path entry containing a __main__ module (e.g.", "a zipfile containing a top-level __main__.py file).", "For a simple script, the specified code is simply executed in a fresh module namespace.", "For a valid sys.path entry (typically a zipfile or directory), the entry is first added to the beginning of sys.path.", "The function then looks for and executes a __main__ module using the updated path.", "Note that there is no special protection against invoking an existing __main__ entry located elsewhere on sys.path if there is no such module at the specified location.", "The optional dictionary argument init_globals may be used to pre-populate the module\u2019s globals dictionary before the code is executed.", "The supplied dictionary will not be modified.", "If any of the special global variables below are defined in the supplied dictionary, those definitions are overridden by run_path().", "The special global variables __name__, __spec__, __file__, __cached__, __loader__ and __package__ are set in the globals dictionary before the module code is executed (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail).", "__name__ is set to run_name if this optional argument is not None and to '<run_path>' otherwise.", "If the supplied path directly references a script file (whether as source or as precompiled byte code), then __file__ will be set to the supplied path, and __spec__, __cached__, __loader__ and __package__ will all be set to None.", "If the supplied path is a reference to a valid sys.path entry, then __spec__ will be set appropriately for the imported __main__ module (that is, __spec__.name will always be __main__).", "__file__, __cached__, __loader__ and __package__ will be set as normal based on the module spec.", "A number of alterations are also made to the sys module.", "Firstly, sys.path may be altered as described above.", "sys.argv[0] is updated with the value of file_path and sys.modules[__name__] is updated with a temporary module object for the module being executed.", "All modifications to items in sys are reverted before the function returns.", "Note that, unlike run_module(), the alterations made to sys are not optional in this function as these adjustments are essential to allowing the execution of sys.path entries.", "As the thread-safety limitations still apply, use of this function in threaded code should be either serialised with the import lock or delegated to a separate process."]}
{"index": 5111, "name": "sched.scheduler", "module": "sched", "doc": ["The scheduler class defines a generic interface to scheduling events.", "It needs two functions to actually deal with the \u201coutside world\u201d \u2014 timefunc should be callable without arguments, and return  a number (the \u201ctime\u201d, in any units whatsoever).", "The delayfunc function should be callable with one argument, compatible with the output of timefunc, and should delay that many time units.", "delayfunc will also be called with the argument 0 after each event is run to allow other threads an opportunity to run in multi-threaded applications."]}
{"index": 5112, "name": "sched.scheduler.enterabs", "module": "sched", "doc": ["Schedule a new event.", "The time argument should be a numeric type compatible with the return value of the timefunc function passed  to the constructor.", "Events scheduled for the same time will be executed in the order of their priority.", "A lower number represents a higher priority.", "Executing the event means executing action(*argument, **kwargs).", "argument is a sequence holding the positional arguments for action.", "kwargs is a dictionary holding the keyword arguments for action.", "Return value is an event which may be used for later cancellation of the event (see cancel())."]}
{"index": 5113, "name": "sched.scheduler.enter", "module": "sched", "doc": ["Schedule an event for delay more time units.", "Other than the relative time, the other arguments, the effect and the return value are the same as those for enterabs()."]}
{"index": 5114, "name": "sched.scheduler.cancel", "module": "sched", "doc": ["Remove the event from the queue.", "If event is not an event currently in the queue, this method will raise a ValueError."]}
{"index": 5115, "name": "sched.scheduler.empty", "module": "sched", "doc": ["Return true if the event queue is empty."]}
{"index": 5116, "name": "sched.scheduler.run", "module": "sched", "doc": ["Run all scheduled events.", "This method will wait  (using the delayfunc() function passed to the constructor) for the next event, then execute it and so on until there are no more scheduled events.", "If blocking is false executes the scheduled events due to expire soonest (if any) and then return the deadline of the next scheduled call in the scheduler (if any).", "Either action or delayfunc can raise an exception.", "In either case, the scheduler will maintain a consistent state and propagate the exception.", "If an exception is raised by action, the event will not be attempted in future calls to run().", "If a sequence of events takes longer to run than the time available before the next event, the scheduler will simply fall behind.", "No events will be dropped; the calling code is responsible for canceling  events which are no longer pertinent."]}
{"index": 5117, "name": "sched.scheduler.queue", "module": "sched", "doc": ["Read-only attribute returning a list of upcoming events in the order they will be run.", "Each event is shown as a named tuple with the following fields:  time, priority, action, argument, kwargs."]}
{"index": 5118, "name": "secrets.SystemRandom", "module": "secrets", "doc": ["A class for generating random numbers using the highest-quality sources provided by the operating system.", "See random.SystemRandom for additional details."]}
{"index": 5119, "name": "secrets.choice", "module": "secrets", "doc": ["Return a randomly-chosen element from a non-empty sequence."]}
{"index": 5120, "name": "secrets.randbelow", "module": "secrets", "doc": ["Return a random int in the range [0, n)."]}
{"index": 5121, "name": "secrets.randbits", "module": "secrets", "doc": ["Return an int with k random bits."]}
{"index": 5122, "name": "secrets.token_bytes", "module": "secrets", "doc": ["Return a random byte string containing nbytes number of bytes.", "If nbytes is None or not supplied, a reasonable default is used."]}
{"index": 5123, "name": "secrets.token_hex", "module": "secrets", "doc": ["Return a random text string, in hexadecimal.", "The string has nbytes random bytes, each byte converted to two hex digits.", "If nbytes is None or not supplied, a reasonable default is used."]}
{"index": 5124, "name": "secrets.token_urlsafe", "module": "secrets", "doc": ["Return a random URL-safe text string, containing nbytes random bytes.", "The text is Base64 encoded, so on average each byte results in approximately 1.3 characters.", "If nbytes is None or not supplied, a reasonable default is used."]}
{"index": 5125, "name": "secrets.compare_digest", "module": "secrets", "doc": ["Return True if strings a and b are equal, otherwise False, in such a way as to reduce the risk of timing attacks.", "See hmac.compare_digest() for additional details."]}
{"index": 5126, "name": "select.error", "module": "select", "doc": ["A deprecated alias of OSError."]}
{"index": 5127, "name": "select.devpoll", "module": "select", "doc": ["(Only supported on Solaris and derivatives.)", "Returns a /dev/poll polling object; see section /dev/poll Polling Objects below for the methods supported by devpoll objects.", "devpoll() objects are linked to the number of file descriptors allowed at the time of instantiation.", "If your program reduces this value, devpoll() will fail.", "If your program increases this value, devpoll() may return an incomplete list of active file descriptors.", "The new file descriptor is non-inheritable."]}
{"index": 5128, "name": "select.epoll", "module": "select", "doc": ["(Only supported on Linux 2.5.44 and newer.)", "Return an edge polling object, which can be used as Edge or Level Triggered interface for I/O events.", "sizehint informs epoll about the expected number of events to be registered.", "It must be positive, or -1 to use the default.", "It is only used on older systems where epoll_create1() is not available; otherwise it has no effect (though its value is still checked).", "flags is deprecated and completely ignored.", "However, when supplied, its value must be 0 or select.EPOLL_CLOEXEC, otherwise OSError is raised.", "See the Edge and Level Trigger Polling (epoll) Objects section below for the methods supported by epolling objects.", "epoll objects support the context management protocol: when used in a with statement, the new file descriptor is automatically closed at the end of the block.", "The new file descriptor is non-inheritable."]}
{"index": 5129, "name": "select.poll", "module": "select", "doc": ["(Not supported by all operating systems.)", "Returns a polling object, which supports registering and unregistering file descriptors, and then polling them for I/O events; see section Polling Objects below for the methods supported by polling objects."]}
{"index": 5130, "name": "select.kqueue", "module": "select", "doc": ["(Only supported on BSD.)", "Returns a kernel queue object; see section Kqueue Objects below for the methods supported by kqueue objects.", "The new file descriptor is non-inheritable."]}
{"index": 5131, "name": "select.kevent", "module": "select", "doc": ["(Only supported on BSD.)", "Returns a kernel event object; see section Kevent Objects below for the methods supported by kevent objects."]}
{"index": 5132, "name": "select.select", "module": "select", "doc": ["This is a straightforward interface to the Unix select() system call.", "The first three arguments are sequences of \u2018waitable objects\u2019: either integers representing file descriptors or objects with a parameterless method named fileno() returning such an integer:", "Empty sequences are allowed, but acceptance of three empty sequences is platform-dependent.", "(It is known to work on Unix but not on Windows.)", "The optional timeout argument specifies a time-out as a floating point number in seconds.", "When the timeout argument is omitted the function blocks until at least one file descriptor is ready.", "A time-out value of zero specifies a poll and never blocks.", "The return value is a triple of lists of objects that are ready: subsets of the first three arguments.", "When the time-out is reached without a file descriptor becoming ready, three empty lists are returned.", "Among the acceptable object types in the sequences are Python file objects (e.g.", "sys.stdin, or objects returned by open() or os.popen()), socket objects returned by socket.socket().", "You may also define a wrapper class yourself, as long as it has an appropriate fileno() method (that really returns a file descriptor, not just a random integer)."]}
{"index": 5133, "name": "select.PIPE_BUF", "module": "select", "doc": ["The minimum number of bytes which can be written without blocking to a pipe when the pipe has been reported as ready for writing by select(), poll() or another interface in this module.", "This doesn\u2019t apply to other kind of file-like objects such as sockets.", "This value is guaranteed by POSIX to be at least 512.", "Availability: Unix"]}
{"index": 5134, "name": "select.devpoll.close", "module": "select", "doc": ["Close the file descriptor of the polling object."]}
{"index": 5135, "name": "select.devpoll.closed", "module": "select", "doc": ["True if the polling object is closed."]}
{"index": 5136, "name": "select.devpoll.fileno", "module": "select", "doc": ["Return the file descriptor number of the polling object."]}
{"index": 5137, "name": "select.devpoll.register", "module": "select", "doc": ["Register a file descriptor with the polling object.", "Future calls to the poll() method will then check whether the file descriptor has any pending I/O events.", "fd can be either an integer, or an object with a fileno() method that returns an integer.", "File objects implement fileno(), so they can also be used as the argument.", "eventmask is an optional bitmask describing the type of events you want to check for.", "The constants are the same that with poll() object.", "The default value is a combination of the constants POLLIN, POLLPRI, and POLLOUT."]}
{"index": 5138, "name": "select.devpoll.modify", "module": "select", "doc": ["This method does an unregister() followed by a register().", "It is (a bit) more efficient that doing the same explicitly."]}
{"index": 5139, "name": "select.devpoll.unregister", "module": "select", "doc": ["Remove a file descriptor being tracked by a polling object.", "Just like the register() method, fd can be an integer or an object with a fileno() method that returns an integer.", "Attempting to remove a file descriptor that was never registered is safely ignored."]}
{"index": 5140, "name": "select.devpoll.poll", "module": "select", "doc": ["Polls the set of registered file descriptors, and returns a possibly-empty list containing (fd, event) 2-tuples for the descriptors that have events or errors to report.", "fd is the file descriptor, and event is a bitmask with bits set for the reported events for that descriptor \u2014 POLLIN for waiting input, POLLOUT to indicate that the descriptor can be written to, and so forth.", "An empty list indicates that the call timed out and no file descriptors had any events to report.", "If timeout is given, it specifies the length of time in milliseconds which the system will wait for events before returning.", "If timeout is omitted, -1, or None, the call will block until there is an event for this poll object."]}
{"index": 5141, "name": "select.epoll.close", "module": "select", "doc": ["Close the control file descriptor of the epoll object."]}
{"index": 5142, "name": "select.epoll.closed", "module": "select", "doc": ["True if the epoll object is closed."]}
{"index": 5143, "name": "select.epoll.fileno", "module": "select", "doc": ["Return the file descriptor number of the control fd."]}
{"index": 5144, "name": "select.epoll.fromfd", "module": "select", "doc": ["Create an epoll object from a given file descriptor."]}
{"index": 5145, "name": "select.epoll.register", "module": "select", "doc": ["Register a fd descriptor with the epoll object."]}
{"index": 5146, "name": "select.epoll.modify", "module": "select", "doc": ["Modify a registered file descriptor."]}
{"index": 5147, "name": "select.epoll.unregister", "module": "select", "doc": ["Remove a registered file descriptor from the epoll object."]}
{"index": 5148, "name": "select.epoll.poll", "module": "select", "doc": ["Wait for events.", "timeout in seconds (float)"]}
{"index": 5149, "name": "select.poll.register", "module": "select", "doc": ["Register a file descriptor with the polling object.", "Future calls to the poll() method will then check whether the file descriptor has any pending I/O events.", "fd can be either an integer, or an object with a fileno() method that returns an integer.", "File objects implement fileno(), so they can also be used as the argument.", "eventmask is an optional bitmask describing the type of events you want to check for, and can be a combination of the constants POLLIN, POLLPRI, and POLLOUT, described in the table below.", "If not specified, the default value used will check for all 3 types of events.", "Registering a file descriptor that\u2019s already registered is not an error, and has the same effect as registering the descriptor exactly once."]}
{"index": 5150, "name": "select.poll.modify", "module": "select", "doc": ["Modifies an already registered fd.", "This has the same effect as register(fd, eventmask).", "Attempting to modify a file descriptor that was never registered causes an OSError exception with errno ENOENT to be raised."]}
{"index": 5151, "name": "select.poll.unregister", "module": "select", "doc": ["Remove a file descriptor being tracked by a polling object.", "Just like the register() method, fd can be an integer or an object with a fileno() method that returns an integer.", "Attempting to remove a file descriptor that was never registered causes a KeyError exception to be raised."]}
{"index": 5152, "name": "select.poll.poll", "module": "select", "doc": ["Polls the set of registered file descriptors, and returns a possibly-empty list containing (fd, event) 2-tuples for the descriptors that have events or errors to report.", "fd is the file descriptor, and event is a bitmask with bits set for the reported events for that descriptor \u2014 POLLIN for waiting input, POLLOUT to indicate that the descriptor can be written to, and so forth.", "An empty list indicates that the call timed out and no file descriptors had any events to report.", "If timeout is given, it specifies the length of time in milliseconds which the system will wait for events before returning.", "If timeout is omitted, negative, or None, the call will block until there is an event for this poll object."]}
{"index": 5153, "name": "select.kqueue.close", "module": "select", "doc": ["Close the control file descriptor of the kqueue object."]}
{"index": 5154, "name": "select.kqueue.closed", "module": "select", "doc": ["True if the kqueue object is closed."]}
{"index": 5155, "name": "select.kqueue.fileno", "module": "select", "doc": ["Return the file descriptor number of the control fd."]}
{"index": 5156, "name": "select.kqueue.fromfd", "module": "select", "doc": ["Create a kqueue object from a given file descriptor."]}
{"index": 5157, "name": "select.kqueue.control", "module": "select", "doc": ["Low level interface to kevent"]}
{"index": 5158, "name": "select.kevent.ident", "module": "select", "doc": ["Value used to identify the event.", "The interpretation depends on the filter but it\u2019s usually the file descriptor.", "In the constructor ident can either be an int or an object with a fileno() method.", "kevent stores the integer internally."]}
{"index": 5159, "name": "select.kevent.filter", "module": "select", "doc": ["Name of the kernel filter."]}
{"index": 5160, "name": "select.kevent.flags", "module": "select", "doc": ["Filter action."]}
{"index": 5161, "name": "select.kevent.fflags", "module": "select", "doc": ["Filter specific flags.", "KQ_FILTER_READ and  KQ_FILTER_WRITE filter flags:", "KQ_FILTER_VNODE filter flags:", "KQ_FILTER_PROC filter flags:", "KQ_FILTER_NETDEV filter flags (not available on Mac OS X):"]}
{"index": 5162, "name": "select.kevent.data", "module": "select", "doc": ["Filter specific data."]}
{"index": 5163, "name": "select.kevent.udata", "module": "select", "doc": ["User defined value."]}
{"index": 5164, "name": "selectors.SelectorKey", "module": "selectors", "doc": ["A SelectorKey is a namedtuple used to associate a file object to its underlying file descriptor, selected event mask and attached data.", "It is returned by several BaseSelector methods."]}
{"index": 5165, "name": "selectors.SelectorKey.fileobj", "module": "selectors", "doc": ["File object registered."]}
{"index": 5166, "name": "selectors.SelectorKey.fd", "module": "selectors", "doc": ["Underlying file descriptor."]}
{"index": 5167, "name": "selectors.SelectorKey.events", "module": "selectors", "doc": ["Events that must be waited for on this file object."]}
{"index": 5168, "name": "selectors.SelectorKey.data", "module": "selectors", "doc": ["Optional opaque data associated to this file object: for example, this could be used to store a per-client session ID."]}
{"index": 5169, "name": "selectors.BaseSelector", "module": "selectors", "doc": ["A BaseSelector is used to wait for I/O event readiness on multiple file objects.", "It supports file stream registration, unregistration, and a method to wait for I/O events on those streams, with an optional timeout.", "It\u2019s an abstract base class, so cannot be instantiated.", "Use DefaultSelector instead, or one of SelectSelector, KqueueSelector etc.", "if you want to specifically use an implementation, and your platform supports it.", "BaseSelector and its concrete implementations support the context manager protocol."]}
{"index": 5170, "name": "selectors.BaseSelector.register", "module": "selectors", "doc": ["Register a file object for selection, monitoring it for I/O events.", "fileobj is the file object to monitor.", "It may either be an integer file descriptor or an object with a fileno() method.", "events is a bitwise mask of events to monitor.", "data is an opaque object.", "This returns a new SelectorKey instance, or raises a ValueError in case of invalid event mask or file descriptor, or KeyError if the file object is already registered."]}
{"index": 5171, "name": "selectors.BaseSelector.unregister", "module": "selectors", "doc": ["Unregister a file object from selection, removing it from monitoring.", "A file object shall be unregistered prior to being closed.", "fileobj must be a file object previously registered.", "This returns the associated SelectorKey instance, or raises a KeyError if fileobj is not registered.", "It will raise ValueError if fileobj is invalid (e.g.", "it has no fileno() method or its fileno() method has an invalid return value)."]}
{"index": 5172, "name": "selectors.BaseSelector.modify", "module": "selectors", "doc": ["Change a registered file object\u2019s monitored events or attached data.", "This is equivalent to BaseSelector.unregister(fileobj)() followed by BaseSelector.register(fileobj, events, data)(), except that it can be implemented more efficiently.", "This returns a new SelectorKey instance, or raises a ValueError in case of invalid event mask or file descriptor, or KeyError if the file object is not registered."]}
{"index": 5173, "name": "selectors.BaseSelector.select", "module": "selectors", "doc": ["Wait until some registered file objects become ready, or the timeout expires.", "If timeout > 0, this specifies the maximum wait time, in seconds.", "If timeout <= 0, the call won\u2019t block, and will report the currently ready file objects.", "If timeout is None, the call will block until a monitored file object becomes ready.", "This returns a list of (key, events) tuples, one for each ready file object.", "key is the SelectorKey instance corresponding to a ready file object.", "events is a bitmask of events ready on this file object."]}
{"index": 5174, "name": "selectors.BaseSelector.close", "module": "selectors", "doc": ["Close the selector.", "This must be called to make sure that any underlying resource is freed.", "The selector shall not be used once it has been closed."]}
{"index": 5175, "name": "selectors.BaseSelector.get_key", "module": "selectors", "doc": ["Return the key associated with a registered file object.", "This returns the SelectorKey instance associated to this file object, or raises KeyError if the file object is not registered."]}
{"index": 5176, "name": "selectors.BaseSelector.get_map", "module": "selectors", "doc": ["Return a mapping of file objects to selector keys.", "This returns a Mapping instance mapping registered file objects to their associated SelectorKey instance."]}
{"index": 5177, "name": "selectors.DefaultSelector", "module": "selectors", "doc": ["The default selector class, using the most efficient implementation available on the current platform.", "This should be the default choice for most users."]}
{"index": 5178, "name": "selectors.SelectSelector", "module": "selectors", "doc": ["select.select()-based selector."]}
{"index": 5179, "name": "selectors.PollSelector", "module": "selectors", "doc": ["select.poll()-based selector."]}
{"index": 5180, "name": "selectors.EpollSelector", "module": "selectors", "doc": ["select.epoll()-based selector."]}
{"index": 5181, "name": "selectors.EpollSelector.fileno", "module": "selectors", "doc": ["This returns the file descriptor used by the underlying select.epoll() object."]}
{"index": 5182, "name": "selectors.DevpollSelector", "module": "selectors", "doc": ["select.devpoll()-based selector."]}
{"index": 5183, "name": "selectors.DevpollSelector.fileno", "module": "selectors", "doc": ["This returns the file descriptor used by the underlying select.devpoll() object."]}
{"index": 5184, "name": "selectors.KqueueSelector", "module": "selectors", "doc": ["select.kqueue()-based selector."]}
{"index": 5185, "name": "selectors.KqueueSelector.fileno", "module": "selectors", "doc": ["This returns the file descriptor used by the underlying select.kqueue() object."]}
{"index": 5186, "name": "shelve.open", "module": "shelve", "doc": ["Open a persistent dictionary.", "The filename specified is the base filename for the underlying database.", "As a side-effect, an extension may be added to the filename and more than one file may be created.", "By default, the underlying database file is opened for reading and writing.", "The optional flag parameter has the same interpretation as the flag parameter of dbm.open().", "By default, version 3 pickles are used to serialize values.", "The version of the pickle protocol can be specified with the protocol parameter.", "Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified.", "By default modified objects are written only when assigned to the shelf (see Example).", "If the optional writeback parameter is set to True, all entries accessed are also cached in memory, and written back on sync() and close(); this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated)."]}
{"index": 5187, "name": "shelve.Shelf.sync", "module": "shelve", "doc": ["Write back all entries in the cache if the shelf was opened with writeback set to True.", "Also empty the cache and synchronize the persistent dictionary on disk, if feasible.", "This is called automatically when the shelf is closed with close()."]}
{"index": 5188, "name": "shelve.Shelf.close", "module": "shelve", "doc": ["Synchronize and close the persistent dict object.", "Operations on a closed shelf will fail with a ValueError."]}
{"index": 5189, "name": "shelve.Shelf", "module": "shelve", "doc": ["A subclass of collections.abc.MutableMapping which stores pickled values in the dict object.", "By default, version 3 pickles are used to serialize values.", "The version of the pickle protocol can be specified with the protocol parameter.", "See the pickle documentation for a discussion of the pickle protocols.", "If the writeback parameter is True, the object will hold a cache of all entries accessed and write them back to the dict at sync and close times.", "This allows natural operations on mutable entries, but can consume much more memory and make sync and close take a long time.", "The keyencoding parameter is the encoding used to encode keys before they are used with the underlying dict.", "A Shelf object can also be used as a context manager, in which case it will be automatically closed when the with block ends."]}
{"index": 5190, "name": "shelve.BsdDbShelf", "module": "shelve", "doc": ["A subclass of Shelf which exposes first(), next(), previous(), last() and set_location() which are available in the third-party bsddb module from pybsddb but not in other database modules.", "The dict object passed to the constructor must support those methods.", "This is generally accomplished by calling one of bsddb.hashopen(), bsddb.btopen() or bsddb.rnopen().", "The optional protocol, writeback, and keyencoding parameters have the same interpretation as for the Shelf class."]}
{"index": 5191, "name": "shelve.DbfilenameShelf", "module": "shelve", "doc": ["A subclass of Shelf which accepts a filename instead of a dict-like object.", "The underlying file will be opened using dbm.open().", "By default, the file will be created and opened for both read and write.", "The optional flag parameter has the same interpretation as for the open() function.", "The optional protocol and writeback parameters have the same interpretation as for the Shelf class."]}
{"index": 5192, "name": "shlex.split", "module": "shlex", "doc": ["Split the string s using shell-like syntax.", "If comments is False (the default), the parsing of comments in the given string will be disabled (setting the commenters attribute of the shlex instance to the empty string).", "This function operates in POSIX mode by default, but uses non-POSIX mode if the posix argument is false."]}
{"index": 5193, "name": "shlex.quote", "module": "shlex", "doc": ["Return a shell-escaped version of the string s.  The returned value is a string that can safely be used as one token in a shell command line, for cases where you cannot use a list.", "This idiom would be unsafe:", "quote() lets you plug the security hole:", "The quoting is compatible with UNIX shells and with split():"]}
{"index": 5194, "name": "shlex.shlex", "module": "shlex", "doc": ["A shlex instance or subclass instance is a lexical analyzer object.", "The initialization argument, if present, specifies where to read characters from.", "It must be a file-/stream-like object with read() and readline() methods, or a string.", "If no argument is given, input will be taken from sys.stdin.", "The second optional argument is a filename string, which sets the initial value of the infile attribute.", "If the instream argument is omitted or equal to sys.stdin, this second argument defaults to \u201cstdin\u201d.", "The posix argument defines the operational mode: when posix is not true (default), the shlex instance will operate in compatibility mode.", "When operating in POSIX mode, shlex will try to be as close as possible to the POSIX shell parsing rules.", "The punctuation_chars argument provides a way to make the behaviour even closer to how real shells parse.", "This can take a number of values: the default value, False, preserves the behaviour seen under Python 3.5 and earlier.", "If set to True, then parsing of the characters ();<>|& is changed: any run of these characters (considered punctuation characters) is returned as a single token.", "If set to a non-empty string of characters, those characters will be used as the punctuation characters.", "Any characters in the wordchars attribute that appear in punctuation_chars will be removed from wordchars.", "See Improved Compatibility with Shells for more information.", "punctuation_chars can be set only upon shlex instance creation and can\u2019t be modified later."]}
{"index": 5195, "name": "shlex.shlex.get_token", "module": "shlex", "doc": ["Return a token.", "If tokens have been stacked using push_token(), pop a token off the stack.", "Otherwise, read one from the input stream.", "If reading encounters an immediate end-of-file, eof is returned (the empty string ('') in non-POSIX mode, and None in POSIX mode)."]}
{"index": 5196, "name": "shlex.shlex.push_token", "module": "shlex", "doc": ["Push the argument onto the token stack."]}
{"index": 5197, "name": "shlex.shlex.read_token", "module": "shlex", "doc": ["Read a raw token.", "Ignore the pushback stack, and do not interpret source requests.", "(This is not ordinarily a useful entry point, and is documented here only for the sake of completeness.)"]}
{"index": 5198, "name": "shlex.shlex.sourcehook", "module": "shlex", "doc": ["When shlex detects a source request (see source below) this method is given the following token as argument, and expected to return a tuple consisting of a filename and an open file-like object.", "Normally, this method first strips any quotes off the argument.", "If the result is an absolute pathname, or there was no previous source request in effect, or the previous source was a stream (such as sys.stdin), the result is left alone.", "Otherwise, if the result is a relative pathname, the directory part of the name of the file immediately before it on the source inclusion stack is prepended (this behavior is like the way the C preprocessor handles #include \"file.h\").", "The result of the manipulations is treated as a filename, and returned as the first component of the tuple, with open() called on it to yield the second component.", "(Note: this is the reverse of the order of arguments in instance initialization!)", "This hook is exposed so that you can use it to implement directory search paths, addition of file extensions, and other namespace hacks.", "There is no corresponding \u2018close\u2019 hook, but a shlex instance will call the close() method of the sourced input stream when it returns EOF.", "For more explicit control of source stacking, use the push_source() and pop_source() methods."]}
{"index": 5199, "name": "shlex.shlex.push_source", "module": "shlex", "doc": ["Push an input source stream onto the input stack.", "If the filename argument is specified it will later be available for use in error messages.", "This is the same method used internally by the sourcehook() method."]}
{"index": 5200, "name": "shlex.shlex.pop_source", "module": "shlex", "doc": ["Pop the last-pushed input source from the input stack.", "This is the same method used internally when the lexer reaches EOF on a stacked input stream."]}
{"index": 5201, "name": "shlex.shlex.error_leader", "module": "shlex", "doc": ["This method generates an error message leader in the format of a Unix C compiler error label; the format is '\"%s\", line %d: ', where the %s is replaced with the name of the current source file and the %d with the current input line number (the optional arguments can be used to override these).", "This convenience is provided to encourage shlex users to generate error messages in the standard, parseable format understood by Emacs and other Unix tools."]}
{"index": 5202, "name": "shlex.shlex.commenters", "module": "shlex", "doc": ["The string of characters that are recognized as comment beginners.", "All characters from the comment beginner to end of line are ignored.", "Includes just '#' by default."]}
{"index": 5203, "name": "shlex.shlex.wordchars", "module": "shlex", "doc": ["The string of characters that will accumulate into multi-character tokens.", "By default, includes all ASCII alphanumerics and underscore.", "In POSIX mode, the accented characters in the Latin-1 set are also included.", "If punctuation_chars is not empty, the characters ~-./*?=, which can appear in filename specifications and command line parameters, will also be included in this attribute, and any characters which appear in punctuation_chars will be removed from wordchars if they are present there."]}
{"index": 5204, "name": "shlex.shlex.whitespace", "module": "shlex", "doc": ["Characters that will be considered whitespace and skipped.", "Whitespace bounds tokens.", "By default, includes space, tab, linefeed and carriage-return."]}
{"index": 5205, "name": "shlex.shlex.escape", "module": "shlex", "doc": ["Characters that will be considered as escape.", "This will be only used in POSIX mode, and includes just '\\' by default."]}
{"index": 5206, "name": "shlex.shlex.quotes", "module": "shlex", "doc": ["Characters that will be considered string quotes.", "The token accumulates until the same quote is encountered again (thus, different quote types protect each other as in the shell.)", "By default, includes ASCII single and double quotes."]}
{"index": 5207, "name": "shlex.shlex.escapedquotes", "module": "shlex", "doc": ["Characters in quotes that will interpret escape characters defined in escape.", "This is only used in POSIX mode, and includes just '\"' by default."]}
{"index": 5208, "name": "shlex.shlex.whitespace_split", "module": "shlex", "doc": ["If True, tokens will only be split in whitespaces.", "This is useful, for example, for parsing command lines with shlex, getting tokens in a similar way to shell arguments.", "If this attribute is True, punctuation_chars will have no effect, and splitting will happen only on whitespaces.", "When using punctuation_chars, which is intended to provide parsing closer to that implemented by shells, it is advisable to leave whitespace_split as False (the default value)."]}
{"index": 5209, "name": "shlex.shlex.infile", "module": "shlex", "doc": ["The name of the current input file, as initially set at class instantiation time or stacked by later source requests.", "It may be useful to examine this when constructing error messages."]}
{"index": 5210, "name": "shlex.shlex.instream", "module": "shlex", "doc": ["The input stream from which this shlex instance is reading characters."]}
{"index": 5211, "name": "shlex.shlex.source", "module": "shlex", "doc": ["This attribute is None by default.", "If you assign a string to it, that string will be recognized as a lexical-level inclusion request similar to the source keyword in various shells.", "That is, the immediately following token will be opened as a filename and input will be taken from that stream until EOF, at which point the close() method of that stream will be called and the input source will again become the original input stream.", "Source requests may be stacked any number of levels deep."]}
{"index": 5212, "name": "shlex.shlex.debug", "module": "shlex", "doc": ["If this attribute is numeric and 1 or more, a shlex instance will print verbose progress output on its behavior.", "If you need to use this, you can read the module source code to learn the details."]}
{"index": 5213, "name": "shlex.shlex.lineno", "module": "shlex", "doc": ["Source line number (count of newlines seen so far plus one)."]}
{"index": 5214, "name": "shlex.shlex.token", "module": "shlex", "doc": ["The token buffer.", "It may be useful to examine this when catching exceptions."]}
{"index": 5215, "name": "shlex.shlex.eof", "module": "shlex", "doc": ["Token used to determine end of file.", "This will be set to the empty string (''), in non-POSIX mode, and to None in POSIX mode."]}
{"index": 5216, "name": "shlex.shlex.punctuation_chars", "module": "shlex", "doc": ["A read-only property.", "Characters that will be considered punctuation.", "Runs of punctuation characters will be returned as a single token.", "However, note that no semantic validity checking will be performed: for example, \u2018>>>\u2019 could be returned as a token, even though it may not be recognised as such by shells."]}
{"index": 5217, "name": "shutil.copyfileobj", "module": "shutil", "doc": ["Copy the contents of the file-like object fsrc to the file-like object fdst.", "The integer length, if given, is the buffer size.", "In particular, a negative length value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption.", "Note that if the current file position of the fsrc object is not 0, only the contents from the current file position to the end of the file will be copied."]}
{"index": 5218, "name": "shutil.copyfile", "module": "shutil", "doc": ["Copy the contents (no metadata) of the file named src to a file named dst and return dst.", "src and dst are path names given as strings.", "dst must be the complete target file name; look at shutil.copy() for a copy that accepts a target directory path.", "If src and dst specify the same file, SameFileError is raised.", "The destination location must be writable; otherwise, an OSError exception will be raised.", "If dst already exists, it will be replaced.", "Special files such as character or block devices and pipes cannot be copied with this function.", "If follow_symlinks is false and src is a symbolic link, a new symbolic link will be created instead of copying the file src points to."]}
{"index": 5219, "name": "shutil.SameFileError", "module": "shutil", "doc": ["This exception is raised if source and destination in copyfile() are the same file."]}
{"index": 5220, "name": "shutil.copymode", "module": "shutil", "doc": ["Copy the permission bits from src to dst.", "The file contents, owner, and group are unaffected.", "src and dst are path names given as strings.", "If follow_symlinks is false, and both src and dst are symbolic links, copymode() will attempt to modify the mode of dst itself (rather than the file it points to).", "This functionality is not available on every platform; please see copystat() for more information.", "If copymode() cannot modify symbolic links on the local platform, and it is asked to do so, it will do nothing and return."]}
{"index": 5221, "name": "shutil.copystat", "module": "shutil", "doc": ["Copy the permission bits, last access time, last modification time, and flags from src to dst.", "On Linux, copystat() also copies the \u201cextended attributes\u201d where possible.", "The file contents, owner, and group are unaffected.", "src and dst are path names given as strings.", "If follow_symlinks is false, and src and dst both refer to symbolic links, copystat() will operate on the symbolic links themselves rather than the files the symbolic links refer to\u2014reading the information from the src symbolic link, and writing the information to the dst symbolic link."]}
{"index": 5222, "name": "shutil.copy", "module": "shutil", "doc": ["Copies the file src to the file or directory dst.", "src and dst should be strings.", "If dst specifies a directory, the file will be copied into dst using the base filename from src.", "Returns the path to the newly created file.", "If follow_symlinks is false, and src is a symbolic link, dst will be created as a symbolic link.", "If follow_symlinks is true and src is a symbolic link, dst will be a copy of the file src refers to.", "copy() copies the file data and the file\u2019s permission mode (see os.chmod()).", "Other metadata, like the file\u2019s creation and modification times, is not preserved.", "To preserve all file metadata from the original, use copy2() instead."]}
{"index": 5223, "name": "shutil.copy2", "module": "shutil", "doc": ["Identical to copy() except that copy2() also attempts to preserve file metadata.", "When follow_symlinks is false, and src is a symbolic link, copy2() attempts to copy all metadata from the src symbolic link to the newly-created dst symbolic link.", "However, this functionality is not available on all platforms.", "On platforms where some or all of this functionality is unavailable, copy2() will preserve all the metadata it can; copy2() never returns failure.", "copy2() uses copystat() to copy the file metadata.", "Please see copystat() for more information about platform support for modifying symbolic link metadata."]}
{"index": 5224, "name": "shutil.ignore_patterns", "module": "shutil", "doc": ["This factory function creates a function that can be used as a callable for copytree()\u2019s ignore argument, ignoring files and directories that match one of the glob-style patterns provided.", "See the example below."]}
{"index": 5225, "name": "shutil.copytree", "module": "shutil", "doc": ["Recursively copy an entire directory tree rooted at src, returning the destination directory.", "The destination directory, named by dst, must not already exist; it will be created as well as missing parent directories.", "Permissions and times of directories are copied with copystat(), individual files are copied using shutil.copy2().", "If symlinks is true, symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows; if false or omitted, the contents and metadata of the linked files are copied to the new tree.", "When symlinks is false, if the file pointed by the symlink doesn\u2019t exist, an exception will be added in the list of errors raised in an Error exception at the end of the copy process.", "You can set the optional ignore_dangling_symlinks flag to true if you want to silence this exception.", "Notice that this option has no effect on platforms that don\u2019t support os.symlink().", "If ignore is given, it must be a callable that will receive as its arguments the directory being visited by copytree(), and a list of its contents, as returned by os.listdir().", "Since copytree() is called recursively, the ignore callable will be called once for each directory that is copied.", "The callable must return a sequence of directory and file names relative to the current directory (i.e.", "a subset of the items in its second argument); these names will then be ignored in the copy process.", "ignore_patterns() can be used to create such a callable that ignores names based on glob-style patterns.", "If exception(s) occur, an Error is raised with a list of reasons.", "If copy_function is given, it must be a callable that will be used to copy each file.", "It will be called with the source path and the destination path as arguments.", "By default, shutil.copy2() is used, but any function that supports the same signature (like shutil.copy()) can be used."]}
{"index": 5226, "name": "shutil.rmtree", "module": "shutil", "doc": ["Delete an entire directory tree; path must point to a directory (but not a symbolic link to a directory).", "If ignore_errors is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.", "If onerror is provided, it must be a callable that accepts three parameters: function, path, and excinfo.", "The first parameter, function, is the function which raised the exception; it depends on the platform and implementation.", "The second parameter, path, will be the path name passed to function.", "The third parameter, excinfo, will be the exception information returned by sys.exc_info().", "Exceptions raised by onerror will not be caught."]}
{"index": 5227, "name": "shutil.rmtree.avoids_symlink_attacks", "module": "shutil", "doc": ["Indicates whether the current platform and implementation provides a symlink attack resistant version of rmtree().", "Currently this is only true for platforms supporting fd-based directory access functions."]}
{"index": 5228, "name": "shutil.move", "module": "shutil", "doc": ["Recursively move a file or directory (src) to another location (dst) and return the destination.", "If the destination is an existing directory, then src is moved inside that directory.", "If the destination already exists but is not a directory, it may be overwritten depending on os.rename() semantics.", "If the destination is on the current filesystem, then os.rename() is used.", "Otherwise, src is copied to dst using copy_function and then removed.", "In case of symlinks, a new symlink pointing to the target of src will be created in or as dst and src will be removed.", "If copy_function is given, it must be a callable that takes two arguments src and dst, and will be used to copy src to dest if os.rename() cannot be used.", "If the source is a directory, copytree() is called, passing it the copy_function().", "The default copy_function is copy2().", "Using copy() as the copy_function allows the move to succeed when it is not possible to also copy the metadata, at the expense of not copying any of the metadata."]}
{"index": 5229, "name": "shutil.disk_usage", "module": "shutil", "doc": ["Return disk usage statistics about the given path as a named tuple with the attributes total, used and free, which are the amount of total, used and free space, in bytes.", "On Windows, path must be a directory; on Unix, it can be a file or directory.", "Availability: Unix, Windows."]}
{"index": 5230, "name": "shutil.chown", "module": "shutil", "doc": ["Change owner user and/or group of the given path.", "user can be a system user name or a uid; the same applies to group.", "At least one argument is required.", "See also os.chown(), the underlying function.", "Availability: Unix."]}
{"index": 5231, "name": "shutil.which", "module": "shutil", "doc": ["Return the path to an executable which would be run if the given cmd was called.", "If no cmd would be called, return None.", "mode is a permission mask passed to os.access(), by default determining if the file exists and executable.", "When no path is specified, the results of os.environ() are used, returning either the \u201cPATH\u201d value or a fallback of os.defpath.", "On Windows, the current directory is always prepended to the path whether or not you use the default or provide your own, which is the behavior the command shell uses when finding executables.", "Additionally, when finding the cmd in the path, the PATHEXT environment variable is checked.", "For example, if you call shutil.which(\"python\"), which() will search PATHEXT to know that it should look for python.exe within the path directories.", "For example, on Windows:"]}
{"index": 5232, "name": "shutil.Error", "module": "shutil", "doc": ["This exception collects exceptions that are raised during a multi-file operation.", "For copytree(), the exception argument is a list of 3-tuples (srcname, dstname, exception)."]}
{"index": 5233, "name": "shutil.make_archive", "module": "shutil", "doc": ["Create an archive file (such as zip or tar) and return its name.", "base_name is the name of the file to create, including the path, minus any format-specific extension.", "format is the archive format: one of \u201czip\u201d (if the zlib module is available), \u201ctar\u201d, \u201cgztar\u201d (if the zlib module is available), \u201cbztar\u201d (if the bz2 module is available), or \u201cxztar\u201d (if the lzma module is available).", "root_dir is a directory that will be the root directory of the archive; for example, we typically chdir into root_dir before creating the archive.", "base_dir is the directory where we start archiving from; i.e.", "base_dir will be the common prefix of all files and directories in the archive.", "root_dir and base_dir both default to the current directory.", "If dry_run is true, no archive is created, but the operations that would be executed are logged to logger.", "owner and group are used when creating a tar archive.", "By default, uses the current owner and group.", "logger must be an object compatible with PEP 282, usually an instance of logging.Logger.", "The verbose argument is unused and deprecated."]}
{"index": 5234, "name": "shutil.get_archive_formats", "module": "shutil", "doc": ["Return a list of supported formats for archiving.", "Each element of the returned sequence is a tuple (name, description).", "By default shutil provides these formats:", "You can register new formats or provide your own archiver for any existing formats, by using register_archive_format()."]}
{"index": 5235, "name": "shutil.register_archive_format", "module": "shutil", "doc": ["Register an archiver for the format name.", "function is the callable that will be used to unpack archives.", "The callable will receive the base_name of the file to create, followed by the base_dir (which defaults to os.curdir) to start archiving from.", "Further arguments are passed as keyword arguments: owner, group, dry_run and logger (as passed in make_archive()).", "If given, extra_args is a sequence of (name, value) pairs that will be used as extra keywords arguments when the archiver callable is used.", "description is used by get_archive_formats() which returns the list of archivers.", "Defaults to an empty string."]}
{"index": 5236, "name": "shutil.unregister_archive_format", "module": "shutil", "doc": ["Remove the archive format name from the list of supported formats."]}
{"index": 5237, "name": "shutil.unpack_archive", "module": "shutil", "doc": ["Unpack an archive.", "filename is the full path of the archive.", "extract_dir is the name of the target directory where the archive is unpacked.", "If not provided, the current working directory is used.", "format is the archive format: one of \u201czip\u201d, \u201ctar\u201d, \u201cgztar\u201d, \u201cbztar\u201d, or \u201cxztar\u201d.", "Or any other format registered with register_unpack_format().", "If not provided, unpack_archive() will use the archive file name extension and see if an unpacker was registered for that extension.", "In case none is found, a ValueError is raised."]}
{"index": 5238, "name": "shutil.register_unpack_format", "module": "shutil", "doc": ["Registers an unpack format.", "name is the name of the format and extensions is a list of extensions corresponding to the format, like .zip for Zip files.", "function is the callable that will be used to unpack archives.", "The callable will receive the path of the archive, followed by the directory the archive must be extracted to.", "When provided, extra_args is a sequence of (name, value) tuples that will be passed as keywords arguments to the callable.", "description can be provided to describe the format, and will be returned by the get_unpack_formats() function."]}
{"index": 5239, "name": "shutil.unregister_unpack_format", "module": "shutil", "doc": ["Unregister an unpack format.", "name is the name of the format."]}
{"index": 5240, "name": "shutil.get_unpack_formats", "module": "shutil", "doc": ["Return a list of all registered formats for unpacking.", "Each element of the returned sequence is a tuple (name, extensions, description).", "By default shutil provides these formats:", "You can register new formats or provide your own unpacker for any existing formats, by using register_unpack_format()."]}
{"index": 5241, "name": "shutil.get_terminal_size", "module": "shutil", "doc": ["Get the size of the terminal window.", "For each of the two dimensions, the environment variable, COLUMNS and LINES respectively, is checked.", "If the variable is defined and the value is a positive integer, it is used.", "When COLUMNS or LINES is not defined, which is the common case, the terminal connected to sys.__stdout__ is queried by invoking os.get_terminal_size().", "If the terminal size cannot be successfully queried, either because the system doesn\u2019t support querying, or because we are not connected to a terminal, the value given in fallback parameter is used.", "fallback defaults to (80, 24) which is the default size used by many terminal emulators.", "The value returned is a named tuple of type os.terminal_size.", "See also: The Single UNIX Specification, Version 2, Other Environment Variables."]}
{"index": 5242, "name": "signal.SIG_DFL", "module": "signal", "doc": ["This is one of two standard signal handling options; it will simply perform the default function for the signal.", "For example, on most systems the default action for SIGQUIT is to dump core and exit, while the default action for SIGCHLD is to simply ignore it."]}
{"index": 5243, "name": "signal.SIG_IGN", "module": "signal", "doc": ["This is another standard signal handler, which will simply ignore the given signal."]}
{"index": 5244, "name": "signal.CTRL_C_EVENT", "module": "signal", "doc": ["The signal corresponding to the Ctrl+C keystroke event.", "This signal can only be used with os.kill().", "Availability: Windows."]}
{"index": 5245, "name": "signal.CTRL_BREAK_EVENT", "module": "signal", "doc": ["The signal corresponding to the Ctrl+Break keystroke event.", "This signal can only be used with os.kill().", "Availability: Windows."]}
{"index": 5246, "name": "signal.NSIG", "module": "signal", "doc": ["One more than the number of the highest signal number."]}
{"index": 5247, "name": "signal.ITIMER_REAL", "module": "signal", "doc": ["Decrements interval timer in real time, and delivers SIGALRM upon expiration."]}
{"index": 5248, "name": "signal.ITIMER_VIRTUAL", "module": "signal", "doc": ["Decrements interval timer only when the process is executing, and delivers SIGVTALRM upon expiration."]}
{"index": 5249, "name": "signal.ITIMER_PROF", "module": "signal", "doc": ["Decrements interval timer both when the process executes and when the system is executing on behalf of the process.", "Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space.", "SIGPROF is delivered upon expiration."]}
{"index": 5250, "name": "signal.SIG_BLOCK", "module": "signal", "doc": ["A possible value for the how parameter to pthread_sigmask() indicating that signals are to be blocked."]}
{"index": 5251, "name": "signal.SIG_UNBLOCK", "module": "signal", "doc": ["A possible value for the how parameter to pthread_sigmask() indicating that signals are to be unblocked."]}
{"index": 5252, "name": "signal.SIG_SETMASK", "module": "signal", "doc": ["A possible value for the how parameter to pthread_sigmask() indicating that the signal mask is to be replaced."]}
{"index": 5253, "name": "signal.ItimerError", "module": "signal", "doc": ["Raised to signal an error from the underlying setitimer() or getitimer() implementation.", "Expect this error if an invalid interval timer or a negative time is passed to setitimer().", "This error is a subtype of OSError."]}
{"index": 5254, "name": "signal.alarm", "module": "signal", "doc": ["If time is non-zero, this function requests that a SIGALRM signal be sent to the process in time seconds.", "Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time).", "The returned value is then the number of seconds before any previously set alarm was to have been delivered.", "If time is zero, no alarm is scheduled, and any scheduled alarm is canceled.", "If the return value is zero, no alarm is currently scheduled.", "Availability: Unix.", "See the man page alarm(2) for further information."]}
{"index": 5255, "name": "signal.getsignal", "module": "signal", "doc": ["Return the current signal handler for the signal signalnum.", "The returned value may be a callable Python object, or one of the special values signal.SIG_IGN, signal.SIG_DFL or None.", "Here, signal.SIG_IGN means that the signal was previously ignored, signal.SIG_DFL means that the default way of handling the signal was previously in use, and None means that the previous signal handler was not installed from Python."]}
{"index": 5256, "name": "signal.pause", "module": "signal", "doc": ["Cause the process to sleep until a signal is received; the appropriate handler will then be called.", "Returns nothing.", "Availability: Unix.", "See the man page signal(2) for further information.", "See also sigwait(), sigwaitinfo(), sigtimedwait() and sigpending()."]}
{"index": 5257, "name": "signal.pthread_kill", "module": "signal", "doc": ["Send the signal signalnum to the thread thread_id, another thread in the same process as the caller.", "The target thread can be executing any code (Python or not).", "However, if the target thread is executing the Python interpreter, the Python signal handlers will be executed by the main thread.", "Therefore, the only point of sending a signal to a particular Python thread would be to force a running system call to fail with InterruptedError.", "Use threading.get_ident() or the ident attribute of threading.Thread objects to get a suitable value for thread_id.", "If signalnum is 0, then no signal is sent, but error checking is still performed; this can be used to check if the target thread is still running.", "Availability: Unix.", "See the man page pthread_kill(3) for further information.", "See also os.kill()."]}
{"index": 5258, "name": "signal.pthread_sigmask", "module": "signal", "doc": ["Fetch and/or change the signal mask of the calling thread.", "The signal mask is the set of signals whose delivery is currently blocked for the caller.", "Return the old signal mask as a set of signals.", "The behavior of the call is dependent on the value of how, as follows.", "mask is a set of signal numbers (e.g.", "{signal.SIGINT, signal.SIGTERM}).", "Use range(1, signal.NSIG) for a full mask including all signals.", "For example, signal.pthread_sigmask(signal.SIG_BLOCK, []) reads the signal mask of the calling thread.", "Availability: Unix.", "See the man page sigprocmask(3) and pthread_sigmask(3) for further information.", "See also pause(), sigpending() and sigwait()."]}
{"index": 5259, "name": "signal.setitimer", "module": "signal", "doc": ["Sets given interval timer (one of signal.ITIMER_REAL, signal.ITIMER_VIRTUAL or signal.ITIMER_PROF) specified by which to fire after seconds (float is accepted, different from alarm()) and after that every interval seconds (if interval is non-zero).", "The interval timer specified by which can be cleared by setting seconds to zero.", "When an interval timer fires, a signal is sent to the process.", "The signal sent is dependent on the timer being used; signal.ITIMER_REAL will deliver SIGALRM, signal.ITIMER_VIRTUAL sends SIGVTALRM, and signal.ITIMER_PROF will deliver SIGPROF.", "The old values are returned as a tuple: (delay, interval).", "Attempting to pass an invalid interval timer will cause an ItimerError.", "Availability: Unix."]}
{"index": 5260, "name": "signal.getitimer", "module": "signal", "doc": ["Returns current value of a given interval timer specified by which.", "Availability: Unix."]}
{"index": 5261, "name": "signal.set_wakeup_fd", "module": "signal", "doc": ["Set the wakeup file descriptor to fd.", "When a signal is received, the signal number is written as a single byte into the fd.", "This can be used by a library to wakeup a poll or select call, allowing the signal to be fully processed.", "The old wakeup fd is returned (or -1 if file descriptor wakeup was not enabled).", "If fd is -1, file descriptor wakeup is disabled.", "If not -1, fd must be non-blocking.", "It is up to the library to remove any bytes from fd before calling poll or select again.", "When threads are enabled, this function can only be called from the main thread; attempting to call it from other threads will cause a ValueError exception to be raised.", "There are two common ways to use this function.", "In both approaches, you use the fd to wake up when a signal arrives, but then they differ in how they determine which signal or signals have arrived.", "In the first approach, we read the data out of the fd\u2019s buffer, and the byte values give you the signal numbers.", "This is simple, but in rare cases it can run into a problem: generally the fd will have a limited amount of buffer space, and if too many signals arrive too quickly, then the buffer may become full, and some signals may be lost.", "If you use this approach, then you should set warn_on_full_buffer=True, which will at least cause a warning to be printed to stderr when signals are lost.", "In the second approach, we use the wakeup fd only for wakeups, and ignore the actual byte values.", "In this case, all we care about is whether the fd\u2019s buffer is empty or non-empty; a full buffer doesn\u2019t indicate a problem at all.", "If you use this approach, then you should set warn_on_full_buffer=False, so that your users are not confused by spurious warning messages."]}
{"index": 5262, "name": "signal.siginterrupt", "module": "signal", "doc": ["Change system call restart behaviour: if flag is False, system calls will be restarted when interrupted by signal signalnum, otherwise system calls will be interrupted.", "Returns nothing.", "Availability: Unix.", "See the man page siginterrupt(3) for further information.", "Note that installing a signal handler with signal() will reset the restart behaviour to interruptible by implicitly calling siginterrupt() with a true flag value for the given signal."]}
{"index": 5263, "name": "signal.signal", "module": "signal", "doc": ["Set the handler for signal signalnum to the function handler.", "handler can be a callable Python object taking two arguments (see below), or one of the special values signal.SIG_IGN or signal.SIG_DFL.", "The previous signal handler will be returned (see the description of getsignal() above).", "(See the Unix man page signal(2) for further information.)", "When threads are enabled, this function can only be called from the main thread; attempting to call it from other threads will cause a ValueError exception to be raised.", "The handler is called with two arguments: the signal number and the current stack frame (None or a frame object; for a description of frame objects, see the description in the type hierarchy or see the attribute descriptions in the inspect module).", "On Windows, signal() can only be called with SIGABRT, SIGFPE, SIGILL, SIGINT, SIGSEGV, SIGTERM, or SIGBREAK.", "A ValueError will be raised in any other case.", "Note that not all systems define the same set of signal names; an AttributeError will be raised if a signal name is not defined as SIG* module level constant."]}
{"index": 5264, "name": "signal.sigpending", "module": "signal", "doc": ["Examine the set of signals that are pending for delivery to the calling thread (i.e., the signals which have been raised while blocked).", "Return the set of the pending signals.", "Availability: Unix.", "See the man page sigpending(2) for further information.", "See also pause(), pthread_sigmask() and sigwait()."]}
{"index": 5265, "name": "signal.sigwait", "module": "signal", "doc": ["Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset.", "The function accepts the signal (removes it from the pending list of signals), and returns the signal number.", "Availability: Unix.", "See the man page sigwait(3) for further information.", "See also pause(), pthread_sigmask(), sigpending(), sigwaitinfo() and sigtimedwait()."]}
{"index": 5266, "name": "signal.sigwaitinfo", "module": "signal", "doc": ["Suspend execution of the calling thread until the delivery of one of the signals specified in the signal set sigset.", "The function accepts the signal and removes it from the pending list of signals.", "If one of the signals in sigset is already pending for the calling thread, the function will return immediately with information about that signal.", "The signal handler is not called for the delivered signal.", "The function raises an InterruptedError if it is interrupted by a signal that is not in sigset.", "The return value is an object representing the data contained in the siginfo_t structure, namely: si_signo, si_code, si_errno, si_pid, si_uid, si_status, si_band.", "Availability: Unix.", "See the man page sigwaitinfo(2) for further information.", "See also pause(), sigwait() and sigtimedwait()."]}
{"index": 5267, "name": "signal.sigtimedwait", "module": "signal", "doc": ["Like sigwaitinfo(), but takes an additional timeout argument specifying a timeout.", "If timeout is specified as 0, a poll is performed.", "Returns None if a timeout occurs.", "Availability: Unix.", "See the man page sigtimedwait(2) for further information.", "See also pause(), sigwait() and sigwaitinfo()."]}
{"index": 5268, "name": "site.PREFIXES", "module": "site", "doc": ["A list of prefixes for site-packages directories."]}
{"index": 5269, "name": "site.ENABLE_USER_SITE", "module": "site", "doc": ["Flag showing the status of the user site-packages directory.", "True means that it is enabled and was added to sys.path.", "False means that it was disabled by user request (with -s or PYTHONNOUSERSITE).", "None means it was disabled for security reasons (mismatch between user or group id and effective id) or by an administrator."]}
{"index": 5270, "name": "site.USER_SITE", "module": "site", "doc": ["Path to the user site-packages for the running Python.", "Can be None if getusersitepackages() hasn\u2019t been called yet.", "Default value is ~/.local/lib/pythonX.Y/site-packages for UNIX and non-framework Mac OS X builds, ~/Library/Python/X.Y/lib/python/site-packages for Mac framework builds, and %APPDATA%\\Python\\PythonXY\\site-packages on Windows.", "This directory is a site directory, which means that .pth files in it will be processed."]}
{"index": 5271, "name": "site.USER_BASE", "module": "site", "doc": ["Path to the base directory for the user site-packages.", "Can be None if getuserbase() hasn\u2019t been called yet.", "Default value is ~/.local for UNIX and Mac OS X non-framework builds, ~/Library/Python/X.Y for Mac framework builds, and %APPDATA%\\Python for Windows.", "This value is used by Distutils to compute the installation directories for scripts, data files, Python modules, etc.", "for the user installation scheme.", "See also PYTHONUSERBASE."]}
{"index": 5272, "name": "site.main", "module": "site", "doc": ["Adds all the standard site-specific directories to the module search path.", "This function is called automatically when this module is imported, unless the Python interpreter was started with the -S flag."]}
{"index": 5273, "name": "site.addsitedir", "module": "site", "doc": ["Add a directory to sys.path and process its .pth files.", "Typically used in sitecustomize or usercustomize (see above)."]}
{"index": 5274, "name": "site.getsitepackages", "module": "site", "doc": ["Return a list containing all global site-packages directories."]}
{"index": 5275, "name": "site.getuserbase", "module": "site", "doc": ["Return the path of the user base directory, USER_BASE.", "If it is not initialized yet, this function will also set it, respecting PYTHONUSERBASE."]}
{"index": 5276, "name": "site.getusersitepackages", "module": "site", "doc": ["Return the path of the user-specific site-packages directory, USER_SITE.", "If it is not initialized yet, this function will also set it, respecting PYTHONNOUSERSITE and USER_BASE."]}
{"index": 5277, "name": "cmdoption-site-user-base", "module": "site", "doc": ["Print the path to the user base directory."]}
{"index": 5278, "name": "cmdoption-site-user-site", "module": "site", "doc": ["Print the path to the user site-packages directory."]}
{"index": 5279, "name": "smtpd.SMTPServer", "module": "smtpd", "doc": ["Create a new SMTPServer object, which binds to local address localaddr.", "It will treat remoteaddr as an upstream SMTP relayer.", "Both localaddr and remoteaddr should be a (host, port) tuple.", "The object inherits from asyncore.dispatcher, and so will insert itself into asyncore\u2019s event loop on instantiation.", "data_size_limit specifies the maximum number of bytes that will be accepted in a DATA command.", "A value of None or 0 means no limit.", "map is the socket map to use for connections (an initially empty dictionary is a suitable value).", "If not specified the asyncore global socket map is used.", "enable_SMTPUTF8 determines whether the SMTPUTF8 extension (as defined in RFC 6531) should be enabled.", "The default is False.", "When True, SMTPUTF8 is accepted as a parameter to the MAIL command and when present is passed to process_message() in the kwargs['mail_options'] list.", "decode_data and enable_SMTPUTF8 cannot be set to True at the same time.", "decode_data specifies whether the data portion of the SMTP transaction should be decoded using UTF-8.", "When decode_data is False (the default), the server advertises the 8BITMIME extension (RFC 6152), accepts the BODY=8BITMIME parameter to the MAIL command, and when present passes it to process_message() in the kwargs['mail_options'] list.", "decode_data and enable_SMTPUTF8 cannot be set to True at the same time."]}
{"index": 5280, "name": "smtpd.SMTPServer.process_message", "module": "smtpd", "doc": ["Raise a NotImplementedError exception.", "Override this in subclasses to do something useful with this message.", "Whatever was passed in the constructor as remoteaddr will be available as the _remoteaddr attribute.", "peer is the remote host\u2019s address, mailfrom is the envelope originator, rcpttos are the envelope recipients and data is a string containing the contents of the e-mail (which should be in RFC 5321 format).", "If the decode_data constructor keyword is set to True, the data argument will be a unicode string.", "If it is set to False, it will be a bytes object.", "kwargs is a dictionary containing additional information.", "It is empty if decode_data=True was given as an init argument, otherwise it contains the following keys:", "Implementations of process_message should use the **kwargs signature to accept arbitrary keyword arguments, since future feature enhancements may add keys to the kwargs dictionary.", "Return None to request a normal 250 Ok response; otherwise return the desired response string in RFC 5321 format."]}
{"index": 5281, "name": "smtpd.SMTPServer.channel_class", "module": "smtpd", "doc": ["Override this in subclasses to use a custom SMTPChannel for managing SMTP clients."]}
{"index": 5282, "name": "smtpd.DebuggingServer", "module": "smtpd", "doc": ["Create a new debugging server.", "Arguments are as per SMTPServer.", "Messages will be discarded, and printed on stdout."]}
{"index": 5283, "name": "smtpd.PureProxy", "module": "smtpd", "doc": ["Create a new pure proxy server.", "Arguments are as per SMTPServer.", "Everything will be relayed to remoteaddr.", "Note that running this has a good chance to make you into an open relay, so please be careful."]}
{"index": 5284, "name": "smtpd.MailmanProxy", "module": "smtpd", "doc": ["Create a new pure proxy server.", "Arguments are as per SMTPServer.", "Everything will be relayed to remoteaddr, unless local mailman configurations knows about an address, in which case it will be handled via mailman.", "Note that running this has a good chance to make you into an open relay, so please be careful."]}
{"index": 5285, "name": "smtpd.SMTPChannel", "module": "smtpd", "doc": ["Create a new SMTPChannel object which manages the communication between the server and a single SMTP client.", "conn and addr are as per the instance variables described below.", "data_size_limit specifies the maximum number of bytes that will be accepted in a DATA command.", "A value of None or 0 means no limit.", "enable_SMTPUTF8 determines whether the SMTPUTF8 extension (as defined in RFC 6531) should be enabled.", "The default is False.", "decode_data and enable_SMTPUTF8 cannot be set to True at the same time.", "A dictionary can be specified in map to avoid using a global socket map.", "decode_data specifies whether the data portion of the SMTP transaction should be decoded using UTF-8.", "The default is False.", "decode_data and enable_SMTPUTF8 cannot be set to True at the same time.", "To use a custom SMTPChannel implementation you need to override the SMTPServer.channel_class of your SMTPServer.", "The SMTPChannel has the following instance variables:", "The SMTPChannel operates by invoking methods named smtp_<command> upon reception of a command line from the client.", "Built into the base SMTPChannel class are methods for handling the following commands (and responding to them appropriately):"]}
{"index": 5286, "name": "smtpd.SMTPChannel.smtp_server", "module": "smtpd", "doc": ["Holds the SMTPServer that spawned this channel."]}
{"index": 5287, "name": "smtpd.SMTPChannel.conn", "module": "smtpd", "doc": ["Holds the socket object connecting to the client."]}
{"index": 5288, "name": "smtpd.SMTPChannel.addr", "module": "smtpd", "doc": ["Holds the address of the client, the second value returned by socket.accept"]}
{"index": 5289, "name": "smtpd.SMTPChannel.received_lines", "module": "smtpd", "doc": ["Holds a list of the line strings (decoded using UTF-8) received from the client.", "The lines have their \"\\r\\n\" line ending translated to \"\\n\"."]}
{"index": 5290, "name": "smtpd.SMTPChannel.smtp_state", "module": "smtpd", "doc": ["Holds the current state of the channel.", "This will be either COMMAND initially and then DATA after the client sends a \u201cDATA\u201d line."]}
{"index": 5291, "name": "smtpd.SMTPChannel.seen_greeting", "module": "smtpd", "doc": ["Holds a string containing the greeting sent by the client in its \u201cHELO\u201d."]}
{"index": 5292, "name": "smtpd.SMTPChannel.mailfrom", "module": "smtpd", "doc": ["Holds a string containing the address identified in the \u201cMAIL FROM:\u201d line from the client."]}
{"index": 5293, "name": "smtpd.SMTPChannel.rcpttos", "module": "smtpd", "doc": ["Holds a list of strings containing the addresses identified in the \u201cRCPT TO:\u201d lines from the client."]}
{"index": 5294, "name": "smtpd.SMTPChannel.received_data", "module": "smtpd", "doc": ["Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating \"\\r\\n.\\r\\n\"."]}
{"index": 5295, "name": "smtpd.SMTPChannel.fqdn", "module": "smtpd", "doc": ["Holds the fully-qualified domain name of the server as returned by socket.getfqdn()."]}
{"index": 5296, "name": "smtpd.SMTPChannel.peer", "module": "smtpd", "doc": ["Holds the name of the client peer as returned by conn.getpeername() where conn is conn."]}
{"index": 5297, "name": "smtplib.SMTP", "module": "smtplib", "doc": ["An SMTP instance encapsulates an SMTP connection.", "It has methods that support a full repertoire of SMTP and ESMTP operations.", "If the optional host and port parameters are given, the SMTP connect() method is called with those parameters during initialization.", "If specified, local_hostname is used as the FQDN of the local host in the HELO/EHLO command.", "Otherwise, the local hostname is found using socket.getfqdn().", "If the connect() call returns anything other than a success code, an SMTPConnectError is raised.", "The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).", "If the timeout expires, socket.timeout is raised.", "The optional source_address parameter allows binding to some specific source address in a machine with multiple network interfaces, and/or to some specific source TCP port.", "It takes a 2-tuple (host, port), for the socket to bind to as its source address before connecting.", "If omitted (or if host or port are '' and/or 0 respectively) the OS default behavior will be used.", "For normal use, you should only require the initialization/connect, sendmail(), and SMTP.quit() methods.", "An example is included below.", "The SMTP class supports the with statement.", "When used like this, the SMTP QUIT command is issued automatically when the with statement exits.", "E.g.", ":"]}
{"index": 5298, "name": "smtplib.SMTP_SSL", "module": "smtplib", "doc": ["An SMTP_SSL instance behaves exactly the same as instances of SMTP.", "SMTP_SSL should be used for situations where SSL is required from the beginning of the connection and using starttls() is not appropriate.", "If host is not specified, the local host is used.", "If port is zero, the standard SMTP-over-SSL port (465) is used.", "The optional arguments local_hostname, timeout and source_address have the same meaning as they do in the SMTP class.", "context, also optional, can contain a SSLContext and allows configuring various aspects of the secure connection.", "Please read Security considerations for best practices.", "keyfile and certfile are a legacy alternative to context, and can point to a PEM formatted private key and certificate chain file for the SSL connection."]}
{"index": 5299, "name": "smtplib.LMTP", "module": "smtplib", "doc": ["The LMTP protocol, which is very similar to ESMTP, is heavily based on the standard SMTP client.", "It\u2019s common to use Unix sockets for LMTP, so our connect() method must support that as well as a regular host:port server.", "The optional arguments local_hostname and source_address have the same meaning as they do in the SMTP class.", "To specify a Unix socket, you must use an absolute path for host, starting with a \u2018/\u2019.", "Authentication is supported, using the regular SMTP mechanism.", "When using a Unix socket, LMTP generally don\u2019t support or require any authentication, but your mileage might vary."]}
{"index": 5300, "name": "smtplib.SMTPException", "module": "smtplib", "doc": ["Subclass of OSError that is the base exception class for all the other exceptions provided by this module."]}
{"index": 5301, "name": "smtplib.SMTPServerDisconnected", "module": "smtplib", "doc": ["This exception is raised when the server unexpectedly disconnects, or when an attempt is made to use the SMTP instance before connecting it to a server."]}
{"index": 5302, "name": "smtplib.SMTPResponseException", "module": "smtplib", "doc": ["Base class for all exceptions that include an SMTP error code.", "These exceptions are generated in some instances when the SMTP server returns an error code.", "The error code is stored in the smtp_code attribute of the error, and the smtp_error attribute is set to the error message."]}
{"index": 5303, "name": "smtplib.SMTPSenderRefused", "module": "smtplib", "doc": ["Sender address refused.", "In addition to the attributes set by on all SMTPResponseException exceptions, this sets \u2018sender\u2019 to the string that the SMTP server refused."]}
{"index": 5304, "name": "smtplib.SMTPRecipientsRefused", "module": "smtplib", "doc": ["All recipient addresses refused.", "The errors for each recipient are accessible through the attribute recipients, which is a dictionary of exactly the same sort as SMTP.sendmail() returns."]}
{"index": 5305, "name": "smtplib.SMTPDataError", "module": "smtplib", "doc": ["The SMTP server refused to accept the message data."]}
{"index": 5306, "name": "smtplib.SMTPConnectError", "module": "smtplib", "doc": ["Error occurred during establishment of a connection  with the server."]}
{"index": 5307, "name": "smtplib.SMTPHeloError", "module": "smtplib", "doc": ["The server refused our HELO message."]}
{"index": 5308, "name": "smtplib.SMTPNotSupportedError", "module": "smtplib", "doc": ["The command or option attempted is not supported by the server."]}
{"index": 5309, "name": "smtplib.SMTPAuthenticationError", "module": "smtplib", "doc": ["SMTP authentication went wrong.", "Most probably the server didn\u2019t accept the username/password combination provided."]}
{"index": 5310, "name": "smtplib.SMTP.set_debuglevel", "module": "smtplib", "doc": ["Set the debug output level.", "A value of 1 or True for level results in debug messages for connection and for all messages sent to and received from the server.", "A value of 2 for level results in these messages being timestamped."]}
{"index": 5311, "name": "smtplib.SMTP.docmd", "module": "smtplib", "doc": ["Send a command cmd to the server.", "The optional argument args is simply concatenated to the command, separated by a space.", "This returns a 2-tuple composed of a numeric response code and the actual response line (multiline responses are joined into one long line.)", "In normal operation it should not be necessary to call this method explicitly.", "It is used to implement other methods and may be useful for testing private extensions.", "If the connection to the server is lost while waiting for the reply, SMTPServerDisconnected will be raised."]}
{"index": 5312, "name": "smtplib.SMTP.connect", "module": "smtplib", "doc": ["Connect to a host on a given port.", "The defaults are to connect to the local host at the standard SMTP port (25).", "If the hostname ends with a colon (':') followed by a number, that suffix will be stripped off and the number interpreted as the port number to use.", "This method is automatically invoked by the constructor if a host is specified during instantiation.", "Returns a 2-tuple of the response code and message sent by the server in its connection response."]}
{"index": 5313, "name": "smtplib.SMTP.helo", "module": "smtplib", "doc": ["Identify yourself to the SMTP server using HELO.", "The hostname argument defaults to the fully qualified domain name of the local host.", "The message returned by the server is stored as the helo_resp attribute of the object.", "In normal operation it should not be necessary to call this method explicitly.", "It will be implicitly called by the sendmail() when necessary."]}
{"index": 5314, "name": "smtplib.SMTP.ehlo", "module": "smtplib", "doc": ["Identify yourself to an ESMTP server using EHLO.", "The hostname argument defaults to the fully qualified domain name of the local host.", "Examine the response for ESMTP option and store them for use by has_extn().", "Also sets several informational attributes: the message returned by the server is stored as the ehlo_resp attribute, does_esmtp is set to true or false depending on whether the server supports ESMTP, and esmtp_features will be a dictionary containing the names of the SMTP service extensions this server supports, and their parameters (if any).", "Unless you wish to use has_extn() before sending mail, it should not be necessary to call this method explicitly.", "It will be implicitly called by sendmail() when necessary."]}
{"index": 5315, "name": "smtplib.SMTP.ehlo_or_helo_if_needed", "module": "smtplib", "doc": ["This method calls ehlo() and/or helo() if there has been no previous EHLO or HELO command this session.", "It tries ESMTP EHLO first."]}
{"index": 5316, "name": "smtplib.SMTP.has_extn", "module": "smtplib", "doc": ["Return True if name is in the set of SMTP service extensions returned by the server, False otherwise.", "Case is ignored."]}
{"index": 5317, "name": "smtplib.SMTP.verify", "module": "smtplib", "doc": ["Check the validity of an address on this server using SMTP VRFY.", "Returns a tuple consisting of code 250 and a full RFC 822 address (including human name) if the user address is valid.", "Otherwise returns an SMTP error code of 400 or greater and an error string."]}
{"index": 5318, "name": "smtplib.SMTP.login", "module": "smtplib", "doc": ["Log in on an SMTP server that requires authentication.", "The arguments are the username and the password to authenticate with.", "If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first.", "This method will return normally if the authentication was successful, or may raise the following exceptions:", "Each of the authentication methods supported by smtplib are tried in turn if they are advertised as supported by the server.", "See auth() for a list of supported authentication methods.", "initial_response_ok is passed through to auth().", "Optional keyword argument initial_response_ok specifies whether, for authentication methods that support it, an \u201cinitial response\u201d as specified in RFC 4954 can be sent along with the AUTH command, rather than requiring a challenge/response."]}
{"index": 5319, "name": "smtplib.SMTP.auth", "module": "smtplib", "doc": ["Issue an SMTP AUTH command for the specified authentication mechanism, and handle the challenge response via authobject.", "mechanism specifies which authentication mechanism is to be used as argument to the AUTH command; the valid values are those listed in the auth element of esmtp_features.", "authobject must be a callable object taking an optional single argument:", "If optional keyword argument initial_response_ok is true, authobject() will be called first with no argument.", "It can return the RFC 4954 \u201cinitial response\u201d ASCII str which will be encoded and sent with the AUTH command as below.", "If the authobject() does not support an initial response (e.g.", "because it requires a challenge), it should return None when called with challenge=None.", "If initial_response_ok is false, then authobject() will not be called first with None.", "If the initial response check returns None, or if initial_response_ok is false, authobject() will be called to process the server\u2019s challenge response; the challenge argument it is passed will be a bytes.", "It should return ASCII str data that will be base64 encoded and sent to the server.", "The SMTP class provides authobjects for the CRAM-MD5, PLAIN, and LOGIN mechanisms; they are named SMTP.auth_cram_md5, SMTP.auth_plain, and SMTP.auth_login respectively.", "They all require that the user and password properties of the SMTP instance are set to appropriate values.", "User code does not normally need to call auth directly, but can instead call the login() method, which will try each of the above mechanisms in turn, in the order listed.", "auth is exposed to facilitate the implementation of authentication methods not (or not yet) supported directly by smtplib."]}
{"index": 5320, "name": "smtplib.SMTP.starttls", "module": "smtplib", "doc": ["Put the SMTP connection in TLS (Transport Layer Security) mode.", "All SMTP commands that follow will be encrypted.", "You should then call ehlo() again.", "If keyfile and certfile are provided, they are used to create an ssl.SSLContext.", "Optional context parameter is an ssl.SSLContext object; This is an alternative to using a keyfile and a certfile and if specified both keyfile and certfile should be None.", "If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first."]}
{"index": 5321, "name": "smtplib.SMTP.sendmail", "module": "smtplib", "doc": ["Send mail.", "The required arguments are an RFC 822 from-address string, a list of RFC 822 to-address strings (a bare string will be treated as a list with 1 address), and a message string.", "The caller may pass a list of ESMTP options (such as 8bitmime) to be used in MAIL FROM commands as mail_options.", "ESMTP options (such as DSN commands) that should be used with all RCPT commands can be passed as rcpt_options.", "(If you need to use different ESMTP options to different recipients you have to use the low-level methods such as mail(), rcpt() and data() to send the message.)", "msg may be a string containing characters in the ASCII range, or a byte string.", "A string is encoded to bytes using the ascii codec, and lone \\r and \\n characters are converted to \\r\\n characters.", "A byte string is not modified.", "If there has been no previous EHLO or HELO command this session, this method tries ESMTP EHLO first.", "If the server does ESMTP, message size and each of the specified options will be passed to it (if the option is in the feature set the server advertises).", "If EHLO fails, HELO will be tried and ESMTP options suppressed.", "This method will return normally if the mail is accepted for at least one recipient.", "Otherwise it will raise an exception.", "That is, if this method does not raise an exception, then someone should get your mail.", "If this method does not raise an exception, it returns a dictionary, with one entry for each recipient that was refused.", "Each entry contains a tuple of the SMTP error code and the accompanying error message sent by the server.", "If SMTPUTF8 is included in mail_options, and the server supports it, from_addr and to_addrs may contain non-ASCII characters.", "This method may raise the following exceptions:", "Unless otherwise noted, the connection will be open even after an exception is raised."]}
{"index": 5322, "name": "smtplib.SMTP.send_message", "module": "smtplib", "doc": ["This is a convenience method for calling sendmail() with the message represented by an email.message.Message object.", "The arguments have the same meaning as for sendmail(), except that msg is a Message object.", "If from_addr is None or to_addrs is None, send_message fills those arguments with addresses extracted from the headers of msg as specified in RFC 5322: from_addr is set to the Sender field if it is present, and otherwise to the From field.", "to_addrs combines the values (if any) of the To, Cc, and Bcc fields from msg.", "If exactly one set of Resent-* headers appear in the message, the regular headers are ignored and the Resent-* headers are used instead.", "If the message contains more than one set of Resent-* headers, a ValueError is raised, since there is no way to unambiguously detect the most recent set of Resent- headers.", "send_message serializes msg using BytesGenerator with \\r\\n as the linesep, and calls sendmail() to transmit the resulting message.", "Regardless of the values of from_addr and to_addrs, send_message does not transmit any Bcc or Resent-Bcc headers that may appear in msg.", "If any of the addresses in from_addr and to_addrs contain non-ASCII characters and the server does not advertise SMTPUTF8 support, an SMTPNotSupported error is raised.", "Otherwise the Message is serialized with a clone of its policy with the utf8 attribute set to True, and SMTPUTF8 and BODY=8BITMIME are added to mail_options."]}
{"index": 5323, "name": "smtplib.SMTP.quit", "module": "smtplib", "doc": ["Terminate the SMTP session and close the connection.", "Return the result of the SMTP QUIT command."]}
{"index": 5324, "name": "sndhdr.what", "module": "sndhdr", "doc": ["Determines the type of sound data stored in the file filename using whathdr().", "If it succeeds, returns a namedtuple as described above, otherwise None is returned."]}
{"index": 5325, "name": "sndhdr.whathdr", "module": "sndhdr", "doc": ["Determines the type of sound data stored in a file based on the file  header.", "The name of the file is given by filename.", "This function returns a namedtuple as described above on success, or None."]}
{"index": 5326, "name": "socket.error", "module": "socket", "doc": ["A deprecated alias of OSError."]}
{"index": 5327, "name": "socket.herror", "module": "socket", "doc": ["A subclass of OSError, this exception is raised for address-related errors, i.e.", "for functions that use h_errno in the POSIX C API, including gethostbyname_ex() and gethostbyaddr().", "The accompanying value is a pair (h_errno, string) representing an error returned by a library call.", "h_errno is a numeric value, while string represents the description of h_errno, as returned by the hstrerror() C function."]}
{"index": 5328, "name": "socket.gaierror", "module": "socket", "doc": ["A subclass of OSError, this exception is raised for address-related errors by getaddrinfo() and getnameinfo().", "The accompanying value is a pair (error, string) representing an error returned by a library call.", "string represents the description of error, as returned by the gai_strerror() C function.", "The numeric error value will match one of the EAI_* constants defined in this module."]}
{"index": 5329, "name": "socket.timeout", "module": "socket", "doc": ["A subclass of OSError, this exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to settimeout() (or implicitly through setdefaulttimeout()).", "The accompanying value is a string whose value is currently always \u201ctimed out\u201d."]}
{"index": 5330, "name": "socket.AF_UNIX", "module": "socket", "doc": ["These constants represent the address (and protocol) families, used for the first argument to socket().", "If the AF_UNIX constant is not defined then this protocol is unsupported.", "More constants may be available depending on the system."]}
{"index": 5331, "name": "socket.AF_INET", "module": "socket", "doc": ["These constants represent the address (and protocol) families, used for the first argument to socket().", "If the AF_UNIX constant is not defined then this protocol is unsupported.", "More constants may be available depending on the system."]}
{"index": 5332, "name": "socket.AF_INET6", "module": "socket", "doc": ["These constants represent the address (and protocol) families, used for the first argument to socket().", "If the AF_UNIX constant is not defined then this protocol is unsupported.", "More constants may be available depending on the system."]}
{"index": 5333, "name": "socket.SOCK_STREAM", "module": "socket", "doc": ["These constants represent the socket types, used for the second argument to socket().", "More constants may be available depending on the system.", "(Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)"]}
{"index": 5334, "name": "socket.SOCK_DGRAM", "module": "socket", "doc": ["These constants represent the socket types, used for the second argument to socket().", "More constants may be available depending on the system.", "(Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)"]}
{"index": 5335, "name": "socket.SOCK_RAW", "module": "socket", "doc": ["These constants represent the socket types, used for the second argument to socket().", "More constants may be available depending on the system.", "(Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)"]}
{"index": 5336, "name": "socket.SOCK_RDM", "module": "socket", "doc": ["These constants represent the socket types, used for the second argument to socket().", "More constants may be available depending on the system.", "(Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)"]}
{"index": 5337, "name": "socket.SOCK_SEQPACKET", "module": "socket", "doc": ["These constants represent the socket types, used for the second argument to socket().", "More constants may be available depending on the system.", "(Only SOCK_STREAM and SOCK_DGRAM appear to be generally useful.)"]}
{"index": 5338, "name": "socket.SOCK_CLOEXEC", "module": "socket", "doc": ["These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).", "Availability: Linux >= 2.6.27."]}
{"index": 5339, "name": "socket.SOCK_NONBLOCK", "module": "socket", "doc": ["These two constants, if defined, can be combined with the socket types and allow you to set some flags atomically (thus avoiding possible race conditions and the need for separate calls).", "Availability: Linux >= 2.6.27."]}
{"index": 5340, "name": "socket.SOMAXCONN", "module": "socket", "doc": ["Many constants of these forms, documented in the Unix documentation on sockets and/or the IP protocol, are also defined in the socket module.", "They are generally used in arguments to the setsockopt() and getsockopt() methods of socket objects.", "In most cases, only those symbols that are defined in the Unix header files are defined; for a few symbols, default values are provided."]}
{"index": 5341, "name": "socket.AF_CAN", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.6.25."]}
{"index": 5342, "name": "socket.PF_CAN", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.6.25."]}
{"index": 5343, "name": "socket.CAN_BCM", "module": "socket", "doc": ["CAN_BCM, in the CAN protocol family, is the broadcast manager (BCM) protocol.", "Broadcast manager constants, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.6.25."]}
{"index": 5344, "name": "socket.CAN_RAW_FD_FRAMES", "module": "socket", "doc": ["Enables CAN FD support in a CAN_RAW socket.", "This is disabled by default.", "This allows your application to send both CAN and CAN FD frames; however, you must accept both CAN and CAN FD frames when reading from the socket.", "This constant is documented in the Linux documentation.", "Availability: Linux >= 3.6."]}
{"index": 5345, "name": "socket.CAN_ISOTP", "module": "socket", "doc": ["CAN_ISOTP, in the CAN protocol family, is the ISO-TP (ISO 15765-2) protocol.", "ISO-TP constants, documented in the Linux documentation.", "Availability: Linux >= 2.6.25."]}
{"index": 5346, "name": "socket.AF_PACKET", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.2."]}
{"index": 5347, "name": "socket.PF_PACKET", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.2."]}
{"index": 5348, "name": "socket.AF_RDS", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.6.30."]}
{"index": 5349, "name": "socket.PF_RDS", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.6.30."]}
{"index": 5350, "name": "socket.SOL_RDS", "module": "socket", "doc": ["Many constants of these forms, documented in the Linux documentation, are also defined in the socket module.", "Availability: Linux >= 2.6.30."]}
{"index": 5351, "name": "socket.SIO_RCVALL", "module": "socket", "doc": ["Constants for Windows\u2019 WSAIoctl().", "The constants are used as arguments to the ioctl() method of socket objects."]}
{"index": 5352, "name": "socket.SIO_KEEPALIVE_VALS", "module": "socket", "doc": ["Constants for Windows\u2019 WSAIoctl().", "The constants are used as arguments to the ioctl() method of socket objects."]}
{"index": 5353, "name": "socket.SIO_LOOPBACK_FAST_PATH", "module": "socket", "doc": ["Constants for Windows\u2019 WSAIoctl().", "The constants are used as arguments to the ioctl() method of socket objects."]}
{"index": 5354, "name": "socket.AF_ALG", "module": "socket", "doc": ["Constants for Linux Kernel cryptography.", "Availability: Linux >= 2.6.38."]}
{"index": 5355, "name": "socket.SOL_ALG", "module": "socket", "doc": ["Constants for Linux Kernel cryptography.", "Availability: Linux >= 2.6.38."]}
{"index": 5356, "name": "socket.AF_VSOCK", "module": "socket", "doc": ["Constants for Linux host/guest communication.", "Availability: Linux >= 4.8."]}
{"index": 5357, "name": "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID", "module": "socket", "doc": ["Constants for Linux host/guest communication.", "Availability: Linux >= 4.8."]}
{"index": 5358, "name": "socket.AF_LINK", "module": "socket", "doc": ["Availability: BSD, OSX."]}
{"index": 5359, "name": "socket.has_ipv6", "module": "socket", "doc": ["This constant contains a boolean value which indicates if IPv6 is supported on this platform."]}
{"index": 5360, "name": "socket.BDADDR_ANY", "module": "socket", "doc": ["These are string constants containing Bluetooth addresses with special meanings.", "For example, BDADDR_ANY can be used to indicate any address when specifying the binding socket with BTPROTO_RFCOMM."]}
{"index": 5361, "name": "socket.BDADDR_LOCAL", "module": "socket", "doc": ["These are string constants containing Bluetooth addresses with special meanings.", "For example, BDADDR_ANY can be used to indicate any address when specifying the binding socket with BTPROTO_RFCOMM."]}
{"index": 5362, "name": "socket.HCI_FILTER", "module": "socket", "doc": ["For use with BTPROTO_HCI.", "HCI_FILTER is not available for NetBSD or DragonFlyBSD.", "HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD."]}
{"index": 5363, "name": "socket.HCI_TIME_STAMP", "module": "socket", "doc": ["For use with BTPROTO_HCI.", "HCI_FILTER is not available for NetBSD or DragonFlyBSD.", "HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD."]}
{"index": 5364, "name": "socket.HCI_DATA_DIR", "module": "socket", "doc": ["For use with BTPROTO_HCI.", "HCI_FILTER is not available for NetBSD or DragonFlyBSD.", "HCI_TIME_STAMP and HCI_DATA_DIR are not available for FreeBSD, NetBSD, or DragonFlyBSD."]}
{"index": 5365, "name": "socket.socket", "module": "socket", "doc": ["Create a new socket using the given address family, socket type and protocol number.", "The address family should be AF_INET (the default), AF_INET6, AF_UNIX, AF_CAN, AF_PACKET, or AF_RDS.", "The socket type should be SOCK_STREAM (the default), SOCK_DGRAM, SOCK_RAW or perhaps one of the other SOCK_ constants.", "The protocol number is usually zero and may be omitted or in the case where the address family is AF_CAN the protocol should be one of CAN_RAW, CAN_BCM or CAN_ISOTP.", "If fileno is specified, the values for family, type, and proto are auto-detected from the specified file descriptor.", "Auto-detection can be overruled by calling the function with explicit family, type, or proto arguments.", "This only affects how Python represents e.g.", "the return value of socket.getpeername() but not the actual OS resource.", "Unlike socket.fromfd(), fileno will return the same socket and not a duplicate.", "This may help close a detached socket using socket.close().", "The newly created socket is non-inheritable."]}
{"index": 5366, "name": "socket.socketpair", "module": "socket", "doc": ["Build a pair of connected socket objects using the given address family, socket type, and protocol number.", "Address family, socket type, and protocol number are as for the socket() function above.", "The default family is AF_UNIX if defined on the platform; otherwise, the default is AF_INET.", "The newly created sockets are non-inheritable."]}
{"index": 5367, "name": "socket.create_connection", "module": "socket", "doc": ["Connect to a TCP service listening on the Internet address (a 2-tuple (host, port)), and return the socket object.", "This is a higher-level function than socket.connect(): if host is a non-numeric hostname, it will try to resolve it for both AF_INET and AF_INET6, and then try to connect to all possible addresses in turn until a connection succeeds.", "This makes it easy to write clients that are compatible to both IPv4 and IPv6.", "Passing the optional timeout parameter will set the timeout on the socket instance before attempting to connect.", "If no timeout is supplied, the global default timeout setting returned by getdefaulttimeout() is used.", "If supplied, source_address must be a 2-tuple (host, port) for the socket to bind to as its source address before connecting.", "If host or port are \u2018\u2019 or 0 respectively the OS default behavior will be used."]}
{"index": 5368, "name": "socket.fromfd", "module": "socket", "doc": ["Duplicate the file descriptor fd (an integer as returned by a file object\u2019s fileno() method) and build a socket object from the result.", "Address family, socket type and protocol number are as for the socket() function above.", "The file descriptor should refer to a socket, but this is not checked \u2014 subsequent operations on the object may fail if the file descriptor is invalid.", "This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon).", "The socket is assumed to be in blocking mode.", "The newly created socket is non-inheritable."]}
{"index": 5369, "name": "socket.fromshare", "module": "socket", "doc": ["Instantiate a socket from data obtained from the socket.share() method.", "The socket is assumed to be in blocking mode.", "Availability: Windows."]}
{"index": 5370, "name": "socket.SocketType", "module": "socket", "doc": ["This is a Python type object that represents the socket object type.", "It is the same as type(socket(...))."]}
{"index": 5371, "name": "socket.close", "module": "socket", "doc": ["Close a socket file descriptor.", "This is like os.close(), but for sockets.", "On some platforms (most noticeable Windows) os.close() does not work for socket file descriptors."]}
{"index": 5372, "name": "socket.getaddrinfo", "module": "socket", "doc": ["Translate the host/port argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service.", "host is a domain name, a string representation of an IPv4/v6 address or None.", "port is a string service name such as 'http', a numeric port number or None.", "By passing None as the value of host and port, you can pass NULL to the underlying C API.", "The family, type and proto arguments can be optionally specified in order to narrow the list of addresses returned.", "Passing zero as a value for each of these arguments selects the full range of results.", "The flags argument can be one or several of the AI_* constants, and will influence how results are computed and returned.", "For example, AI_NUMERICHOST will disable domain name resolution and will raise an error if host is a domain name.", "The function returns a list of 5-tuples with the following structure:", "(family, type, proto, canonname, sockaddr)", "In these tuples, family, type, proto are all integers and are meant to be passed to the socket() function.", "canonname will be a string representing the canonical name of the host if AI_CANONNAME is part of the flags argument; else canonname will be empty.", "sockaddr is a tuple describing a socket address, whose format depends on the returned family (a (address, port) 2-tuple for AF_INET, a (address, port, flow info, scope id) 4-tuple for AF_INET6), and is meant to be passed to the socket.connect() method.", "The following example fetches address information for a hypothetical TCP connection to example.org on port 80 (results may differ on your system if IPv6 isn\u2019t enabled):"]}
{"index": 5373, "name": "socket.getfqdn", "module": "socket", "doc": ["Return a fully qualified domain name for name.", "If name is omitted or empty, it is interpreted as the local host.", "To find the fully qualified name, the hostname returned by gethostbyaddr() is checked, followed by aliases for the host, if available.", "The first name which includes a period is selected.", "In case no fully qualified domain name is available, the hostname as returned by gethostname() is returned."]}
{"index": 5374, "name": "socket.gethostbyname", "module": "socket", "doc": ["Translate a host name to IPv4 address format.", "The IPv4 address is returned as a string, such as  '100.50.200.5'.", "If the host name is an IPv4 address itself it is returned unchanged.", "See gethostbyname_ex() for a more complete interface.", "gethostbyname() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support."]}
{"index": 5375, "name": "socket.gethostbyname_ex", "module": "socket", "doc": ["Translate a host name to IPv4 address format, extended interface.", "Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4 addresses for the same interface on the same host (often but not always a single address).", "gethostbyname_ex() does not support IPv6 name resolution, and getaddrinfo() should be used instead for IPv4/v6 dual stack support."]}
{"index": 5376, "name": "socket.gethostname", "module": "socket", "doc": ["Return a string containing the hostname of the machine where  the Python interpreter is currently executing.", "Note: gethostname() doesn\u2019t always return the fully qualified domain name; use getfqdn() for that."]}
{"index": 5377, "name": "socket.gethostbyaddr", "module": "socket", "doc": ["Return a triple (hostname, aliaslist, ipaddrlist) where hostname is the primary host name responding to the given ip_address, aliaslist is a (possibly empty) list of alternative host names for the same address, and ipaddrlist is a list of IPv4/v6 addresses for the same interface on the same host (most likely containing only a single address).", "To find the fully qualified domain name, use the function getfqdn().", "gethostbyaddr() supports both IPv4 and IPv6."]}
{"index": 5378, "name": "socket.getnameinfo", "module": "socket", "doc": ["Translate a socket address sockaddr into a 2-tuple (host, port).", "Depending on the settings of flags, the result can contain a fully-qualified domain name or numeric address representation in host.", "Similarly, port can contain a string port name or a numeric port number.", "For IPv6 addresses, %scope is appended to the host part if sockaddr contains meaningful scopeid.", "Usually this happens for multicast addresses."]}
{"index": 5379, "name": "socket.getprotobyname", "module": "socket", "doc": ["Translate an Internet protocol name (for example, 'icmp') to a constant suitable for passing as the (optional) third argument to the socket() function.", "This is usually only needed for sockets opened in \u201craw\u201d mode (SOCK_RAW); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero."]}
{"index": 5380, "name": "socket.getservbyname", "module": "socket", "doc": ["Translate an Internet service name and protocol name to a port number for that service.", "The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match."]}
{"index": 5381, "name": "socket.getservbyport", "module": "socket", "doc": ["Translate an Internet port number and protocol name to a service name for that service.", "The optional protocol name, if given, should be 'tcp' or 'udp', otherwise any protocol will match."]}
{"index": 5382, "name": "socket.ntohl", "module": "socket", "doc": ["Convert 32-bit positive integers from network to host byte order.", "On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation."]}
{"index": 5383, "name": "socket.ntohs", "module": "socket", "doc": ["Convert 16-bit positive integers from network to host byte order.", "On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation."]}
{"index": 5384, "name": "socket.htonl", "module": "socket", "doc": ["Convert 32-bit positive integers from host to network byte order.", "On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation."]}
{"index": 5385, "name": "socket.htons", "module": "socket", "doc": ["Convert 16-bit positive integers from host to network byte order.", "On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation."]}
{"index": 5386, "name": "socket.inet_aton", "module": "socket", "doc": ["Convert an IPv4 address from dotted-quad string format (for example, \u2018123.45.67.89\u2019) to 32-bit packed binary format, as a bytes object four characters in length.", "This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary this function returns.", "inet_aton() also accepts strings with less than three dots; see the Unix manual page inet(3) for details.", "If the IPv4 address string passed to this function is invalid, OSError will be raised.", "Note that exactly what is valid depends on the underlying C implementation of inet_aton().", "inet_aton() does not support IPv6, and inet_pton() should be used instead for IPv4/v6 dual stack support."]}
{"index": 5387, "name": "socket.inet_ntoa", "module": "socket", "doc": ["Convert a 32-bit packed IPv4 address (a bytes-like object four bytes in length) to its standard dotted-quad string representation (for example, \u2018123.45.67.89\u2019).", "This is useful when conversing with a program that uses the standard C library and needs objects of type struct in_addr, which is the C type for the 32-bit packed binary data this function takes as an argument.", "If the byte sequence passed to this function is not exactly 4 bytes in length, OSError will be raised.", "inet_ntoa() does not support IPv6, and inet_ntop() should be used instead for IPv4/v6 dual stack support."]}
{"index": 5388, "name": "socket.inet_pton", "module": "socket", "doc": ["Convert an IP address from its family-specific string format to a packed, binary format.", "inet_pton() is useful when a library or network protocol calls for an object of type struct in_addr (similar to inet_aton()) or struct in6_addr.", "Supported values for address_family are currently AF_INET and AF_INET6.", "If the IP address string ip_string is invalid, OSError will be raised.", "Note that exactly what is valid depends on both the value of address_family and the underlying implementation of inet_pton().", "Availability: Unix (maybe not all platforms), Windows."]}
{"index": 5389, "name": "socket.inet_ntop", "module": "socket", "doc": ["Convert a packed IP address (a bytes-like object of some number of bytes) to its standard, family-specific string representation (for example, '7.10.0.5' or '5aef:2b::8').", "inet_ntop() is useful when a library or network protocol returns an object of type struct in_addr (similar to inet_ntoa()) or struct in6_addr.", "Supported values for address_family are currently AF_INET and AF_INET6.", "If the bytes object packed_ip is not the correct length for the specified address family, ValueError will be raised.", "OSError is raised for errors from the call to inet_ntop().", "Availability: Unix (maybe not all platforms), Windows."]}
{"index": 5390, "name": "socket.CMSG_LEN", "module": "socket", "doc": ["Return the total length, without trailing padding, of an ancillary data item with associated data of the given length.", "This value can often be used as the buffer size for recvmsg() to receive a single item of ancillary data, but RFC 3542 requires portable applications to use CMSG_SPACE() and thus include space for padding, even when the item will be the last in the buffer.", "Raises OverflowError if length is outside the permissible range of values.", "Availability: most Unix platforms, possibly others."]}
{"index": 5391, "name": "socket.CMSG_SPACE", "module": "socket", "doc": ["Return the buffer size needed for recvmsg() to receive an ancillary data item with associated data of the given length, along with any trailing padding.", "The buffer space needed to receive multiple items is the sum of the CMSG_SPACE() values for their associated data lengths.", "Raises OverflowError if length is outside the permissible range of values.", "Note that some systems might support ancillary data without providing this function.", "Also note that setting the buffer size using the results of this function may not precisely limit the amount of ancillary data that can be received, since additional data may be able to fit into the padding area.", "Availability: most Unix platforms, possibly others."]}
{"index": 5392, "name": "socket.getdefaulttimeout", "module": "socket", "doc": ["Return the default timeout in seconds (float) for new socket objects.", "A value of None indicates that new socket objects have no timeout.", "When the socket module is first imported, the default is None."]}
{"index": 5393, "name": "socket.setdefaulttimeout", "module": "socket", "doc": ["Set the default timeout in seconds (float) for new socket objects.", "When the socket module is first imported, the default is None.", "See settimeout() for possible values and their respective meanings."]}
{"index": 5394, "name": "socket.sethostname", "module": "socket", "doc": ["Set the machine\u2019s hostname to name.", "This will raise an OSError if you don\u2019t have enough rights.", "Availability: Unix."]}
{"index": 5395, "name": "socket.if_nameindex", "module": "socket", "doc": ["Return a list of network interface information (index int, name string) tuples.", "OSError if the system call fails.", "Availability: Unix."]}
{"index": 5396, "name": "socket.if_nametoindex", "module": "socket", "doc": ["Return a network interface index number corresponding to an interface name.", "OSError if no interface with the given name exists.", "Availability: Unix."]}
{"index": 5397, "name": "socket.if_indextoname", "module": "socket", "doc": ["Return a network interface name corresponding to an interface index number.", "OSError if no interface with the given index exists.", "Availability: Unix."]}
{"index": 5398, "name": "socket.socket.accept", "module": "socket", "doc": ["Accept a connection.", "The socket must be bound to an address and listening for connections.", "The return value is a pair (conn, address) where conn is a new socket object usable to send and receive data on the connection, and address is the address bound to the socket on the other end of the connection.", "The newly created socket is non-inheritable."]}
{"index": 5399, "name": "socket.socket.bind", "module": "socket", "doc": ["Bind the socket to address.", "The socket must not already be bound.", "(The format of address depends on the address family \u2014 see above.)"]}
{"index": 5400, "name": "socket.socket.close", "module": "socket", "doc": ["Mark the socket closed.", "The underlying system resource (e.g.", "a file descriptor) is also closed when all file objects from makefile() are closed.", "Once that happens, all future operations on the socket object will fail.", "The remote end will receive no more data (after queued data is flushed).", "Sockets are automatically closed when they are garbage-collected, but it is recommended to close() them explicitly, or to use a with statement around them."]}
{"index": 5401, "name": "socket.socket.connect", "module": "socket", "doc": ["Connect to a remote socket at address.", "(The format of address depends on the address family \u2014 see above.)", "If the connection is interrupted by a signal, the method waits until the connection completes, or raise a socket.timeout on timeout, if the signal handler doesn\u2019t raise an exception and the socket is blocking or has a timeout.", "For non-blocking sockets, the method raises an InterruptedError exception if the connection is interrupted by a signal (or the exception raised by the signal handler)."]}
{"index": 5402, "name": "socket.socket.connect_ex", "module": "socket", "doc": ["Like connect(address), but return an error indicator instead of raising an exception for errors returned by the C-level connect() call (other problems, such as \u201chost not found,\u201d can still raise exceptions).", "The error indicator is 0 if the operation succeeded, otherwise the value of the errno variable.", "This is useful to support, for example, asynchronous connects."]}
{"index": 5403, "name": "socket.socket.detach", "module": "socket", "doc": ["Put the socket object into closed state without actually closing the underlying file descriptor.", "The file descriptor is returned, and can be reused for other purposes."]}
{"index": 5404, "name": "socket.socket.dup", "module": "socket", "doc": ["Duplicate the socket.", "The newly created socket is non-inheritable."]}
{"index": 5405, "name": "socket.socket.fileno", "module": "socket", "doc": ["Return the socket\u2019s file descriptor (a small integer), or -1 on failure.", "This is useful with select.select().", "Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as os.fdopen()).", "Unix does not have this limitation."]}
{"index": 5406, "name": "socket.socket.get_inheritable", "module": "socket", "doc": ["Get the inheritable flag of the socket\u2019s file descriptor or socket\u2019s handle: True if the socket can be inherited in child processes, False if it cannot."]}
{"index": 5407, "name": "socket.socket.getpeername", "module": "socket", "doc": ["Return the remote address to which the socket is connected.", "This is useful to find out the port number of a remote IPv4/v6 socket, for instance.", "(The format of the address returned depends on the address family \u2014 see above.)", "On some systems this function is not supported."]}
{"index": 5408, "name": "socket.socket.getsockname", "module": "socket", "doc": ["Return the socket\u2019s own address.", "This is useful to find out the port number of an IPv4/v6 socket, for instance.", "(The format of the address returned depends on the address family \u2014 see above.)"]}
{"index": 5409, "name": "socket.socket.getsockopt", "module": "socket", "doc": ["Return the value of the given socket option (see the Unix man page getsockopt(2)).", "The needed symbolic constants (SO_* etc.)", "are defined in this module.", "If buflen is absent, an integer option is assumed and its integer value is returned by the function.", "If buflen is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a bytes object.", "It is up to the caller to decode the contents of the buffer (see the optional built-in module struct for a way to decode C structures encoded as byte strings)."]}
{"index": 5410, "name": "socket.socket.getblocking", "module": "socket", "doc": ["Return True if socket is in blocking mode, False if in non-blocking.", "This is equivalent to checking socket.gettimeout() == 0."]}
{"index": 5411, "name": "socket.socket.gettimeout", "module": "socket", "doc": ["Return the timeout in seconds (float) associated with socket operations, or None if no timeout is set.", "This reflects the last call to setblocking() or settimeout()."]}
{"index": 5412, "name": "socket.socket.ioctl", "module": "socket", "doc": ["The ioctl() method is a limited interface to the WSAIoctl system interface.", "Please refer to the Win32 documentation for more information.", "On other platforms, the generic fcntl.fcntl() and fcntl.ioctl() functions may be used; they accept a socket object as their first argument.", "Currently only the following control codes are supported: SIO_RCVALL, SIO_KEEPALIVE_VALS, and SIO_LOOPBACK_FAST_PATH."]}
{"index": 5413, "name": "socket.socket.listen", "module": "socket", "doc": ["Enable a server to accept connections.", "If backlog is specified, it must be at least 0 (if it is lower, it is set to 0); it specifies the number of unaccepted connections that the system will allow before refusing new connections.", "If not specified, a default reasonable value is chosen."]}
{"index": 5414, "name": "socket.socket.makefile", "module": "socket", "doc": ["Return a file object associated with the socket.", "The exact returned type depends on the arguments given to makefile().", "These arguments are interpreted the same way as by the built-in open() function, except the only supported mode values are 'r' (default), 'w' and 'b'.", "The socket must be in blocking mode; it can have a timeout, but the file object\u2019s internal buffer may end up in an inconsistent state if a timeout occurs.", "Closing the file object returned by makefile() won\u2019t close the original socket unless all other file objects have been closed and socket.close() has been called on the socket object."]}
{"index": 5415, "name": "socket.socket.recv", "module": "socket", "doc": ["Receive data from the socket.", "The return value is a bytes object representing the data received.", "The maximum amount of data to be received at once is specified by bufsize.", "See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero."]}
{"index": 5416, "name": "socket.socket.recvfrom", "module": "socket", "doc": ["Receive data from the socket.", "The return value is a pair (bytes, address) where bytes is a bytes object representing the data received and address is the address of the socket sending the data.", "See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.", "(The format of address depends on the address family \u2014 see above.)"]}
{"index": 5417, "name": "socket.socket.recvmsg", "module": "socket", "doc": ["Receive normal data (up to bufsize bytes) and ancillary data from the socket.", "The ancbufsize argument sets the size in bytes of the internal buffer used to receive the ancillary data; it defaults to 0, meaning that no ancillary data will be received.", "Appropriate buffer sizes for ancillary data can be calculated using CMSG_SPACE() or CMSG_LEN(), and items which do not fit into the buffer might be truncated or discarded.", "The flags argument defaults to 0 and has the same meaning as for recv().", "The return value is a 4-tuple: (data, ancdata, msg_flags, address).", "The data item is a bytes object holding the non-ancillary data received.", "The ancdata item is a list of zero or more tuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary data (control messages) received: cmsg_level and cmsg_type are integers specifying the protocol level and protocol-specific type respectively, and cmsg_data is a bytes object holding the associated data.", "The msg_flags item is the bitwise OR of various flags indicating conditions on the received message; see your system documentation for details.", "If the receiving socket is unconnected, address is the address of the sending socket, if available; otherwise, its value is unspecified.", "On some systems, sendmsg() and recvmsg() can be used to pass file descriptors between processes over an AF_UNIX socket.", "When this facility is used (it is often restricted to SOCK_STREAM sockets), recvmsg() will return, in its ancillary data, items of the form (socket.SOL_SOCKET, socket.SCM_RIGHTS, fds), where fds is a bytes object representing the new file descriptors as a binary array of the native C int type.", "If recvmsg() raises an exception after the system call returns, it will first attempt to close any file descriptors received via this mechanism.", "Some systems do not indicate the truncated length of ancillary data items which have been only partially received.", "If an item appears to extend beyond the end of the buffer, recvmsg() will issue a RuntimeWarning, and will return the part of it which is inside the buffer provided it has not been truncated before the start of its associated data.", "On systems which support the SCM_RIGHTS mechanism, the following function will receive up to maxfds file descriptors, returning the message data and a list containing the descriptors (while ignoring unexpected conditions such as unrelated control messages being received).", "See also sendmsg().", "Availability: most Unix platforms, possibly others."]}
{"index": 5418, "name": "socket.socket.recvmsg_into", "module": "socket", "doc": ["Receive normal data and ancillary data from the socket, behaving as recvmsg() would, but scatter the non-ancillary data into a series of buffers instead of returning a new bytes object.", "The buffers argument must be an iterable of objects that export writable buffers (e.g.", "bytearray objects); these will be filled with successive chunks of the non-ancillary data until it has all been written or there are no more buffers.", "The operating system may set a limit (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.", "The ancbufsize and flags arguments have the same meaning as for recvmsg().", "The return value is a 4-tuple: (nbytes, ancdata, msg_flags, address), where nbytes is the total number of bytes of non-ancillary data written into the buffers, and ancdata, msg_flags and address are the same as for recvmsg().", "Example:", "Availability: most Unix platforms, possibly others."]}
{"index": 5419, "name": "socket.socket.recvfrom_into", "module": "socket", "doc": ["Receive data from the socket, writing it into buffer instead of creating a new bytestring.", "The return value is a pair (nbytes, address) where nbytes is the number of bytes received and address is the address of the socket sending the data.", "See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero.", "(The format of address depends on the address family \u2014 see above.)"]}
{"index": 5420, "name": "socket.socket.recv_into", "module": "socket", "doc": ["Receive up to nbytes bytes from the socket, storing the data into a buffer rather than creating a new bytestring.", "If nbytes is not specified (or 0), receive up to the size available in the given buffer.", "Returns the number of bytes received.", "See the Unix manual page recv(2) for the meaning of the optional argument flags; it defaults to zero."]}
{"index": 5421, "name": "socket.socket.send", "module": "socket", "doc": ["Send data to the socket.", "The socket must be connected to a remote socket.", "The optional flags argument has the same meaning as for recv() above.", "Returns the number of bytes sent.", "Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data.", "For further information on this topic, consult the Socket Programming HOWTO."]}
{"index": 5422, "name": "socket.socket.sendall", "module": "socket", "doc": ["Send data to the socket.", "The socket must be connected to a remote socket.", "The optional flags argument has the same meaning as for recv() above.", "Unlike send(), this method continues to send data from bytes until either all data has been sent or an error occurs.", "None is returned on success.", "On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent."]}
{"index": 5423, "name": "socket.socket.sendto", "module": "socket", "doc": ["Send data to the socket.", "The socket should not be connected to a remote socket, since the destination socket is specified by address.", "The optional flags argument has the same meaning as for recv() above.", "Return the number of bytes sent.", "(The format of address depends on the address family \u2014 see above.)"]}
{"index": 5424, "name": "socket.socket.sendmsg", "module": "socket", "doc": ["Send normal and ancillary data to the socket, gathering the non-ancillary data from a series of buffers and concatenating it into a single message.", "The buffers argument specifies the non-ancillary data as an iterable of bytes-like objects (e.g.", "bytes objects); the operating system may set a limit (sysconf() value SC_IOV_MAX) on the number of buffers that can be used.", "The ancdata argument specifies the ancillary data (control messages) as an iterable of zero or more tuples (cmsg_level, cmsg_type, cmsg_data), where cmsg_level and cmsg_type are integers specifying the protocol level and protocol-specific type respectively, and cmsg_data is a bytes-like object holding the associated data.", "Note that some systems (in particular, systems without CMSG_SPACE()) might support sending only one control message per call.", "The flags argument defaults to 0 and has the same meaning as for send().", "If address is supplied and not None, it sets a destination address for the message.", "The return value is the number of bytes of non-ancillary data sent.", "The following function sends the list of file descriptors fds over an AF_UNIX socket, on systems which support the SCM_RIGHTS mechanism.", "See also recvmsg().", "Availability: most Unix platforms, possibly others."]}
{"index": 5425, "name": "socket.socket.sendmsg_afalg", "module": "socket", "doc": ["Specialized version of sendmsg() for AF_ALG socket.", "Set mode, IV, AEAD associated data length and flags for AF_ALG socket.", "Availability: Linux >= 2.6.38."]}
{"index": 5426, "name": "socket.socket.sendfile", "module": "socket", "doc": ["Send a file until EOF is reached by using high-performance os.sendfile and return the total number of bytes which were sent.", "file must be a regular file object opened in binary mode.", "If os.sendfile is not available (e.g.", "Windows) or file is not a regular file send() will be used instead.", "offset tells from where to start reading the file.", "If specified, count is the total number of bytes to transmit as opposed to sending the file until EOF is reached.", "File position is updated on return or also in case of error in which case file.tell() can be used to figure out the number of bytes which were sent.", "The socket must be of SOCK_STREAM type.", "Non-blocking sockets are not supported."]}
{"index": 5427, "name": "socket.socket.set_inheritable", "module": "socket", "doc": ["Set the inheritable flag of the socket\u2019s file descriptor or socket\u2019s handle."]}
{"index": 5428, "name": "socket.socket.setblocking", "module": "socket", "doc": ["Set blocking or non-blocking mode of the socket: if flag is false, the socket is set to non-blocking, else to blocking mode.", "This method is a shorthand for certain settimeout() calls:"]}
{"index": 5429, "name": "socket.socket.settimeout", "module": "socket", "doc": ["Set a timeout on blocking socket operations.", "The value argument can be a nonnegative floating point number expressing seconds, or None.", "If a non-zero value is given, subsequent socket operations will raise a timeout exception if the timeout period value has elapsed before the operation has completed.", "If zero is given, the socket is put in non-blocking mode.", "If None is given, the socket is put in blocking mode.", "For further information, please consult the notes on socket timeouts."]}
{"index": 5430, "name": "id2", "module": "socket", "doc": ["Set the value of the given socket option (see the Unix manual page setsockopt(2)).", "The needed symbolic constants are defined in the socket module (SO_* etc.).", "The value can be an integer, None or a bytes-like object representing a buffer.", "In the later case it is up to the caller to ensure that the bytestring contains the proper bits (see the optional built-in module struct for a way to encode C structures as bytestrings).", "When value is set to None, optlen argument is required.", "It\u2019s equivalent to call setsockopt C function with optval=NULL and optlen=optlen."]}
{"index": 5431, "name": "socket.socket.shutdown", "module": "socket", "doc": ["Shut down one or both halves of the connection.", "If how is SHUT_RD, further receives are disallowed.", "If how is SHUT_WR, further sends are disallowed.", "If how is SHUT_RDWR, further sends and receives are disallowed."]}
{"index": 5432, "name": "socket.socket.share", "module": "socket", "doc": ["Duplicate a socket and prepare it for sharing with a target process.", "The target process must be provided with process_id.", "The resulting bytes object can then be passed to the target process using some form of interprocess communication and the socket can be recreated there using fromshare().", "Once this method has been called, it is safe to close the socket since the operating system has already duplicated it for the target process.", "Availability: Windows."]}
{"index": 5433, "name": "socket.socket.family", "module": "socket", "doc": ["The socket family."]}
{"index": 5434, "name": "socket.socket.type", "module": "socket", "doc": ["The socket type."]}
{"index": 5435, "name": "socket.socket.proto", "module": "socket", "doc": ["The socket protocol."]}
{"index": 5436, "name": "socketserver.TCPServer", "module": "socketserver", "doc": ["This uses the Internet TCP protocol, which provides for continuous streams of data between the client and server.", "If bind_and_activate is true, the constructor automatically attempts to invoke server_bind() and server_activate().", "The other parameters are passed to the BaseServer base class."]}
{"index": 5437, "name": "socketserver.UDPServer", "module": "socketserver", "doc": ["This uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit.", "The parameters are the same as for TCPServer."]}
{"index": 5438, "name": "socketserver.UnixStreamServer", "module": "socketserver", "doc": ["These more infrequently used classes are similar to the TCP and UDP classes, but use Unix domain sockets; they\u2019re not available on non-Unix platforms.", "The parameters are the same as for TCPServer."]}
{"index": 5439, "name": "socketserver.UnixDatagramServer", "module": "socketserver", "doc": ["These more infrequently used classes are similar to the TCP and UDP classes, but use Unix domain sockets; they\u2019re not available on non-Unix platforms.", "The parameters are the same as for TCPServer."]}
{"index": 5440, "name": "socketserver.ForkingMixIn", "module": "socketserver", "doc": ["Forking and threading versions of each type of server can be created using these mix-in classes.", "For instance, ThreadingUDPServer is created as follows:", "The mix-in class comes first, since it overrides a method defined in UDPServer.", "Setting the various attributes also changes the behavior of the underlying server mechanism.", "ForkingMixIn and the Forking classes mentioned below are only available on POSIX platforms that support fork().", "socketserver.ForkingMixIn.server_close() waits until all child processes complete, except if socketserver.ForkingMixIn.block_on_close attribute is false.", "socketserver.ThreadingMixIn.server_close() waits until all non-daemon threads complete, except if socketserver.ThreadingMixIn.block_on_close attribute is false.", "Use daemonic threads by setting ThreadingMixIn.daemon_threads to True to not wait until threads complete."]}
{"index": 5441, "name": "socketserver.ThreadingMixIn", "module": "socketserver", "doc": ["Forking and threading versions of each type of server can be created using these mix-in classes.", "For instance, ThreadingUDPServer is created as follows:", "The mix-in class comes first, since it overrides a method defined in UDPServer.", "Setting the various attributes also changes the behavior of the underlying server mechanism.", "ForkingMixIn and the Forking classes mentioned below are only available on POSIX platforms that support fork().", "socketserver.ForkingMixIn.server_close() waits until all child processes complete, except if socketserver.ForkingMixIn.block_on_close attribute is false.", "socketserver.ThreadingMixIn.server_close() waits until all non-daemon threads complete, except if socketserver.ThreadingMixIn.block_on_close attribute is false.", "Use daemonic threads by setting ThreadingMixIn.daemon_threads to True to not wait until threads complete."]}
{"index": 5442, "name": "socketserver.ForkingTCPServer", "module": "socketserver", "doc": ["These classes are pre-defined using the mix-in classes."]}
{"index": 5443, "name": "socketserver.ForkingUDPServer", "module": "socketserver", "doc": ["These classes are pre-defined using the mix-in classes."]}
{"index": 5444, "name": "socketserver.ThreadingTCPServer", "module": "socketserver", "doc": ["These classes are pre-defined using the mix-in classes."]}
{"index": 5445, "name": "socketserver.ThreadingUDPServer", "module": "socketserver", "doc": ["These classes are pre-defined using the mix-in classes."]}
{"index": 5446, "name": "socketserver.BaseServer", "module": "socketserver", "doc": ["This is the superclass of all Server objects in the module.", "It defines the interface, given below, but does not implement most of the methods, which is done in subclasses.", "The two parameters are stored in the respective server_address and RequestHandlerClass attributes.", "The server classes support the following class variables:", "There are various server methods that can be overridden by subclasses of base server classes like TCPServer; these methods aren\u2019t useful to external users of the server object."]}
{"index": 5447, "name": "socketserver.BaseServer.fileno", "module": "socketserver", "doc": ["Return an integer file descriptor for the socket on which the server is listening.", "This function is most commonly passed to selectors, to allow monitoring multiple servers in the same process."]}
{"index": 5448, "name": "socketserver.BaseServer.handle_request", "module": "socketserver", "doc": ["Process a single request.", "This function calls the following methods in order: get_request(), verify_request(), and process_request().", "If the user-provided handle() method of the handler class raises an exception, the server\u2019s handle_error() method will be called.", "If no request is received within timeout seconds, handle_timeout() will be called and handle_request() will return."]}
{"index": 5449, "name": "socketserver.BaseServer.serve_forever", "module": "socketserver", "doc": ["Handle requests until an explicit shutdown() request.", "Poll for shutdown every poll_interval seconds.", "Ignores the timeout attribute.", "It also calls service_actions(), which may be used by a subclass or mixin to provide actions specific to a given service.", "For example, the ForkingMixIn class uses service_actions() to clean up zombie child processes."]}
{"index": 5450, "name": "socketserver.BaseServer.service_actions", "module": "socketserver", "doc": ["This is called in the serve_forever() loop.", "This method can be overridden by subclasses or mixin classes to perform actions specific to a given service, such as cleanup actions."]}
{"index": 5451, "name": "socketserver.BaseServer.shutdown", "module": "socketserver", "doc": ["Tell the serve_forever() loop to stop and wait until it does."]}
{"index": 5452, "name": "socketserver.BaseServer.server_close", "module": "socketserver", "doc": ["Clean up the server.", "May be overridden."]}
{"index": 5453, "name": "socketserver.BaseServer.address_family", "module": "socketserver", "doc": ["The family of protocols to which the server\u2019s socket belongs.", "Common examples are socket.AF_INET and socket.AF_UNIX."]}
{"index": 5454, "name": "socketserver.BaseServer.RequestHandlerClass", "module": "socketserver", "doc": ["The user-provided request handler class; an instance of this class is created for each request."]}
{"index": 5455, "name": "socketserver.BaseServer.server_address", "module": "socketserver", "doc": ["The address on which the server is listening.", "The format of addresses varies depending on the protocol family; see the documentation for the socket module for details.", "For Internet protocols, this is a tuple containing a string giving the address, and an integer port number: ('127.0.0.1', 80), for example."]}
{"index": 5456, "name": "socketserver.BaseServer.socket", "module": "socketserver", "doc": ["The socket object on which the server will listen for incoming requests."]}
{"index": 5457, "name": "socketserver.BaseServer.allow_reuse_address", "module": "socketserver", "doc": ["Whether the server will allow the reuse of an address.", "This defaults to False, and can be set in subclasses to change the policy."]}
{"index": 5458, "name": "socketserver.BaseServer.request_queue_size", "module": "socketserver", "doc": ["The size of the request queue.", "If it takes a long time to process a single request, any requests that arrive while the server is busy are placed into a queue, up to request_queue_size requests.", "Once the queue is full, further requests from clients will get a \u201cConnection denied\u201d error.", "The default value is usually 5, but this can be overridden by subclasses."]}
{"index": 5459, "name": "socketserver.BaseServer.socket_type", "module": "socketserver", "doc": ["The type of socket used by the server; socket.SOCK_STREAM and socket.SOCK_DGRAM are two common values."]}
{"index": 5460, "name": "socketserver.BaseServer.timeout", "module": "socketserver", "doc": ["Timeout duration, measured in seconds, or None if no timeout is desired.", "If handle_request() receives no incoming requests within the timeout period, the handle_timeout() method is called."]}
{"index": 5461, "name": "socketserver.BaseServer.finish_request", "module": "socketserver", "doc": ["Actually processes the request by instantiating RequestHandlerClass and calling its handle() method."]}
{"index": 5462, "name": "socketserver.BaseServer.get_request", "module": "socketserver", "doc": ["Must accept a request from the socket, and return a 2-tuple containing the new socket object to be used to communicate with the client, and the client\u2019s address."]}
{"index": 5463, "name": "socketserver.BaseServer.handle_error", "module": "socketserver", "doc": ["This function is called if the handle() method of a RequestHandlerClass instance raises an exception.", "The default action is to print the traceback to standard error and continue handling further requests."]}
{"index": 5464, "name": "socketserver.BaseServer.handle_timeout", "module": "socketserver", "doc": ["This function is called when the timeout attribute has been set to a value other than None and the timeout period has passed with no requests being received.", "The default action for forking servers is to collect the status of any child processes that have exited, while in threading servers this method does nothing."]}
{"index": 5465, "name": "socketserver.BaseServer.process_request", "module": "socketserver", "doc": ["Calls finish_request() to create an instance of the RequestHandlerClass.", "If desired, this function can create a new process or thread to handle the request; the ForkingMixIn and ThreadingMixIn classes do this."]}
{"index": 5466, "name": "socketserver.BaseServer.server_activate", "module": "socketserver", "doc": ["Called by the server\u2019s constructor to activate the server.", "The default behavior for a TCP server just invokes listen() on the server\u2019s socket.", "May be overridden."]}
{"index": 5467, "name": "socketserver.BaseServer.server_bind", "module": "socketserver", "doc": ["Called by the server\u2019s constructor to bind the socket to the desired address.", "May be overridden."]}
{"index": 5468, "name": "socketserver.BaseServer.verify_request", "module": "socketserver", "doc": ["Must return a Boolean value; if the value is True, the request will be processed, and if it\u2019s False, the request will be denied.", "This function can be overridden to implement access controls for a server.", "The default implementation always returns True."]}
{"index": 5469, "name": "socketserver.BaseRequestHandler", "module": "socketserver", "doc": ["This is the superclass of all request handler objects.", "It defines the interface, given below.", "A concrete request handler subclass must define a new handle() method, and can override any of the other methods.", "A new instance of the subclass is created for each request."]}
{"index": 5470, "name": "socketserver.BaseRequestHandler.setup", "module": "socketserver", "doc": ["Called before the handle() method to perform any initialization actions required.", "The default implementation does nothing."]}
{"index": 5471, "name": "socketserver.BaseRequestHandler.handle", "module": "socketserver", "doc": ["This function must do all the work required to service a request.", "The default implementation does nothing.", "Several instance attributes are available to it; the request is available as self.request; the client address as self.client_address; and the server instance as self.server, in case it needs access to per-server information.", "The type of self.request is different for datagram or stream services.", "For stream services, self.request is a socket object; for datagram services, self.request is a pair of string and socket."]}
{"index": 5472, "name": "socketserver.BaseRequestHandler.finish", "module": "socketserver", "doc": ["Called after the handle() method to perform any clean-up actions required.", "The default implementation does nothing.", "If setup() raises an exception, this function will not be called."]}
{"index": 5473, "name": "socketserver.StreamRequestHandler", "module": "socketserver", "doc": ["These BaseRequestHandler subclasses override the setup() and finish() methods, and provide self.rfile and self.wfile attributes.", "The self.rfile and self.wfile attributes can be read or written, respectively, to get the request data or return data to the client.", "The rfile attributes of both classes support the io.BufferedIOBase readable interface, and DatagramRequestHandler.wfile supports the io.BufferedIOBase writable interface."]}
{"index": 5474, "name": "socketserver.DatagramRequestHandler", "module": "socketserver", "doc": ["These BaseRequestHandler subclasses override the setup() and finish() methods, and provide self.rfile and self.wfile attributes.", "The self.rfile and self.wfile attributes can be read or written, respectively, to get the request data or return data to the client.", "The rfile attributes of both classes support the io.BufferedIOBase readable interface, and DatagramRequestHandler.wfile supports the io.BufferedIOBase writable interface."]}
{"index": 5475, "name": "spwd.getspnam", "module": "spwd", "doc": ["Return the shadow password database entry for the given user name."]}
{"index": 5476, "name": "spwd.getspall", "module": "spwd", "doc": ["Return a list of all available shadow password database entries, in arbitrary order."]}
{"index": 5477, "name": "sqlite3.version", "module": "sqlite3", "doc": ["The version number of this module, as a string.", "This is not the version of the SQLite library."]}
{"index": 5478, "name": "sqlite3.version_info", "module": "sqlite3", "doc": ["The version number of this module, as a tuple of integers.", "This is not the version of the SQLite library."]}
{"index": 5479, "name": "sqlite3.sqlite_version", "module": "sqlite3", "doc": ["The version number of the run-time SQLite library, as a string."]}
{"index": 5480, "name": "sqlite3.sqlite_version_info", "module": "sqlite3", "doc": ["The version number of the run-time SQLite library, as a tuple of integers."]}
{"index": 5481, "name": "sqlite3.PARSE_DECLTYPES", "module": "sqlite3", "doc": ["This constant is meant to be used with the detect_types parameter of the connect() function.", "Setting it makes the sqlite3 module parse the declared type for each column it returns.", "It will parse out the first word of the declared type, i. e.  for \u201cinteger primary key\u201d, it will parse out \u201cinteger\u201d, or for \u201cnumber(10)\u201d it will parse out \u201cnumber\u201d.", "Then for that column, it will look into the converters dictionary and use the converter function registered for that type there."]}
{"index": 5482, "name": "sqlite3.PARSE_COLNAMES", "module": "sqlite3", "doc": ["This constant is meant to be used with the detect_types parameter of the connect() function.", "Setting this makes the SQLite interface parse the column name for each column it returns.", "It will look for a string formed [mytype] in there, and then decide that \u2018mytype\u2019 is the type of the column.", "It will try to find an entry of \u2018mytype\u2019 in the converters dictionary and then use the converter function found there to return the value.", "The column name found in Cursor.description is only the first word of the column name, i.  e. if you use something like 'as \"x [datetime]\"' in your SQL, then we will parse out everything until the first blank for the column name: the column name would simply be \u201cx\u201d."]}
{"index": 5483, "name": "sqlite3.connect", "module": "sqlite3", "doc": ["Opens a connection to the SQLite database file database.", "By default returns a Connection object, unless a custom factory is given.", "database is a path-like object giving the pathname (absolute or relative to the current  working directory) of the database file to be opened.", "You can use \":memory:\" to open a database connection to a database that resides in RAM instead of on disk.", "When a database is accessed by multiple connections, and one of the processes modifies the database, the SQLite database is locked until that transaction is committed.", "The timeout parameter specifies how long the connection should wait for the lock to go away until raising an exception.", "The default for the timeout parameter is 5.0 (five seconds).", "For the isolation_level parameter, please see the isolation_level property of Connection objects.", "SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL.", "If you want to use other types you must add support for them yourself.", "The detect_types parameter and the using custom converters registered with the module-level register_converter() function allow you to easily do that.", "detect_types defaults to 0 (i. e. off, no type detection), you can set it to any combination of PARSE_DECLTYPES and PARSE_COLNAMES to turn type detection on.", "By default, check_same_thread is True and only the creating thread may use the connection.", "If set False, the returned connection may be shared across multiple threads.", "When using multiple threads with the same connection writing operations should be serialized by the user to avoid data corruption.", "By default, the sqlite3 module uses its Connection class for the connect call.", "You can, however, subclass the Connection class and make connect() use your class instead by providing your class for the factory parameter.", "Consult the section SQLite and Python types of this manual for details.", "The sqlite3 module internally uses a statement cache to avoid SQL parsing overhead.", "If you want to explicitly set the number of statements that are cached for the connection, you can set the cached_statements parameter.", "The currently implemented default is to cache 100 statements.", "If uri is true, database is interpreted as a URI.", "This allows you to specify options.", "For example, to open a database in read-only mode you can use:", "More information about this feature, including a list of recognized options, can be found in the SQLite URI documentation."]}
{"index": 5484, "name": "sqlite3.register_converter", "module": "sqlite3", "doc": ["Registers a callable to convert a bytestring from the database into a custom Python type.", "The callable will be invoked for all database values that are of the type typename.", "Confer the parameter detect_types of the connect() function for how the type detection works.", "Note that typename and the name of the type in your query are matched in case-insensitive manner."]}
{"index": 5485, "name": "sqlite3.register_adapter", "module": "sqlite3", "doc": ["Registers a callable to convert the custom Python type type into one of SQLite\u2019s supported types.", "The callable callable accepts as single parameter the Python value, and must return a value of the following types: int, float, str or bytes."]}
{"index": 5486, "name": "sqlite3.complete_statement", "module": "sqlite3", "doc": ["Returns True if the string sql contains one or more complete SQL statements terminated by semicolons.", "It does not verify that the SQL is syntactically correct, only that there are no unclosed string literals and the statement is terminated by a semicolon.", "This can be used to build a shell for SQLite, as in the following example:"]}
{"index": 5487, "name": "sqlite3.enable_callback_tracebacks", "module": "sqlite3", "doc": ["By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc.", "If you want to debug them, you can call this function with flag set to True.", "Afterwards, you will get tracebacks from callbacks on sys.stderr.", "Use False to disable the feature again."]}
{"index": 5488, "name": "sqlite3.Connection", "module": "sqlite3", "doc": ["A SQLite database connection has the following attributes and methods:"]}
{"index": 5489, "name": "sqlite3.Connection.isolation_level", "module": "sqlite3", "doc": ["Get or set the current default isolation level.", "None for autocommit mode or one of \u201cDEFERRED\u201d, \u201cIMMEDIATE\u201d or \u201cEXCLUSIVE\u201d.", "See section Controlling Transactions for a more detailed explanation."]}
{"index": 5490, "name": "sqlite3.Connection.in_transaction", "module": "sqlite3", "doc": ["True if a transaction is active (there are uncommitted changes), False otherwise.", "Read-only attribute."]}
{"index": 5491, "name": "sqlite3.Connection.cursor", "module": "sqlite3", "doc": ["The cursor method accepts a single optional parameter factory.", "If supplied, this must be a callable returning an instance of Cursor or its subclasses."]}
{"index": 5492, "name": "sqlite3.Connection.commit", "module": "sqlite3", "doc": ["This method commits the current transaction.", "If you don\u2019t call this method, anything you did since the last call to commit() is not visible from other database connections.", "If you wonder why you don\u2019t see the data you\u2019ve written to the database, please check you didn\u2019t forget to call this method."]}
{"index": 5493, "name": "sqlite3.Connection.rollback", "module": "sqlite3", "doc": ["This method rolls back any changes to the database since the last call to commit()."]}
{"index": 5494, "name": "sqlite3.Connection.close", "module": "sqlite3", "doc": ["This closes the database connection.", "Note that this does not automatically call commit().", "If you just close your database connection without calling commit() first, your changes will be lost!"]}
{"index": 5495, "name": "sqlite3.Connection.execute", "module": "sqlite3", "doc": ["This is a nonstandard shortcut that creates a cursor object by calling the cursor() method, calls the cursor\u2019s execute() method with the parameters given, and returns the cursor."]}
{"index": 5496, "name": "sqlite3.Connection.executemany", "module": "sqlite3", "doc": ["This is a nonstandard shortcut that creates a cursor object by calling the cursor() method, calls the cursor\u2019s executemany() method with the parameters given, and returns the cursor."]}
{"index": 5497, "name": "sqlite3.Connection.executescript", "module": "sqlite3", "doc": ["This is a nonstandard shortcut that creates a cursor object by calling the cursor() method, calls the cursor\u2019s executescript() method with the given sql_script, and returns the cursor."]}
{"index": 5498, "name": "sqlite3.Connection.create_function", "module": "sqlite3", "doc": ["Creates a user-defined function that you can later use from within SQL statements under the function name name.", "num_params is the number of parameters the function accepts (if num_params is -1, the function may take any number of arguments), and func is a Python callable that is called as the SQL function.", "The function can return any of the types supported by SQLite: bytes, str, int, float and None.", "Example:"]}
{"index": 5499, "name": "sqlite3.Connection.create_aggregate", "module": "sqlite3", "doc": ["Creates a user-defined aggregate function.", "The aggregate class must implement a step method, which accepts the number of parameters num_params (if num_params is -1, the function may take any number of arguments), and a finalize method which will return the final result of the aggregate.", "The finalize method can return any of the types supported by SQLite: bytes, str, int, float and None.", "Example:"]}
{"index": 5500, "name": "sqlite3.Connection.create_collation", "module": "sqlite3", "doc": ["Creates a collation with the specified name and callable.", "The callable will be passed two string arguments.", "It should return -1 if the first is ordered lower than the second, 0 if they are ordered equal and 1 if the first is ordered higher than the second.", "Note that this controls sorting (ORDER BY in SQL) so your comparisons don\u2019t affect other SQL operations.", "Note that the callable will get its parameters as Python bytestrings, which will normally be encoded in UTF-8.", "The following example shows a custom collation that sorts \u201cthe wrong way\u201d:", "To remove a collation, call create_collation with None as callable:"]}
{"index": 5501, "name": "sqlite3.Connection.interrupt", "module": "sqlite3", "doc": ["You can call this method from a different thread to abort any queries that might be executing on the connection.", "The query will then abort and the caller will get an exception."]}
{"index": 5502, "name": "sqlite3.Connection.set_authorizer", "module": "sqlite3", "doc": ["This routine registers a callback.", "The callback is invoked for each attempt to access a column of a table in the database.", "The callback should return SQLITE_OK if access is allowed, SQLITE_DENY if the entire SQL statement should be aborted with an error and SQLITE_IGNORE if the column should be treated as a NULL value.", "These constants are available in the sqlite3 module.", "The first argument to the callback signifies what kind of operation is to be authorized.", "The second and third argument will be arguments or None depending on the first argument.", "The 4th argument is the name of the database (\u201cmain\u201d, \u201ctemp\u201d, etc.)", "if applicable.", "The 5th argument is the name of the inner-most trigger or view that is responsible for the access attempt or None if this access attempt is directly from input SQL code.", "Please consult the SQLite documentation about the possible values for the first argument and the meaning of the second and third argument depending on the first one.", "All necessary constants are available in the sqlite3 module."]}
{"index": 5503, "name": "sqlite3.Connection.set_progress_handler", "module": "sqlite3", "doc": ["This routine registers a callback.", "The callback is invoked for every n instructions of the SQLite virtual machine.", "This is useful if you want to get called from SQLite during long-running operations, for example to update a GUI.", "If you want to clear any previously installed progress handler, call the method with None for handler.", "Returning a non-zero value from the handler function will terminate the currently executing query and cause it to raise an OperationalError exception."]}
{"index": 5504, "name": "sqlite3.Connection.set_trace_callback", "module": "sqlite3", "doc": ["Registers trace_callback to be called for each SQL statement that is actually executed by the SQLite backend.", "The only argument passed to the callback is the statement (as string) that is being executed.", "The return value of the callback is ignored.", "Note that the backend does not only run statements passed to the Cursor.execute() methods.", "Other sources include the transaction management of the Python module and the execution of triggers defined in the current database.", "Passing None as trace_callback will disable the trace callback."]}
{"index": 5505, "name": "sqlite3.Connection.enable_load_extension", "module": "sqlite3", "doc": ["This routine allows/disallows the SQLite engine to load SQLite extensions from shared libraries.", "SQLite extensions can define new functions, aggregates or whole new virtual table implementations.", "One well-known extension is the fulltext-search extension distributed with SQLite.", "Loadable extensions are disabled by default.", "See 1."]}
{"index": 5506, "name": "sqlite3.Connection.load_extension", "module": "sqlite3", "doc": ["This routine loads a SQLite extension from a shared library.", "You have to enable extension loading with enable_load_extension() before you can use this routine.", "Loadable extensions are disabled by default.", "See 1."]}
{"index": 5507, "name": "sqlite3.Connection.row_factory", "module": "sqlite3", "doc": ["You can change this attribute to a callable that accepts the cursor and the original row as a tuple and will return the real result row.", "This way, you can implement more advanced ways of returning results, such  as returning an object that can also access columns by name.", "Example:", "If returning a tuple doesn\u2019t suffice and you want name-based access to columns, you should consider setting row_factory to the highly-optimized sqlite3.Row type.", "Row provides both index-based and case-insensitive name-based access to columns with almost no memory overhead.", "It will probably be better than your own custom dictionary-based approach or even a db_row based solution."]}
{"index": 5508, "name": "sqlite3.Connection.text_factory", "module": "sqlite3", "doc": ["Using this attribute you can control what objects are returned for the TEXT data type.", "By default, this attribute is set to str and the sqlite3 module will return Unicode objects for TEXT.", "If you want to return bytestrings instead, you can set it to bytes.", "You can also set it to any other callable that accepts a single bytestring parameter and returns the resulting object.", "See the following example code for illustration:"]}
{"index": 5509, "name": "sqlite3.Connection.total_changes", "module": "sqlite3", "doc": ["Returns the total number of database rows that have been modified, inserted, or deleted since the database connection was opened."]}
{"index": 5510, "name": "sqlite3.Connection.iterdump", "module": "sqlite3", "doc": ["Returns an iterator to dump the database in an SQL text format.", "Useful when saving an in-memory database for later restoration.", "This function provides the same capabilities as the .dump command in the sqlite3 shell.", "Example:"]}
{"index": 5511, "name": "sqlite3.Connection.backup", "module": "sqlite3", "doc": ["This method makes a backup of a SQLite database even while it\u2019s being accessed by other clients, or concurrently by the same connection.", "The copy will be written into the mandatory argument target, that must be another Connection instance.", "By default, or when pages is either 0 or a negative integer, the entire database is copied in a single step; otherwise the method performs a loop copying up to pages pages at a time.", "If progress is specified, it must either be None or a callable object that will be executed at each iteration with three integer arguments, respectively the status of the last iteration, the remaining number of pages still to be copied and the total number of pages.", "The name argument specifies the database name that will be copied: it must be a string containing either \"main\", the default, to indicate the main database, \"temp\" to indicate the temporary database or the name specified after the AS keyword in an ATTACH DATABASE statement for an attached database.", "The sleep argument specifies the number of seconds to sleep by between successive attempts to backup remaining pages, can be specified either as an integer or a floating point value.", "Example 1, copy an existing database into another:", "Example 2, copy an existing database into a transient copy:", "Availability: SQLite 3.6.11 or higher"]}
{"index": 5512, "name": "sqlite3.Cursor", "module": "sqlite3", "doc": ["A Cursor instance has the following attributes and methods."]}
{"index": 5513, "name": "sqlite3.Cursor.execute", "module": "sqlite3", "doc": ["Executes an SQL statement.", "The SQL statement may be parameterized (i. e. placeholders instead of SQL literals).", "The sqlite3 module supports two kinds of placeholders: question marks (qmark style) and named placeholders (named style).", "Here\u2019s an example of both styles:", "execute() will only execute a single SQL statement.", "If you try to execute more than one statement with it, it will raise a Warning.", "Use executescript() if you want to execute multiple SQL statements with one call."]}
{"index": 5514, "name": "sqlite3.Cursor.executemany", "module": "sqlite3", "doc": ["Executes an SQL command against all parameter sequences or mappings found in the sequence seq_of_parameters.", "The sqlite3 module also allows using an iterator yielding parameters instead of a sequence.", "Here\u2019s a shorter example using a generator:"]}
{"index": 5515, "name": "sqlite3.Cursor.executescript", "module": "sqlite3", "doc": ["This is a nonstandard convenience method for executing multiple SQL statements at once.", "It issues a COMMIT statement first, then executes the SQL script it gets as a parameter.", "sql_script can be an instance of str.", "Example:"]}
{"index": 5516, "name": "sqlite3.Cursor.fetchone", "module": "sqlite3", "doc": ["Fetches the next row of a query result set, returning a single sequence, or None when no more data is available."]}
{"index": 5517, "name": "sqlite3.Cursor.fetchmany", "module": "sqlite3", "doc": ["Fetches the next set of rows of a query result, returning a list.", "An empty list is returned when no more rows are available.", "The number of rows to fetch per call is specified by the size parameter.", "If it is not given, the cursor\u2019s arraysize determines the number of rows to be fetched.", "The method should try to fetch as many rows as indicated by the size parameter.", "If this is not possible due to the specified number of rows not being available, fewer rows may be returned.", "Note there are performance considerations involved with the size parameter.", "For optimal performance, it is usually best to use the arraysize attribute.", "If the size parameter is used, then it is best for it to retain the same value from one fetchmany() call to the next."]}
{"index": 5518, "name": "sqlite3.Cursor.fetchall", "module": "sqlite3", "doc": ["Fetches all (remaining) rows of a query result, returning a list.", "Note that the cursor\u2019s arraysize attribute can affect the performance of this operation.", "An empty list is returned when no rows are available."]}
{"index": 5519, "name": "sqlite3.Cursor.close", "module": "sqlite3", "doc": ["Close the cursor now (rather than whenever __del__ is called).", "The cursor will be unusable from this point forward; a ProgrammingError exception will be raised if any operation is attempted with the cursor."]}
{"index": 5520, "name": "sqlite3.Cursor.rowcount", "module": "sqlite3", "doc": ["Although the Cursor class of the sqlite3 module implements this attribute, the database engine\u2019s own support for the determination of \u201crows affected\u201d/\u201drows selected\u201d is quirky.", "For executemany() statements, the number of modifications are summed up into rowcount.", "As required by the Python DB API Spec, the rowcount attribute \u201cis -1 in case no executeXX() has been performed on the cursor or the rowcount of the last operation is not determinable by the interface\u201d.", "This includes SELECT statements because we cannot determine the number of rows a query produced until all rows were fetched.", "With SQLite versions before 3.6.5, rowcount is set to 0 if you make a DELETE FROM table without any condition."]}
{"index": 5521, "name": "sqlite3.Cursor.lastrowid", "module": "sqlite3", "doc": ["This read-only attribute provides the rowid of the last modified row.", "It is only set if you issued an INSERT or a REPLACE statement using the execute() method.", "For operations other than INSERT or REPLACE or when executemany() is called, lastrowid is set to None.", "If the INSERT or REPLACE statement failed to insert the previous successful rowid is returned."]}
{"index": 5522, "name": "sqlite3.Cursor.arraysize", "module": "sqlite3", "doc": ["Read/write attribute that controls the number of rows returned by fetchmany().", "The default value is 1 which means a single row would be fetched per call."]}
{"index": 5523, "name": "sqlite3.Cursor.description", "module": "sqlite3", "doc": ["This read-only attribute provides the column names of the last query.", "To remain compatible with the Python DB API, it returns a 7-tuple for each column where the last six items of each tuple are None.", "It is set for SELECT statements without any matching rows as well."]}
{"index": 5524, "name": "sqlite3.Cursor.connection", "module": "sqlite3", "doc": ["This read-only attribute provides the SQLite database Connection used by the Cursor object.", "A Cursor object created by calling con.cursor() will have a connection attribute that refers to con:"]}
{"index": 5525, "name": "sqlite3.Row", "module": "sqlite3", "doc": ["A Row instance serves as a highly optimized row_factory for Connection objects.", "It tries to mimic a tuple in most of its features.", "It supports mapping access by column name and index, iteration, representation, equality testing and len().", "If two Row objects have exactly the same columns and their members are equal, they compare equal."]}
{"index": 5526, "name": "sqlite3.Row.keys", "module": "sqlite3", "doc": ["This method returns a list of column names.", "Immediately after a query, it is the first member of each tuple in Cursor.description."]}
{"index": 5527, "name": "sqlite3.Warning", "module": "sqlite3", "doc": ["A subclass of Exception."]}
{"index": 5528, "name": "sqlite3.Error", "module": "sqlite3", "doc": ["The base class of the other exceptions in this module.", "It is a subclass of Exception."]}
{"index": 5529, "name": "sqlite3.DatabaseError", "module": "sqlite3", "doc": ["Exception raised for errors that are related to the database."]}
{"index": 5530, "name": "sqlite3.IntegrityError", "module": "sqlite3", "doc": ["Exception raised when the relational integrity of the database is affected, e.g.", "a foreign key check fails.", "It is a subclass of DatabaseError."]}
{"index": 5531, "name": "sqlite3.ProgrammingError", "module": "sqlite3", "doc": ["Exception raised for programming errors, e.g.", "table not found or already exists, syntax error in the SQL statement, wrong number of parameters specified, etc.", "It is a subclass of DatabaseError."]}
{"index": 5532, "name": "sqlite3.OperationalError", "module": "sqlite3", "doc": ["Exception raised for errors that are related to the database\u2019s operation and not necessarily under the control of the programmer, e.g.", "an unexpected disconnect occurs, the data source name is not found, a transaction could not be processed, etc.", "It is a subclass of DatabaseError."]}
{"index": 5533, "name": "sqlite3.NotSupportedError", "module": "sqlite3", "doc": ["Exception raised in case a method or database API was used which is not supported by the database, e.g.", "calling the rollback() method on a connection that does not support transaction or has transactions turned off.", "It is a subclass of DatabaseError."]}
{"index": 5534, "name": "f1", "module": "sqlite3", "doc": ["The sqlite3 module is not built with loadable extension support by default, because some platforms (notably Mac OS X) have SQLite libraries which are compiled without this feature.", "To get loadable extension support, you must pass \u2013enable-loadable-sqlite-extensions to configure."]}
{"index": 5535, "name": "ssl.create_default_context", "module": "ssl", "doc": ["Return a new SSLContext object with default settings for the given purpose.", "The settings are chosen by the ssl module, and usually represent a higher security level than when calling the SSLContext constructor directly.", "cafile, capath, cadata represent optional CA certificates to trust for certificate verification, as in SSLContext.load_verify_locations().", "If all three are None, this function can choose to trust the system\u2019s default CA certificates instead.", "The settings are: PROTOCOL_TLS, OP_NO_SSLv2, and OP_NO_SSLv3 with high encryption cipher suites without RC4 and without unauthenticated cipher suites.", "Passing SERVER_AUTH as purpose sets verify_mode to CERT_REQUIRED and either loads CA certificates (when at least one of cafile, capath or cadata is given) or uses SSLContext.load_default_certs() to load default CA certificates."]}
{"index": 5536, "name": "ssl.SSLError", "module": "ssl", "doc": ["Raised to signal an error from the underlying SSL implementation (currently provided by the OpenSSL library).", "This signifies some problem in the higher-level encryption and authentication layer that\u2019s superimposed on the underlying network connection.", "This error is a subtype of OSError.", "The error code and message of SSLError instances are provided by the OpenSSL library."]}
{"index": 5537, "name": "ssl.SSLError.library", "module": "ssl", "doc": ["A string mnemonic designating the OpenSSL submodule in which the error occurred, such as SSL, PEM or X509.", "The range of possible values depends on the OpenSSL version."]}
{"index": 5538, "name": "ssl.SSLError.reason", "module": "ssl", "doc": ["A string mnemonic designating the reason this error occurred, for example CERTIFICATE_VERIFY_FAILED.", "The range of possible values depends on the OpenSSL version."]}
{"index": 5539, "name": "ssl.SSLZeroReturnError", "module": "ssl", "doc": ["A subclass of SSLError raised when trying to read or write and the SSL connection has been closed cleanly.", "Note that this doesn\u2019t mean that the underlying transport (read TCP) has been closed."]}
{"index": 5540, "name": "ssl.SSLWantReadError", "module": "ssl", "doc": ["A subclass of SSLError raised by a non-blocking SSL socket when trying to read or write data, but more data needs to be received on the underlying TCP transport before the request can be fulfilled."]}
{"index": 5541, "name": "ssl.SSLWantWriteError", "module": "ssl", "doc": ["A subclass of SSLError raised by a non-blocking SSL socket when trying to read or write data, but more data needs to be sent on the underlying TCP transport before the request can be fulfilled."]}
{"index": 5542, "name": "ssl.SSLSyscallError", "module": "ssl", "doc": ["A subclass of SSLError raised when a system error was encountered while trying to fulfill an operation on a SSL socket.", "Unfortunately, there is no easy way to inspect the original errno number."]}
{"index": 5543, "name": "ssl.SSLEOFError", "module": "ssl", "doc": ["A subclass of SSLError raised when the SSL connection has been terminated abruptly.", "Generally, you shouldn\u2019t try to reuse the underlying transport when this error is encountered."]}
{"index": 5544, "name": "ssl.SSLCertVerificationError", "module": "ssl", "doc": ["A subclass of SSLError raised when certificate validation has failed."]}
{"index": 5545, "name": "ssl.SSLCertVerificationError.verify_code", "module": "ssl", "doc": ["A numeric error number that denotes the verification error."]}
{"index": 5546, "name": "ssl.SSLCertVerificationError.verify_message", "module": "ssl", "doc": ["A human readable string of the verification error."]}
{"index": 5547, "name": "ssl.CertificateError", "module": "ssl", "doc": ["An alias for SSLCertVerificationError."]}
{"index": 5548, "name": "ssl.RAND_bytes", "module": "ssl", "doc": ["Return num cryptographically strong pseudo-random bytes.", "Raises an SSLError if the PRNG has not been seeded with enough data or if the operation is not supported by the current RAND method.", "RAND_status() can be used to check the status of the PRNG and RAND_add() can be used to seed the PRNG.", "For almost all applications os.urandom() is preferable.", "Read the Wikipedia article, Cryptographically secure pseudorandom number generator (CSPRNG), to get the requirements of a cryptographically generator."]}
{"index": 5549, "name": "ssl.RAND_pseudo_bytes", "module": "ssl", "doc": ["Return (bytes, is_cryptographic): bytes are num pseudo-random bytes, is_cryptographic is True if the bytes generated are cryptographically strong.", "Raises an SSLError if the operation is not supported by the current RAND method.", "Generated pseudo-random byte sequences will be unique if they are of sufficient length, but are not necessarily unpredictable.", "They can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc.", "For almost all applications os.urandom() is preferable."]}
{"index": 5550, "name": "ssl.RAND_status", "module": "ssl", "doc": ["Return True if the SSL pseudo-random number generator has been seeded with \u2018enough\u2019 randomness, and False otherwise.", "You can use ssl.RAND_egd() and ssl.RAND_add() to increase the randomness of the pseudo-random number generator."]}
{"index": 5551, "name": "ssl.RAND_egd", "module": "ssl", "doc": ["If you are running an entropy-gathering daemon (EGD) somewhere, and path is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys.", "This is typically only necessary on systems without better sources of randomness.", "See http://egd.sourceforge.net/ or http://prngd.sourceforge.net/ for sources of entropy-gathering daemons.", "Availability: not available with LibreSSL and OpenSSL > 1.1.0."]}
{"index": 5552, "name": "ssl.RAND_add", "module": "ssl", "doc": ["Mix the given bytes into the SSL pseudo-random number generator.", "The parameter entropy (a float) is a lower bound on the entropy contained in string (so you can always use 0.0).", "See RFC 1750 for more information on sources of entropy."]}
{"index": 5553, "name": "ssl.match_hostname", "module": "ssl", "doc": ["Verify that cert (in decoded format as returned by SSLSocket.getpeercert()) matches the given hostname.", "The rules applied are those for checking the identity of HTTPS servers as outlined in RFC 2818, RFC 5280 and RFC 6125.", "In addition to HTTPS, this function should be suitable for checking the identity of servers in various SSL-based protocols such as FTPS, IMAPS, POPS and others.", "CertificateError is raised on failure.", "On success, the function returns nothing:"]}
{"index": 5554, "name": "ssl.cert_time_to_seconds", "module": "ssl", "doc": ["Return the time in seconds since the Epoch, given the cert_time string representing the \u201cnotBefore\u201d or \u201cnotAfter\u201d date from a certificate in \"%b %d %H:%M:%S %Y %Z\" strptime format (C locale).", "Here\u2019s an example:", "\u201cnotBefore\u201d or \u201cnotAfter\u201d dates must use GMT (RFC 5280)."]}
{"index": 5555, "name": "ssl.get_server_certificate", "module": "ssl", "doc": ["Given the address addr of an SSL-protected server, as a (hostname, port-number) pair, fetches the server\u2019s certificate, and returns it as a PEM-encoded string.", "If ssl_version is specified, uses that version of the SSL protocol to attempt to connect to the server.", "If ca_certs is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in SSLContext.wrap_socket().", "The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails."]}
{"index": 5556, "name": "ssl.DER_cert_to_PEM_cert", "module": "ssl", "doc": ["Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate."]}
{"index": 5557, "name": "ssl.PEM_cert_to_DER_cert", "module": "ssl", "doc": ["Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate."]}
{"index": 5558, "name": "ssl.get_default_verify_paths", "module": "ssl", "doc": ["Returns a named tuple with paths to OpenSSL\u2019s default cafile and capath.", "The paths are the same as used by SSLContext.set_default_verify_paths().", "The return value is a named tuple DefaultVerifyPaths:", "Availability: LibreSSL ignores the environment vars openssl_cafile_env and openssl_capath_env."]}
{"index": 5559, "name": "ssl.enum_certificates", "module": "ssl", "doc": ["Retrieve certificates from Windows\u2019 system cert store.", "store_name may be one of CA, ROOT or MY.", "Windows may provide additional cert stores, too.", "The function returns a list of (cert_bytes, encoding_type, trust) tuples.", "The encoding_type specifies the encoding of cert_bytes.", "It is either x509_asn for X.509 ASN.1 data or pkcs_7_asn for PKCS#7 ASN.1 data.", "Trust specifies the purpose of the certificate as a set of OIDS or exactly True if the certificate is trustworthy for all purposes.", "Example:", "Availability: Windows."]}
{"index": 5560, "name": "ssl.enum_crls", "module": "ssl", "doc": ["Retrieve CRLs from Windows\u2019 system cert store.", "store_name may be one of CA, ROOT or MY.", "Windows may provide additional cert stores, too.", "The function returns a list of (cert_bytes, encoding_type, trust) tuples.", "The encoding_type specifies the encoding of cert_bytes.", "It is either x509_asn for X.509 ASN.1 data or pkcs_7_asn for PKCS#7 ASN.1 data.", "Availability: Windows."]}
{"index": 5561, "name": "ssl.wrap_socket", "module": "ssl", "doc": ["Takes an instance sock of socket.socket, and returns an instance of ssl.SSLSocket, a subtype of socket.socket, which wraps the underlying socket in an SSL context.", "sock must be a SOCK_STREAM socket; other socket types are unsupported.", "Internally, function creates a SSLContext with protocol ssl_version and SSLContext.options set to cert_reqs.", "If parameters keyfile, certfile, ca_certs or ciphers are set, then the values are passed to SSLContext.load_cert_chain(), SSLContext.load_verify_locations(), and SSLContext.set_ciphers().", "The arguments server_side, do_handshake_on_connect, and suppress_ragged_eofs have the same meaning as SSLContext.wrap_socket()."]}
{"index": 5562, "name": "ssl.CERT_NONE", "module": "ssl", "doc": ["Possible value for SSLContext.verify_mode, or the cert_reqs parameter to wrap_socket().", "Except for PROTOCOL_TLS_CLIENT, it is the default mode.", "With client-side sockets, just about any cert is accepted.", "Validation errors, such as untrusted or expired cert, are ignored and do not abort the TLS/SSL handshake.", "In server mode, no certificate is requested from the client, so the client does not send any for client cert authentication.", "See the discussion of Security considerations below."]}
{"index": 5563, "name": "ssl.CERT_OPTIONAL", "module": "ssl", "doc": ["Possible value for SSLContext.verify_mode, or the cert_reqs parameter to wrap_socket().", "In client mode, CERT_OPTIONAL has the same meaning as CERT_REQUIRED.", "It is recommended to use CERT_REQUIRED for client-side sockets instead.", "In server mode, a client certificate request is sent to the client.", "The client may either ignore the request or send a certificate in order perform TLS client cert authentication.", "If the client chooses to send a certificate, it is verified.", "Any verification error immediately aborts the TLS handshake.", "Use of this setting requires a valid set of CA certificates to be passed, either to SSLContext.load_verify_locations() or as a value of the ca_certs parameter to wrap_socket()."]}
{"index": 5564, "name": "ssl.CERT_REQUIRED", "module": "ssl", "doc": ["Possible value for SSLContext.verify_mode, or the cert_reqs parameter to wrap_socket().", "In this mode, certificates are required from the other side of the socket connection; an SSLError will be raised if no certificate is provided, or if its validation fails.", "This mode is not sufficient to verify a certificate in client mode as it does not match hostnames.", "check_hostname must be enabled as well to verify the authenticity of a cert.", "PROTOCOL_TLS_CLIENT uses CERT_REQUIRED and enables check_hostname by default.", "With server socket, this mode provides mandatory TLS client cert authentication.", "A client certificate request is sent to the client and the client must provide a valid and trusted certificate.", "Use of this setting requires a valid set of CA certificates to be passed, either to SSLContext.load_verify_locations() or as a value of the ca_certs parameter to wrap_socket()."]}
{"index": 5565, "name": "ssl.VerifyMode", "module": "ssl", "doc": ["enum.IntEnum collection of CERT_* constants."]}
{"index": 5566, "name": "ssl.VERIFY_DEFAULT", "module": "ssl", "doc": ["Possible value for SSLContext.verify_flags.", "In this mode, certificate revocation lists (CRLs) are not checked.", "By default OpenSSL does neither require nor verify CRLs."]}
{"index": 5567, "name": "ssl.VERIFY_CRL_CHECK_LEAF", "module": "ssl", "doc": ["Possible value for SSLContext.verify_flags.", "In this mode, only the peer cert is checked but none of the intermediate CA certificates.", "The mode requires a valid CRL that is signed by the peer cert\u2019s issuer (its direct ancestor CA).", "If no proper CRL has has been loaded with SSLContext.load_verify_locations, validation will fail."]}
{"index": 5568, "name": "ssl.VERIFY_CRL_CHECK_CHAIN", "module": "ssl", "doc": ["Possible value for SSLContext.verify_flags.", "In this mode, CRLs of all certificates in the peer cert chain are checked."]}
{"index": 5569, "name": "ssl.VERIFY_X509_STRICT", "module": "ssl", "doc": ["Possible value for SSLContext.verify_flags to disable workarounds for broken X.509 certificates."]}
{"index": 5570, "name": "ssl.VERIFY_X509_TRUSTED_FIRST", "module": "ssl", "doc": ["Possible value for SSLContext.verify_flags.", "It instructs OpenSSL to prefer trusted certificates when building the trust chain to validate a certificate.", "This flag is enabled by default."]}
{"index": 5571, "name": "ssl.VerifyFlags", "module": "ssl", "doc": ["enum.IntFlag collection of VERIFY_* constants."]}
{"index": 5572, "name": "ssl.PROTOCOL_TLS", "module": "ssl", "doc": ["Selects the highest protocol version that both the client and server support.", "Despite the name, this option can select both \u201cSSL\u201d and \u201cTLS\u201d protocols."]}
{"index": 5573, "name": "ssl.PROTOCOL_TLS_CLIENT", "module": "ssl", "doc": ["Auto-negotiate the highest protocol version like PROTOCOL_TLS, but only support client-side SSLSocket connections.", "The protocol enables CERT_REQUIRED and check_hostname by default."]}
{"index": 5574, "name": "ssl.PROTOCOL_TLS_SERVER", "module": "ssl", "doc": ["Auto-negotiate the highest protocol version like PROTOCOL_TLS, but only support server-side SSLSocket connections."]}
{"index": 5575, "name": "ssl.PROTOCOL_SSLv23", "module": "ssl", "doc": ["Alias for PROTOCOL_TLS."]}
{"index": 5576, "name": "ssl.PROTOCOL_SSLv2", "module": "ssl", "doc": ["Selects SSL version 2 as the channel encryption protocol.", "This protocol is not available if OpenSSL is compiled with the OPENSSL_NO_SSL2 flag."]}
{"index": 5577, "name": "ssl.PROTOCOL_SSLv3", "module": "ssl", "doc": ["Selects SSL version 3 as the channel encryption protocol.", "This protocol is not be available if OpenSSL is compiled with the OPENSSL_NO_SSLv3 flag."]}
{"index": 5578, "name": "ssl.PROTOCOL_TLSv1", "module": "ssl", "doc": ["Selects TLS version 1.0 as the channel encryption protocol."]}
{"index": 5579, "name": "ssl.PROTOCOL_TLSv1_1", "module": "ssl", "doc": ["Selects TLS version 1.1 as the channel encryption protocol.", "Available only with openssl version 1.0.1+."]}
{"index": 5580, "name": "ssl.PROTOCOL_TLSv1_2", "module": "ssl", "doc": ["Selects TLS version 1.2 as the channel encryption protocol.", "This is the most modern version, and probably the best choice for maximum protection, if both sides can speak it.", "Available only with openssl version 1.0.1+."]}
{"index": 5581, "name": "ssl.OP_ALL", "module": "ssl", "doc": ["Enables workarounds for various bugs present in other SSL implementations.", "This option is set by default.", "It does not necessarily set the same flags as OpenSSL\u2019s SSL_OP_ALL constant."]}
{"index": 5582, "name": "ssl.OP_NO_SSLv2", "module": "ssl", "doc": ["Prevents an SSLv2 connection.", "This option is only applicable in conjunction with PROTOCOL_TLS.", "It prevents the peers from choosing SSLv2 as the protocol version."]}
{"index": 5583, "name": "ssl.OP_NO_SSLv3", "module": "ssl", "doc": ["Prevents an SSLv3 connection.", "This option is only applicable in conjunction with PROTOCOL_TLS.", "It prevents the peers from choosing SSLv3 as the protocol version."]}
{"index": 5584, "name": "ssl.OP_NO_TLSv1", "module": "ssl", "doc": ["Prevents a TLSv1 connection.", "This option is only applicable in conjunction with PROTOCOL_TLS.", "It prevents the peers from choosing TLSv1 as the protocol version."]}
{"index": 5585, "name": "ssl.OP_NO_TLSv1_1", "module": "ssl", "doc": ["Prevents a TLSv1.1 connection.", "This option is only applicable in conjunction with PROTOCOL_TLS.", "It prevents the peers from choosing TLSv1.1 as the protocol version.", "Available only with openssl version 1.0.1+."]}
{"index": 5586, "name": "ssl.OP_NO_TLSv1_2", "module": "ssl", "doc": ["Prevents a TLSv1.2 connection.", "This option is only applicable in conjunction with PROTOCOL_TLS.", "It prevents the peers from choosing TLSv1.2 as the protocol version.", "Available only with openssl version 1.0.1+."]}
{"index": 5587, "name": "ssl.OP_NO_TLSv1_3", "module": "ssl", "doc": ["Prevents a TLSv1.3 connection.", "This option is only applicable in conjunction with PROTOCOL_TLS.", "It prevents the peers from choosing TLSv1.3 as the protocol version.", "TLS 1.3 is available with OpenSSL 1.1.1 or later.", "When Python has been compiled against an older version of OpenSSL, the flag defaults to 0."]}
{"index": 5588, "name": "ssl.OP_NO_RENEGOTIATION", "module": "ssl", "doc": ["Disable all renegotiation in TLSv1.2 and earlier.", "Do not send HelloRequest messages, and ignore renegotiation requests via ClientHello.", "This option is only available with OpenSSL 1.1.0h and later."]}
{"index": 5589, "name": "ssl.OP_CIPHER_SERVER_PREFERENCE", "module": "ssl", "doc": ["Use the server\u2019s cipher ordering preference, rather than the client\u2019s.", "This option has no effect on client sockets and SSLv2 server sockets."]}
{"index": 5590, "name": "ssl.OP_SINGLE_DH_USE", "module": "ssl", "doc": ["Prevents re-use of the same DH key for distinct SSL sessions.", "This improves forward secrecy but requires more computational resources.", "This option only applies to server sockets."]}
{"index": 5591, "name": "ssl.OP_SINGLE_ECDH_USE", "module": "ssl", "doc": ["Prevents re-use of the same ECDH key for distinct SSL sessions.", "This improves forward secrecy but requires more computational resources.", "This option only applies to server sockets."]}
{"index": 5592, "name": "ssl.OP_ENABLE_MIDDLEBOX_COMPAT", "module": "ssl", "doc": ["Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.", "This option is only available with OpenSSL 1.1.1 and later."]}
{"index": 5593, "name": "ssl.OP_NO_COMPRESSION", "module": "ssl", "doc": ["Disable compression on the SSL channel.", "This is useful if the application protocol supports its own compression scheme.", "This option is only available with OpenSSL 1.0.0 and later."]}
{"index": 5594, "name": "ssl.Options", "module": "ssl", "doc": ["enum.IntFlag collection of OP_* constants."]}
{"index": 5595, "name": "ssl.OP_NO_TICKET", "module": "ssl", "doc": ["Prevent client side from requesting a session ticket."]}
{"index": 5596, "name": "ssl.HAS_ALPN", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the Application-Layer Protocol Negotiation TLS extension as described in RFC 7301."]}
{"index": 5597, "name": "ssl.HAS_NEVER_CHECK_COMMON_NAME", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support not checking subject common name and SSLContext.hostname_checks_common_name is writeable."]}
{"index": 5598, "name": "ssl.HAS_ECDH", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the Elliptic Curve-based Diffie-Hellman key exchange.", "This should be true unless the feature was explicitly disabled by the distributor."]}
{"index": 5599, "name": "ssl.HAS_SNI", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the Server Name Indication extension (as defined in RFC 6066)."]}
{"index": 5600, "name": "ssl.HAS_NPN", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the Next Protocol Negotiation as described in the Application Layer Protocol Negotiation.", "When true, you can use the SSLContext.set_npn_protocols() method to advertise which protocols you want to support."]}
{"index": 5601, "name": "ssl.HAS_SSLv2", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the SSL 2.0 protocol."]}
{"index": 5602, "name": "ssl.HAS_SSLv3", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the SSL 3.0 protocol."]}
{"index": 5603, "name": "ssl.HAS_TLSv1", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the TLS 1.0 protocol."]}
{"index": 5604, "name": "ssl.HAS_TLSv1_1", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the TLS 1.1 protocol."]}
{"index": 5605, "name": "ssl.HAS_TLSv1_2", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the TLS 1.2 protocol."]}
{"index": 5606, "name": "ssl.HAS_TLSv1_3", "module": "ssl", "doc": ["Whether the OpenSSL library has built-in support for the TLS 1.3 protocol."]}
{"index": 5607, "name": "ssl.CHANNEL_BINDING_TYPES", "module": "ssl", "doc": ["List of supported TLS channel binding types.", "Strings in this list can be used as arguments to SSLSocket.get_channel_binding()."]}
{"index": 5608, "name": "ssl.OPENSSL_VERSION", "module": "ssl", "doc": ["The version string of the OpenSSL library loaded by the interpreter:"]}
{"index": 5609, "name": "ssl.OPENSSL_VERSION_INFO", "module": "ssl", "doc": ["A tuple of five integers representing version information about the OpenSSL library:"]}
{"index": 5610, "name": "ssl.OPENSSL_VERSION_NUMBER", "module": "ssl", "doc": ["The raw version number of the OpenSSL library, as a single integer:"]}
{"index": 5611, "name": "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE", "module": "ssl", "doc": ["Alert Descriptions from RFC 5246 and others.", "The IANA TLS Alert Registry contains this list and references to the RFCs where their meaning is defined.", "Used as the return value of the callback function in SSLContext.set_servername_callback()."]}
{"index": 5612, "name": "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR", "module": "ssl", "doc": ["Alert Descriptions from RFC 5246 and others.", "The IANA TLS Alert Registry contains this list and references to the RFCs where their meaning is defined.", "Used as the return value of the callback function in SSLContext.set_servername_callback()."]}
{"index": 5613, "name": "ssl.AlertDescription", "module": "ssl", "doc": ["enum.IntEnum collection of ALERT_DESCRIPTION_* constants."]}
{"index": 5614, "name": "ssl.Purpose.SERVER_AUTH", "module": "ssl", "doc": ["Option for create_default_context() and SSLContext.load_default_certs().", "This value indicates that the context may be used to authenticate Web servers (therefore, it will be used to create client-side sockets)."]}
{"index": 5615, "name": "ssl.Purpose.CLIENT_AUTH", "module": "ssl", "doc": ["Option for create_default_context() and SSLContext.load_default_certs().", "This value indicates that the context may be used to authenticate Web clients (therefore, it will be used to create server-side sockets)."]}
{"index": 5616, "name": "ssl.SSLErrorNumber", "module": "ssl", "doc": ["enum.IntEnum collection of SSL_ERROR_* constants."]}
{"index": 5617, "name": "ssl.TLSVersion", "module": "ssl", "doc": ["enum.IntEnum collection of SSL and TLS versions for SSLContext.maximum_version and SSLContext.minimum_version."]}
{"index": 5618, "name": "ssl.TLSVersion.MAXIMUM_SUPPORTED", "module": "ssl", "doc": ["The minimum or maximum supported SSL or TLS version.", "These are magic constants.", "Their values don\u2019t reflect the lowest and highest available TLS/SSL versions."]}
{"index": 5619, "name": "ssl.TLSVersion.TLSv1_3", "module": "ssl", "doc": ["SSL 3.0 to TLS 1.3."]}
{"index": 5620, "name": "ssl.SSLSocket", "module": "ssl", "doc": ["SSL sockets provide the following methods of Socket Objects:", "However, since the SSL (and TLS) protocol has its own framing atop of TCP, the SSL sockets abstraction can, in certain respects, diverge from the specification of normal, OS-level sockets.", "See especially the notes on non-blocking sockets.", "Instances of SSLSocket must be created using the SSLContext.wrap_socket() method."]}
{"index": 5621, "name": "ssl.SSLSocket.read", "module": "ssl", "doc": ["Read up to len bytes of data from the SSL socket and return the result as a bytes instance.", "If buffer is specified, then read into the buffer instead, and return the number of bytes read.", "Raise SSLWantReadError or SSLWantWriteError if the socket is non-blocking and the read would block.", "As at any time a re-negotiation is possible, a call to read() can also cause write operations."]}
{"index": 5622, "name": "ssl.SSLSocket.write", "module": "ssl", "doc": ["Write buf to the SSL socket and return the number of bytes written.", "The buf argument must be an object supporting the buffer interface.", "Raise SSLWantReadError or SSLWantWriteError if the socket is non-blocking and the write would block.", "As at any time a re-negotiation is possible, a call to write() can also cause read operations."]}
{"index": 5623, "name": "ssl.SSLSocket.do_handshake", "module": "ssl", "doc": ["Perform the SSL setup handshake."]}
{"index": 5624, "name": "ssl.SSLSocket.getpeercert", "module": "ssl", "doc": ["If there is no certificate for the peer on the other end of the connection, return None.", "If the SSL handshake hasn\u2019t been done yet, raise ValueError.", "If the binary_form parameter is False, and a certificate was received from the peer, this method returns a dict instance.", "If the certificate was not validated, the dict is empty.", "If the certificate was validated, it returns a dict with several keys, amongst them subject (the principal for which the certificate was issued) and issuer (the principal issuing the certificate).", "If a certificate contains an instance of the Subject Alternative Name extension (see RFC 3280), there will also be a subjectAltName key in the dictionary.", "The subject and issuer fields are tuples containing the sequence of relative distinguished names (RDNs) given in the certificate\u2019s data structure for the respective fields, and each RDN is a sequence of name-value pairs.", "Here is a real-world example:", "If the binary_form parameter is True, and a certificate was provided, this method returns the DER-encoded form of the entire certificate as a sequence of bytes, or None if the peer did not provide a certificate.", "Whether the peer provides a certificate depends on the SSL socket\u2019s role:"]}
{"index": 5625, "name": "ssl.SSLSocket.cipher", "module": "ssl", "doc": ["Returns a three-value tuple containing the name of the cipher being used, the version of the SSL protocol that defines its use, and the number of secret bits being used.", "If no connection has been established, returns None."]}
{"index": 5626, "name": "ssl.SSLSocket.shared_ciphers", "module": "ssl", "doc": ["Return the list of ciphers shared by the client during the handshake.", "Each entry of the returned list is a three-value tuple containing the name of the cipher, the version of the SSL protocol that defines its use, and the number of secret bits the cipher uses.", "shared_ciphers() returns None if no connection has been established or the socket is a client socket."]}
{"index": 5627, "name": "ssl.SSLSocket.compression", "module": "ssl", "doc": ["Return the compression algorithm being used as a string, or None if the connection isn\u2019t compressed.", "If the higher-level protocol supports its own compression mechanism, you can use OP_NO_COMPRESSION to disable SSL-level compression."]}
{"index": 5628, "name": "ssl.SSLSocket.get_channel_binding", "module": "ssl", "doc": ["Get channel binding data for current connection, as a bytes object.", "Returns None if not connected or the handshake has not been completed.", "The cb_type parameter allow selection of the desired channel binding type.", "Valid channel binding types are listed in the CHANNEL_BINDING_TYPES list.", "Currently only the \u2018tls-unique\u2019 channel binding, defined by RFC 5929, is supported.", "ValueError will be raised if an unsupported channel binding type is requested."]}
{"index": 5629, "name": "ssl.SSLSocket.selected_alpn_protocol", "module": "ssl", "doc": ["Return the protocol that was selected during the TLS handshake.", "If SSLContext.set_alpn_protocols() was not called, if the other party does not support ALPN, if this socket does not support any of the client\u2019s proposed protocols, or if the handshake has not happened yet, None is returned."]}
{"index": 5630, "name": "ssl.SSLSocket.selected_npn_protocol", "module": "ssl", "doc": ["Return the higher-level protocol that was selected during the TLS/SSL handshake.", "If SSLContext.set_npn_protocols() was not called, or if the other party does not support NPN, or if the handshake has not yet happened, this will return None."]}
{"index": 5631, "name": "ssl.SSLSocket.unwrap", "module": "ssl", "doc": ["Performs the SSL shutdown handshake, which removes the TLS layer from the underlying socket, and returns the underlying socket object.", "This can be used to go from encrypted operation over a connection to unencrypted.", "The returned socket should always be used for further communication with the other side of the connection, rather than the original socket."]}
{"index": 5632, "name": "ssl.SSLSocket.verify_client_post_handshake", "module": "ssl", "doc": ["Requests post-handshake authentication (PHA) from a TLS 1.3 client.", "PHA can only be initiated for a TLS 1.3 connection from a server-side socket, after the initial TLS handshake and with PHA enabled on both sides, see SSLContext.post_handshake_auth.", "The method does not perform a cert exchange immediately.", "The server-side sends a CertificateRequest during the next write event and expects the client to respond with a certificate on the next read event.", "If any precondition isn\u2019t met (e.g.", "not TLS 1.3, PHA not enabled), an SSLError is raised."]}
{"index": 5633, "name": "ssl.SSLSocket.version", "module": "ssl", "doc": ["Return the actual SSL protocol version negotiated by the connection as a string, or None is no secure connection is established.", "As of this writing, possible return values include \"SSLv2\", \"SSLv3\", \"TLSv1\", \"TLSv1.1\" and \"TLSv1.2\".", "Recent OpenSSL versions may define more return values."]}
{"index": 5634, "name": "ssl.SSLSocket.pending", "module": "ssl", "doc": ["Returns the number of already decrypted bytes available for read, pending on the connection."]}
{"index": 5635, "name": "ssl.SSLSocket.context", "module": "ssl", "doc": ["The SSLContext object this SSL socket is tied to.", "If the SSL socket was created using the deprecated wrap_socket() function (rather than SSLContext.wrap_socket()), this is a custom context object created for this SSL socket."]}
{"index": 5636, "name": "ssl.SSLSocket.server_side", "module": "ssl", "doc": ["A boolean which is True for server-side sockets and False for client-side sockets."]}
{"index": 5637, "name": "ssl.SSLSocket.server_hostname", "module": "ssl", "doc": ["Hostname of the server: str type, or None for server-side socket or if the hostname was not specified in the constructor."]}
{"index": 5638, "name": "ssl.SSLSocket.session", "module": "ssl", "doc": ["The SSLSession for this SSL connection.", "The session is available for client and server side sockets after the TLS handshake has been performed.", "For client sockets the session can be set before do_handshake() has been called to reuse a session."]}
{"index": 5639, "name": "ssl.SSLContext", "module": "ssl", "doc": ["Create a new SSL context.", "You may pass protocol which must be one of the PROTOCOL_* constants defined in this module.", "The parameter specifies which version of the SSL protocol to use.", "Typically, the server chooses a particular protocol version, and the client must adapt to the server\u2019s choice.", "Most of the versions are not interoperable with the other versions.", "If not specified, the default is PROTOCOL_TLS; it provides the most compatibility with other versions.", "Here\u2019s a table showing which versions in a client (down the side) can connect to which versions in a server (along the top):", "Footnotes"]}
{"index": 5640, "name": "id7", "module": "ssl", "doc": ["SSLContext disables SSLv2 with OP_NO_SSLv2 by default."]}
{"index": 5641, "name": "id8", "module": "ssl", "doc": ["SSLContext disables SSLv2 with OP_NO_SSLv2 by default."]}
{"index": 5642, "name": "id9", "module": "ssl", "doc": ["SSLContext disables SSLv2 with OP_NO_SSLv2 by default."]}
{"index": 5643, "name": "ssl.SSLContext.cert_store_stats", "module": "ssl", "doc": ["Get statistics about quantities of loaded X.509 certificates, count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary.", "Example for a context with one CA cert and one other cert:"]}
{"index": 5644, "name": "ssl.SSLContext.load_cert_chain", "module": "ssl", "doc": ["Load a private key and the corresponding certificate.", "The certfile string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate\u2019s authenticity.", "The keyfile string, if present, must point to a file containing the private key in.", "Otherwise the private key will be taken from certfile as well.", "See the discussion of Certificates for more information on how the certificate is stored in the certfile.", "The password argument may be a function to call to get the password for decrypting the private key.", "It will only be called if the private key is encrypted and a password is necessary.", "It will be called with no arguments, and it should return a string, bytes, or bytearray.", "If the return value is a string it will be encoded as UTF-8 before using it to decrypt the key.", "Alternatively a string, bytes, or bytearray value may be supplied directly as the password argument.", "It will be ignored if the private key is not encrypted and no password is needed.", "If the password argument is not specified and a password is required, OpenSSL\u2019s built-in password prompting mechanism will be used to interactively prompt the user for a password.", "An SSLError is raised if the private key doesn\u2019t match with the certificate."]}
{"index": 5645, "name": "ssl.SSLContext.load_default_certs", "module": "ssl", "doc": ["Load a set of default \u201ccertification authority\u201d (CA) certificates from default locations.", "On Windows it loads CA certs from the CA and ROOT system stores.", "On other systems it calls SSLContext.set_default_verify_paths().", "In the future the method may load CA certificates from other locations, too.", "The purpose flag specifies what kind of CA certificates are loaded.", "The default settings Purpose.SERVER_AUTH loads certificates, that are flagged and trusted for TLS web server authentication (client side sockets).", "Purpose.CLIENT_AUTH loads CA certificates for client certificate verification on the server side."]}
{"index": 5646, "name": "ssl.SSLContext.load_verify_locations", "module": "ssl", "doc": ["Load a set of \u201ccertification authority\u201d (CA) certificates used to validate other peers\u2019 certificates when verify_mode is other than CERT_NONE.", "At least one of cafile or capath must be specified.", "This method can also load certification revocation lists (CRLs) in PEM or DER format.", "In order to make use of CRLs, SSLContext.verify_flags must be configured properly.", "The cafile string, if present, is the path to a file of concatenated CA certificates in PEM format.", "See the discussion of Certificates for more information about how to arrange the certificates in this file.", "The capath string, if present, is the path to a directory containing several CA certificates in PEM format, following an OpenSSL specific layout.", "The cadata object, if present, is either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates.", "Like with capath extra lines around PEM-encoded certificates are ignored but at least one certificate must be present."]}
{"index": 5647, "name": "ssl.SSLContext.get_ca_certs", "module": "ssl", "doc": ["Get a list of loaded \u201ccertification authority\u201d (CA) certificates.", "If the binary_form parameter is False each list entry is a dict like the output of SSLSocket.getpeercert().", "Otherwise the method returns a list of DER-encoded certificates.", "The returned list does not contain certificates from capath unless a certificate was requested and loaded by a SSL connection."]}
{"index": 5648, "name": "ssl.SSLContext.get_ciphers", "module": "ssl", "doc": ["Get a list of enabled ciphers.", "The list is in order of cipher priority.", "See SSLContext.set_ciphers().", "Example:", "On OpenSSL 1.1 and newer the cipher dict contains additional fields:", "Availability: OpenSSL 1.0.2+."]}
{"index": 5649, "name": "ssl.SSLContext.set_default_verify_paths", "module": "ssl", "doc": ["Load a set of default \u201ccertification authority\u201d (CA) certificates from a filesystem path defined when building the OpenSSL library.", "Unfortunately, there\u2019s no easy way to know whether this method succeeds: no error is returned if no certificates are to be found.", "When the OpenSSL library is provided as part of the operating system, though, it is likely to be configured properly."]}
{"index": 5650, "name": "ssl.SSLContext.set_ciphers", "module": "ssl", "doc": ["Set the available ciphers for sockets created with this context.", "It should be a string in the OpenSSL cipher list format.", "If no cipher can be selected (because compile-time options or other configuration forbids use of all the specified ciphers), an SSLError will be raised."]}
{"index": 5651, "name": "ssl.SSLContext.set_alpn_protocols", "module": "ssl", "doc": ["Specify which protocols the socket should advertise during the SSL/TLS handshake.", "It should be a list of ASCII strings, like ['http/1.1', 'spdy/2'], ordered by preference.", "The selection of a protocol will happen during the handshake, and will play out according to RFC 7301.", "After a successful handshake, the SSLSocket.selected_alpn_protocol() method will return the agreed-upon protocol.", "This method will raise NotImplementedError if HAS_ALPN is False.", "OpenSSL 1.1.0 to 1.1.0e will abort the handshake and raise SSLError when both sides support ALPN but cannot agree on a protocol.", "1.1.0f+ behaves like 1.0.2, SSLSocket.selected_alpn_protocol() returns None."]}
{"index": 5652, "name": "ssl.SSLContext.set_npn_protocols", "module": "ssl", "doc": ["Specify which protocols the socket should advertise during the SSL/TLS handshake.", "It should be a list of strings, like ['http/1.1', 'spdy/2'], ordered by preference.", "The selection of a protocol will happen during the handshake, and will play out according to the Application Layer Protocol Negotiation.", "After a successful handshake, the SSLSocket.selected_npn_protocol() method will return the agreed-upon protocol.", "This method will raise NotImplementedError if HAS_NPN is False."]}
{"index": 5653, "name": "ssl.SSLContext.sni_callback", "module": "ssl", "doc": ["Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication.", "The server name indication mechanism is specified in RFC 6066 section 3 - Server Name Indication.", "Only one callback can be set per SSLContext.", "If sni_callback is set to None then the callback is disabled.", "Calling this function a subsequent time will disable the previously registered callback.", "The callback function will be called with three arguments; the first being the ssl.SSLSocket, the second is a string that represents the server name that the client is intending to communicate (or None if the TLS Client Hello does not contain a server name) and the third argument is the original SSLContext.", "The server name argument is text.", "For internationalized domain name, the server name is an IDN A-label (\"xn--pythn-mua.org\").", "A typical use of this callback is to change the ssl.SSLSocket\u2019s SSLSocket.context attribute to a new object of type SSLContext representing a certificate chain that matches the server name.", "Due to the early negotiation phase of the TLS connection, only limited methods and attributes are usable like SSLSocket.selected_alpn_protocol() and SSLSocket.context.", "SSLSocket.getpeercert(), SSLSocket.getpeercert(), SSLSocket.cipher() and SSLSocket.compress() methods require that the TLS connection has progressed beyond the TLS Client Hello and therefore will not contain return meaningful values nor can they be called safely.", "The sni_callback function must return None to allow the TLS negotiation to continue.", "If a TLS failure is required, a constant ALERT_DESCRIPTION_* can be returned.", "Other return values will result in a TLS fatal error with ALERT_DESCRIPTION_INTERNAL_ERROR.", "If an exception is raised from the sni_callback function the TLS connection will terminate with a fatal TLS alert message ALERT_DESCRIPTION_HANDSHAKE_FAILURE.", "This method will raise NotImplementedError if the OpenSSL library had OPENSSL_NO_TLSEXT defined when it was built."]}
{"index": 5654, "name": "ssl.SSLContext.set_servername_callback", "module": "ssl", "doc": ["This is a legacy API retained for backwards compatibility.", "When possible, you should use sni_callback instead.", "The given server_name_callback is similar to sni_callback, except that when the server hostname is an IDN-encoded internationalized domain name, the server_name_callback receives a decoded U-label (\"pyth\u00f6n.org\").", "If there is an decoding error on the server name, the TLS connection will terminate with an ALERT_DESCRIPTION_INTERNAL_ERROR fatal TLS alert message to the client."]}
{"index": 5655, "name": "ssl.SSLContext.load_dh_params", "module": "ssl", "doc": ["Load the key generation parameters for Diffie-Hellman (DH) key exchange.", "Using DH key exchange improves forward secrecy at the expense of computational resources (both on the server and on the client).", "The dhfile parameter should be the path to a file containing DH parameters in PEM format.", "This setting doesn\u2019t apply to client sockets.", "You can also use the OP_SINGLE_DH_USE option to further improve security."]}
{"index": 5656, "name": "ssl.SSLContext.set_ecdh_curve", "module": "ssl", "doc": ["Set the curve name for Elliptic Curve-based Diffie-Hellman (ECDH) key exchange.", "ECDH is significantly faster than regular DH while arguably as secure.", "The curve_name parameter should be a string describing a well-known elliptic curve, for example prime256v1 for a widely supported curve.", "This setting doesn\u2019t apply to client sockets.", "You can also use the OP_SINGLE_ECDH_USE option to further improve security.", "This method is not available if HAS_ECDH is False."]}
{"index": 5657, "name": "ssl.SSLContext.wrap_socket", "module": "ssl", "doc": ["Wrap an existing Python socket sock and return an instance of SSLContext.sslsocket_class (default SSLSocket).", "The returned SSL socket is tied to the context, its settings and certificates.", "sock must be a SOCK_STREAM socket; other socket types are unsupported.", "The parameter server_side is a boolean which identifies whether server-side or client-side behavior is desired from this socket.", "For client-side sockets, the context construction is lazy; if the underlying socket isn\u2019t connected yet, the context construction will be performed after connect() is called on the socket.", "For server-side sockets, if the socket has no remote peer, it is assumed to be a listening socket, and the server-side SSL wrapping is automatically performed on client connections accepted via the accept() method.", "The method may raise SSLError.", "On client connections, the optional parameter server_hostname specifies the hostname of the service which we are connecting to.", "This allows a single server to host multiple SSL-based services with distinct certificates, quite similarly to HTTP virtual hosts.", "Specifying server_hostname will raise a ValueError if server_side is true.", "The parameter do_handshake_on_connect specifies whether to do the SSL handshake automatically after doing a socket.connect(), or whether the application program will call it explicitly, by invoking the SSLSocket.do_handshake() method.", "Calling SSLSocket.do_handshake() explicitly gives the program control over the blocking behavior of the socket I/O involved in the handshake.", "The parameter suppress_ragged_eofs specifies how the SSLSocket.recv() method should signal unexpected EOF from the other end of the connection.", "If specified as True (the default), it returns a normal EOF (an empty bytes object) in response to unexpected EOF errors raised from the underlying socket; if False, it will raise the exceptions back to the caller.", "session, see session."]}
{"index": 5658, "name": "ssl.SSLContext.sslsocket_class", "module": "ssl", "doc": ["The return type of SSLContext.wrap_socket(), defaults to SSLSocket.", "The attribute can be overridden on instance of class in order to return a custom subclass of SSLSocket."]}
{"index": 5659, "name": "ssl.SSLContext.wrap_bio", "module": "ssl", "doc": ["Wrap the BIO objects incoming and outgoing and return an instance of SSLContext.sslobject_class (default SSLObject).", "The SSL routines will read input data from the incoming BIO and write data to the outgoing BIO.", "The server_side, server_hostname and session parameters have the same meaning as in SSLContext.wrap_socket()."]}
{"index": 5660, "name": "ssl.SSLContext.sslobject_class", "module": "ssl", "doc": ["The return type of SSLContext.wrap_bio(), defaults to SSLObject.", "The attribute can be overridden on instance of class in order to return a custom subclass of SSLObject."]}
{"index": 5661, "name": "ssl.SSLContext.session_stats", "module": "ssl", "doc": ["Get statistics about the SSL sessions created or managed by this context.", "A dictionary is returned which maps the names of each piece of information to their numeric values.", "For example, here is the total number of hits and misses in the session cache since the context was created:"]}
{"index": 5662, "name": "ssl.SSLContext.check_hostname", "module": "ssl", "doc": ["Whether to match the peer cert\u2019s hostname with match_hostname() in SSLSocket.do_handshake().", "The context\u2019s verify_mode must be set to CERT_OPTIONAL or CERT_REQUIRED, and you must pass server_hostname to wrap_socket() in order to match the hostname.", "Enabling hostname checking automatically sets verify_mode from CERT_NONE to CERT_REQUIRED.", "It cannot be set back to CERT_NONE as long as hostname checking is enabled.", "The PROTOCOL_TLS_CLIENT protocol enables hostname checking by default.", "With other protocols, hostname checking must be enabled explicitly.", "Example:"]}
{"index": 5663, "name": "ssl.SSLContext.maximum_version", "module": "ssl", "doc": ["A TLSVersion enum member representing the highest supported TLS version.", "The value defaults to TLSVersion.MAXIMUM_SUPPORTED.", "The attribute is read-only for protocols other than PROTOCOL_TLS, PROTOCOL_TLS_CLIENT, and PROTOCOL_TLS_SERVER.", "The attributes maximum_version, minimum_version and SSLContext.options all affect the supported SSL and TLS versions of the context.", "The implementation does not prevent invalid combination.", "For example a context with OP_NO_TLSv1_2 in options and maximum_version set to TLSVersion.TLSv1_2 will not be able to establish a TLS 1.2 connection."]}
{"index": 5664, "name": "ssl.SSLContext.minimum_version", "module": "ssl", "doc": ["Like SSLContext.maximum_version except it is the lowest supported version or TLSVersion.MINIMUM_SUPPORTED."]}
{"index": 5665, "name": "ssl.SSLContext.options", "module": "ssl", "doc": ["An integer representing the set of SSL options enabled on this context.", "The default value is OP_ALL, but you can specify other options such as OP_NO_SSLv2 by ORing them together."]}
{"index": 5666, "name": "ssl.SSLContext.post_handshake_auth", "module": "ssl", "doc": ["Enable TLS 1.3 post-handshake client authentication.", "Post-handshake auth is disabled by default and a server can only request a TLS client certificate during the initial handshake.", "When enabled, a server may request a TLS client certificate at any time after the handshake.", "When enabled on client-side sockets, the client signals the server that it supports post-handshake authentication.", "When enabled on server-side sockets, SSLContext.verify_mode must be set to CERT_OPTIONAL or CERT_REQUIRED, too.", "The actual client cert exchange is delayed until SSLSocket.verify_client_post_handshake() is called and some I/O is performed."]}
{"index": 5667, "name": "ssl.SSLContext.protocol", "module": "ssl", "doc": ["The protocol version chosen when constructing the context.", "This attribute is read-only."]}
{"index": 5668, "name": "ssl.SSLContext.hostname_checks_common_name", "module": "ssl", "doc": ["Whether check_hostname falls back to verify the cert\u2019s subject common name in the absence of a subject alternative name extension (default: true)."]}
{"index": 5669, "name": "ssl.SSLContext.verify_flags", "module": "ssl", "doc": ["The flags for certificate verification operations.", "You can set flags like VERIFY_CRL_CHECK_LEAF by ORing them together.", "By default OpenSSL does neither require nor verify certificate revocation lists (CRLs).", "Available only with openssl version 0.9.8+."]}
{"index": 5670, "name": "ssl.SSLContext.verify_mode", "module": "ssl", "doc": ["Whether to try to verify other peers\u2019 certificates and how to behave if verification fails.", "This attribute must be one of CERT_NONE, CERT_OPTIONAL or CERT_REQUIRED."]}
{"index": 5671, "name": "ssl.SSLObject", "module": "ssl", "doc": ["A reduced-scope variant of SSLSocket representing an SSL protocol instance that does not contain any network IO methods.", "This class is typically used by framework authors that want to implement asynchronous IO for SSL through memory buffers.", "This class implements an interface on top of a low-level SSL object as implemented by OpenSSL.", "This object captures the state of an SSL connection but does not provide any network IO itself.", "IO needs to be performed through separate \u201cBIO\u201d objects which are OpenSSL\u2019s IO abstraction layer.", "This class has no public constructor.", "An SSLObject instance must be created using the wrap_bio() method.", "This method will create the SSLObject instance and bind it to a pair of BIOs.", "The incoming BIO is used to pass data from Python to the SSL protocol instance, while the outgoing BIO is used to pass data the other way around.", "The following methods are available:", "When compared to SSLSocket, this object lacks the following features:", "Some notes related to the use of SSLObject:"]}
{"index": 5672, "name": "ssl.MemoryBIO", "module": "ssl", "doc": ["A memory buffer that can be used to pass data between Python and an SSL protocol instance."]}
{"index": 5673, "name": "ssl.MemoryBIO.pending", "module": "ssl", "doc": ["Return the number of bytes currently in the memory buffer."]}
{"index": 5674, "name": "ssl.MemoryBIO.eof", "module": "ssl", "doc": ["A boolean indicating whether the memory BIO is current at the end-of-file position."]}
{"index": 5675, "name": "ssl.MemoryBIO.read", "module": "ssl", "doc": ["Read up to n bytes from the memory buffer.", "If n is not specified or negative, all bytes are returned."]}
{"index": 5676, "name": "ssl.MemoryBIO.write", "module": "ssl", "doc": ["Write the bytes from buf to the memory BIO.", "The buf argument must be an object supporting the buffer protocol.", "The return value is the number of bytes written, which is always equal to the length of buf."]}
{"index": 5677, "name": "ssl.MemoryBIO.write_eof", "module": "ssl", "doc": ["Write an EOF marker to the memory BIO.", "After this method has been called, it is illegal to call write().", "The attribute eof will become true after all data currently in the buffer has been read."]}
{"index": 5678, "name": "ssl.SSLSession", "module": "ssl", "doc": ["Session object used by session."]}
{"index": 5679, "name": "stat.S_ISDIR", "module": "stat", "doc": ["Return non-zero if the mode is from a directory."]}
{"index": 5680, "name": "stat.S_ISCHR", "module": "stat", "doc": ["Return non-zero if the mode is from a character special device file."]}
{"index": 5681, "name": "stat.S_ISBLK", "module": "stat", "doc": ["Return non-zero if the mode is from a block special device file."]}
{"index": 5682, "name": "stat.S_ISREG", "module": "stat", "doc": ["Return non-zero if the mode is from a regular file."]}
{"index": 5683, "name": "stat.S_ISFIFO", "module": "stat", "doc": ["Return non-zero if the mode is from a FIFO (named pipe)."]}
{"index": 5684, "name": "stat.S_ISLNK", "module": "stat", "doc": ["Return non-zero if the mode is from a symbolic link."]}
{"index": 5685, "name": "stat.S_ISSOCK", "module": "stat", "doc": ["Return non-zero if the mode is from a socket."]}
{"index": 5686, "name": "stat.S_ISDOOR", "module": "stat", "doc": ["Return non-zero if the mode is from a door."]}
{"index": 5687, "name": "stat.S_ISPORT", "module": "stat", "doc": ["Return non-zero if the mode is from an event port."]}
{"index": 5688, "name": "stat.S_ISWHT", "module": "stat", "doc": ["Return non-zero if the mode is from a whiteout."]}
{"index": 5689, "name": "stat.S_IMODE", "module": "stat", "doc": ["Return the portion of the file\u2019s mode that can be set by os.chmod()\u2014that is, the file\u2019s permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them)."]}
{"index": 5690, "name": "stat.S_IFMT", "module": "stat", "doc": ["Return the portion of the file\u2019s mode that describes the file type (used by the S_IS*() functions above)."]}
{"index": 5691, "name": "stat.filemode", "module": "stat", "doc": ["Convert a file\u2019s mode to a string of the form \u2018-rwxrwxrwx\u2019."]}
{"index": 5692, "name": "stat.ST_MODE", "module": "stat", "doc": ["Inode protection mode."]}
{"index": 5693, "name": "stat.ST_INO", "module": "stat", "doc": ["Inode number."]}
{"index": 5694, "name": "stat.ST_DEV", "module": "stat", "doc": ["Device inode resides on."]}
{"index": 5695, "name": "stat.ST_NLINK", "module": "stat", "doc": ["Number of links to the inode."]}
{"index": 5696, "name": "stat.ST_UID", "module": "stat", "doc": ["User id of the owner."]}
{"index": 5697, "name": "stat.ST_GID", "module": "stat", "doc": ["Group id of the owner."]}
{"index": 5698, "name": "stat.ST_SIZE", "module": "stat", "doc": ["Size in bytes of a plain file; amount of data waiting on some special files."]}
{"index": 5699, "name": "stat.ST_ATIME", "module": "stat", "doc": ["Time of last access."]}
{"index": 5700, "name": "stat.ST_MTIME", "module": "stat", "doc": ["Time of last modification."]}
{"index": 5701, "name": "stat.ST_CTIME", "module": "stat", "doc": ["The \u201cctime\u201d as reported by the operating system.", "On some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time (see platform documentation for details)."]}
{"index": 5702, "name": "stat.S_IFSOCK", "module": "stat", "doc": ["Socket."]}
{"index": 5703, "name": "stat.S_IFLNK", "module": "stat", "doc": ["Symbolic link."]}
{"index": 5704, "name": "stat.S_IFREG", "module": "stat", "doc": ["Regular file."]}
{"index": 5705, "name": "stat.S_IFBLK", "module": "stat", "doc": ["Block device."]}
{"index": 5706, "name": "stat.S_IFDIR", "module": "stat", "doc": ["Directory."]}
{"index": 5707, "name": "stat.S_IFCHR", "module": "stat", "doc": ["Character device."]}
{"index": 5708, "name": "stat.S_IFIFO", "module": "stat", "doc": ["FIFO."]}
{"index": 5709, "name": "stat.S_IFDOOR", "module": "stat", "doc": ["Door."]}
{"index": 5710, "name": "stat.S_IFPORT", "module": "stat", "doc": ["Event port."]}
{"index": 5711, "name": "stat.S_IFWHT", "module": "stat", "doc": ["Whiteout."]}
{"index": 5712, "name": "stat.S_ISUID", "module": "stat", "doc": ["Set UID bit."]}
{"index": 5713, "name": "stat.S_ISGID", "module": "stat", "doc": ["Set-group-ID bit.", "This bit has several special uses.", "For a directory it indicates that BSD semantics is to be used for that directory: files created there inherit their group ID from the directory, not from the effective group ID of the creating process, and directories created there will also get the S_ISGID bit set.", "For a file that does not have the group execution bit (S_IXGRP) set, the set-group-ID bit indicates mandatory file/record locking (see also S_ENFMT)."]}
{"index": 5714, "name": "stat.S_ISVTX", "module": "stat", "doc": ["Sticky bit.", "When this bit is set on a directory it means that a file in that directory can be renamed or deleted only by the owner of the file, by the owner of the directory, or by a privileged process."]}
{"index": 5715, "name": "stat.S_IRWXU", "module": "stat", "doc": ["Mask for file owner permissions."]}
{"index": 5716, "name": "stat.S_IRUSR", "module": "stat", "doc": ["Owner has read permission."]}
{"index": 5717, "name": "stat.S_IWUSR", "module": "stat", "doc": ["Owner has write permission."]}
{"index": 5718, "name": "stat.S_IXUSR", "module": "stat", "doc": ["Owner has execute permission."]}
{"index": 5719, "name": "stat.S_IRWXG", "module": "stat", "doc": ["Mask for group permissions."]}
{"index": 5720, "name": "stat.S_IRGRP", "module": "stat", "doc": ["Group has read permission."]}
{"index": 5721, "name": "stat.S_IWGRP", "module": "stat", "doc": ["Group has write permission."]}
{"index": 5722, "name": "stat.S_IXGRP", "module": "stat", "doc": ["Group has execute permission."]}
{"index": 5723, "name": "stat.S_IRWXO", "module": "stat", "doc": ["Mask for permissions for others (not in group)."]}
{"index": 5724, "name": "stat.S_IROTH", "module": "stat", "doc": ["Others have read permission."]}
{"index": 5725, "name": "stat.S_IWOTH", "module": "stat", "doc": ["Others have write permission."]}
{"index": 5726, "name": "stat.S_IXOTH", "module": "stat", "doc": ["Others have execute permission."]}
{"index": 5727, "name": "stat.S_ENFMT", "module": "stat", "doc": ["System V file locking enforcement.", "This flag is shared with S_ISGID: file/record locking is enforced on files that do not have the group execution bit (S_IXGRP) set."]}
{"index": 5728, "name": "stat.S_IREAD", "module": "stat", "doc": ["Unix V7 synonym for S_IRUSR."]}
{"index": 5729, "name": "stat.S_IWRITE", "module": "stat", "doc": ["Unix V7 synonym for S_IWUSR."]}
{"index": 5730, "name": "stat.S_IEXEC", "module": "stat", "doc": ["Unix V7 synonym for S_IXUSR."]}
{"index": 5731, "name": "stat.UF_NODUMP", "module": "stat", "doc": ["Do not dump the file."]}
{"index": 5732, "name": "stat.UF_IMMUTABLE", "module": "stat", "doc": ["The file may not be changed."]}
{"index": 5733, "name": "stat.UF_APPEND", "module": "stat", "doc": ["The file may only be appended to."]}
{"index": 5734, "name": "stat.UF_OPAQUE", "module": "stat", "doc": ["The directory is opaque when viewed through a union stack."]}
{"index": 5735, "name": "stat.UF_NOUNLINK", "module": "stat", "doc": ["The file may not be renamed or deleted."]}
{"index": 5736, "name": "stat.UF_COMPRESSED", "module": "stat", "doc": ["The file is stored compressed (Mac OS X 10.6+)."]}
{"index": 5737, "name": "stat.UF_HIDDEN", "module": "stat", "doc": ["The file should not be displayed in a GUI (Mac OS X 10.5+)."]}
{"index": 5738, "name": "stat.SF_ARCHIVED", "module": "stat", "doc": ["The file may be archived."]}
{"index": 5739, "name": "stat.SF_IMMUTABLE", "module": "stat", "doc": ["The file may not be changed."]}
{"index": 5740, "name": "stat.SF_APPEND", "module": "stat", "doc": ["The file may only be appended to."]}
{"index": 5741, "name": "stat.SF_NOUNLINK", "module": "stat", "doc": ["The file may not be renamed or deleted."]}
{"index": 5742, "name": "stat.SF_SNAPSHOT", "module": "stat", "doc": ["The file is a snapshot file."]}
{"index": 5743, "name": "statistics.mean", "module": "statistics", "doc": ["Return the sample arithmetic mean of data which can be a sequence or iterator.", "The arithmetic mean is the sum of the data divided by the number of data points.", "It is commonly called \u201cthe average\u201d, although it is only one of many different mathematical averages.", "It is a measure of the central location of the data.", "If data is empty, StatisticsError will be raised.", "Some examples of use:"]}
{"index": 5744, "name": "statistics.harmonic_mean", "module": "statistics", "doc": ["Return the harmonic mean of data, a sequence or iterator of real-valued numbers.", "The harmonic mean, sometimes called the subcontrary mean, is the reciprocal of the arithmetic mean() of the reciprocals of the data.", "For example, the harmonic mean of three values a, b and c will be equivalent to 3/(1/a + 1/b + 1/c).", "The harmonic mean is a type of average, a measure of the central location of the data.", "It is often appropriate when averaging quantities which are rates or ratios, for example speeds.", "For example:", "Suppose an investor purchases an equal value of shares in each of three companies, with P/E (price/earning) ratios of 2.5, 3 and 10.", "What is the average P/E ratio for the investor\u2019s portfolio?", "Using the arithmetic mean would give an average of about 5.167, which is too high.", "StatisticsError is raised if data is empty, or any element is less than zero."]}
{"index": 5745, "name": "statistics.median", "module": "statistics", "doc": ["Return the median (middle value) of numeric data, using the common \u201cmean of middle two\u201d method.", "If data is empty, StatisticsError is raised.", "data can be a sequence or iterator.", "The median is a robust measure of central location, and is less affected by the presence of outliers in your data.", "When the number of data points is odd, the middle data point is returned:", "When the number of data points is even, the median is interpolated by taking the average of the two middle values:", "This is suited for when your data is discrete, and you don\u2019t mind that the median may not be an actual data point.", "If your data is ordinal (supports order operations) but not numeric (doesn\u2019t support addition), you should use median_low() or median_high() instead."]}
{"index": 5746, "name": "statistics.median_low", "module": "statistics", "doc": ["Return the low median of numeric data.", "If data is empty, StatisticsError is raised.", "data can be a sequence or iterator.", "The low median is always a member of the data set.", "When the number of data points is odd, the middle value is returned.", "When it is even, the smaller of the two middle values is returned.", "Use the low median when your data are discrete and you prefer the median to be an actual data point rather than interpolated."]}
{"index": 5747, "name": "statistics.median_high", "module": "statistics", "doc": ["Return the high median of data.", "If data is empty, StatisticsError is raised.", "data can be a sequence or iterator.", "The high median is always a member of the data set.", "When the number of data points is odd, the middle value is returned.", "When it is even, the larger of the two middle values is returned.", "Use the high median when your data are discrete and you prefer the median to be an actual data point rather than interpolated."]}
{"index": 5748, "name": "statistics.median_grouped", "module": "statistics", "doc": ["Return the median of grouped continuous data, calculated as the 50th percentile, using interpolation.", "If data is empty, StatisticsError is raised.", "data can be a sequence or iterator.", "In the following example, the data are rounded, so that each value represents the midpoint of data classes, e.g.", "1 is the midpoint of the class 0.5\u20131.5, 2 is the midpoint of 1.5\u20132.5, 3 is the midpoint of 2.5\u20133.5, etc.", "With the data given, the middle value falls somewhere in the class 3.5\u20134.5, and interpolation is used to estimate it:", "Optional argument interval represents the class interval, and defaults to 1.", "Changing the class interval naturally will change the interpolation:", "This function does not check whether the data points are at least interval apart."]}
{"index": 5749, "name": "statistics.mode", "module": "statistics", "doc": ["Return the most common data point from discrete or nominal data.", "The mode (when it exists) is the most typical value, and is a robust measure of central location.", "If data is empty, or if there is not exactly one most common value, StatisticsError is raised.", "mode assumes discrete data, and returns a single value.", "This is the standard treatment of the mode as commonly taught in schools:", "The mode is unique in that it is the only statistic which also applies to nominal (non-numeric) data:"]}
{"index": 5750, "name": "statistics.pstdev", "module": "statistics", "doc": ["Return the population standard deviation (the square root of the population variance).", "See pvariance() for arguments and other details."]}
{"index": 5751, "name": "statistics.pvariance", "module": "statistics", "doc": ["Return the population variance of data, a non-empty iterable of real-valued numbers.", "Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data.", "A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.", "If the optional second argument mu is given, it should be the mean of data.", "If it is missing or None (the default), the mean is automatically calculated.", "Use this function to calculate the variance from the entire population.", "To estimate the variance from a sample, the variance() function is usually a better choice.", "Raises StatisticsError if data is empty.", "Examples:", "If you have already calculated the mean of your data, you can pass it as the optional second argument mu to avoid recalculation:", "This function does not attempt to verify that you have passed the actual mean as mu.", "Using arbitrary values for mu may lead to invalid or impossible results.", "Decimals and Fractions are supported:"]}
{"index": 5752, "name": "statistics.stdev", "module": "statistics", "doc": ["Return the sample standard deviation (the square root of the sample variance).", "See variance() for arguments and other details."]}
{"index": 5753, "name": "statistics.variance", "module": "statistics", "doc": ["Return the sample variance of data, an iterable of at least two real-valued numbers.", "Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data.", "A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.", "If the optional second argument xbar is given, it should be the mean of data.", "If it is missing or None (the default), the mean is automatically calculated.", "Use this function when your data is a sample from a population.", "To calculate the variance from the entire population, see pvariance().", "Raises StatisticsError if data has fewer than two values.", "Examples:", "If you have already calculated the mean of your data, you can pass it as the optional second argument xbar to avoid recalculation:", "This function does not attempt to verify that you have passed the actual mean as xbar.", "Using arbitrary values for xbar can lead to invalid or impossible results.", "Decimal and Fraction values are supported:"]}
{"index": 5754, "name": "statistics.StatisticsError", "module": "statistics", "doc": ["Subclass of ValueError for statistics-related exceptions."]}
{"index": 5755, "name": "int.bit_length", "module": "int", "doc": ["Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros:", "More precisely, if x is nonzero, then x.bit_length() is the unique positive integer k such that 2**(k-1) <= abs(x) < 2**k. Equivalently, when abs(x) is small enough to have a correctly rounded logarithm, then k = 1 + int(log(abs(x), 2)).", "If x is zero, then x.bit_length() returns 0.", "Equivalent to:"]}
{"index": 5756, "name": "int.to_bytes", "module": "int", "doc": ["Return an array of bytes representing an integer.", "The integer is represented using length bytes.", "An OverflowError is raised if the integer is not representable with the given number of bytes.", "The byteorder argument determines the byte order used to represent the integer.", "If byteorder is \"big\", the most significant byte is at the beginning of the byte array.", "If byteorder is \"little\", the most significant byte is at the end of the byte array.", "To request the native byte order of the host system, use sys.byteorder as the byte order value.", "The signed argument determines whether two\u2019s complement is used to represent the integer.", "If signed is False and a negative integer is given, an OverflowError is raised.", "The default value for signed is False."]}
{"index": 5757, "name": "int.from_bytes", "module": "int", "doc": ["Return the integer represented by the given array of bytes.", "The argument bytes must either be a bytes-like object or an iterable producing bytes.", "The byteorder argument determines the byte order used to represent the integer.", "If byteorder is \"big\", the most significant byte is at the beginning of the byte array.", "If byteorder is \"little\", the most significant byte is at the end of the byte array.", "To request the native byte order of the host system, use sys.byteorder as the byte order value.", "The signed argument indicates whether two\u2019s complement is used to represent the integer."]}
{"index": 5758, "name": "float.as_integer_ratio", "module": "float", "doc": ["Return a pair of integers whose ratio is exactly equal to the original float and with a positive denominator.", "Raises OverflowError on infinities and a ValueError on NaNs."]}
{"index": 5759, "name": "float.is_integer", "module": "float", "doc": ["Return True if the float instance is finite with integral value, and False otherwise:"]}
{"index": 5760, "name": "float.hex", "module": "float", "doc": ["Return a representation of a floating-point number as a hexadecimal string.", "For finite floating-point numbers, this representation will always include a leading 0x and a trailing p and exponent."]}
{"index": 5761, "name": "float.fromhex", "module": "float", "doc": ["Class method to return the float represented by a hexadecimal string s.  The string s may have leading and trailing whitespace."]}
{"index": 5762, "name": "container.__iter__", "module": "container", "doc": ["Return an iterator object.", "The object is required to support the iterator protocol described below.", "If a container supports different types of iteration, additional methods can be provided to specifically request iterators for those iteration types.", "(An example of an object supporting multiple forms of iteration would be a tree structure which supports both breadth-first and depth-first traversal.)", "This method corresponds to the tp_iter slot of the type structure for Python objects in the Python/C API."]}
{"index": 5763, "name": "iterator.__iter__", "module": "iterator", "doc": ["Return the iterator object itself.", "This is required to allow both containers and iterators to be used with the for and in statements.", "This method corresponds to the tp_iter slot of the type structure for Python objects in the Python/C API."]}
{"index": 5764, "name": "iterator.__next__", "module": "iterator", "doc": ["Return the next item from the container.", "If there are no further items, raise the StopIteration exception.", "This method corresponds to the tp_iternext slot of the type structure for Python objects in the Python/C API."]}
{"index": 5765, "name": "list", "module": "stdtypes", "doc": ["Lists may be constructed in several ways:", "The constructor builds a list whose items are the same and in the same order as iterable\u2019s items.", "iterable may be either a sequence, a container that supports iteration, or an iterator object.", "If iterable is already a list, a copy is made and returned, similar to iterable[:].", "For example, list('abc') returns ['a', 'b', 'c'] and list( (1, 2, 3) ) returns [1, 2, 3].", "If no argument is given, the constructor creates a new empty list, [].", "Many other operations also produce lists, including the sorted() built-in.", "Lists implement all of the common and mutable sequence operations.", "Lists also provide the following additional method:"]}
{"index": 5766, "name": "list.sort", "module": "list", "doc": ["This method sorts the list in place, using only < comparisons between items.", "Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state).", "sort() accepts two arguments that can only be passed by keyword (keyword-only arguments):", "key specifies a function of one argument that is used to extract a comparison key from each list element (for example, key=str.lower).", "The key corresponding to each item in the list is calculated once and then used for the entire sorting process.", "The default value of None means that list items are sorted directly without calculating a separate key value.", "The functools.cmp_to_key() utility is available to convert a 2.x style cmp function to a key function.", "reverse is a boolean value.", "If set to True, then the list elements are sorted as if each comparison were reversed.", "This method modifies the sequence in place for economy of space when sorting a large sequence.", "To remind users that it operates by side effect, it does not return the sorted sequence (use sorted() to explicitly request a new sorted list instance).", "The sort() method is guaranteed to be stable.", "A sort is stable if it guarantees not to change the relative order of elements that compare equal \u2014 this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade)."]}
{"index": 5767, "name": "tuple", "module": "stdtypes", "doc": ["Tuples may be constructed in a number of ways:", "The constructor builds a tuple whose items are the same and in the same order as iterable\u2019s items.", "iterable may be either a sequence, a container that supports iteration, or an iterator object.", "If iterable is already a tuple, it is returned unchanged.", "For example, tuple('abc') returns ('a', 'b', 'c') and tuple( [1, 2, 3] ) returns (1, 2, 3).", "If no argument is given, the constructor creates a new empty tuple, ().", "Note that it is actually the comma which makes a tuple, not the parentheses.", "The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity.", "For example, f(a, b, c) is a function call with three arguments, while f((a, b, c)) is a function call with a 3-tuple as the sole argument.", "Tuples implement all of the common sequence operations."]}
{"index": 5768, "name": "range", "module": "stdtypes", "doc": ["The arguments to the range constructor must be integers (either built-in int or any object that implements the __index__ special method).", "If the step argument is omitted, it defaults to 1.", "If the start argument is omitted, it defaults to 0.", "If step is zero, ValueError is raised.", "For a positive step, the contents of a range r are determined by the formula r[i] = start + step*i where i >= 0 and r[i] < stop.", "For a negative step, the contents of the range are still determined by the formula r[i] = start + step*i, but the constraints are i >= 0 and r[i] > stop.", "A range object will be empty if r[0] does not meet the value constraint.", "Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices.", "Ranges containing absolute values larger than sys.maxsize are permitted but some features (such as len()) may raise OverflowError.", "Range examples:", "Ranges implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern)."]}
{"index": 5769, "name": "range.start", "module": "range", "doc": ["The value of the start parameter (or 0 if the parameter was not supplied)"]}
{"index": 5770, "name": "range.stop", "module": "range", "doc": ["The value of the stop parameter"]}
{"index": 5771, "name": "range.step", "module": "range", "doc": ["The value of the step parameter (or 1 if the parameter was not supplied)"]}
{"index": 5772, "name": "str", "module": "stdtypes", "doc": ["Return a string version of object.", "If object is not provided, returns the empty string.", "Otherwise, the behavior of str() depends on whether encoding or errors is given, as follows.", "If neither encoding nor errors is given, str(object) returns object.__str__(), which is the \u201cinformal\u201d or nicely printable string representation of object.", "For string objects, this is the string itself.", "If object does not have a __str__() method, then str() falls back to returning repr(object).", "If at least one of encoding or errors is given, object should be a bytes-like object (e.g.", "bytes or bytearray).", "In this case, if object is a bytes (or bytearray) object, then str(bytes, encoding, errors) is equivalent to bytes.decode(encoding, errors).", "Otherwise, the bytes object underlying the buffer object is obtained before calling bytes.decode().", "See Binary Sequence Types \u2014 bytes, bytearray, memoryview and Buffer Protocol for information on buffer objects.", "Passing a bytes object to str() without the encoding or errors arguments falls under the first case of returning the informal string representation (see also the -b command-line option to Python).", "For example:", "For more information on the str class and its methods, see Text Sequence Type \u2014 str and the String Methods section below.", "To output formatted strings, see the Formatted string literals and Format String Syntax sections.", "In addition, see the Text Processing Services section."]}
{"index": 5773, "name": "str.capitalize", "module": "str", "doc": ["Return a copy of the string with its first character capitalized and the rest lowercased."]}
{"index": 5774, "name": "str.casefold", "module": "str", "doc": ["Return a casefolded copy of the string.", "Casefolded strings may be used for caseless matching.", "Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string.", "For example, the German lowercase letter '\u00df' is equivalent to \"ss\".", "Since it is already lowercase, lower() would do nothing to '\u00df'; casefold() converts it to \"ss\".", "The casefolding algorithm is described in section 3.13 of the Unicode Standard."]}
{"index": 5775, "name": "str.center", "module": "str", "doc": ["Return centered in a string of length width.", "Padding is done using the specified fillchar (default is an ASCII space).", "The original string is returned if width is less than or equal to len(s)."]}
{"index": 5776, "name": "str.count", "module": "str", "doc": ["Return the number of non-overlapping occurrences of substring sub in the range [start, end].", "Optional arguments start and end are interpreted as in slice notation."]}
{"index": 5777, "name": "str.encode", "module": "str", "doc": ["Return an encoded version of the string as a bytes object.", "Default encoding is 'utf-8'.", "errors may be given to set a different error handling scheme.", "The default for errors is 'strict', meaning that encoding errors raise a UnicodeError.", "Other possible values are 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' and any other name registered via codecs.register_error(), see section Error Handlers.", "For a list of possible encodings, see section Standard Encodings."]}
{"index": 5778, "name": "str.endswith", "module": "str", "doc": ["Return True if the string ends with the specified suffix, otherwise return False.", "suffix can also be a tuple of suffixes to look for.", "With optional start, test beginning at that position.", "With optional end, stop comparing at that position."]}
{"index": 5779, "name": "str.expandtabs", "module": "str", "doc": ["Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size.", "Tab positions occur every tabsize characters (default is 8, giving tab positions at columns 0, 8, 16 and so on).", "To expand the string, the current column is set to zero and the string is examined character by character.", "If the character is a tab (\\t), one or more space characters are inserted in the result until the current column is equal to the next tab position.", "(The tab character itself is not copied.)", "If the character is a newline (\\n) or return (\\r), it is copied and the current column is reset to zero.", "Any other character is copied unchanged and the current column is incremented by one regardless of how the character is represented when printed."]}
{"index": 5780, "name": "str.find", "module": "str", "doc": ["Return the lowest index in the string where substring sub is found within the slice s[start:end].", "Optional arguments start and end are interpreted as in slice notation.", "Return -1 if sub is not found."]}
{"index": 5781, "name": "str.format", "module": "str", "doc": ["Perform a string formatting operation.", "The string on which this method is called can contain literal text or replacement fields delimited by braces {}.", "Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument.", "Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument.", "See Format String Syntax for a description of the various formatting options that can be specified in format strings."]}
{"index": 5782, "name": "str.format_map", "module": "str", "doc": ["Similar to str.format(**mapping), except that mapping is used directly and not copied to a dict.", "This is useful if for example mapping is a dict subclass:"]}
{"index": 5783, "name": "str.index", "module": "str", "doc": ["Like find(), but raise ValueError when the substring is not found."]}
{"index": 5784, "name": "str.isalnum", "module": "str", "doc": ["Return true if all characters in the string are alphanumeric and there is at least one character, false otherwise.", "A character c is alphanumeric if one of the following returns True: c.isalpha(), c.isdecimal(), c.isdigit(), or c.isnumeric()."]}
{"index": 5785, "name": "str.isalpha", "module": "str", "doc": ["Return true if all characters in the string are alphabetic and there is at least one character, false otherwise.", "Alphabetic characters are those characters defined in the Unicode character database as \u201cLetter\u201d, i.e., those with general category property being one of \u201cLm\u201d, \u201cLt\u201d, \u201cLu\u201d, \u201cLl\u201d, or \u201cLo\u201d.", "Note that this is different from the \u201cAlphabetic\u201d property defined in the Unicode Standard."]}
{"index": 5786, "name": "str.isascii", "module": "str", "doc": ["Return true if the string is empty or all characters in the string are ASCII, false otherwise.", "ASCII characters have code points in the range U+0000-U+007F."]}
{"index": 5787, "name": "str.isdecimal", "module": "str", "doc": ["Return true if all characters in the string are decimal characters and there is at least one character, false otherwise.", "Decimal characters are those that can be used to form numbers in base 10, e.g.", "U+0660, ARABIC-INDIC DIGIT ZERO.", "Formally a decimal character is a character in the Unicode General Category \u201cNd\u201d."]}
{"index": 5788, "name": "str.isdigit", "module": "str", "doc": ["Return true if all characters in the string are digits and there is at least one character, false otherwise.", "Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits.", "This covers digits which cannot be used to form numbers in base 10, like the Kharosthi numbers.", "Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal."]}
{"index": 5789, "name": "str.isidentifier", "module": "str", "doc": ["Return true if the string is a valid identifier according to the language definition, section Identifiers and keywords.", "Use keyword.iskeyword() to test for reserved identifiers such as def and class."]}
{"index": 5790, "name": "str.islower", "module": "str", "doc": ["Return true if all cased characters 4 in the string are lowercase and there is at least one cased character, false otherwise."]}
{"index": 5791, "name": "str.isnumeric", "module": "str", "doc": ["Return true if all characters in the string are numeric characters, and there is at least one character, false otherwise.", "Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g.", "U+2155, VULGAR FRACTION ONE FIFTH.", "Formally, numeric characters are those with the property value Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric."]}
{"index": 5792, "name": "str.isprintable", "module": "str", "doc": ["Return true if all characters in the string are printable or the string is empty, false otherwise.", "Nonprintable characters are those characters defined in the Unicode character database as \u201cOther\u201d or \u201cSeparator\u201d, excepting the ASCII space (0x20) which is considered printable.", "(Note that printable characters in this context are those which should not be escaped when repr() is invoked on a string.", "It has no bearing on the handling of strings written to sys.stdout or sys.stderr.)"]}
{"index": 5793, "name": "str.isspace", "module": "str", "doc": ["Return true if there are only whitespace characters in the string and there is at least one character, false otherwise.", "A character is whitespace if in the Unicode character database (see unicodedata), either its general category is Zs (\u201cSeparator, space\u201d), or its bidirectional class is one of WS, B, or S."]}
{"index": 5794, "name": "str.istitle", "module": "str", "doc": ["Return true if the string is a titlecased string and there is at least one character, for example uppercase characters may only follow uncased characters and lowercase characters only cased ones.", "Return false otherwise."]}
{"index": 5795, "name": "str.isupper", "module": "str", "doc": ["Return true if all cased characters 4 in the string are uppercase and there is at least one cased character, false otherwise."]}
{"index": 5796, "name": "str.join", "module": "str", "doc": ["Return a string which is the concatenation of the strings in iterable.", "A TypeError will be raised if there are any non-string values in iterable, including bytes objects.", "The separator between elements is the string providing this method."]}
{"index": 5797, "name": "str.ljust", "module": "str", "doc": ["Return the string left justified in a string of length width.", "Padding is done using the specified fillchar (default is an ASCII space).", "The original string is returned if width is less than or equal to len(s)."]}
{"index": 5798, "name": "str.lower", "module": "str", "doc": ["Return a copy of the string with all the cased characters 4 converted to lowercase.", "The lowercasing algorithm used is described in section 3.13 of the Unicode Standard."]}
{"index": 5799, "name": "str.lstrip", "module": "str", "doc": ["Return a copy of the string with leading characters removed.", "The chars argument is a string specifying the set of characters to be removed.", "If omitted or None, the chars argument defaults to removing whitespace.", "The chars argument is not a prefix; rather, all combinations of its values are stripped:"]}
{"index": 5800, "name": "str.maketrans", "module": "str", "doc": ["This static method returns a translation table usable for str.translate().", "If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None.", "Character keys will then be converted to ordinals.", "If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y.", "If there is a third argument, it must be a string, whose characters will be mapped to None in the result."]}
{"index": 5801, "name": "str.partition", "module": "str", "doc": ["Split the string at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator.", "If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings."]}
{"index": 5802, "name": "str.replace", "module": "str", "doc": ["Return a copy of the string with all occurrences of substring old replaced by new.", "If the optional argument count is given, only the first count occurrences are replaced."]}
{"index": 5803, "name": "str.rfind", "module": "str", "doc": ["Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end].", "Optional arguments start and end are interpreted as in slice notation.", "Return -1 on failure."]}
{"index": 5804, "name": "str.rindex", "module": "str", "doc": ["Like rfind() but raises ValueError when the substring sub is not found."]}
{"index": 5805, "name": "str.rjust", "module": "str", "doc": ["Return the string right justified in a string of length width.", "Padding is done using the specified fillchar (default is an ASCII space).", "The original string is returned if width is less than or equal to len(s)."]}
{"index": 5806, "name": "str.rpartition", "module": "str", "doc": ["Split the string at the last occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator.", "If the separator is not found, return a 3-tuple containing two empty strings, followed by the string itself."]}
{"index": 5807, "name": "str.rsplit", "module": "str", "doc": ["Return a list of the words in the string, using sep as the delimiter string.", "If maxsplit is given, at most maxsplit splits are done, the rightmost ones.", "If sep is not specified or None, any whitespace string is a separator.", "Except for splitting from the right, rsplit() behaves like split() which is described in detail below."]}
{"index": 5808, "name": "str.rstrip", "module": "str", "doc": ["Return a copy of the string with trailing characters removed.", "The chars argument is a string specifying the set of characters to be removed.", "If omitted or None, the chars argument defaults to removing whitespace.", "The chars argument is not a suffix; rather, all combinations of its values are stripped:"]}
{"index": 5809, "name": "str.split", "module": "str", "doc": ["Return a list of the words in the string, using sep as the delimiter string.", "If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements).", "If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made).", "If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, '1,,2'.split(',') returns ['1', '', '2']).", "The sep argument may consist of multiple characters (for example, '1<>2<>3'.split('<>') returns ['1', '2', '3']).", "Splitting an empty string with a specified separator returns [''].", "For example:", "If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace.", "Consequently, splitting an empty string or a string consisting of just whitespace with a None separator returns [].", "For example:"]}
{"index": 5810, "name": "str.splitlines", "module": "str", "doc": ["Return a list of the lines in the string, breaking at line boundaries.", "Line breaks are not included in the resulting list unless keepends is given and true.", "This method splits on the following line boundaries.", "In particular, the boundaries are a superset of universal newlines.", "For example:", "Unlike split() when a delimiter string sep is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:", "For comparison, split('\\n') gives:"]}
{"index": 5811, "name": "str.startswith", "module": "str", "doc": ["Return True if string starts with the prefix, otherwise return False.", "prefix can also be a tuple of prefixes to look for.", "With optional start, test string beginning at that position.", "With optional end, stop comparing string at that position."]}
{"index": 5812, "name": "str.strip", "module": "str", "doc": ["Return a copy of the string with the leading and trailing characters removed.", "The chars argument is a string specifying the set of characters to be removed.", "If omitted or None, the chars argument defaults to removing whitespace.", "The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped:", "The outermost leading and trailing chars argument values are stripped from the string.", "Characters are removed from the leading end until reaching a string character that is not contained in the set of characters in chars.", "A similar action takes place on the trailing end.", "For example:"]}
{"index": 5813, "name": "str.swapcase", "module": "str", "doc": ["Return a copy of the string with uppercase characters converted to lowercase and vice versa.", "Note that it is not necessarily true that s.swapcase().swapcase() == s."]}
{"index": 5814, "name": "str.title", "module": "str", "doc": ["Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase.", "For example:", "The algorithm uses a simple language-independent definition of a word as groups of consecutive letters.", "The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:", "A workaround for apostrophes can be constructed using regular expressions:"]}
{"index": 5815, "name": "str.translate", "module": "str", "doc": ["Return a copy of the string in which each character has been mapped through the given translation table.", "The table must be an object that implements indexing via __getitem__(), typically a mapping or sequence.", "When indexed by a Unicode ordinal (an integer), the table object can do any of the following: return a Unicode ordinal or a string, to map the character to one or more other characters; return None, to delete the character from the return string; or raise a LookupError exception, to map the character to itself.", "You can use str.maketrans() to create a translation map from character-to-character mappings in different formats.", "See also the codecs module for a more flexible approach to custom character mappings."]}
{"index": 5816, "name": "str.upper", "module": "str", "doc": ["Return a copy of the string with all the cased characters 4 converted to uppercase.", "Note that s.upper().isupper() might be False if s contains uncased characters or if the Unicode category of the resulting character(s) is not \u201cLu\u201d (Letter, uppercase), but e.g.", "\u201cLt\u201d (Letter, titlecase).", "The uppercasing algorithm used is described in section 3.13 of the Unicode Standard."]}
{"index": 5817, "name": "str.zfill", "module": "str", "doc": ["Return a copy of the string left filled with ASCII '0' digits to make a string of length width.", "A leading sign prefix ('+'/'-') is handled by inserting the padding after the sign character rather than before.", "The original string is returned if width is less than or equal to len(s).", "For example:"]}
{"index": 5818, "name": "bytes", "module": "stdtypes", "doc": ["Firstly, the syntax for bytes literals is largely the same as that for string literals, except that a b prefix is added:", "Only ASCII characters are permitted in bytes literals (regardless of the declared source code encoding).", "Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence.", "As with string literals, bytes literals may also use a r prefix to disable processing of escape sequences.", "See String and Bytes literals for more about the various forms of bytes literal, including supported escape sequences.", "While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that 0 <= x < 256 (attempts to violate this restriction will trigger ValueError).", "This is done deliberately to emphasise that while many binary formats include ASCII based elements and can be usefully manipulated with some text-oriented algorithms, this is not generally the case for arbitrary binary data (blindly applying text processing algorithms to binary data formats that are not ASCII compatible will usually lead to data corruption).", "In addition to the literal forms, bytes objects can be created in a number of other ways:", "Also see the bytes built-in.", "Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal numbers are a commonly used format for describing binary data.", "Accordingly, the bytes type has an additional class method to read data in that format:", "A reverse conversion function exists to transform a bytes object into its hexadecimal representation."]}
{"index": 5819, "name": "bytes.fromhex", "module": "bytes", "doc": ["This bytes class method returns a bytes object, decoding the given string object.", "The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored."]}
{"index": 5820, "name": "bytes.hex", "module": "bytes", "doc": ["Return a string object containing two hexadecimal digits for each byte in the instance."]}
{"index": 5821, "name": "bytearray", "module": "stdtypes", "doc": ["There is no dedicated literal syntax for bytearray objects, instead they are always created by calling the constructor:", "As bytearray objects are mutable, they support the mutable sequence operations in addition to the common bytes and bytearray operations described in Bytes and Bytearray Operations.", "Also see the bytearray built-in.", "Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal numbers are a commonly used format for describing binary data.", "Accordingly, the bytearray type has an additional class method to read data in that format:", "A reverse conversion function exists to transform a bytearray object into its hexadecimal representation."]}
{"index": 5822, "name": "bytearray.fromhex", "module": "bytearray", "doc": ["This bytearray class method returns bytearray object, decoding the given string object.", "The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored."]}
{"index": 5823, "name": "bytearray.hex", "module": "bytearray", "doc": ["Return a string object containing two hexadecimal digits for each byte in the instance."]}
{"index": 5824, "name": "bytes.count", "module": "bytes", "doc": ["Return the number of non-overlapping occurrences of subsequence sub in the range [start, end].", "Optional arguments start and end are interpreted as in slice notation.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5825, "name": "bytearray.count", "module": "bytearray", "doc": ["Return the number of non-overlapping occurrences of subsequence sub in the range [start, end].", "Optional arguments start and end are interpreted as in slice notation.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5826, "name": "bytes.decode", "module": "bytes", "doc": ["Return a string decoded from the given bytes.", "Default encoding is 'utf-8'.", "errors may be given to set a different error handling scheme.", "The default for errors is 'strict', meaning that encoding errors raise a UnicodeError.", "Other possible values are 'ignore', 'replace' and any other name registered via codecs.register_error(), see section Error Handlers.", "For a list of possible encodings, see section Standard Encodings."]}
{"index": 5827, "name": "bytearray.decode", "module": "bytearray", "doc": ["Return a string decoded from the given bytes.", "Default encoding is 'utf-8'.", "errors may be given to set a different error handling scheme.", "The default for errors is 'strict', meaning that encoding errors raise a UnicodeError.", "Other possible values are 'ignore', 'replace' and any other name registered via codecs.register_error(), see section Error Handlers.", "For a list of possible encodings, see section Standard Encodings."]}
{"index": 5828, "name": "bytes.endswith", "module": "bytes", "doc": ["Return True if the binary data ends with the specified suffix, otherwise return False.", "suffix can also be a tuple of suffixes to look for.", "With optional start, test beginning at that position.", "With optional end, stop comparing at that position.", "The suffix(es) to search for may be any bytes-like object."]}
{"index": 5829, "name": "bytearray.endswith", "module": "bytearray", "doc": ["Return True if the binary data ends with the specified suffix, otherwise return False.", "suffix can also be a tuple of suffixes to look for.", "With optional start, test beginning at that position.", "With optional end, stop comparing at that position.", "The suffix(es) to search for may be any bytes-like object."]}
{"index": 5830, "name": "bytes.find", "module": "bytes", "doc": ["Return the lowest index in the data where the subsequence sub is found, such that sub is contained in the slice s[start:end].", "Optional arguments start and end are interpreted as in slice notation.", "Return -1 if sub is not found.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5831, "name": "bytearray.find", "module": "bytearray", "doc": ["Return the lowest index in the data where the subsequence sub is found, such that sub is contained in the slice s[start:end].", "Optional arguments start and end are interpreted as in slice notation.", "Return -1 if sub is not found.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5832, "name": "bytes.index", "module": "bytes", "doc": ["Like find(), but raise ValueError when the subsequence is not found.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5833, "name": "bytearray.index", "module": "bytearray", "doc": ["Like find(), but raise ValueError when the subsequence is not found.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5834, "name": "bytes.join", "module": "bytes", "doc": ["Return a bytes or bytearray object which is the concatenation of the binary data sequences in iterable.", "A TypeError will be raised if there are any values in iterable that are not bytes-like objects, including str objects.", "The separator between elements is the contents of the bytes or bytearray object providing this method."]}
{"index": 5835, "name": "bytearray.join", "module": "bytearray", "doc": ["Return a bytes or bytearray object which is the concatenation of the binary data sequences in iterable.", "A TypeError will be raised if there are any values in iterable that are not bytes-like objects, including str objects.", "The separator between elements is the contents of the bytes or bytearray object providing this method."]}
{"index": 5836, "name": "bytes.maketrans", "module": "bytes", "doc": ["This static method returns a translation table usable for bytes.translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length."]}
{"index": 5837, "name": "bytearray.maketrans", "module": "bytearray", "doc": ["This static method returns a translation table usable for bytes.translate() that will map each character in from into the character at the same position in to; from and to must both be bytes-like objects and have the same length."]}
{"index": 5838, "name": "bytes.partition", "module": "bytes", "doc": ["Split the sequence at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator.", "If the separator is not found, return a 3-tuple containing a copy of the original sequence, followed by two empty bytes or bytearray objects.", "The separator to search for may be any bytes-like object."]}
{"index": 5839, "name": "bytearray.partition", "module": "bytearray", "doc": ["Split the sequence at the first occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator.", "If the separator is not found, return a 3-tuple containing a copy of the original sequence, followed by two empty bytes or bytearray objects.", "The separator to search for may be any bytes-like object."]}
{"index": 5840, "name": "bytes.replace", "module": "bytes", "doc": ["Return a copy of the sequence with all occurrences of subsequence old replaced by new.", "If the optional argument count is given, only the first count occurrences are replaced.", "The subsequence to search for and its replacement may be any bytes-like object."]}
{"index": 5841, "name": "bytearray.replace", "module": "bytearray", "doc": ["Return a copy of the sequence with all occurrences of subsequence old replaced by new.", "If the optional argument count is given, only the first count occurrences are replaced.", "The subsequence to search for and its replacement may be any bytes-like object."]}
{"index": 5842, "name": "bytes.rfind", "module": "bytes", "doc": ["Return the highest index in the sequence where the subsequence sub is found, such that sub is contained within s[start:end].", "Optional arguments start and end are interpreted as in slice notation.", "Return -1 on failure.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5843, "name": "bytearray.rfind", "module": "bytearray", "doc": ["Return the highest index in the sequence where the subsequence sub is found, such that sub is contained within s[start:end].", "Optional arguments start and end are interpreted as in slice notation.", "Return -1 on failure.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5844, "name": "bytes.rindex", "module": "bytes", "doc": ["Like rfind() but raises ValueError when the subsequence sub is not found.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5845, "name": "bytearray.rindex", "module": "bytearray", "doc": ["Like rfind() but raises ValueError when the subsequence sub is not found.", "The subsequence to search for may be any bytes-like object or an integer in the range 0 to 255."]}
{"index": 5846, "name": "bytes.rpartition", "module": "bytes", "doc": ["Split the sequence at the last occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator.", "If the separator is not found, return a 3-tuple containing two empty bytes or bytearray objects, followed by a copy of the original sequence.", "The separator to search for may be any bytes-like object."]}
{"index": 5847, "name": "bytearray.rpartition", "module": "bytearray", "doc": ["Split the sequence at the last occurrence of sep, and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator.", "If the separator is not found, return a 3-tuple containing two empty bytes or bytearray objects, followed by a copy of the original sequence.", "The separator to search for may be any bytes-like object."]}
{"index": 5848, "name": "bytes.startswith", "module": "bytes", "doc": ["Return True if the binary data starts with the specified prefix, otherwise return False.", "prefix can also be a tuple of prefixes to look for.", "With optional start, test beginning at that position.", "With optional end, stop comparing at that position.", "The prefix(es) to search for may be any bytes-like object."]}
{"index": 5849, "name": "bytearray.startswith", "module": "bytearray", "doc": ["Return True if the binary data starts with the specified prefix, otherwise return False.", "prefix can also be a tuple of prefixes to look for.", "With optional start, test beginning at that position.", "With optional end, stop comparing at that position.", "The prefix(es) to search for may be any bytes-like object."]}
{"index": 5850, "name": "bytes.translate", "module": "bytes", "doc": ["Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument delete are removed, and the remaining bytes have been mapped through the given translation table, which must be a bytes object of length 256.", "You can use the bytes.maketrans() method to create a translation table.", "Set the table argument to None for translations that only delete characters:"]}
{"index": 5851, "name": "bytearray.translate", "module": "bytearray", "doc": ["Return a copy of the bytes or bytearray object where all bytes occurring in the optional argument delete are removed, and the remaining bytes have been mapped through the given translation table, which must be a bytes object of length 256.", "You can use the bytes.maketrans() method to create a translation table.", "Set the table argument to None for translations that only delete characters:"]}
{"index": 5852, "name": "bytes.center", "module": "bytes", "doc": ["Return a copy of the object centered in a sequence of length width.", "Padding is done using the specified fillbyte (default is an ASCII space).", "For bytes objects, the original sequence is returned if width is less than or equal to len(s)."]}
{"index": 5853, "name": "bytearray.center", "module": "bytearray", "doc": ["Return a copy of the object centered in a sequence of length width.", "Padding is done using the specified fillbyte (default is an ASCII space).", "For bytes objects, the original sequence is returned if width is less than or equal to len(s)."]}
{"index": 5854, "name": "bytes.ljust", "module": "bytes", "doc": ["Return a copy of the object left justified in a sequence of length width.", "Padding is done using the specified fillbyte (default is an ASCII space).", "For bytes objects, the original sequence is returned if width is less than or equal to len(s)."]}
{"index": 5855, "name": "bytearray.ljust", "module": "bytearray", "doc": ["Return a copy of the object left justified in a sequence of length width.", "Padding is done using the specified fillbyte (default is an ASCII space).", "For bytes objects, the original sequence is returned if width is less than or equal to len(s)."]}
{"index": 5856, "name": "bytes.lstrip", "module": "bytes", "doc": ["Return a copy of the sequence with specified leading bytes removed.", "The chars argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters.", "If omitted or None, the chars argument defaults to removing ASCII whitespace.", "The chars argument is not a prefix; rather, all combinations of its values are stripped:", "The binary sequence of byte values to remove may be any bytes-like object."]}
{"index": 5857, "name": "bytearray.lstrip", "module": "bytearray", "doc": ["Return a copy of the sequence with specified leading bytes removed.", "The chars argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters.", "If omitted or None, the chars argument defaults to removing ASCII whitespace.", "The chars argument is not a prefix; rather, all combinations of its values are stripped:", "The binary sequence of byte values to remove may be any bytes-like object."]}
{"index": 5858, "name": "bytes.rjust", "module": "bytes", "doc": ["Return a copy of the object right justified in a sequence of length width.", "Padding is done using the specified fillbyte (default is an ASCII space).", "For bytes objects, the original sequence is returned if width is less than or equal to len(s)."]}
{"index": 5859, "name": "bytearray.rjust", "module": "bytearray", "doc": ["Return a copy of the object right justified in a sequence of length width.", "Padding is done using the specified fillbyte (default is an ASCII space).", "For bytes objects, the original sequence is returned if width is less than or equal to len(s)."]}
{"index": 5860, "name": "bytes.rsplit", "module": "bytes", "doc": ["Split the binary sequence into subsequences of the same type, using sep as the delimiter string.", "If maxsplit is given, at most maxsplit splits are done, the rightmost ones.", "If sep is not specified or None, any subsequence consisting solely of ASCII whitespace is a separator.", "Except for splitting from the right, rsplit() behaves like split() which is described in detail below."]}
{"index": 5861, "name": "bytearray.rsplit", "module": "bytearray", "doc": ["Split the binary sequence into subsequences of the same type, using sep as the delimiter string.", "If maxsplit is given, at most maxsplit splits are done, the rightmost ones.", "If sep is not specified or None, any subsequence consisting solely of ASCII whitespace is a separator.", "Except for splitting from the right, rsplit() behaves like split() which is described in detail below."]}
{"index": 5862, "name": "bytes.rstrip", "module": "bytes", "doc": ["Return a copy of the sequence with specified trailing bytes removed.", "The chars argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters.", "If omitted or None, the chars argument defaults to removing ASCII whitespace.", "The chars argument is not a suffix; rather, all combinations of its values are stripped:", "The binary sequence of byte values to remove may be any bytes-like object."]}
{"index": 5863, "name": "bytearray.rstrip", "module": "bytearray", "doc": ["Return a copy of the sequence with specified trailing bytes removed.", "The chars argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters.", "If omitted or None, the chars argument defaults to removing ASCII whitespace.", "The chars argument is not a suffix; rather, all combinations of its values are stripped:", "The binary sequence of byte values to remove may be any bytes-like object."]}
{"index": 5864, "name": "bytes.split", "module": "bytes", "doc": ["Split the binary sequence into subsequences of the same type, using sep as the delimiter string.", "If maxsplit is given and non-negative, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements).", "If maxsplit is not specified or is -1, then there is no limit on the number of splits (all possible splits are made).", "If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty subsequences (for example, b'1,,2'.split(b',') returns [b'1', b'', b'2']).", "The sep argument may consist of a multibyte sequence (for example, b'1<>2<>3'.split(b'<>') returns [b'1', b'2', b'3']).", "Splitting an empty sequence with a specified separator returns [b''] or [bytearray(b'')] depending on the type of object being split.", "The sep argument may be any bytes-like object.", "For example:", "If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive ASCII whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the sequence has leading or trailing whitespace.", "Consequently, splitting an empty sequence or a sequence consisting solely of ASCII whitespace without a specified separator returns [].", "For example:"]}
{"index": 5865, "name": "bytearray.split", "module": "bytearray", "doc": ["Split the binary sequence into subsequences of the same type, using sep as the delimiter string.", "If maxsplit is given and non-negative, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements).", "If maxsplit is not specified or is -1, then there is no limit on the number of splits (all possible splits are made).", "If sep is given, consecutive delimiters are not grouped together and are deemed to delimit empty subsequences (for example, b'1,,2'.split(b',') returns [b'1', b'', b'2']).", "The sep argument may consist of a multibyte sequence (for example, b'1<>2<>3'.split(b'<>') returns [b'1', b'2', b'3']).", "Splitting an empty sequence with a specified separator returns [b''] or [bytearray(b'')] depending on the type of object being split.", "The sep argument may be any bytes-like object.", "For example:", "If sep is not specified or is None, a different splitting algorithm is applied: runs of consecutive ASCII whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the sequence has leading or trailing whitespace.", "Consequently, splitting an empty sequence or a sequence consisting solely of ASCII whitespace without a specified separator returns [].", "For example:"]}
{"index": 5866, "name": "bytes.strip", "module": "bytes", "doc": ["Return a copy of the sequence with specified leading and trailing bytes removed.", "The chars argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters.", "If omitted or None, the chars argument defaults to removing ASCII whitespace.", "The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped:", "The binary sequence of byte values to remove may be any bytes-like object."]}
{"index": 5867, "name": "bytearray.strip", "module": "bytearray", "doc": ["Return a copy of the sequence with specified leading and trailing bytes removed.", "The chars argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters.", "If omitted or None, the chars argument defaults to removing ASCII whitespace.", "The chars argument is not a prefix or suffix; rather, all combinations of its values are stripped:", "The binary sequence of byte values to remove may be any bytes-like object."]}
{"index": 5868, "name": "bytes.capitalize", "module": "bytes", "doc": ["Return a copy of the sequence with each byte interpreted as an ASCII character, and the first byte capitalized and the rest lowercased.", "Non-ASCII byte values are passed through unchanged."]}
{"index": 5869, "name": "bytearray.capitalize", "module": "bytearray", "doc": ["Return a copy of the sequence with each byte interpreted as an ASCII character, and the first byte capitalized and the rest lowercased.", "Non-ASCII byte values are passed through unchanged."]}
{"index": 5870, "name": "bytes.expandtabs", "module": "bytes", "doc": ["Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces, depending on the current column and the given tab size.", "Tab positions occur every tabsize bytes (default is 8, giving tab positions at columns 0, 8, 16 and so on).", "To expand the sequence, the current column is set to zero and the sequence is examined byte by byte.", "If the byte is an ASCII tab character (b'\\t'), one or more space characters are inserted in the result until the current column is equal to the next tab position.", "(The tab character itself is not copied.)", "If the current byte is an ASCII newline (b'\\n') or carriage return (b'\\r'), it is copied and the current column is reset to zero.", "Any other byte value is copied unchanged and the current column is incremented by one regardless of how the byte value is represented when printed:"]}
{"index": 5871, "name": "bytearray.expandtabs", "module": "bytearray", "doc": ["Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces, depending on the current column and the given tab size.", "Tab positions occur every tabsize bytes (default is 8, giving tab positions at columns 0, 8, 16 and so on).", "To expand the sequence, the current column is set to zero and the sequence is examined byte by byte.", "If the byte is an ASCII tab character (b'\\t'), one or more space characters are inserted in the result until the current column is equal to the next tab position.", "(The tab character itself is not copied.)", "If the current byte is an ASCII newline (b'\\n') or carriage return (b'\\r'), it is copied and the current column is reset to zero.", "Any other byte value is copied unchanged and the current column is incremented by one regardless of how the byte value is represented when printed:"]}
{"index": 5872, "name": "bytes.isalnum", "module": "bytes", "doc": ["Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty, false otherwise.", "Alphabetic ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "ASCII decimal digits are those byte values in the sequence b'0123456789'.", "For example:"]}
{"index": 5873, "name": "bytearray.isalnum", "module": "bytearray", "doc": ["Return true if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty, false otherwise.", "Alphabetic ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "ASCII decimal digits are those byte values in the sequence b'0123456789'.", "For example:"]}
{"index": 5874, "name": "bytes.isalpha", "module": "bytes", "doc": ["Return true if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty, false otherwise.", "Alphabetic ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "For example:"]}
{"index": 5875, "name": "bytearray.isalpha", "module": "bytearray", "doc": ["Return true if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty, false otherwise.", "Alphabetic ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "For example:"]}
{"index": 5876, "name": "bytes.isascii", "module": "bytes", "doc": ["Return true if the sequence is empty or all bytes in the sequence are ASCII, false otherwise.", "ASCII bytes are in the range 0-0x7F."]}
{"index": 5877, "name": "bytearray.isascii", "module": "bytearray", "doc": ["Return true if the sequence is empty or all bytes in the sequence are ASCII, false otherwise.", "ASCII bytes are in the range 0-0x7F."]}
{"index": 5878, "name": "bytes.isdigit", "module": "bytes", "doc": ["Return true if all bytes in the sequence are ASCII decimal digits and the sequence is not empty, false otherwise.", "ASCII decimal digits are those byte values in the sequence b'0123456789'.", "For example:"]}
{"index": 5879, "name": "bytearray.isdigit", "module": "bytearray", "doc": ["Return true if all bytes in the sequence are ASCII decimal digits and the sequence is not empty, false otherwise.", "ASCII decimal digits are those byte values in the sequence b'0123456789'.", "For example:"]}
{"index": 5880, "name": "bytes.islower", "module": "bytes", "doc": ["Return true if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters, false otherwise.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5881, "name": "bytearray.islower", "module": "bytearray", "doc": ["Return true if there is at least one lowercase ASCII character in the sequence and no uppercase ASCII characters, false otherwise.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5882, "name": "bytes.isspace", "module": "bytes", "doc": ["Return true if all bytes in the sequence are ASCII whitespace and the sequence is not empty, false otherwise.", "ASCII whitespace characters are those byte values in the sequence b' \\t\\n\\r\\x0b\\f' (space, tab, newline, carriage return, vertical tab, form feed)."]}
{"index": 5883, "name": "bytearray.isspace", "module": "bytearray", "doc": ["Return true if all bytes in the sequence are ASCII whitespace and the sequence is not empty, false otherwise.", "ASCII whitespace characters are those byte values in the sequence b' \\t\\n\\r\\x0b\\f' (space, tab, newline, carriage return, vertical tab, form feed)."]}
{"index": 5884, "name": "bytes.istitle", "module": "bytes", "doc": ["Return true if the sequence is ASCII titlecase and the sequence is not empty, false otherwise.", "See bytes.title() for more details on the definition of \u201ctitlecase\u201d.", "For example:"]}
{"index": 5885, "name": "bytearray.istitle", "module": "bytearray", "doc": ["Return true if the sequence is ASCII titlecase and the sequence is not empty, false otherwise.", "See bytes.title() for more details on the definition of \u201ctitlecase\u201d.", "For example:"]}
{"index": 5886, "name": "bytes.isupper", "module": "bytes", "doc": ["Return true if there is at least one uppercase alphabetic ASCII character in the sequence and no lowercase ASCII characters, false otherwise.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5887, "name": "bytearray.isupper", "module": "bytearray", "doc": ["Return true if there is at least one uppercase alphabetic ASCII character in the sequence and no lowercase ASCII characters, false otherwise.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5888, "name": "bytes.lower", "module": "bytes", "doc": ["Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5889, "name": "bytearray.lower", "module": "bytearray", "doc": ["Return a copy of the sequence with all the uppercase ASCII characters converted to their corresponding lowercase counterpart.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5890, "name": "bytes.splitlines", "module": "bytes", "doc": ["Return a list of the lines in the binary sequence, breaking at ASCII line boundaries.", "This method uses the universal newlines approach to splitting lines.", "Line breaks are not included in the resulting list unless keepends is given and true.", "For example:", "Unlike split() when a delimiter string sep is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:"]}
{"index": 5891, "name": "bytearray.splitlines", "module": "bytearray", "doc": ["Return a list of the lines in the binary sequence, breaking at ASCII line boundaries.", "This method uses the universal newlines approach to splitting lines.", "Line breaks are not included in the resulting list unless keepends is given and true.", "For example:", "Unlike split() when a delimiter string sep is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:"]}
{"index": 5892, "name": "bytes.swapcase", "module": "bytes", "doc": ["Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart and vice-versa.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "Unlike str.swapcase(), it is always the case that bin.swapcase().swapcase() == bin for the binary versions.", "Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points."]}
{"index": 5893, "name": "bytearray.swapcase", "module": "bytearray", "doc": ["Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart and vice-versa.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "Unlike str.swapcase(), it is always the case that bin.swapcase().swapcase() == bin for the binary versions.", "Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points."]}
{"index": 5894, "name": "bytes.title", "module": "bytes", "doc": ["Return a titlecased version of the binary sequence where words start with an uppercase ASCII character and the remaining characters are lowercase.", "Uncased byte values are left unmodified.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "All other byte values are uncased.", "The algorithm uses a simple language-independent definition of a word as groups of consecutive letters.", "The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:", "A workaround for apostrophes can be constructed using regular expressions:"]}
{"index": 5895, "name": "bytearray.title", "module": "bytearray", "doc": ["Return a titlecased version of the binary sequence where words start with an uppercase ASCII character and the remaining characters are lowercase.", "Uncased byte values are left unmodified.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "All other byte values are uncased.", "The algorithm uses a simple language-independent definition of a word as groups of consecutive letters.", "The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:", "A workaround for apostrophes can be constructed using regular expressions:"]}
{"index": 5896, "name": "bytes.upper", "module": "bytes", "doc": ["Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5897, "name": "bytearray.upper", "module": "bytearray", "doc": ["Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart.", "For example:", "Lowercase ASCII characters are those byte values in the sequence b'abcdefghijklmnopqrstuvwxyz'.", "Uppercase ASCII characters are those byte values in the sequence b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'."]}
{"index": 5898, "name": "bytes.zfill", "module": "bytes", "doc": ["Return a copy of the sequence left filled with ASCII b'0' digits to make a sequence of length width.", "A leading sign prefix (b'+'/ b'-') is handled by inserting the padding after the sign character rather than before.", "For bytes objects, the original sequence is returned if width is less than or equal to len(seq).", "For example:"]}
{"index": 5899, "name": "bytearray.zfill", "module": "bytearray", "doc": ["Return a copy of the sequence left filled with ASCII b'0' digits to make a sequence of length width.", "A leading sign prefix (b'+'/ b'-') is handled by inserting the padding after the sign character rather than before.", "For bytes objects, the original sequence is returned if width is less than or equal to len(seq).", "For example:"]}
{"index": 5900, "name": "memoryview", "module": "stdtypes", "doc": ["Create a memoryview that references obj.", "obj must support the buffer protocol.", "Built-in objects that support the buffer protocol include bytes and bytearray.", "A memoryview has the notion of an element, which is the atomic memory unit handled by the originating object obj.", "For many simple types such as bytes and bytearray, an element is a single byte, but other types such as array.array may have bigger elements.", "len(view) is equal to the length of tolist.", "If view.ndim = 0, the length is 1.", "If view.ndim = 1, the length is equal to the number of elements in the view.", "For higher dimensions, the length is equal to the length of the nested list representation of the view.", "The itemsize attribute will give you the number of bytes in a single element.", "A memoryview supports slicing and indexing to expose its data.", "One-dimensional slicing will result in a subview:", "If format is one of the native format specifiers from the struct module, indexing with an integer or a tuple of integers is also supported and returns a single element with the correct type.", "One-dimensional memoryviews can be indexed with an integer or a one-integer tuple.", "Multi-dimensional memoryviews can be indexed with tuples of exactly ndim integers where ndim is the number of dimensions.", "Zero-dimensional memoryviews can be indexed with the empty tuple.", "Here is an example with a non-byte format:", "If the underlying object is writable, the memoryview supports one-dimensional slice assignment.", "Resizing is not allowed:", "One-dimensional memoryviews of hashable (read-only) types with formats \u2018B\u2019, \u2018b\u2019 or \u2018c\u2019 are also hashable.", "The hash is defined as hash(m) == hash(m.tobytes()):", "memoryview has several methods:", "There are also several readonly attributes available:"]}
{"index": 5901, "name": "memoryview.__eq__", "module": "memoryview", "doc": ["A memoryview and a PEP 3118 exporter are equal if their shapes are equivalent and if all corresponding values are equal when the operands\u2019 respective format codes are interpreted using struct syntax.", "For the subset of struct format strings currently supported by tolist(), v and w are equal if v.tolist() == w.tolist():", "If either format string is not supported by the struct module, then the objects will always compare as unequal (even if the format strings and buffer contents are identical):", "Note that, as with floating point numbers, v is w does not imply v == w for memoryview objects."]}
{"index": 5902, "name": "memoryview.tobytes", "module": "memoryview", "doc": ["Return the data in the buffer as a bytestring.", "This is equivalent to calling the bytes constructor on the memoryview.", "For non-contiguous arrays the result is equal to the flattened list representation with all elements converted to bytes.", "tobytes() supports all format strings, including those that are not in struct module syntax."]}
{"index": 5903, "name": "memoryview.hex", "module": "memoryview", "doc": ["Return a string object containing two hexadecimal digits for each byte in the buffer."]}
{"index": 5904, "name": "memoryview.tolist", "module": "memoryview", "doc": ["Return the data in the buffer as a list of elements."]}
{"index": 5905, "name": "memoryview.release", "module": "memoryview", "doc": ["Release the underlying buffer exposed by the memoryview object.", "Many objects take special actions when a view is held on them (for example, a bytearray would temporarily forbid resizing); therefore, calling release() is handy to remove these restrictions (and free any dangling resources) as soon as possible.", "After this method has been called, any further operation on the view raises a ValueError (except release() itself which can be called multiple times):", "The context management protocol can be used for a similar effect, using the with statement:"]}
{"index": 5906, "name": "memoryview.cast", "module": "memoryview", "doc": ["Cast a memoryview to a new format or shape.", "shape defaults to [byte_length//new_itemsize], which means that the result view will be one-dimensional.", "The return value is a new memoryview, but the buffer itself is not copied.", "Supported casts are 1D -> C-contiguous and C-contiguous -> 1D.", "The destination format is restricted to a single element native format in struct syntax.", "One of the formats must be a byte format (\u2018B\u2019, \u2018b\u2019 or \u2018c\u2019).", "The byte length of the result must be the same as the original length.", "Cast 1D/long to 1D/unsigned bytes:", "Cast 1D/unsigned bytes to 1D/char:", "Cast 1D/bytes to 3D/ints to 1D/signed char:", "Cast 1D/unsigned long to 2D/unsigned long:"]}
{"index": 5907, "name": "memoryview.obj", "module": "memoryview", "doc": ["The underlying object of the memoryview:"]}
{"index": 5908, "name": "memoryview.nbytes", "module": "memoryview", "doc": ["nbytes == product(shape) * itemsize == len(m.tobytes()).", "This is the amount of space in bytes that the array would use in a contiguous representation.", "It is not necessarily equal to len(m):", "Multi-dimensional arrays:"]}
{"index": 5909, "name": "memoryview.readonly", "module": "memoryview", "doc": ["A bool indicating whether the memory is read only."]}
{"index": 5910, "name": "memoryview.format", "module": "memoryview", "doc": ["A string containing the format (in struct module style) for each element in the view.", "A memoryview can be created from exporters with arbitrary format strings, but some methods (e.g.", "tolist()) are restricted to native single element formats."]}
{"index": 5911, "name": "memoryview.itemsize", "module": "memoryview", "doc": ["The size in bytes of each element of the memoryview:"]}
{"index": 5912, "name": "memoryview.ndim", "module": "memoryview", "doc": ["An integer indicating how many dimensions of a multi-dimensional array the memory represents."]}
{"index": 5913, "name": "memoryview.shape", "module": "memoryview", "doc": ["A tuple of integers the length of ndim giving the shape of the memory as an N-dimensional array."]}
{"index": 5914, "name": "memoryview.strides", "module": "memoryview", "doc": ["A tuple of integers the length of ndim giving the size in bytes to access each element for each dimension of the array."]}
{"index": 5915, "name": "memoryview.suboffsets", "module": "memoryview", "doc": ["Used internally for PIL-style arrays.", "The value is informational only."]}
{"index": 5916, "name": "memoryview.c_contiguous", "module": "memoryview", "doc": ["A bool indicating whether the memory is C-contiguous."]}
{"index": 5917, "name": "memoryview.f_contiguous", "module": "memoryview", "doc": ["A bool indicating whether the memory is Fortran contiguous."]}
{"index": 5918, "name": "memoryview.contiguous", "module": "memoryview", "doc": ["A bool indicating whether the memory is contiguous."]}
{"index": 5919, "name": "set", "module": "stdtypes", "doc": ["Return a new set or frozenset object whose elements are taken from iterable.", "The elements of a set must be hashable.", "To represent sets of sets, the inner sets must be frozenset objects.", "If iterable is not specified, a new empty set is returned.", "Instances of set and frozenset provide the following operations:", "Note, the non-operator versions of union(), intersection(), difference(), and symmetric_difference(), issubset(), and issuperset() methods will accept any iterable as an argument.", "In contrast, their operator based counterparts require their arguments to be sets.", "This precludes error-prone constructions like set('abc') & 'cbs' in favor of the more readable set('abc').intersection('cbs').", "Both set and frozenset support set to set comparisons.", "Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other).", "A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal).", "A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).", "Instances of set are compared to instances of frozenset based on their members.", "For example, set('abc') == frozenset('abc') returns True and so does set('abc') in set([frozenset('abc')]).", "The subset and equality comparisons do not generalize to a total ordering function.", "For example, any two nonempty disjoint sets are not equal and are not subsets of each other, so all of the following return False: a<b, a==b, or a>b.", "Since sets only define partial ordering (subset relationships), the output of the list.sort() method is undefined for lists of sets.", "Set elements, like dictionary keys, must be hashable.", "Binary operations that mix set instances with frozenset return the type of the first operand.", "For example: frozenset('ab') | set('bc') returns an instance of frozenset.", "The following table lists operations available for set that do not apply to immutable instances of frozenset:", "Note, the non-operator versions of the update(), intersection_update(), difference_update(), and symmetric_difference_update() methods will accept any iterable as an argument.", "Note, the elem argument to the __contains__(), remove(), and discard() methods may be a set.", "To support searching for an equivalent frozenset, a temporary one is created from elem."]}
{"index": 5920, "name": "frozenset", "module": "stdtypes", "doc": ["Return a new set or frozenset object whose elements are taken from iterable.", "The elements of a set must be hashable.", "To represent sets of sets, the inner sets must be frozenset objects.", "If iterable is not specified, a new empty set is returned.", "Instances of set and frozenset provide the following operations:", "Note, the non-operator versions of union(), intersection(), difference(), and symmetric_difference(), issubset(), and issuperset() methods will accept any iterable as an argument.", "In contrast, their operator based counterparts require their arguments to be sets.", "This precludes error-prone constructions like set('abc') & 'cbs' in favor of the more readable set('abc').intersection('cbs').", "Both set and frozenset support set to set comparisons.", "Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other).", "A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal).", "A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).", "Instances of set are compared to instances of frozenset based on their members.", "For example, set('abc') == frozenset('abc') returns True and so does set('abc') in set([frozenset('abc')]).", "The subset and equality comparisons do not generalize to a total ordering function.", "For example, any two nonempty disjoint sets are not equal and are not subsets of each other, so all of the following return False: a<b, a==b, or a>b.", "Since sets only define partial ordering (subset relationships), the output of the list.sort() method is undefined for lists of sets.", "Set elements, like dictionary keys, must be hashable.", "Binary operations that mix set instances with frozenset return the type of the first operand.", "For example: frozenset('ab') | set('bc') returns an instance of frozenset.", "The following table lists operations available for set that do not apply to immutable instances of frozenset:", "Note, the non-operator versions of the update(), intersection_update(), difference_update(), and symmetric_difference_update() methods will accept any iterable as an argument.", "Note, the elem argument to the __contains__(), remove(), and discard() methods may be a set.", "To support searching for an equivalent frozenset, a temporary one is created from elem."]}
{"index": 5921, "name": "frozenset.isdisjoint", "module": "frozenset", "doc": ["Return True if the set has no elements in common with other.", "Sets are disjoint if and only if their intersection is the empty set."]}
{"index": 5922, "name": "frozenset.issubset", "module": "frozenset", "doc": ["Test whether every element in the set is in other."]}
{"index": 5923, "name": "frozenset.issuperset", "module": "frozenset", "doc": ["Test whether every element in other is in the set."]}
{"index": 5924, "name": "frozenset.union", "module": "frozenset", "doc": ["Return a new set with elements from the set and all others."]}
{"index": 5925, "name": "frozenset.intersection", "module": "frozenset", "doc": ["Return a new set with elements common to the set and all others."]}
{"index": 5926, "name": "frozenset.difference", "module": "frozenset", "doc": ["Return a new set with elements in the set that are not in the others."]}
{"index": 5927, "name": "frozenset.symmetric_difference", "module": "frozenset", "doc": ["Return a new set with elements in either the set or other but not both."]}
{"index": 5928, "name": "frozenset.copy", "module": "frozenset", "doc": ["Return a shallow copy of the set."]}
{"index": 5929, "name": "frozenset.update", "module": "frozenset", "doc": ["Update the set, adding elements from all others."]}
{"index": 5930, "name": "frozenset.intersection_update", "module": "frozenset", "doc": ["Update the set, keeping only elements found in it and all others."]}
{"index": 5931, "name": "frozenset.difference_update", "module": "frozenset", "doc": ["Update the set, removing elements found in others."]}
{"index": 5932, "name": "frozenset.symmetric_difference_update", "module": "frozenset", "doc": ["Update the set, keeping only elements found in either set, but not in both."]}
{"index": 5933, "name": "frozenset.add", "module": "frozenset", "doc": ["Add element elem to the set."]}
{"index": 5934, "name": "frozenset.remove", "module": "frozenset", "doc": ["Remove element elem from the set.", "Raises KeyError if elem is not contained in the set."]}
{"index": 5935, "name": "frozenset.discard", "module": "frozenset", "doc": ["Remove element elem from the set if it is present."]}
{"index": 5936, "name": "frozenset.pop", "module": "frozenset", "doc": ["Remove and return an arbitrary element from the set.", "Raises KeyError if the set is empty."]}
{"index": 5937, "name": "frozenset.clear", "module": "frozenset", "doc": ["Remove all elements from the set."]}
{"index": 5938, "name": "dict", "module": "stdtypes", "doc": ["Return a new dictionary initialized from an optional positional argument and a possibly empty set of keyword arguments.", "If no positional argument is given, an empty dictionary is created.", "If a positional argument is given and it is a mapping object, a dictionary is created with the same key-value pairs as the mapping object.", "Otherwise, the positional argument must be an iterable object.", "Each item in the iterable must itself be an iterable with exactly two objects.", "The first object of each item becomes a key in the new dictionary, and the second object the corresponding value.", "If a key occurs more than once, the last value for that key becomes the corresponding value in the new dictionary.", "If keyword arguments are given, the keyword arguments and their values are added to the dictionary created from the positional argument.", "If a key being added is already present, the value from the keyword argument replaces the value from the positional argument.", "To illustrate, the following examples all return a dictionary equal to {\"one\": 1, \"two\": 2, \"three\": 3}:", "Providing keyword arguments as in the first example only works for keys that are valid Python identifiers.", "Otherwise, any valid keys can be used.", "These are the operations that dictionaries support (and therefore, custom mapping types should support too):", "Dictionaries compare equal if and only if they have the same (key, value) pairs (regardless of ordering).", "Order comparisons (\u2018<\u2019, \u2018<=\u2019, \u2018>=\u2019, \u2018>\u2019) raise TypeError.", "Dictionaries preserve insertion order.", "Note that updating a key does not affect the order.", "Keys added after deletion are inserted at the end."]}
{"index": 5939, "name": "dict.clear", "module": "dict", "doc": ["Remove all items from the dictionary."]}
{"index": 5940, "name": "dict.copy", "module": "dict", "doc": ["Return a shallow copy of the dictionary."]}
{"index": 5941, "name": "dict.fromkeys", "module": "dict", "doc": ["Create a new dictionary with keys from iterable and values set to value.", "fromkeys() is a class method that returns a new dictionary.", "value defaults to None."]}
{"index": 5942, "name": "dict.get", "module": "dict", "doc": ["Return the value for key if key is in the dictionary, else default.", "If default is not given, it defaults to None, so that this method never raises a KeyError."]}
{"index": 5943, "name": "dict.items", "module": "dict", "doc": ["Return a new view of the dictionary\u2019s items ((key, value) pairs).", "See the documentation of view objects."]}
{"index": 5944, "name": "dict.keys", "module": "dict", "doc": ["Return a new view of the dictionary\u2019s keys.", "See the documentation of view objects."]}
{"index": 5945, "name": "dict.pop", "module": "dict", "doc": ["If key is in the dictionary, remove it and return its value, else return default.", "If default is not given and key is not in the dictionary, a KeyError is raised."]}
{"index": 5946, "name": "dict.popitem", "module": "dict", "doc": ["Remove and return a (key, value) pair from the dictionary.", "Pairs are returned in LIFO order.", "popitem() is useful to destructively iterate over a dictionary, as often used in set algorithms.", "If the dictionary is empty, calling popitem() raises a KeyError."]}
{"index": 5947, "name": "dict.setdefault", "module": "dict", "doc": ["If key is in the dictionary, return its value.", "If not, insert key with a value of default and return default.", "default defaults to None."]}
{"index": 5948, "name": "dict.update", "module": "dict", "doc": ["Update the dictionary with the key/value pairs from other, overwriting existing keys.", "Return None.", "update() accepts either another dictionary object or an iterable of key/value pairs (as tuples or other iterables of length two).", "If keyword arguments are specified, the dictionary is then updated with those key/value pairs: d.update(red=1, blue=2)."]}
{"index": 5949, "name": "dict.values", "module": "dict", "doc": ["Return a new view of the dictionary\u2019s values.", "See the documentation of view objects.", "An equality comparison between one dict.values() view and another will always return False.", "This also applies when comparing dict.values() to itself:"]}
{"index": 5950, "name": "contextmanager.__enter__", "module": "contextmanager", "doc": ["Enter the runtime context and return either this object or another object related to the runtime context.", "The value returned by this method is bound to the identifier in the as clause of with statements using this context manager.", "An example of a context manager that returns itself is a file object.", "File objects return themselves from __enter__() to allow open() to be used as the context expression in a with statement.", "An example of a context manager that returns a related object is the one returned by decimal.localcontext().", "These managers set the active decimal context to a copy of the original decimal context and then return the copy.", "This allows changes to be made to the current decimal context in the body of the with statement without affecting code outside the with statement."]}
{"index": 5951, "name": "contextmanager.__exit__", "module": "contextmanager", "doc": ["Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed.", "If an exception occurred while executing the body of the with statement, the arguments contain the exception type, value and traceback information.", "Otherwise, all three arguments are None.", "Returning a true value from this method will cause the with statement to suppress the exception and continue execution with the statement immediately following the with statement.", "Otherwise the exception continues propagating after this method has finished executing.", "Exceptions that occur during execution of this method will replace any exception that occurred in the body of the with statement.", "The exception passed in should never be reraised explicitly - instead, this method should return a false value to indicate that the method completed successfully and does not want to suppress the raised exception.", "This allows context management code to easily detect whether or not an __exit__() method has actually failed."]}
{"index": 5952, "name": "object.__dict__", "module": "object", "doc": ["A dictionary or other mapping object used to store an object\u2019s (writable) attributes."]}
{"index": 5953, "name": "instance.__class__", "module": "instance", "doc": ["The class to which a class instance belongs."]}
{"index": 5954, "name": "class.__bases__", "module": "class", "doc": ["The tuple of base classes of a class object."]}
{"index": 5955, "name": "definition.__name__", "module": "definition", "doc": ["The name of the class, function, method, descriptor, or generator instance."]}
{"index": 5956, "name": "definition.__qualname__", "module": "definition", "doc": ["The qualified name of the class, function, method, descriptor, or generator instance."]}
{"index": 5957, "name": "class.__mro__", "module": "class", "doc": ["This attribute is a tuple of classes that are considered when looking for base classes during method resolution."]}
{"index": 5958, "name": "class.mro", "module": "class", "doc": ["This method can be overridden by a metaclass to customize the method resolution order for its instances.", "It is called at class instantiation, and its result is stored in __mro__."]}
{"index": 5959, "name": "class.__subclasses__", "module": "class", "doc": ["Each class keeps a list of weak references to its immediate subclasses.", "This method returns a list of all those references still alive.", "Example:"]}
{"index": 5960, "name": "id12", "module": "stdtypes", "doc": ["Additional information on these special methods may be found in the Python Reference Manual (Basic customization)."]}
{"index": 5961, "name": "id13", "module": "stdtypes", "doc": ["Additional information on these special methods may be found in the Python Reference Manual (Basic customization)."]}
{"index": 5962, "name": "id14", "module": "stdtypes", "doc": ["Additional information on these special methods may be found in the Python Reference Manual (Basic customization)."]}
{"index": 5963, "name": "id15", "module": "stdtypes", "doc": ["Additional information on these special methods may be found in the Python Reference Manual (Basic customization)."]}
{"index": 5964, "name": "id16", "module": "stdtypes", "doc": ["Additional information on these special methods may be found in the Python Reference Manual (Basic customization)."]}
{"index": 5965, "name": "string.ascii_letters", "module": "string", "doc": ["The concatenation of the ascii_lowercase and ascii_uppercase constants described below.", "This value is not locale-dependent."]}
{"index": 5966, "name": "string.ascii_lowercase", "module": "string", "doc": ["The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.", "This value is not locale-dependent and will not change."]}
{"index": 5967, "name": "string.ascii_uppercase", "module": "string", "doc": ["The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.", "This value is not locale-dependent and will not change."]}
{"index": 5968, "name": "string.digits", "module": "string", "doc": ["The string '0123456789'."]}
{"index": 5969, "name": "string.hexdigits", "module": "string", "doc": ["The string '0123456789abcdefABCDEF'."]}
{"index": 5970, "name": "string.octdigits", "module": "string", "doc": ["The string '01234567'."]}
{"index": 5971, "name": "string.punctuation", "module": "string", "doc": ["String of ASCII characters which are considered punctuation characters in the C locale."]}
{"index": 5972, "name": "string.printable", "module": "string", "doc": ["String of ASCII characters which are considered printable.", "This is a combination of digits, ascii_letters, punctuation, and whitespace."]}
{"index": 5973, "name": "string.whitespace", "module": "string", "doc": ["A string containing all ASCII characters that are considered whitespace.", "This includes the characters space, tab, linefeed, return, formfeed, and vertical tab."]}
{"index": 5974, "name": "string.Formatter", "module": "string", "doc": ["The Formatter class has the following public methods:", "In addition, the Formatter defines a number of methods that are intended to be replaced by subclasses:"]}
{"index": 5975, "name": "string.Formatter.format", "module": "string", "doc": ["The primary API method.", "It takes a format string and an arbitrary set of positional and keyword arguments.", "It is just a wrapper that calls vformat()."]}
{"index": 5976, "name": "string.Formatter.vformat", "module": "string", "doc": ["This function does the actual work of formatting.", "It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the *args and **kwargs syntax.", "vformat() does the work of breaking up the format string into character data and replacement fields.", "It calls the various methods described below."]}
{"index": 5977, "name": "string.Formatter.parse", "module": "string", "doc": ["Loop over the format_string and return an iterable of tuples (literal_text, field_name, format_spec, conversion).", "This is used by vformat() to break the string into either literal text, or replacement fields.", "The values in the tuple conceptually represent a span of literal text followed by a single replacement field.", "If there is no literal text (which can happen if two replacement fields occur consecutively), then literal_text will be a zero-length string.", "If there is no replacement field, then the values of field_name, format_spec and conversion will be None."]}
{"index": 5978, "name": "string.Formatter.get_field", "module": "string", "doc": ["Given field_name as returned by parse() (see above), convert it to an object to be formatted.", "Returns a tuple (obj, used_key).", "The default version takes strings of the form defined in PEP 3101, such as \u201c0[name]\u201d or \u201clabel.title\u201d.", "args and kwargs are as passed in to vformat().", "The return value used_key has the same meaning as the key parameter to get_value()."]}
{"index": 5979, "name": "string.Formatter.get_value", "module": "string", "doc": ["Retrieve a given field value.", "The key argument will be either an integer or a string.", "If it is an integer, it represents the index of the positional argument in args; if it is a string, then it represents a named argument in kwargs.", "The args parameter is set to the list of positional arguments to vformat(), and the kwargs parameter is set to the dictionary of keyword arguments.", "For compound field names, these functions are only called for the first component of the field name; Subsequent components are handled through normal attribute and indexing operations.", "So for example, the field expression \u20180.name\u2019 would cause get_value() to be called with a key argument of 0.", "The name attribute will be looked up after get_value() returns by calling the built-in getattr() function.", "If the index or keyword refers to an item that does not exist, then an IndexError or KeyError should be raised."]}
{"index": 5980, "name": "string.Formatter.check_unused_args", "module": "string", "doc": ["Implement checking for unused arguments if desired.", "The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the args and kwargs that was passed to vformat.", "The set of unused args can be calculated from these parameters.", "check_unused_args() is assumed to raise an exception if the check fails."]}
{"index": 5981, "name": "string.Formatter.format_field", "module": "string", "doc": ["format_field() simply calls the global format() built-in.", "The method is provided so that subclasses can override it."]}
{"index": 5982, "name": "string.Formatter.convert_field", "module": "string", "doc": ["Converts the value (returned by get_field()) given a conversion type (as in the tuple returned by the parse() method).", "The default version understands \u2018s\u2019 (str), \u2018r\u2019 (repr) and \u2018a\u2019 (ascii) conversion types."]}
{"index": 5983, "name": "string.Template", "module": "string", "doc": ["The constructor takes a single argument which is the template string.", "Template instances also provide one public data attribute:"]}
{"index": 5984, "name": "string.Template.substitute", "module": "string", "doc": ["Performs the template substitution, returning a new string.", "mapping is any dictionary-like object with keys that match the placeholders in the template.", "Alternatively, you can provide keyword arguments, where the keywords are the placeholders.", "When both mapping and kwds are given and there are duplicates, the placeholders from kwds take precedence."]}
{"index": 5985, "name": "string.Template.safe_substitute", "module": "string", "doc": ["Like substitute(), except that if placeholders are missing from mapping and kwds, instead of raising a KeyError exception, the original placeholder will appear in the resulting string intact.", "Also, unlike with substitute(), any other appearances of the $ will simply return $ instead of raising ValueError.", "While other exceptions may still occur, this method is called \u201csafe\u201d because it always tries to return a usable string instead of raising an exception.", "In another sense, safe_substitute() may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers."]}
{"index": 5986, "name": "string.Template.template", "module": "string", "doc": ["This is the object passed to the constructor\u2019s template argument.", "In general, you shouldn\u2019t change it, but read-only access is not enforced."]}
{"index": 5987, "name": "string.capwords", "module": "string", "doc": ["Split the argument into words using str.split(), capitalize each word using str.capitalize(), and join the capitalized words using str.join().", "If the optional second argument sep is absent or None, runs of whitespace characters are replaced by a single space and leading and trailing whitespace are removed, otherwise sep is used to split and join the words."]}
{"index": 5988, "name": "stringprep.in_table_a1", "module": "stringprep", "doc": ["Determine whether code is in tableA.1 (Unassigned code points in Unicode 3.2)."]}
{"index": 5989, "name": "stringprep.in_table_b1", "module": "stringprep", "doc": ["Determine whether code is in tableB.1 (Commonly mapped to nothing)."]}
{"index": 5990, "name": "stringprep.map_table_b2", "module": "stringprep", "doc": ["Return the mapped value for code according to tableB.2 (Mapping for case-folding used with NFKC)."]}
{"index": 5991, "name": "stringprep.map_table_b3", "module": "stringprep", "doc": ["Return the mapped value for code according to tableB.3 (Mapping for case-folding used with no normalization)."]}
{"index": 5992, "name": "stringprep.in_table_c11", "module": "stringprep", "doc": ["Determine whether code is in tableC.1.1  (ASCII space characters)."]}
{"index": 5993, "name": "stringprep.in_table_c12", "module": "stringprep", "doc": ["Determine whether code is in tableC.1.2  (Non-ASCII space characters)."]}
{"index": 5994, "name": "stringprep.in_table_c11_c12", "module": "stringprep", "doc": ["Determine whether code is in tableC.1  (Space characters, union of C.1.1 and C.1.2)."]}
{"index": 5995, "name": "stringprep.in_table_c21", "module": "stringprep", "doc": ["Determine whether code is in tableC.2.1  (ASCII control characters)."]}
{"index": 5996, "name": "stringprep.in_table_c22", "module": "stringprep", "doc": ["Determine whether code is in tableC.2.2  (Non-ASCII control characters)."]}
{"index": 5997, "name": "stringprep.in_table_c21_c22", "module": "stringprep", "doc": ["Determine whether code is in tableC.2  (Control characters, union of C.2.1 and C.2.2)."]}
{"index": 5998, "name": "stringprep.in_table_c3", "module": "stringprep", "doc": ["Determine whether code is in tableC.3  (Private use)."]}
{"index": 5999, "name": "stringprep.in_table_c4", "module": "stringprep", "doc": ["Determine whether code is in tableC.4  (Non-character code points)."]}
{"index": 6000, "name": "stringprep.in_table_c5", "module": "stringprep", "doc": ["Determine whether code is in tableC.5  (Surrogate codes)."]}
{"index": 6001, "name": "stringprep.in_table_c6", "module": "stringprep", "doc": ["Determine whether code is in tableC.6  (Inappropriate for plain text)."]}
{"index": 6002, "name": "stringprep.in_table_c7", "module": "stringprep", "doc": ["Determine whether code is in tableC.7  (Inappropriate for canonical representation)."]}
{"index": 6003, "name": "stringprep.in_table_c8", "module": "stringprep", "doc": ["Determine whether code is in tableC.8  (Change display properties or are deprecated)."]}
{"index": 6004, "name": "stringprep.in_table_c9", "module": "stringprep", "doc": ["Determine whether code is in tableC.9  (Tagging characters)."]}
{"index": 6005, "name": "stringprep.in_table_d1", "module": "stringprep", "doc": ["Determine whether code is in tableD.1  (Characters with bidirectional property \u201cR\u201d or \u201cAL\u201d)."]}
{"index": 6006, "name": "stringprep.in_table_d2", "module": "stringprep", "doc": ["Determine whether code is in tableD.2  (Characters with bidirectional property \u201cL\u201d)."]}
{"index": 6007, "name": "struct.error", "module": "struct", "doc": ["Exception raised on various occasions; argument is a string describing what is wrong."]}
{"index": 6008, "name": "struct.pack", "module": "struct", "doc": ["Return a bytes object containing the values v1, v2, \u2026 packed according to the format string format.", "The arguments must match the values required by the format exactly."]}
{"index": 6009, "name": "struct.pack_into", "module": "struct", "doc": ["Pack the values v1, v2, \u2026 according to the format string format and write the packed bytes into the writable buffer buffer starting at position offset.", "Note that offset is a required argument."]}
{"index": 6010, "name": "struct.unpack", "module": "struct", "doc": ["Unpack from the buffer buffer (presumably packed by pack(format, ...)) according to the format string format.", "The result is a tuple even if it contains exactly one item.", "The buffer\u2019s size in bytes must match the size required by the format, as reflected by calcsize()."]}
{"index": 6011, "name": "struct.unpack_from", "module": "struct", "doc": ["Unpack from buffer starting at position offset, according to the format string format.", "The result is a tuple even if it contains exactly one item.", "The buffer\u2019s size in bytes, minus offset, must be at least the size required by the format, as reflected by calcsize()."]}
{"index": 6012, "name": "struct.iter_unpack", "module": "struct", "doc": ["Iteratively unpack from the buffer buffer according to the format string format.", "This function returns an iterator which will read equally-sized chunks from the buffer until all its contents have been consumed.", "The buffer\u2019s size in bytes must be a multiple of the size required by the format, as reflected by calcsize().", "Each iteration yields a tuple as specified by the format string."]}
{"index": 6013, "name": "struct.calcsize", "module": "struct", "doc": ["Return the size of the struct (and hence of the bytes object produced by pack(format, ...)) corresponding to the format string format."]}
{"index": 6014, "name": "struct.Struct", "module": "struct", "doc": ["Return a new Struct object which writes and reads binary data according to the format string format.", "Creating a Struct object once and calling its methods is more efficient than calling the struct functions with the same format since the format string only needs to be compiled once.", "Compiled Struct objects support the following methods and attributes:"]}
{"index": 6015, "name": "struct.Struct.pack", "module": "struct", "doc": ["Identical to the pack() function, using the compiled format.", "(len(result) will equal size.)"]}
{"index": 6016, "name": "struct.Struct.pack_into", "module": "struct", "doc": ["Identical to the pack_into() function, using the compiled format."]}
{"index": 6017, "name": "struct.Struct.unpack", "module": "struct", "doc": ["Identical to the unpack() function, using the compiled format.", "The buffer\u2019s size in bytes must equal size."]}
{"index": 6018, "name": "struct.Struct.unpack_from", "module": "struct", "doc": ["Identical to the unpack_from() function, using the compiled format.", "The buffer\u2019s size in bytes, minus offset, must be at least size."]}
{"index": 6019, "name": "struct.Struct.iter_unpack", "module": "struct", "doc": ["Identical to the iter_unpack() function, using the compiled format.", "The buffer\u2019s size in bytes must be a multiple of size."]}
{"index": 6020, "name": "struct.Struct.format", "module": "struct", "doc": ["The format string used to construct this Struct object."]}
{"index": 6021, "name": "struct.Struct.size", "module": "struct", "doc": ["The calculated size of the struct (and hence of the bytes object produced by the pack() method) corresponding to format."]}
{"index": 6022, "name": "subprocess.run", "module": "subprocess", "doc": ["Run the command described by args.", "Wait for command to complete, then return a CompletedProcess instance.", "The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the use of keyword-only notation in the abbreviated signature).", "The full function signature is largely the same as that of the Popen constructor - most of the arguments to this function are passed through to that interface.", "(timeout,  input, check, and capture_output are not.)", "If capture_output is true, stdout and stderr will be captured.", "When used, the internal Popen object is automatically created with stdout=PIPE and stderr=PIPE.", "The stdout and stderr arguments may not be supplied at the same time as capture_output.", "If you wish to capture and combine both streams into one, use stdout=PIPE and stderr=STDOUT instead of capture_output.", "The timeout argument is passed to Popen.communicate().", "If the timeout expires, the child process will be killed and waited for.", "The TimeoutExpired exception will be re-raised after the child process has terminated.", "The input argument is passed to Popen.communicate() and thus to the subprocess\u2019s stdin.", "If used it must be a byte sequence, or a string if encoding or errors is specified or text is true.", "When used, the internal Popen object is automatically created with stdin=PIPE, and the stdin argument may not be used as well.", "If check is true, and the process exits with a non-zero exit code, a CalledProcessError exception will be raised.", "Attributes of that exception hold the arguments, the exit code, and stdout and stderr if they were captured.", "If encoding or errors are specified, or text is true, file objects for stdin, stdout and stderr are opened in text mode using the specified encoding and errors or the io.TextIOWrapper default.", "The universal_newlines argument is equivalent  to text and is provided for backwards compatibility.", "By default, file objects are opened in binary mode.", "If env is not None, it must be a mapping that defines the environment variables for the new process; these are used instead of the default behavior of inheriting the current process\u2019 environment.", "It is passed directly to Popen.", "Examples:"]}
{"index": 6023, "name": "subprocess.CompletedProcess", "module": "subprocess", "doc": ["The return value from run(), representing a process that has finished."]}
{"index": 6024, "name": "subprocess.CompletedProcess.args", "module": "subprocess", "doc": ["The arguments used to launch the process.", "This may be a list or a string."]}
{"index": 6025, "name": "subprocess.CompletedProcess.returncode", "module": "subprocess", "doc": ["Exit status of the child process.", "Typically, an exit status of 0 indicates that it ran successfully.", "A negative value -N indicates that the child was terminated by signal N (POSIX only)."]}
{"index": 6026, "name": "subprocess.CompletedProcess.stdout", "module": "subprocess", "doc": ["Captured stdout from the child process.", "A bytes sequence, or a string if run() was called with an encoding, errors, or text=True.", "None if stdout was not captured.", "If you ran the process with stderr=subprocess.STDOUT, stdout and stderr will be combined in this attribute, and stderr will be None."]}
{"index": 6027, "name": "subprocess.CompletedProcess.stderr", "module": "subprocess", "doc": ["Captured stderr from the child process.", "A bytes sequence, or a string if run() was called with an encoding, errors, or text=True.", "None if stderr was not captured."]}
{"index": 6028, "name": "subprocess.CompletedProcess.check_returncode", "module": "subprocess", "doc": ["If returncode is non-zero, raise a CalledProcessError."]}
{"index": 6029, "name": "subprocess.DEVNULL", "module": "subprocess", "doc": ["Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that the special file os.devnull will be used."]}
{"index": 6030, "name": "subprocess.PIPE", "module": "subprocess", "doc": ["Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened.", "Most useful with Popen.communicate()."]}
{"index": 6031, "name": "subprocess.STDOUT", "module": "subprocess", "doc": ["Special value that can be used as the stderr argument to Popen and indicates that standard error should go into the same handle as standard output."]}
{"index": 6032, "name": "subprocess.SubprocessError", "module": "subprocess", "doc": ["Base class for all other exceptions from this module."]}
{"index": 6033, "name": "subprocess.TimeoutExpired", "module": "subprocess", "doc": ["Subclass of SubprocessError, raised when a timeout expires while waiting for a child process."]}
{"index": 6034, "name": "subprocess.TimeoutExpired.cmd", "module": "subprocess", "doc": ["Command that was used to spawn the child process."]}
{"index": 6035, "name": "subprocess.TimeoutExpired.timeout", "module": "subprocess", "doc": ["Timeout in seconds."]}
{"index": 6036, "name": "subprocess.TimeoutExpired.output", "module": "subprocess", "doc": ["Output of the child process if it was captured by run() or check_output().", "Otherwise, None."]}
{"index": 6037, "name": "subprocess.TimeoutExpired.stdout", "module": "subprocess", "doc": ["Alias for output, for symmetry with stderr."]}
{"index": 6038, "name": "subprocess.TimeoutExpired.stderr", "module": "subprocess", "doc": ["Stderr output of the child process if it was captured by run().", "Otherwise, None."]}
{"index": 6039, "name": "subprocess.CalledProcessError", "module": "subprocess", "doc": ["Subclass of SubprocessError, raised when a process run by check_call() or check_output() returns a non-zero exit status."]}
{"index": 6040, "name": "subprocess.CalledProcessError.returncode", "module": "subprocess", "doc": ["Exit status of the child process.", "If the process exited due to a signal, this will be the negative signal number."]}
{"index": 6041, "name": "subprocess.CalledProcessError.cmd", "module": "subprocess", "doc": ["Command that was used to spawn the child process."]}
{"index": 6042, "name": "subprocess.CalledProcessError.output", "module": "subprocess", "doc": ["Output of the child process if it was captured by run() or check_output().", "Otherwise, None."]}
{"index": 6043, "name": "subprocess.CalledProcessError.stdout", "module": "subprocess", "doc": ["Alias for output, for symmetry with stderr."]}
{"index": 6044, "name": "subprocess.CalledProcessError.stderr", "module": "subprocess", "doc": ["Stderr output of the child process if it was captured by run().", "Otherwise, None."]}
{"index": 6045, "name": "subprocess.Popen", "module": "subprocess", "doc": ["Execute a child program in a new process.", "On POSIX, the class uses os.execvp()-like behavior to execute the child program.", "On Windows, the class uses the Windows CreateProcess() function.", "The arguments to Popen are as follows.", "args should be a sequence of program arguments or else a single string.", "By default, the program to execute is the first item in args if args is a sequence.", "If args is a string, the interpretation is platform-dependent and described below.", "See the shell and executable arguments for additional differences from the default behavior.", "Unless otherwise stated, it is recommended to pass args as a sequence.", "On POSIX, if args is a string, the string is interpreted as the name or path of the program to execute.", "However, this can only be done if not passing arguments to the program.", "On Windows, if args is a sequence, it will be converted to a string in a manner described in Converting an argument sequence to a string on Windows.", "This is because the underlying CreateProcess() operates on strings.", "The shell argument (which defaults to False) specifies whether to use the shell as the program to execute.", "If shell is True, it is recommended to pass args as a string rather than as a sequence.", "On POSIX with shell=True, the shell defaults to /bin/sh.", "If args is a string, the string specifies the command to execute through the shell.", "This means that the string must be formatted exactly as it would be when typed at the shell prompt.", "This includes, for example, quoting or backslash escaping filenames with spaces in them.", "If args is a sequence, the first item specifies the command string, and any additional items will be treated as additional arguments to the shell itself.", "That is to say, Popen does the equivalent of:", "On Windows with shell=True, the COMSPEC environment variable specifies the default shell.", "The only time you need to specify shell=True on Windows is when the command you wish to execute is built into the shell (e.g.", "dir or copy).", "You do not need shell=True to run a batch file or console-based executable.", "bufsize will be supplied as the corresponding argument to the open() function when creating the stdin/stdout/stderr pipe file objects:", "The executable argument specifies a replacement program to execute.", "It is very seldom needed.", "When shell=False, executable replaces the program to execute specified by args.", "However, the original args is still passed to the program.", "Most programs treat the program specified by args as the command name, which can then be different from the program actually executed.", "On POSIX, the args name becomes the display name for the executable in utilities such as ps.", "If shell=True, on POSIX the executable argument specifies a replacement shell for the default /bin/sh.", "stdin, stdout and stderr specify the executed program\u2019s standard input, standard output and standard error file handles, respectively.", "Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None.", "PIPE indicates that a new pipe to the child should be created.", "DEVNULL indicates that the special file os.devnull will be used.", "With the default settings of None, no redirection will occur; the child\u2019s file handles will be inherited from the parent.", "Additionally, stderr can be STDOUT, which indicates that the stderr data from the applications should be captured into the same file handle as for stdout.", "If preexec_fn is set to a callable object, this object will be called in the child process just before the child is executed.", "(POSIX only)", "If close_fds is true, all file descriptors except 0, 1 and 2 will be closed before the child process is executed.", "Otherwise when close_fds is false, file descriptors obey their inheritable flag as described in Inheritance of File Descriptors.", "On Windows, if close_fds is true then no handles will be inherited by the child process unless explicitly passed in the handle_list element of STARTUPINFO.lpAttributeList, or by standard handle redirection.", "pass_fds is an optional sequence of file descriptors to keep open between the parent and child.", "Providing any pass_fds forces close_fds to be True.", "(POSIX only)", "If cwd is not None, the function changes the working directory to cwd before executing the child.", "cwd can be a str and path-like object.", "In particular, the function looks for executable (or for the first item in args) relative to cwd if the executable path is a relative path.", "If restore_signals is true (the default) all signals that Python has set to SIG_IGN are restored to SIG_DFL in the child process before the exec.", "Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals.", "(POSIX only)", "If start_new_session is true the setsid() system call will be made in the child process prior to the execution of the subprocess.", "(POSIX only)", "If env is not None, it must be a mapping that defines the environment variables for the new process; these are used instead of the default behavior of inheriting the current process\u2019 environment.", "If encoding or errors are specified, or text is true, the file objects stdin, stdout and stderr are opened in text mode with the specified encoding and errors, as described above in Frequently Used Arguments.", "The universal_newlines argument is equivalent  to text and is provided for backwards compatibility.", "By default, file objects are opened in binary mode.", "If given, startupinfo will be a STARTUPINFO object, which is passed to the underlying CreateProcess function.", "creationflags, if given, can be one or more of the following flags:", "Popen objects are supported as context managers via the with statement: on exit, standard file descriptors are closed, and the process is waited for."]}
{"index": 6046, "name": "subprocess.Popen.poll", "module": "subprocess", "doc": ["Check if child process has terminated.", "Set and return returncode attribute.", "Otherwise, returns None."]}
{"index": 6047, "name": "subprocess.Popen.wait", "module": "subprocess", "doc": ["Wait for child process to terminate.", "Set and return returncode attribute.", "If the process does not terminate after timeout seconds, raise a TimeoutExpired exception.", "It is safe to catch this exception and retry the wait."]}
{"index": 6048, "name": "subprocess.Popen.communicate", "module": "subprocess", "doc": ["Interact with process: Send data to stdin.", "Read data from stdout and stderr, until end-of-file is reached.", "Wait for process to terminate.", "The optional input argument should be data to be sent to the child process, or None, if no data should be sent to the child.", "If streams were opened in text mode, input must be a string.", "Otherwise, it must be bytes.", "communicate() returns a tuple (stdout_data, stderr_data).", "The data will be strings if streams were opened in text mode; otherwise, bytes.", "Note that if you want to send data to the process\u2019s stdin, you need to create the Popen object with stdin=PIPE.", "Similarly, to get anything other than None in the result tuple, you need to give stdout=PIPE and/or stderr=PIPE too.", "If the process does not terminate after timeout seconds, a TimeoutExpired exception will be raised.", "Catching this exception and retrying communication will not lose any output.", "The child process is not killed if the timeout expires, so in order to cleanup properly a well-behaved application should kill the child process and finish communication:"]}
{"index": 6049, "name": "subprocess.Popen.send_signal", "module": "subprocess", "doc": ["Sends the signal signal to the child."]}
{"index": 6050, "name": "subprocess.Popen.terminate", "module": "subprocess", "doc": ["Stop the child.", "On Posix OSs the method sends SIGTERM to the child.", "On Windows the Win32 API function TerminateProcess() is called to stop the child."]}
{"index": 6051, "name": "subprocess.Popen.kill", "module": "subprocess", "doc": ["Kills the child.", "On Posix OSs the function sends SIGKILL to the child.", "On Windows kill() is an alias for terminate()."]}
{"index": 6052, "name": "subprocess.Popen.args", "module": "subprocess", "doc": ["The args argument as it was passed to Popen \u2013 a sequence of program arguments or else a single string."]}
{"index": 6053, "name": "subprocess.Popen.stdin", "module": "subprocess", "doc": ["If the stdin argument was PIPE, this attribute is a writeable stream object as returned by open().", "If the encoding or errors arguments were specified or the universal_newlines argument was True, the stream is a text stream, otherwise it is a byte stream.", "If the stdin argument was not PIPE, this attribute is None."]}
{"index": 6054, "name": "subprocess.Popen.stdout", "module": "subprocess", "doc": ["If the stdout argument was PIPE, this attribute is a readable stream object as returned by open().", "Reading from the stream provides output from the child process.", "If the encoding or errors arguments were specified or the universal_newlines argument was True, the stream is a text stream, otherwise it is a byte stream.", "If the stdout argument was not PIPE, this attribute is None."]}
{"index": 6055, "name": "subprocess.Popen.stderr", "module": "subprocess", "doc": ["If the stderr argument was PIPE, this attribute is a readable stream object as returned by open().", "Reading from the stream provides error output from the child process.", "If the encoding or errors arguments were specified or the universal_newlines argument was True, the stream is a text stream, otherwise it is a byte stream.", "If the stderr argument was not PIPE, this attribute is None."]}
{"index": 6056, "name": "subprocess.Popen.pid", "module": "subprocess", "doc": ["The process ID of the child process.", "Note that if you set the shell argument to True, this is the process ID of the spawned shell."]}
{"index": 6057, "name": "subprocess.Popen.returncode", "module": "subprocess", "doc": ["The child return code, set by poll() and wait() (and indirectly by communicate()).", "A None value indicates that the process hasn\u2019t terminated yet.", "A negative value -N indicates that the child was terminated by signal N (POSIX only)."]}
{"index": 6058, "name": "subprocess.STARTUPINFO", "module": "subprocess", "doc": ["Partial support of the Windows STARTUPINFO structure is used for Popen creation.", "The following attributes can be set by passing them as keyword-only arguments."]}
{"index": 6059, "name": "subprocess.STARTUPINFO.dwFlags", "module": "subprocess", "doc": ["A bit field that determines whether certain STARTUPINFO attributes are used when the process creates a window."]}
{"index": 6060, "name": "subprocess.STARTUPINFO.hStdInput", "module": "subprocess", "doc": ["If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard input handle for the process.", "If STARTF_USESTDHANDLES is not specified, the default for standard input is the keyboard buffer."]}
{"index": 6061, "name": "subprocess.STARTUPINFO.hStdOutput", "module": "subprocess", "doc": ["If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard output handle for the process.", "Otherwise, this attribute is ignored and the default for standard output is the console window\u2019s buffer."]}
{"index": 6062, "name": "subprocess.STARTUPINFO.hStdError", "module": "subprocess", "doc": ["If dwFlags specifies STARTF_USESTDHANDLES, this attribute is the standard error handle for the process.", "Otherwise, this attribute is ignored and the default for standard error is the console window\u2019s buffer."]}
{"index": 6063, "name": "subprocess.STARTUPINFO.wShowWindow", "module": "subprocess", "doc": ["If dwFlags specifies STARTF_USESHOWWINDOW, this attribute can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function, except for SW_SHOWDEFAULT.", "Otherwise, this attribute is ignored.", "SW_HIDE is provided for this attribute.", "It is used when Popen is called with shell=True."]}
{"index": 6064, "name": "subprocess.STARTUPINFO.lpAttributeList", "module": "subprocess", "doc": ["A dictionary of additional attributes for process creation as given in STARTUPINFOEX, see UpdateProcThreadAttribute.", "Supported attributes:"]}
{"index": 6065, "name": "subprocess.STD_INPUT_HANDLE", "module": "subprocess", "doc": ["The standard input device.", "Initially, this is the console input buffer, CONIN$."]}
{"index": 6066, "name": "subprocess.STD_OUTPUT_HANDLE", "module": "subprocess", "doc": ["The standard output device.", "Initially, this is the active console screen buffer, CONOUT$."]}
{"index": 6067, "name": "subprocess.STD_ERROR_HANDLE", "module": "subprocess", "doc": ["The standard error device.", "Initially, this is the active console screen buffer, CONOUT$."]}
{"index": 6068, "name": "subprocess.SW_HIDE", "module": "subprocess", "doc": ["Hides the window.", "Another window will be activated."]}
{"index": 6069, "name": "subprocess.STARTF_USESTDHANDLES", "module": "subprocess", "doc": ["Specifies that the STARTUPINFO.hStdInput, STARTUPINFO.hStdOutput, and STARTUPINFO.hStdError attributes contain additional information."]}
{"index": 6070, "name": "subprocess.STARTF_USESHOWWINDOW", "module": "subprocess", "doc": ["Specifies that the STARTUPINFO.wShowWindow attribute contains additional information."]}
{"index": 6071, "name": "subprocess.CREATE_NEW_CONSOLE", "module": "subprocess", "doc": ["The new process has a new console, instead of inheriting its parent\u2019s console (the default)."]}
{"index": 6072, "name": "subprocess.CREATE_NEW_PROCESS_GROUP", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process group will be created.", "This flag is necessary for using os.kill() on the subprocess.", "This flag is ignored if CREATE_NEW_CONSOLE is specified."]}
{"index": 6073, "name": "subprocess.ABOVE_NORMAL_PRIORITY_CLASS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will have an above average priority."]}
{"index": 6074, "name": "subprocess.BELOW_NORMAL_PRIORITY_CLASS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will have a below average priority."]}
{"index": 6075, "name": "subprocess.HIGH_PRIORITY_CLASS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will have a high priority."]}
{"index": 6076, "name": "subprocess.IDLE_PRIORITY_CLASS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will have an idle (lowest) priority."]}
{"index": 6077, "name": "subprocess.NORMAL_PRIORITY_CLASS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will have an normal priority.", "(default)"]}
{"index": 6078, "name": "subprocess.REALTIME_PRIORITY_CLASS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will have realtime priority.", "You should almost never use REALTIME_PRIORITY_CLASS, because this interrupts system threads that manage mouse input, keyboard input, and background disk flushing.", "This class can be appropriate for applications that \u201ctalk\u201d directly to hardware or that perform brief tasks that should have limited interruptions."]}
{"index": 6079, "name": "subprocess.CREATE_NO_WINDOW", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will not create a window."]}
{"index": 6080, "name": "subprocess.DETACHED_PROCESS", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process will not inherit its parent\u2019s console.", "This value cannot be used with CREATE_NEW_CONSOLE."]}
{"index": 6081, "name": "subprocess.CREATE_DEFAULT_ERROR_MODE", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process does not inherit the error mode of the calling process.", "Instead, the new process gets the default error mode.", "This feature is particularly useful for multithreaded shell applications that run with hard errors disabled."]}
{"index": 6082, "name": "subprocess.CREATE_BREAKAWAY_FROM_JOB", "module": "subprocess", "doc": ["A Popen creationflags parameter to specify that a new process is not associated with the job."]}
{"index": 6083, "name": "subprocess.call", "module": "subprocess", "doc": ["Run the command described by args.", "Wait for command to complete, then return the returncode attribute.", "Code needing to capture stdout or stderr should use run() instead:", "To suppress stdout or stderr, supply a value of DEVNULL.", "The arguments shown above are merely some common ones.", "The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than timeout directly through to that interface."]}
{"index": 6084, "name": "subprocess.check_call", "module": "subprocess", "doc": ["Run command with arguments.", "Wait for command to complete.", "If the return code was zero then return, otherwise raise CalledProcessError.", "The CalledProcessError object will have the return code in the returncode attribute.", "Code needing to capture stdout or stderr should use run() instead:", "To suppress stdout or stderr, supply a value of DEVNULL.", "The arguments shown above are merely some common ones.", "The full function signature is the same as that of the Popen constructor - this function passes all supplied arguments other than timeout directly through to that interface."]}
{"index": 6085, "name": "subprocess.check_output", "module": "subprocess", "doc": ["Run command with arguments and return its output.", "If the return code was non-zero it raises a CalledProcessError.", "The CalledProcessError object will have the return code in the returncode attribute and any output in the output attribute.", "This is equivalent to:", "The arguments shown above are merely some common ones.", "The full function signature is largely the same as that of run() - most arguments are passed directly through to that interface.", "However, explicitly passing input=None to inherit the parent\u2019s standard input file handle is not supported.", "By default, this function will return the data as encoded bytes.", "The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level.", "This behaviour may be overridden by setting text, encoding, errors, or universal_newlines to True as described in Frequently Used Arguments and run().", "To also capture standard error in the result, use stderr=subprocess.STDOUT:"]}
{"index": 6086, "name": "subprocess.getstatusoutput", "module": "subprocess", "doc": ["Return (exitcode, output) of executing cmd in a shell.", "Execute the string cmd in a shell with Popen.check_output() and return a 2-tuple (exitcode, output).", "The locale encoding is used; see the notes on Frequently Used Arguments for more details.", "A trailing newline is stripped from the output.", "The exit code for the command can be interpreted as the return code of subprocess.", "Example:", "Availability: POSIX & Windows."]}
{"index": 6087, "name": "subprocess.getoutput", "module": "subprocess", "doc": ["Return output (stdout and stderr) of executing cmd in a shell.", "Like getstatusoutput(), except the exit code is ignored and the return value is a string containing the command\u2019s output.", "Example:", "Availability: POSIX & Windows."]}
{"index": 6088, "name": "sunau.open", "module": "sunau", "doc": ["If file is a string, open the file by that name, otherwise treat it as a seekable file-like object.", "mode can be any of", "Note that it does not allow read/write files.", "A mode of 'r' returns an AU_read object, while a mode of 'w' or 'wb' returns an AU_write object."]}
{"index": 6089, "name": "sunau.openfp", "module": "sunau", "doc": ["A synonym for open(), maintained for backwards compatibility."]}
{"index": 6090, "name": "sunau.Error", "module": "sunau", "doc": ["An error raised when something is impossible because of Sun AU specs or implementation deficiency."]}
{"index": 6091, "name": "sunau.AUDIO_FILE_MAGIC", "module": "sunau", "doc": ["An integer every valid Sun AU file begins with, stored in big-endian form.", "This is the string .snd interpreted as an integer."]}
{"index": 6092, "name": "sunau.AUDIO_FILE_ENCODING_MULAW_8", "module": "sunau", "doc": ["Values of the encoding field from the AU header which are supported by this module."]}
{"index": 6093, "name": "sunau.AUDIO_FILE_ENCODING_LINEAR_8", "module": "sunau", "doc": ["Values of the encoding field from the AU header which are supported by this module."]}
{"index": 6094, "name": "sunau.AUDIO_FILE_ENCODING_LINEAR_16", "module": "sunau", "doc": ["Values of the encoding field from the AU header which are supported by this module."]}
{"index": 6095, "name": "sunau.AUDIO_FILE_ENCODING_LINEAR_24", "module": "sunau", "doc": ["Values of the encoding field from the AU header which are supported by this module."]}
{"index": 6096, "name": "sunau.AUDIO_FILE_ENCODING_LINEAR_32", "module": "sunau", "doc": ["Values of the encoding field from the AU header which are supported by this module."]}
{"index": 6097, "name": "sunau.AUDIO_FILE_ENCODING_ALAW_8", "module": "sunau", "doc": ["Values of the encoding field from the AU header which are supported by this module."]}
{"index": 6098, "name": "sunau.AUDIO_FILE_ENCODING_FLOAT", "module": "sunau", "doc": ["Additional known values of the encoding field from the AU header, but which are not supported by this module."]}
{"index": 6099, "name": "sunau.AUDIO_FILE_ENCODING_DOUBLE", "module": "sunau", "doc": ["Additional known values of the encoding field from the AU header, but which are not supported by this module."]}
{"index": 6100, "name": "sunau.AUDIO_FILE_ENCODING_ADPCM_G721", "module": "sunau", "doc": ["Additional known values of the encoding field from the AU header, but which are not supported by this module."]}
{"index": 6101, "name": "sunau.AUDIO_FILE_ENCODING_ADPCM_G722", "module": "sunau", "doc": ["Additional known values of the encoding field from the AU header, but which are not supported by this module."]}
{"index": 6102, "name": "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3", "module": "sunau", "doc": ["Additional known values of the encoding field from the AU header, but which are not supported by this module."]}
{"index": 6103, "name": "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5", "module": "sunau", "doc": ["Additional known values of the encoding field from the AU header, but which are not supported by this module."]}
{"index": 6104, "name": "sunau.AU_read.close", "module": "sunau", "doc": ["Close the stream, and make the instance unusable.", "(This is  called automatically on deletion.)"]}
{"index": 6105, "name": "sunau.AU_read.getnchannels", "module": "sunau", "doc": ["Returns number of audio channels (1 for mono, 2 for stereo)."]}
{"index": 6106, "name": "sunau.AU_read.getsampwidth", "module": "sunau", "doc": ["Returns sample width in bytes."]}
{"index": 6107, "name": "sunau.AU_read.getframerate", "module": "sunau", "doc": ["Returns sampling frequency."]}
{"index": 6108, "name": "sunau.AU_read.getnframes", "module": "sunau", "doc": ["Returns number of audio frames."]}
{"index": 6109, "name": "sunau.AU_read.getcomptype", "module": "sunau", "doc": ["Returns compression type.", "Supported compression types are 'ULAW', 'ALAW' and 'NONE'."]}
{"index": 6110, "name": "sunau.AU_read.getcompname", "module": "sunau", "doc": ["Human-readable version of getcomptype().", "The supported types have the respective names 'CCITT G.711 u-law', 'CCITT G.711 A-law' and 'not compressed'."]}
{"index": 6111, "name": "sunau.AU_read.getparams", "module": "sunau", "doc": ["Returns a namedtuple() (nchannels, sampwidth, framerate, nframes, comptype, compname), equivalent to output of the get*() methods."]}
{"index": 6112, "name": "sunau.AU_read.readframes", "module": "sunau", "doc": ["Reads and returns at most n frames of audio, as a bytes object.", "The data will be returned in linear format.", "If the original data is in u-LAW format, it will be converted."]}
{"index": 6113, "name": "sunau.AU_read.rewind", "module": "sunau", "doc": ["Rewind the file pointer to the beginning of the audio stream."]}
{"index": 6114, "name": "sunau.AU_read.setpos", "module": "sunau", "doc": ["Set the file pointer to the specified position.", "Only values returned from tell() should be used for pos."]}
{"index": 6115, "name": "sunau.AU_read.tell", "module": "sunau", "doc": ["Return current file pointer position.", "Note that the returned value has nothing to do with the actual position in the file."]}
{"index": 6116, "name": "sunau.AU_read.getmarkers", "module": "sunau", "doc": ["Returns None."]}
{"index": 6117, "name": "sunau.AU_read.getmark", "module": "sunau", "doc": ["Raise an error."]}
{"index": 6118, "name": "sunau.AU_write.setnchannels", "module": "sunau", "doc": ["Set the number of channels."]}
{"index": 6119, "name": "sunau.AU_write.setsampwidth", "module": "sunau", "doc": ["Set the sample width (in bytes.)"]}
{"index": 6120, "name": "sunau.AU_write.setframerate", "module": "sunau", "doc": ["Set the frame rate."]}
{"index": 6121, "name": "sunau.AU_write.setnframes", "module": "sunau", "doc": ["Set the number of frames.", "This can be later changed, when and if more  frames are written."]}
{"index": 6122, "name": "sunau.AU_write.setcomptype", "module": "sunau", "doc": ["Set the compression type and description.", "Only 'NONE' and 'ULAW' are supported on output."]}
{"index": 6123, "name": "sunau.AU_write.setparams", "module": "sunau", "doc": ["The tuple should be (nchannels, sampwidth, framerate, nframes, comptype, compname), with values valid for the set*() methods.", "Set all parameters."]}
{"index": 6124, "name": "sunau.AU_write.tell", "module": "sunau", "doc": ["Return current position in the file, with the same disclaimer for the AU_read.tell() and AU_read.setpos() methods."]}
{"index": 6125, "name": "sunau.AU_write.writeframesraw", "module": "sunau", "doc": ["Write audio frames, without correcting nframes."]}
{"index": 6126, "name": "sunau.AU_write.writeframes", "module": "sunau", "doc": ["Write audio frames and make sure nframes is correct."]}
{"index": 6127, "name": "sunau.AU_write.close", "module": "sunau", "doc": ["Make sure nframes is correct, and close the file.", "This method is called upon deletion."]}
{"index": 6128, "name": "symbol.sym_name", "module": "symbol", "doc": ["Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated."]}
{"index": 6129, "name": "symtable.symtable", "module": "symtable", "doc": ["Return the toplevel SymbolTable for the Python source code.", "filename is the name of the file containing the code.", "compile_type is like the mode argument to compile()."]}
{"index": 6130, "name": "symtable.SymbolTable", "module": "symtable", "doc": ["A namespace table for a block.", "The constructor is not public."]}
{"index": 6131, "name": "symtable.SymbolTable.get_type", "module": "symtable", "doc": ["Return the type of the symbol table.", "Possible values are 'class', 'module', and 'function'."]}
{"index": 6132, "name": "symtable.SymbolTable.get_id", "module": "symtable", "doc": ["Return the table\u2019s identifier."]}
{"index": 6133, "name": "symtable.SymbolTable.get_name", "module": "symtable", "doc": ["Return the table\u2019s name.", "This is the name of the class if the table is for a class, the name of the function if the table is for a function, or 'top' if the table is global (get_type() returns 'module')."]}
{"index": 6134, "name": "symtable.SymbolTable.get_lineno", "module": "symtable", "doc": ["Return the number of the first line in the block this table represents."]}
{"index": 6135, "name": "symtable.SymbolTable.is_optimized", "module": "symtable", "doc": ["Return True if the locals in this table can be optimized."]}
{"index": 6136, "name": "symtable.SymbolTable.is_nested", "module": "symtable", "doc": ["Return True if the block is a nested class or function."]}
{"index": 6137, "name": "symtable.SymbolTable.has_children", "module": "symtable", "doc": ["Return True if the block has nested namespaces within it.", "These can be obtained with get_children()."]}
{"index": 6138, "name": "symtable.SymbolTable.has_exec", "module": "symtable", "doc": ["Return True if the block uses exec."]}
{"index": 6139, "name": "symtable.SymbolTable.get_identifiers", "module": "symtable", "doc": ["Return a list of names of symbols in this table."]}
{"index": 6140, "name": "symtable.SymbolTable.lookup", "module": "symtable", "doc": ["Lookup name in the table and return a Symbol instance."]}
{"index": 6141, "name": "symtable.SymbolTable.get_symbols", "module": "symtable", "doc": ["Return a list of Symbol instances for names in the table."]}
{"index": 6142, "name": "symtable.SymbolTable.get_children", "module": "symtable", "doc": ["Return a list of the nested symbol tables."]}
{"index": 6143, "name": "symtable.Function", "module": "symtable", "doc": ["A namespace for a function or method.", "This class inherits SymbolTable."]}
{"index": 6144, "name": "symtable.Function.get_parameters", "module": "symtable", "doc": ["Return a tuple containing names of parameters to this function."]}
{"index": 6145, "name": "symtable.Function.get_locals", "module": "symtable", "doc": ["Return a tuple containing names of locals in this function."]}
{"index": 6146, "name": "symtable.Function.get_globals", "module": "symtable", "doc": ["Return a tuple containing names of globals in this function."]}
{"index": 6147, "name": "symtable.Function.get_frees", "module": "symtable", "doc": ["Return a tuple containing names of free variables in this function."]}
{"index": 6148, "name": "symtable.Class", "module": "symtable", "doc": ["A namespace of a class.", "This class inherits SymbolTable."]}
{"index": 6149, "name": "symtable.Class.get_methods", "module": "symtable", "doc": ["Return a tuple containing the names of methods declared in the class."]}
{"index": 6150, "name": "symtable.Symbol", "module": "symtable", "doc": ["An entry in a SymbolTable corresponding to an identifier in the source.", "The constructor is not public."]}
{"index": 6151, "name": "symtable.Symbol.get_name", "module": "symtable", "doc": ["Return the symbol\u2019s name."]}
{"index": 6152, "name": "symtable.Symbol.is_referenced", "module": "symtable", "doc": ["Return True if the symbol is used in its block."]}
{"index": 6153, "name": "symtable.Symbol.is_imported", "module": "symtable", "doc": ["Return True if the symbol is created from an import statement."]}
{"index": 6154, "name": "symtable.Symbol.is_parameter", "module": "symtable", "doc": ["Return True if the symbol is a parameter."]}
{"index": 6155, "name": "symtable.Symbol.is_global", "module": "symtable", "doc": ["Return True if the symbol is global."]}
{"index": 6156, "name": "symtable.Symbol.is_declared_global", "module": "symtable", "doc": ["Return True if the symbol is declared global with a global statement."]}
{"index": 6157, "name": "symtable.Symbol.is_local", "module": "symtable", "doc": ["Return True if the symbol is local to its block."]}
{"index": 6158, "name": "symtable.Symbol.is_free", "module": "symtable", "doc": ["Return True if the symbol is referenced in its block, but not assigned to."]}
{"index": 6159, "name": "symtable.Symbol.is_assigned", "module": "symtable", "doc": ["Return True if the symbol is assigned to in its block."]}
{"index": 6160, "name": "symtable.Symbol.is_namespace", "module": "symtable", "doc": ["Return True if name binding introduces new namespace.", "If the name is used as the target of a function or class statement, this will be true.", "For example:", "Note that a single name can be bound to multiple objects.", "If the result is True, the name may also be bound to other objects, like an int or list, that does not introduce a new namespace."]}
{"index": 6161, "name": "symtable.Symbol.get_namespaces", "module": "symtable", "doc": ["Return a list of namespaces bound to this name."]}
{"index": 6162, "name": "symtable.Symbol.get_namespace", "module": "symtable", "doc": ["Return the namespace bound to this name.", "If more than one namespace is bound, ValueError is raised."]}
{"index": 6163, "name": "sys.abiflags", "module": "sys", "doc": ["On POSIX systems where Python was built with the standard configure script, this contains the ABI flags as specified by PEP 3149."]}
{"index": 6164, "name": "sys.argv", "module": "sys", "doc": ["The list of command line arguments passed to a Python script.", "argv[0] is the script name (it is operating system dependent whether this is a full pathname or not).", "If the command was executed using the -c command line option to the interpreter, argv[0] is set to the string '-c'.", "If no script name was passed to the Python interpreter, argv[0] is the empty string.", "To loop over the standard input, or the list of files given on the command line, see the fileinput module."]}
{"index": 6165, "name": "sys.base_exec_prefix", "module": "sys", "doc": ["Set during Python startup, before site.py is run, to the same value as exec_prefix.", "If not running in a virtual environment, the values will stay the same; if site.py finds that a virtual environment is in use, the values of prefix and exec_prefix will be changed to point to the virtual environment, whereas base_prefix and base_exec_prefix will remain pointing to the base Python installation (the one which the virtual environment was created from)."]}
{"index": 6166, "name": "sys.base_prefix", "module": "sys", "doc": ["Set during Python startup, before site.py is run, to the same value as prefix.", "If not running in a virtual environment, the values will stay the same; if site.py finds that a virtual environment is in use, the values of prefix and exec_prefix will be changed to point to the virtual environment, whereas base_prefix and base_exec_prefix will remain pointing to the base Python installation (the one which the virtual environment was created from)."]}
{"index": 6167, "name": "sys.byteorder", "module": "sys", "doc": ["An indicator of the native byte order.", "This will have the value 'big' on big-endian (most-significant byte first) platforms, and 'little' on little-endian (least-significant byte first) platforms."]}
{"index": 6168, "name": "sys.builtin_module_names", "module": "sys", "doc": ["A tuple of strings giving the names of all modules that are compiled into this Python interpreter.", "(This information is not available in any other way \u2014 modules.keys() only lists the imported modules.)"]}
{"index": 6169, "name": "sys.call_tracing", "module": "sys", "doc": ["Call func(*args), while tracing is enabled.", "The tracing state is saved, and restored afterwards.", "This is intended to be called from a debugger from a checkpoint, to recursively debug some other code."]}
{"index": 6170, "name": "sys.copyright", "module": "sys", "doc": ["A string containing the copyright pertaining to the Python interpreter."]}
{"index": 6171, "name": "sys._clear_type_cache", "module": "sys", "doc": ["Clear the internal type cache.", "The type cache is used to speed up attribute and method lookups.", "Use the function only to drop unnecessary references during reference leak debugging.", "This function should be used for internal and specialized purposes only."]}
{"index": 6172, "name": "sys._current_frames", "module": "sys", "doc": ["Return a dictionary mapping each thread\u2019s identifier to the topmost stack frame currently active in that thread at the time the function is called.", "Note that functions in the traceback module can build the call stack given such a frame.", "This is most useful for debugging deadlock:  this function does not require the deadlocked threads\u2019 cooperation, and such threads\u2019 call stacks are frozen for as long as they remain deadlocked.", "The frame returned for a non-deadlocked thread may bear no relationship to that thread\u2019s current activity by the time calling code examines the frame.", "This function should be used for internal and specialized purposes only."]}
{"index": 6173, "name": "sys.breakpointhook", "module": "sys", "doc": ["This hook function is called by built-in breakpoint().", "By default, it drops you into the pdb debugger, but it can be set to any other function so that you can choose which debugger gets used.", "The signature of this function is dependent on what it calls.", "For example, the default binding (e.g.", "pdb.set_trace()) expects no arguments, but you might bind it to a function that expects additional arguments (positional and/or keyword).", "The built-in breakpoint() function passes its *args and **kws straight through.", "Whatever breakpointhooks() returns is returned from breakpoint().", "The default implementation first consults the environment variable PYTHONBREAKPOINT.", "If that is set to \"0\" then this function returns immediately; i.e.", "it is a no-op.", "If the environment variable is not set, or is set to the empty string, pdb.set_trace() is called.", "Otherwise this variable should name a function to run, using Python\u2019s dotted-import nomenclature, e.g.", "package.subpackage.module.function.", "In this case, package.subpackage.module would be imported and the resulting module must have a callable named function().", "This is run, passing in *args and **kws, and whatever function() returns, sys.breakpointhook() returns to the built-in breakpoint() function.", "Note that if anything goes wrong while importing the callable named by PYTHONBREAKPOINT, a RuntimeWarning is reported and the breakpoint is ignored.", "Also note that if sys.breakpointhook() is overridden programmatically, PYTHONBREAKPOINT is not consulted."]}
{"index": 6174, "name": "sys._debugmallocstats", "module": "sys", "doc": ["Print low-level information to stderr about the state of CPython\u2019s memory allocator.", "If Python is configured \u2013with-pydebug, it also performs some expensive internal consistency checks."]}
{"index": 6175, "name": "sys.dllhandle", "module": "sys", "doc": ["Integer specifying the handle of the Python DLL.", "Availability: Windows."]}
{"index": 6176, "name": "sys.displayhook", "module": "sys", "doc": ["If value is not None, this function prints repr(value) to sys.stdout, and saves value in builtins._.", "If repr(value) is not encodable to sys.stdout.encoding with sys.stdout.errors error handler (which is probably 'strict'), encode it to sys.stdout.encoding with 'backslashreplace' error handler.", "sys.displayhook is called on the result of evaluating an expression entered in an interactive Python session.", "The display of these values can be customized by assigning another one-argument function to sys.displayhook.", "Pseudo-code:"]}
{"index": 6177, "name": "sys.dont_write_bytecode", "module": "sys", "doc": ["If this is true, Python won\u2019t try to write .pyc files on the import of source modules.", "This value is initially set to True or False depending on the -B command line option and the PYTHONDONTWRITEBYTECODE environment variable, but you can set it yourself to control bytecode file generation."]}
{"index": 6178, "name": "sys.excepthook", "module": "sys", "doc": ["This function prints out a given traceback and exception to sys.stderr.", "When an exception is raised and uncaught, the interpreter calls sys.excepthook with three arguments, the exception class, exception instance, and a traceback object.", "In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits.", "The handling of such top-level exceptions can be customized by assigning another three-argument function to sys.excepthook."]}
{"index": 6179, "name": "sys.__breakpointhook__", "module": "sys", "doc": ["These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "They are saved so that breakpointhook, displayhook and excepthook can be restored in case they happen to get replaced with broken or alternative objects."]}
{"index": 6180, "name": "sys.__displayhook__", "module": "sys", "doc": ["These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "They are saved so that breakpointhook, displayhook and excepthook can be restored in case they happen to get replaced with broken or alternative objects."]}
{"index": 6181, "name": "sys.__excepthook__", "module": "sys", "doc": ["These objects contain the original values of breakpointhook, displayhook, and excepthook at the start of the program.", "They are saved so that breakpointhook, displayhook and excepthook can be restored in case they happen to get replaced with broken or alternative objects."]}
{"index": 6182, "name": "sys.exc_info", "module": "sys", "doc": ["This function returns a tuple of three values that give information about the exception that is currently being handled.", "The information returned is specific both to the current thread and to the current stack frame.", "If the current stack frame is not handling an exception, the information is taken from the calling stack frame, or its caller, and so on until a stack frame is found that is handling an exception.", "Here, \u201chandling an exception\u201d is defined as \u201cexecuting an except clause.\u201d  For any stack frame, only information about the exception being currently handled is accessible.", "If no exception is being handled anywhere on the stack, a tuple containing three None values is returned.", "Otherwise, the values returned are (type, value, traceback).", "Their meaning is: type gets the type of the exception being handled (a subclass of BaseException); value gets the exception instance (an instance of the exception type); traceback gets a traceback object (see the Reference Manual) which encapsulates the call stack at the point where the exception originally occurred."]}
{"index": 6183, "name": "sys.exec_prefix", "module": "sys", "doc": ["A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also '/usr/local'.", "This can be set at build time with the --exec-prefix argument to the configure script.", "Specifically, all configuration files (e.g.", "the pyconfig.h header file) are installed in the directory exec_prefix/lib/pythonX.Y/config, and shared library modules are installed in exec_prefix/lib/pythonX.Y/lib-dynload, where X.Y is the version number of Python, for example 3.2."]}
{"index": 6184, "name": "sys.executable", "module": "sys", "doc": ["A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense.", "If Python is unable to retrieve the real path to its executable, sys.executable will be an empty string or None."]}
{"index": 6185, "name": "sys.exit", "module": "sys", "doc": ["Exit from Python.", "This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.", "The optional argument arg can be an integer giving the exit status (defaulting to zero), or another type of object.", "If it is an integer, zero is considered \u201csuccessful termination\u201d and any nonzero value is considered \u201cabnormal termination\u201d by shells and the like.", "Most systems require it to be in the range 0\u2013127, and produce undefined results otherwise.", "Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors.", "If another type of object is passed, None is equivalent to passing zero, and any other object is printed to stderr and results in an exit code of 1.", "In particular, sys.exit(\"some error message\") is a quick way to exit a program when an error occurs.", "Since exit() ultimately \u201conly\u201d raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted."]}
{"index": 6186, "name": "sys.flags", "module": "sys", "doc": ["The named tuple flags exposes the status of command line flags.", "The attributes are read only."]}
{"index": 6187, "name": "sys.float_info", "module": "sys", "doc": ["A named tuple holding information about the float type.", "It contains low level information about the precision and internal representation.", "The values correspond to the various floating-point constants defined in the standard header file float.h for the \u2018C\u2019 programming language; see section 5.2.4.2.2 of the 1999 ISO/IEC C standard [C99], \u2018Characteristics of floating types\u2019, for details.", "The attribute sys.float_info.dig needs further explanation.", "If s is any string representing a decimal number with at most sys.float_info.dig significant digits, then converting s to a float and back again will recover a string representing the same decimal value:", "But for strings with more than sys.float_info.dig significant digits, this isn\u2019t always true:"]}
{"index": 6188, "name": "sys.float_repr_style", "module": "sys", "doc": ["A string indicating how the repr() function behaves for floats.", "If the string has value 'short' then for a finite float x, repr(x) aims to produce a short string with the property that float(repr(x)) == x.", "This is the usual behaviour in Python 3.1 and later.", "Otherwise, float_repr_style has value 'legacy' and repr(x) behaves in the same way as it did in versions of Python prior to 3.1."]}
{"index": 6189, "name": "sys.getallocatedblocks", "module": "sys", "doc": ["Return the number of memory blocks currently allocated by the interpreter, regardless of their size.", "This function is mainly useful for tracking and debugging memory leaks.", "Because of the interpreter\u2019s internal caches, the result can vary from call to call; you may have to call _clear_type_cache() and gc.collect() to get more predictable results.", "If a Python build or implementation cannot reasonably compute this information, getallocatedblocks() is allowed to return 0 instead."]}
{"index": 6190, "name": "sys.getandroidapilevel", "module": "sys", "doc": ["Return the build time API version of Android as an integer.", "Availability: Android."]}
{"index": 6191, "name": "sys.getcheckinterval", "module": "sys", "doc": ["Return the interpreter\u2019s \u201ccheck interval\u201d; see setcheckinterval()."]}
{"index": 6192, "name": "sys.getdefaultencoding", "module": "sys", "doc": ["Return the name of the current default string encoding used by the Unicode implementation."]}
{"index": 6193, "name": "sys.getdlopenflags", "module": "sys", "doc": ["Return the current value of the flags that are used for dlopen() calls.", "Symbolic names for the flag values can be found in the os module (RTLD_xxx constants, e.g.", "os.RTLD_LAZY).", "Availability: Unix."]}
{"index": 6194, "name": "sys.getfilesystemencoding", "module": "sys", "doc": ["Return the name of the encoding used to convert between Unicode filenames and bytes filenames.", "For best compatibility, str should be used for filenames in all cases, although representing filenames as bytes is also supported.", "Functions accepting or returning filenames should support either str or bytes and internally convert to the system\u2019s preferred representation.", "This encoding is always ASCII-compatible.", "os.fsencode() and os.fsdecode() should be used to ensure that the correct encoding and errors mode are used."]}
{"index": 6195, "name": "sys.getfilesystemencodeerrors", "module": "sys", "doc": ["Return the name of the error mode used to convert between Unicode filenames and bytes filenames.", "The encoding name is returned from getfilesystemencoding().", "os.fsencode() and os.fsdecode() should be used to ensure that the correct encoding and errors mode are used."]}
{"index": 6196, "name": "sys.getrefcount", "module": "sys", "doc": ["Return the reference count of the object.", "The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount()."]}
{"index": 6197, "name": "sys.getrecursionlimit", "module": "sys", "doc": ["Return the current value of the recursion limit, the maximum depth of the Python interpreter stack.", "This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.", "It can be set by setrecursionlimit()."]}
{"index": 6198, "name": "sys.getsizeof", "module": "sys", "doc": ["Return the size of an object in bytes.", "The object can be any type of object.", "All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific.", "Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.", "If given, default will be returned if the object does not provide means to retrieve the size.", "Otherwise a TypeError will be raised.", "getsizeof() calls the object\u2019s __sizeof__ method and adds an additional garbage collector overhead if the object is managed by the garbage collector.", "See recursive sizeof recipe for an example of using getsizeof() recursively to find the size of containers and all their contents."]}
{"index": 6199, "name": "sys.getswitchinterval", "module": "sys", "doc": ["Return the interpreter\u2019s \u201cthread switch interval\u201d; see setswitchinterval()."]}
{"index": 6200, "name": "sys._getframe", "module": "sys", "doc": ["Return a frame object from the call stack.", "If optional integer depth is given, return the frame object that many calls below the top of the stack.", "If that is deeper than the call stack, ValueError is raised.", "The default for depth is zero, returning the frame at the top of the call stack."]}
{"index": 6201, "name": "sys.getprofile", "module": "sys", "doc": ["Get the profiler function as set by setprofile()."]}
{"index": 6202, "name": "sys.gettrace", "module": "sys", "doc": ["Get the trace function as set by settrace()."]}
{"index": 6203, "name": "sys.getwindowsversion", "module": "sys", "doc": ["Return a named tuple describing the Windows version currently running.", "The named elements are major, minor, build, platform, service_pack, service_pack_minor, service_pack_major, suite_mask, product_type and platform_version.", "service_pack contains a string, platform_version a 3-tuple and all other values are integers.", "The components can also be accessed by name, so sys.getwindowsversion()[0] is equivalent to sys.getwindowsversion().major.", "For compatibility with prior versions, only the first 5 elements are retrievable by indexing.", "platform will be 2 (VER_PLATFORM_WIN32_NT).", "product_type may be one of the following values:", "This function wraps the Win32 GetVersionEx() function; see the Microsoft documentation on OSVERSIONINFOEX() for more information about these fields.", "platform_version returns the accurate major version, minor version and build number of the current operating system, rather than the version that is being emulated for the process.", "It is intended for use in logging rather than for feature detection.", "Availability: Windows."]}
{"index": 6204, "name": "sys.get_asyncgen_hooks", "module": "sys", "doc": ["Returns an asyncgen_hooks object, which is similar to a namedtuple of the form (firstiter, finalizer), where firstiter and finalizer are expected to be either None or functions which take an asynchronous generator iterator as an argument, and are used to schedule finalization of an asynchronous generator by an event loop."]}
{"index": 6205, "name": "sys.get_coroutine_origin_tracking_depth", "module": "sys", "doc": ["Get the current coroutine origin tracking depth, as set by set_coroutine_origin_tracking_depth()."]}
{"index": 6206, "name": "sys.get_coroutine_wrapper", "module": "sys", "doc": ["Returns None, or a wrapper set by set_coroutine_wrapper()."]}
{"index": 6207, "name": "sys.hash_info", "module": "sys", "doc": ["A named tuple giving parameters of the numeric hash implementation.", "For more details about hashing of numeric types, see Hashing of numeric types."]}
{"index": 6208, "name": "sys.hexversion", "module": "sys", "doc": ["The version number encoded as a single integer.", "This is guaranteed to increase with each version, including proper support for non-production releases.", "For example, to test that the Python interpreter is at least version 1.5.2, use:", "This is called hexversion since it only really looks meaningful when viewed as the result of passing it to the built-in hex() function.", "The named tuple sys.version_info may be used for a more human-friendly encoding of the same information.", "More details of hexversion can be found at API and ABI Versioning."]}
{"index": 6209, "name": "sys.implementation", "module": "sys", "doc": ["An object containing information about the implementation of the currently running Python interpreter.", "The following attributes are required to exist in all Python implementations.", "name is the implementation\u2019s identifier, e.g.", "'cpython'.", "The actual string is defined by the Python implementation, but it is guaranteed to be lower case.", "version is a named tuple, in the same format as sys.version_info.", "It represents the version of the Python implementation.", "This has a distinct meaning from the specific version of the Python language to which the currently running interpreter conforms, which sys.version_info represents.", "For example, for PyPy 1.8 sys.implementation.version might be sys.version_info(1, 8, 0, 'final', 0), whereas sys.version_info would be sys.version_info(2, 7, 2, 'final', 0).", "For CPython they are the same value, since it is the reference implementation.", "hexversion is the implementation version in hexadecimal format, like sys.hexversion.", "cache_tag is the tag used by the import machinery in the filenames of cached modules.", "By convention, it would be a composite of the implementation\u2019s name and version, like 'cpython-33'.", "However, a Python implementation may use some other value if appropriate.", "If cache_tag is set to None, it indicates that module caching should be disabled.", "sys.implementation may contain additional attributes specific to the Python implementation.", "These non-standard attributes must start with an underscore, and are not described here.", "Regardless of its contents, sys.implementation will not change during a run of the interpreter, nor between implementation versions.", "(It may change between Python language versions, however.)", "See PEP 421 for more information."]}
{"index": 6210, "name": "sys.int_info", "module": "sys", "doc": ["A named tuple that holds information about Python\u2019s internal representation of integers.", "The attributes are read only."]}
{"index": 6211, "name": "sys.__interactivehook__", "module": "sys", "doc": ["When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in interactive mode.", "This is done after the PYTHONSTARTUP file is read, so that you can set this hook there.", "The site module sets this."]}
{"index": 6212, "name": "sys.intern", "module": "sys", "doc": ["Enter string in the table of \u201cinterned\u201d strings and return the interned string \u2013 which is string itself or a copy.", "Interning strings is useful to gain a little performance on dictionary lookup \u2013 if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare.", "Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.", "Interned strings are not immortal; you must keep a reference to the return value of intern() around to benefit from it."]}
{"index": 6213, "name": "sys.is_finalizing", "module": "sys", "doc": ["Return True if the Python interpreter is shutting down, False otherwise."]}
{"index": 6214, "name": "sys.last_type", "module": "sys", "doc": ["These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback.", "Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.", "(Typical use is import pdb; pdb.pm() to enter the post-mortem debugger; see pdb module for more information.)", "The meaning of the variables is the same as that of the return values from exc_info() above."]}
{"index": 6215, "name": "sys.last_value", "module": "sys", "doc": ["These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback.", "Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.", "(Typical use is import pdb; pdb.pm() to enter the post-mortem debugger; see pdb module for more information.)", "The meaning of the variables is the same as that of the return values from exc_info() above."]}
{"index": 6216, "name": "sys.last_traceback", "module": "sys", "doc": ["These three variables are not always defined; they are set when an exception is not handled and the interpreter prints an error message and a stack traceback.", "Their intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error.", "(Typical use is import pdb; pdb.pm() to enter the post-mortem debugger; see pdb module for more information.)", "The meaning of the variables is the same as that of the return values from exc_info() above."]}
{"index": 6217, "name": "sys.maxsize", "module": "sys", "doc": ["An integer giving the maximum value a variable of type Py_ssize_t can take.", "It\u2019s usually 2**31 - 1 on a 32-bit platform and 2**63 - 1 on a 64-bit platform."]}
{"index": 6218, "name": "sys.maxunicode", "module": "sys", "doc": ["An integer giving the value of the largest Unicode code point, i.e.", "1114111 (0x10FFFF in hexadecimal)."]}
{"index": 6219, "name": "sys.meta_path", "module": "sys", "doc": ["A list of meta path finder objects that have their find_spec() methods called to see if one of the objects can find the module to be imported.", "The find_spec() method is called with at least the absolute name of the module being imported.", "If the module to be imported is contained in a package, then the parent package\u2019s __path__ attribute is passed in as a second argument.", "The method returns a module spec, or None if the module cannot be found."]}
{"index": 6220, "name": "sys.modules", "module": "sys", "doc": ["This is a dictionary that maps module names to modules which have already been loaded.", "This can be manipulated to force reloading of modules and other tricks.", "However, replacing the dictionary will not necessarily work as expected and deleting essential items from the dictionary may cause Python to fail."]}
{"index": 6221, "name": "sys.path", "module": "sys", "doc": ["A list of strings that specifies the search path for modules.", "Initialized from the environment variable PYTHONPATH, plus an installation-dependent default.", "As initialized upon program startup, the first item of this list, path[0], is the directory containing the script that was used to invoke the Python interpreter.", "If the script directory is not available (e.g.", "if the interpreter is invoked interactively or if the script is read from standard input), path[0] is the empty string, which directs Python to search modules in the current directory first.", "Notice that the script directory is inserted before the entries inserted as a result of PYTHONPATH.", "A program is free to modify this list for its own purposes.", "Only strings and bytes should be added to sys.path; all other data types are ignored during import."]}
{"index": 6222, "name": "sys.path_hooks", "module": "sys", "doc": ["A list of callables that take a path argument to try to create a finder for the path.", "If a finder can be created, it is to be returned by the callable, else raise ImportError.", "Originally specified in PEP 302."]}
{"index": 6223, "name": "sys.path_importer_cache", "module": "sys", "doc": ["A dictionary acting as a cache for finder objects.", "The keys are paths that have been passed to sys.path_hooks and the values are the finders that are found.", "If a path is a valid file system path but no finder is found on sys.path_hooks then None is stored.", "Originally specified in PEP 302."]}
{"index": 6224, "name": "sys.platform", "module": "sys", "doc": ["This string contains a platform identifier that can be used to append platform-specific components to sys.path, for instance.", "For Unix systems, except on Linux, this is the lowercased OS name as returned by uname -s with the first part of the version as returned by uname -r appended, e.g.", "'sunos5' or 'freebsd8', at the time when Python was built.", "Unless you want to test for a specific system version, it is therefore recommended to use the following idiom:", "For other systems, the values are:"]}
{"index": 6225, "name": "sys.prefix", "module": "sys", "doc": ["A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string '/usr/local'.", "This can be set at build time with the --prefix argument to the configure script.", "The main collection of Python library modules is installed in the directory prefix/lib/pythonX.Y while the platform independent header files (all except pyconfig.h) are stored in prefix/include/pythonX.Y, where X.Y is the version number of Python, for example 3.2."]}
{"index": 6226, "name": "sys.ps1", "module": "sys", "doc": ["Strings specifying the primary and secondary prompt of the interpreter.", "These are only defined if the interpreter is in interactive mode.", "Their initial values in this case are '>>> ' and '... '.", "If a non-string object is assigned to either variable, its str() is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt."]}
{"index": 6227, "name": "sys.ps2", "module": "sys", "doc": ["Strings specifying the primary and secondary prompt of the interpreter.", "These are only defined if the interpreter is in interactive mode.", "Their initial values in this case are '>>> ' and '... '.", "If a non-string object is assigned to either variable, its str() is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt."]}
{"index": 6228, "name": "sys.setcheckinterval", "module": "sys", "doc": ["Set the interpreter\u2019s \u201ccheck interval\u201d.", "This integer value determines how often the interpreter checks for periodic things such as thread switches and signal handlers.", "The default is 100, meaning the check is performed every 100 Python virtual instructions.", "Setting it to a larger value may increase performance for programs using threads.", "Setting it to a value <= 0 checks every virtual instruction, maximizing responsiveness as well as overhead."]}
{"index": 6229, "name": "sys.setdlopenflags", "module": "sys", "doc": ["Set the flags used by the interpreter for dlopen() calls, such as when the interpreter loads extension modules.", "Among other things, this will enable a lazy resolving of symbols when importing a module, if called as sys.setdlopenflags(0).", "To share symbols across extension modules, call as sys.setdlopenflags(os.RTLD_GLOBAL).", "Symbolic names for the flag values can be found in the os module (RTLD_xxx constants, e.g.", "os.RTLD_LAZY).", "Availability: Unix."]}
{"index": 6230, "name": "sys.setprofile", "module": "sys", "doc": ["Set the system\u2019s profile function, which allows you to implement a Python source code profiler in Python.", "See chapter The Python Profilers for more information on the Python profiler.", "The system\u2019s profile function is called similarly to the system\u2019s trace function (see settrace()), but it is called with different events, for example it isn\u2019t called for each executed line of code (only on call and return, but the return event is reported even when an exception has been set).", "The function is thread-specific, but there is no way for the profiler to know about context switches between threads, so it does not make sense to use this in the presence of multiple threads.", "Also, its return value is not used, so it can simply return None.", "Error in the profile function will cause itself unset.", "Profile functions should have three arguments: frame, event, and arg.", "frame is the current stack frame.", "event is a string: 'call', 'return', 'c_call', 'c_return', or 'c_exception'.", "arg depends on the event type.", "The events have the following meaning:"]}
{"index": 6231, "name": "sys.setrecursionlimit", "module": "sys", "doc": ["Set the maximum depth of the Python interpreter stack to limit.", "This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python.", "The highest possible limit is platform-dependent.", "A user may need to set the limit higher when they have a program that requires deep recursion and a platform that supports a higher limit.", "This should be done with care, because a too-high limit can lead to a crash.", "If the new limit is too low at the current recursion depth, a RecursionError exception is raised."]}
{"index": 6232, "name": "sys.setswitchinterval", "module": "sys", "doc": ["Set the interpreter\u2019s thread switch interval (in seconds).", "This floating-point value determines the ideal duration of the \u201ctimeslices\u201d allocated to concurrently running Python threads.", "Please note that the actual value can be higher, especially if long-running internal functions or methods are used.", "Also, which thread becomes scheduled at the end of the interval is the operating system\u2019s decision.", "The interpreter doesn\u2019t have its own scheduler."]}
{"index": 6233, "name": "sys.settrace", "module": "sys", "doc": ["Set the system\u2019s trace function, which allows you to implement a Python source code debugger in Python.", "The function is thread-specific; for a debugger to support multiple threads, it must register a trace function using settrace() for each thread being debugged or use threading.settrace().", "Trace functions should have three arguments: frame, event, and arg.", "frame is the current stack frame.", "event is a string: 'call', 'line', 'return', 'exception' or 'opcode'.", "arg depends on the event type.", "The trace function is invoked (with event set to 'call') whenever a new local scope is entered; it should return a reference to a local trace function to be used for the new scope, or None if the scope shouldn\u2019t be traced.", "The local trace function should return a reference to itself (or to another function for further tracing in that scope), or None to turn off tracing in that scope.", "If there is any error occurred in the trace function, it will be unset, just like settrace(None) is called.", "The events have the following meaning:", "Note that as an exception is propagated down the chain of callers, an 'exception' event is generated at each level.", "For more fine-grained usage, it\u2019s possible to set a trace function by assigning frame.f_trace = tracefunc explicitly, rather than relying on it being set indirectly via the return value from an already installed trace function.", "This is also required for activating the trace function on the current frame, which settrace() doesn\u2019t do.", "Note that in order for this to work, a global tracing function must have been installed with settrace() in order to enable the runtime tracing machinery, but it doesn\u2019t need to be the same tracing function (e.g.", "it could be a low overhead tracing function that simply returns None to disable itself immediately on each frame).", "For more information on code and frame objects, refer to The standard type hierarchy."]}
{"index": 6234, "name": "sys.set_asyncgen_hooks", "module": "sys", "doc": ["Accepts two optional keyword arguments which are callables that accept an asynchronous generator iterator as an argument.", "The firstiter callable will be called when an asynchronous generator is iterated for the first time.", "The finalizer will be called when an asynchronous generator is about to be garbage collected."]}
{"index": 6235, "name": "sys.set_coroutine_origin_tracking_depth", "module": "sys", "doc": ["Allows enabling or disabling coroutine origin tracking.", "When enabled, the cr_origin attribute on coroutine objects will contain a tuple of (filename, line number, function name) tuples describing the traceback where the coroutine object was created, with the most recent call first.", "When disabled, cr_origin will be None.", "To enable, pass a depth value greater than zero; this sets the number of frames whose information will be captured.", "To disable, pass set depth to zero.", "This setting is thread-specific."]}
{"index": 6236, "name": "sys.set_coroutine_wrapper", "module": "sys", "doc": ["Allows intercepting creation of coroutine objects (only ones that are created by an async def function; generators decorated with types.coroutine() or asyncio.coroutine() will not be intercepted).", "The wrapper argument must be either:", "If called twice, the new wrapper replaces the previous one.", "The function is thread-specific.", "The wrapper callable cannot define new coroutines directly or indirectly:", "See also get_coroutine_wrapper()."]}
{"index": 6237, "name": "sys._enablelegacywindowsfsencoding", "module": "sys", "doc": ["Changes the default filesystem encoding and errors mode to \u2018mbcs\u2019 and \u2018replace\u2019 respectively, for consistency with versions of Python prior to 3.6.", "This is equivalent to defining the PYTHONLEGACYWINDOWSFSENCODING environment variable before launching Python.", "Availability: Windows."]}
{"index": 6238, "name": "sys.stdin", "module": "sys", "doc": ["File objects used by the interpreter for standard input, output and errors:", "These streams are regular text files like those returned by the open() function.", "Their parameters are chosen as follows:"]}
{"index": 6239, "name": "sys.stdout", "module": "sys", "doc": ["File objects used by the interpreter for standard input, output and errors:", "These streams are regular text files like those returned by the open() function.", "Their parameters are chosen as follows:"]}
{"index": 6240, "name": "sys.stderr", "module": "sys", "doc": ["File objects used by the interpreter for standard input, output and errors:", "These streams are regular text files like those returned by the open() function.", "Their parameters are chosen as follows:"]}
{"index": 6241, "name": "sys.__stdin__", "module": "sys", "doc": ["These objects contain the original values of stdin, stderr and stdout at the start of the program.", "They are used during finalization, and could be useful to print to the actual standard stream no matter if the sys.std* object has been redirected.", "It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.", "However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object."]}
{"index": 6242, "name": "sys.__stdout__", "module": "sys", "doc": ["These objects contain the original values of stdin, stderr and stdout at the start of the program.", "They are used during finalization, and could be useful to print to the actual standard stream no matter if the sys.std* object has been redirected.", "It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.", "However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object."]}
{"index": 6243, "name": "sys.__stderr__", "module": "sys", "doc": ["These objects contain the original values of stdin, stderr and stdout at the start of the program.", "They are used during finalization, and could be useful to print to the actual standard stream no matter if the sys.std* object has been redirected.", "It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object.", "However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object."]}
{"index": 6244, "name": "sys.thread_info", "module": "sys", "doc": ["A named tuple holding information about the thread implementation."]}
{"index": 6245, "name": "sys.tracebacklimit", "module": "sys", "doc": ["When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs.", "The default is 1000.", "When set to 0 or less, all traceback information is suppressed and only the exception type and value are printed."]}
{"index": 6246, "name": "sys.version", "module": "sys", "doc": ["A string containing the version number of the Python interpreter plus additional information on the build number and compiler used.", "This string is displayed when the interactive interpreter is started.", "Do not extract version information out of it, rather, use version_info and the functions provided by the platform module."]}
{"index": 6247, "name": "sys.api_version", "module": "sys", "doc": ["The C API version for this interpreter.", "Programmers may find this useful when debugging version conflicts between Python and extension modules."]}
{"index": 6248, "name": "sys.version_info", "module": "sys", "doc": ["A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.", "All values except releaselevel are integers; the release level is 'alpha', 'beta', 'candidate', or 'final'.", "The version_info value corresponding to the Python version 2.0 is (2, 0, 0, 'final', 0).", "The components can also be accessed by name, so sys.version_info[0] is equivalent to sys.version_info.major and so on."]}
{"index": 6249, "name": "sys.warnoptions", "module": "sys", "doc": ["This is an implementation detail of the warnings framework; do not modify this value.", "Refer to the warnings module for more information on the warnings framework."]}
{"index": 6250, "name": "sys.winver", "module": "sys", "doc": ["The version number used to form registry keys on Windows platforms.", "This is stored as string resource 1000 in the Python DLL.", "The value is normally the first three characters of version.", "It is provided in the sys module for informational purposes; modifying this value has no effect on the registry keys used by Python.", "Availability: Windows."]}
{"index": 6251, "name": "sys._xoptions", "module": "sys", "doc": ["A dictionary of the various implementation-specific flags passed through the -X command-line option.", "Option names are either mapped to their values, if given explicitly, or to True.", "Example:"]}
{"index": 6252, "name": "c99", "module": "sys", "doc": ["ISO/IEC 9899:1999.", "\u201cProgramming languages \u2013 C.\u201d  A public draft of this standard is available at http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf."]}
{"index": 6253, "name": "sysconfig.get_config_vars", "module": "sysconfig", "doc": ["With no arguments, return a dictionary of all configuration variables relevant for the current platform.", "With arguments, return a list of values that result from looking up each argument in the configuration variable dictionary.", "For each argument, if the value is not found, return None."]}
{"index": 6254, "name": "sysconfig.get_config_var", "module": "sysconfig", "doc": ["Return the value of a single variable name.", "Equivalent to get_config_vars().get(name).", "If name is not found, return None."]}
{"index": 6255, "name": "sysconfig.get_scheme_names", "module": "sysconfig", "doc": ["Return a tuple containing all schemes currently supported in sysconfig."]}
{"index": 6256, "name": "sysconfig.get_path_names", "module": "sysconfig", "doc": ["Return a tuple containing all path names currently supported in sysconfig."]}
{"index": 6257, "name": "sysconfig.get_path", "module": "sysconfig", "doc": ["Return an installation path corresponding to the path name, from the install scheme named scheme.", "name has to be a value from the list returned by get_path_names().", "sysconfig stores installation paths corresponding to each path name, for each platform, with variables to be expanded.", "For instance the stdlib path for the nt scheme is: {base}/Lib.", "get_path() will use the variables returned by get_config_vars() to expand the path.", "All variables have default values for each platform so one may call this function and get the default value.", "If scheme is provided, it must be a value from the list returned by get_scheme_names().", "Otherwise, the default scheme for the current platform is used.", "If vars is provided, it must be a dictionary of variables that will update the dictionary return by get_config_vars().", "If expand is set to False, the path will not be expanded using the variables.", "If name is not found, return None."]}
{"index": 6258, "name": "sysconfig.get_paths", "module": "sysconfig", "doc": ["Return a dictionary containing all installation paths corresponding to an installation scheme.", "See get_path() for more information.", "If scheme is not provided, will use the default scheme for the current platform.", "If vars is provided, it must be a dictionary of variables that will update the dictionary used to expand the paths.", "If expand is set to false, the paths will not be expanded.", "If scheme is not an existing scheme, get_paths() will raise a KeyError."]}
{"index": 6259, "name": "sysconfig.get_python_version", "module": "sysconfig", "doc": ["Return the MAJOR.MINOR Python version number as a string.", "Similar to '%d.%d' % sys.version_info[:2]."]}
{"index": 6260, "name": "sysconfig.get_platform", "module": "sysconfig", "doc": ["Return a string that identifies the current platform.", "This is used mainly to distinguish platform-specific build directories and platform-specific built distributions.", "Typically includes the OS name and version and the architecture (as supplied by \u2018os.uname()\u2019), although the exact information included depends on the OS; e.g., on Linux, the kernel version isn\u2019t particularly important.", "Examples of returned values:", "Windows will return one of:", "Mac OS X can return:", "For other non-POSIX platforms, currently just returns sys.platform."]}
{"index": 6261, "name": "sysconfig.is_python_build", "module": "sysconfig", "doc": ["Return True if the running Python interpreter was built from source and is being run from its built location, and not from a location resulting from e.g.", "running make install or installing via a binary installer."]}
{"index": 6262, "name": "sysconfig.parse_config_h", "module": "sysconfig", "doc": ["Parse a config.h-style file.", "fp is a file-like object pointing to the config.h-like file.", "A dictionary containing name/value pairs is returned.", "If an optional dictionary is passed in as the second argument, it is used instead of a new dictionary, and updated with the values read in the file."]}
{"index": 6263, "name": "sysconfig.get_config_h_filename", "module": "sysconfig", "doc": ["Return the path of pyconfig.h."]}
{"index": 6264, "name": "sysconfig.get_makefile_filename", "module": "sysconfig", "doc": ["Return the path of Makefile."]}
{"index": 6265, "name": "syslog.syslog", "module": "syslog", "doc": ["Send the string message to the system logger.", "A trailing newline is added if necessary.", "Each message is tagged with a priority composed of a facility and a level.", "The optional priority argument, which defaults to LOG_INFO, determines the message priority.", "If the facility is not encoded in priority using logical-or (LOG_INFO | LOG_USER), the value given in the openlog() call is used.", "If openlog() has not been called prior to the call to syslog(), openlog() will be called with no arguments."]}
{"index": 6266, "name": "syslog.openlog", "module": "syslog", "doc": ["Logging options of subsequent syslog() calls can be set by calling openlog().", "syslog() will call openlog() with no arguments if the log is not currently open.", "The optional ident keyword argument is a string which is prepended to every message, and defaults to sys.argv[0] with leading path components stripped.", "The optional logoption keyword argument (default is 0) is a bit field \u2013 see below for possible values to combine.", "The optional facility keyword argument (default is LOG_USER) sets the default facility for messages which do not have a facility explicitly encoded."]}
{"index": 6267, "name": "syslog.closelog", "module": "syslog", "doc": ["Reset the syslog module values and call the system library closelog().", "This causes the module to behave as it does when initially imported.", "For example, openlog() will be called on the first syslog() call (if openlog() hasn\u2019t already been called), and ident and other openlog() parameters are reset to defaults."]}
{"index": 6268, "name": "syslog.setlogmask", "module": "syslog", "doc": ["Set the priority mask to maskpri and return the previous mask value.", "Calls to syslog() with a priority level not set in maskpri are ignored.", "The default is to log all priorities.", "The function LOG_MASK(pri) calculates the mask for the individual priority pri.", "The function LOG_UPTO(pri) calculates the mask for all priorities up to and including pri."]}
{"index": 6269, "name": "tabnanny.check", "module": "tabnanny", "doc": ["If file_or_dir is a directory and not a symbolic link, then recursively descend the directory tree named by file_or_dir, checking all .py files along the way.", "If file_or_dir is an ordinary Python source file, it is checked for whitespace related problems.", "The diagnostic messages are written to standard output using the print() function."]}
{"index": 6270, "name": "tabnanny.verbose", "module": "tabnanny", "doc": ["Flag indicating whether to print verbose messages.", "This is incremented by the -v option if called as a script."]}
{"index": 6271, "name": "tabnanny.filename_only", "module": "tabnanny", "doc": ["Flag indicating whether to print only the filenames of files containing whitespace related problems.", "This is set to true by the -q option if called as a script."]}
{"index": 6272, "name": "tabnanny.NannyNag", "module": "tabnanny", "doc": ["Raised by process_tokens() if detecting an ambiguous indent.", "Captured and handled in check()."]}
{"index": 6273, "name": "tabnanny.process_tokens", "module": "tabnanny", "doc": ["This function is used by check() to process tokens generated by the tokenize module."]}
{"index": 6274, "name": "tarfile.open", "module": "tarfile", "doc": ["Return a TarFile object for the pathname name.", "For detailed information on TarFile objects and the keyword arguments that are allowed, see TarFile Objects.", "mode has to be a string of the form 'filemode[:compression]', it defaults to 'r'.", "Here is a full list of mode combinations:", "Note that 'a:gz', 'a:bz2' or 'a:xz' is not possible.", "If mode is not suitable to open a certain (compressed) file for reading, ReadError is raised.", "Use mode 'r' to avoid this.", "If a compression method is not supported, CompressionError is raised.", "If fileobj is specified, it is used as an alternative to a file object opened in binary mode for name.", "It is supposed to be at position 0.", "For modes 'w:gz', 'r:gz', 'w:bz2', 'r:bz2', 'x:gz', 'x:bz2', tarfile.open() accepts the keyword argument compresslevel (default 9) to specify the compression level of the file.", "For special purposes, there is a second format for mode: 'filemode|[compression]'.", "tarfile.open() will return a TarFile object that processes its data as a stream of blocks.", "No random seeking will be done on the file.", "If given, fileobj may be any object that has a read() or write() method (depending on the mode).", "bufsize specifies the blocksize and defaults to 20 * 512 bytes.", "Use this variant in combination with e.g.", "sys.stdin, a socket file object or a tape device.", "However, such a TarFile object is limited in that it does not allow random access, see Examples.", "The currently possible modes:"]}
{"index": 6275, "name": "tarfile.TarFile", "module": "tarfile", "doc": ["Class for reading and writing tar archives.", "Do not use this class directly: use tarfile.open() instead.", "See TarFile Objects."]}
{"index": 6276, "name": "tarfile.is_tarfile", "module": "tarfile", "doc": ["Return True if name is a tar archive file, that the tarfile module can read."]}
{"index": 6277, "name": "tarfile.TarError", "module": "tarfile", "doc": ["Base class for all tarfile exceptions."]}
{"index": 6278, "name": "tarfile.ReadError", "module": "tarfile", "doc": ["Is raised when a tar archive is opened, that either cannot be handled by the tarfile module or is somehow invalid."]}
{"index": 6279, "name": "tarfile.CompressionError", "module": "tarfile", "doc": ["Is raised when a compression method is not supported or when the data cannot be decoded properly."]}
{"index": 6280, "name": "tarfile.StreamError", "module": "tarfile", "doc": ["Is raised for the limitations that are typical for stream-like TarFile objects."]}
{"index": 6281, "name": "tarfile.ExtractError", "module": "tarfile", "doc": ["Is raised for non-fatal errors when using TarFile.extract(), but only if TarFile.errorlevel== 2."]}
{"index": 6282, "name": "tarfile.HeaderError", "module": "tarfile", "doc": ["Is raised by TarInfo.frombuf() if the buffer it gets is invalid."]}
{"index": 6283, "name": "tarfile.ENCODING", "module": "tarfile", "doc": ["The default character encoding: 'utf-8' on Windows, the value returned by sys.getfilesystemencoding() otherwise."]}
{"index": 6284, "name": "tarfile.USTAR_FORMAT", "module": "tarfile", "doc": ["POSIX.1-1988 (ustar) format."]}
{"index": 6285, "name": "tarfile.GNU_FORMAT", "module": "tarfile", "doc": ["GNU tar format."]}
{"index": 6286, "name": "tarfile.PAX_FORMAT", "module": "tarfile", "doc": ["POSIX.1-2001 (pax) format."]}
{"index": 6287, "name": "tarfile.DEFAULT_FORMAT", "module": "tarfile", "doc": ["The default format for creating archives.", "This is currently GNU_FORMAT."]}
{"index": 6288, "name": "id0", "module": "tarfile", "doc": ["All following arguments are optional and can be accessed as instance attributes as well.", "name is the pathname of the archive.", "name may be a path-like object.", "It can be omitted if fileobj is given.", "In this case, the file object\u2019s name attribute is used if it exists.", "mode is either 'r' to read from an existing archive, 'a' to append data to an existing file, 'w' to create a new file overwriting an existing one, or 'x' to create a new file only if it does not already exist.", "If fileobj is given, it is used for reading or writing data.", "If it can be determined, mode is overridden by fileobj\u2019s mode.", "fileobj will be used from position 0.", "format controls the archive format.", "It must be one of the constants USTAR_FORMAT, GNU_FORMAT or PAX_FORMAT that are defined at module level.", "The tarinfo argument can be used to replace the default TarInfo class with a different one.", "If dereference is False, add symbolic and hard links to the archive.", "If it is True, add the content of the target files to the archive.", "This has no effect on systems that do not support symbolic links.", "If ignore_zeros is False, treat an empty block as the end of the archive.", "If it is True, skip empty (and invalid) blocks and try to get as many members as possible.", "This is only useful for reading concatenated or damaged archives.", "debug can be set from 0 (no debug messages) up to 3 (all debug messages).", "The messages are written to sys.stderr.", "If errorlevel is 0, all errors are ignored when using TarFile.extract().", "Nevertheless, they appear as error messages in the debug output, when debugging is enabled.", "If 1, all fatal errors are raised as OSError exceptions.", "If 2, all non-fatal errors are raised as TarError exceptions as well.", "The encoding and errors arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled.", "The default settings will work for most users.", "See section Unicode issues for in-depth information.", "The pax_headers argument is an optional dictionary of strings which will be added as a pax global header if format is PAX_FORMAT."]}
{"index": 6289, "name": "tarfile.TarFile.open", "module": "tarfile", "doc": ["Alternative constructor.", "The tarfile.open() function is actually a shortcut to this classmethod."]}
{"index": 6290, "name": "tarfile.TarFile.getmember", "module": "tarfile", "doc": ["Return a TarInfo object for member name.", "If name can not be found in the archive, KeyError is raised."]}
{"index": 6291, "name": "tarfile.TarFile.getmembers", "module": "tarfile", "doc": ["Return the members of the archive as a list of TarInfo objects.", "The list has the same order as the members in the archive."]}
{"index": 6292, "name": "tarfile.TarFile.getnames", "module": "tarfile", "doc": ["Return the members as a list of their names.", "It has the same order as the list returned by getmembers()."]}
{"index": 6293, "name": "tarfile.TarFile.list", "module": "tarfile", "doc": ["Print a table of contents to sys.stdout.", "If verbose is False, only the names of the members are printed.", "If it is True, output similar to that of ls -l is produced.", "If optional members is given, it must be a subset of the list returned by getmembers()."]}
{"index": 6294, "name": "tarfile.TarFile.next", "module": "tarfile", "doc": ["Return the next member of the archive as a TarInfo object, when TarFile is opened for reading.", "Return None if there is no more available."]}
{"index": 6295, "name": "tarfile.TarFile.extractall", "module": "tarfile", "doc": ["Extract all members from the archive to the current working directory or directory path.", "If optional members is given, it must be a subset of the list returned by getmembers().", "Directory information like owner, modification time and permissions are set after all members have been extracted.", "This is done to work around two problems: A directory\u2019s modification time is reset each time a file is created in it.", "And, if a directory\u2019s permissions do not allow writing, extracting files to it will fail.", "If numeric_owner is True, the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files.", "Otherwise, the named values from the tarfile are used."]}
{"index": 6296, "name": "tarfile.TarFile.extract", "module": "tarfile", "doc": ["Extract a member from the archive to the current working directory, using its full name.", "Its file information is extracted as accurately as possible.", "member may be a filename or a TarInfo object.", "You can specify a different directory using path.", "path may be a path-like object.", "File attributes (owner, mtime, mode) are set unless set_attrs is false.", "If numeric_owner is True, the uid and gid numbers from the tarfile are used to set the owner/group for the extracted files.", "Otherwise, the named values from the tarfile are used."]}
{"index": 6297, "name": "tarfile.TarFile.extractfile", "module": "tarfile", "doc": ["Extract a member from the archive as a file object.", "member may be a filename or a TarInfo object.", "If member is a regular file or a link, an io.BufferedReader object is returned.", "Otherwise, None is returned."]}
{"index": 6298, "name": "tarfile.TarFile.add", "module": "tarfile", "doc": ["Add the file name to the archive.", "name may be any type of file (directory, fifo, symbolic link, etc.).", "If given, arcname specifies an alternative name for the file in the archive.", "Directories are added recursively by default.", "This can be avoided by setting recursive to False.", "Recursion adds entries in sorted order.", "If filter is given, it should be a function that takes a TarInfo object argument and returns the changed TarInfo object.", "If it instead returns None the TarInfo object will be excluded from the archive.", "See Examples for an example."]}
{"index": 6299, "name": "tarfile.TarFile.addfile", "module": "tarfile", "doc": ["Add the TarInfo object tarinfo to the archive.", "If fileobj is given, it should be a binary file, and tarinfo.size bytes are read from it and added to the archive.", "You can create TarInfo objects directly, or by using gettarinfo()."]}
{"index": 6300, "name": "tarfile.TarFile.gettarinfo", "module": "tarfile", "doc": ["Create a TarInfo object from the result of os.stat() or equivalent on an existing file.", "The file is either named by name, or specified as a file object fileobj with a file descriptor.", "name may be a path-like object.", "If given, arcname specifies an alternative name for the file in the archive, otherwise, the name is taken from fileobj\u2019s name attribute, or the name argument.", "The name should be a text string.", "You can modify some of the TarInfo\u2019s attributes before you add it using addfile().", "If the file object is not an ordinary file object positioned at the beginning of the file, attributes such as size may need modifying.", "This is the case for objects such as GzipFile.", "The name may also be modified, in which case arcname could be a dummy string."]}
{"index": 6301, "name": "tarfile.TarFile.close", "module": "tarfile", "doc": ["Close the TarFile.", "In write mode, two finishing zero blocks are appended to the archive."]}
{"index": 6302, "name": "tarfile.TarFile.pax_headers", "module": "tarfile", "doc": ["A dictionary containing key-value pairs of pax global headers."]}
{"index": 6303, "name": "tarfile.TarInfo", "module": "tarfile", "doc": ["Create a TarInfo object."]}
{"index": 6304, "name": "tarfile.TarInfo.frombuf", "module": "tarfile", "doc": ["Create and return a TarInfo object from string buffer buf.", "Raises HeaderError if the buffer is invalid."]}
{"index": 6305, "name": "tarfile.TarInfo.fromtarfile", "module": "tarfile", "doc": ["Read the next member from the TarFile object tarfile and return it as a TarInfo object."]}
{"index": 6306, "name": "tarfile.TarInfo.tobuf", "module": "tarfile", "doc": ["Create a string buffer from a TarInfo object.", "For information on the arguments see the constructor of the TarFile class."]}
{"index": 6307, "name": "tarfile.TarInfo.name", "module": "tarfile", "doc": ["Name of the archive member."]}
{"index": 6308, "name": "tarfile.TarInfo.size", "module": "tarfile", "doc": ["Size in bytes."]}
{"index": 6309, "name": "tarfile.TarInfo.mtime", "module": "tarfile", "doc": ["Time of last modification."]}
{"index": 6310, "name": "tarfile.TarInfo.mode", "module": "tarfile", "doc": ["Permission bits."]}
{"index": 6311, "name": "tarfile.TarInfo.type", "module": "tarfile", "doc": ["File type.", "type is usually one of these constants: REGTYPE, AREGTYPE, LNKTYPE, SYMTYPE, DIRTYPE, FIFOTYPE, CONTTYPE, CHRTYPE, BLKTYPE, GNUTYPE_SPARSE.", "To determine the type of a TarInfo object more conveniently, use the is*() methods below."]}
{"index": 6312, "name": "tarfile.TarInfo.linkname", "module": "tarfile", "doc": ["Name of the target file name, which is only present in TarInfo objects of type LNKTYPE and SYMTYPE."]}
{"index": 6313, "name": "tarfile.TarInfo.uid", "module": "tarfile", "doc": ["User ID of the user who originally stored this member."]}
{"index": 6314, "name": "tarfile.TarInfo.gid", "module": "tarfile", "doc": ["Group ID of the user who originally stored this member."]}
{"index": 6315, "name": "tarfile.TarInfo.uname", "module": "tarfile", "doc": ["User name."]}
{"index": 6316, "name": "tarfile.TarInfo.gname", "module": "tarfile", "doc": ["Group name."]}
{"index": 6317, "name": "tarfile.TarInfo.pax_headers", "module": "tarfile", "doc": ["A dictionary containing key-value pairs of an associated pax extended header."]}
{"index": 6318, "name": "tarfile.TarInfo.isfile", "module": "tarfile", "doc": ["Return True if the Tarinfo object is a regular file."]}
{"index": 6319, "name": "tarfile.TarInfo.isreg", "module": "tarfile", "doc": ["Same as isfile()."]}
{"index": 6320, "name": "tarfile.TarInfo.isdir", "module": "tarfile", "doc": ["Return True if it is a directory."]}
{"index": 6321, "name": "tarfile.TarInfo.issym", "module": "tarfile", "doc": ["Return True if it is a symbolic link."]}
{"index": 6322, "name": "tarfile.TarInfo.islnk", "module": "tarfile", "doc": ["Return True if it is a hard link."]}
{"index": 6323, "name": "tarfile.TarInfo.ischr", "module": "tarfile", "doc": ["Return True if it is a character device."]}
{"index": 6324, "name": "tarfile.TarInfo.isblk", "module": "tarfile", "doc": ["Return True if it is a block device."]}
{"index": 6325, "name": "tarfile.TarInfo.isfifo", "module": "tarfile", "doc": ["Return True if it is a FIFO."]}
{"index": 6326, "name": "tarfile.TarInfo.isdev", "module": "tarfile", "doc": ["Return True if it is one of character device, block device or FIFO."]}
{"index": 6327, "name": "cmdoption-tarfile-l", "module": "tarfile", "doc": ["List files in a tarfile."]}
{"index": 6328, "name": "cmdoption-tarfile-list", "module": "tarfile", "doc": ["List files in a tarfile."]}
{"index": 6329, "name": "cmdoption-tarfile-c", "module": "tarfile", "doc": ["Create tarfile from source files."]}
{"index": 6330, "name": "cmdoption-tarfile-create", "module": "tarfile", "doc": ["Create tarfile from source files."]}
{"index": 6331, "name": "cmdoption-tarfile-e", "module": "tarfile", "doc": ["Extract tarfile into the current directory if output_dir is not specified."]}
{"index": 6332, "name": "cmdoption-tarfile-extract", "module": "tarfile", "doc": ["Extract tarfile into the current directory if output_dir is not specified."]}
{"index": 6333, "name": "cmdoption-tarfile-t", "module": "tarfile", "doc": ["Test whether the tarfile is valid or not."]}
{"index": 6334, "name": "cmdoption-tarfile-test", "module": "tarfile", "doc": ["Test whether the tarfile is valid or not."]}
{"index": 6335, "name": "cmdoption-tarfile-v", "module": "tarfile", "doc": ["Verbose output."]}
{"index": 6336, "name": "telnetlib.Telnet", "module": "telnetlib", "doc": ["Telnet represents a connection to a Telnet server.", "The instance is initially not connected by default; the open() method must be used to establish a connection.", "Alternatively, the host name and optional port number can be passed to the constructor too, in which case the connection to the server will be established before the constructor returns.", "The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).", "Do not reopen an already connected instance.", "This class has many read_*() methods.", "Note that some of them  raise EOFError when the end of the connection is read, because they can return an empty string for other reasons.", "See the individual descriptions below.", "A Telnet object is a context manager and can be used in a with statement.", "When the with block ends, the close() method is called:"]}
{"index": 6337, "name": "telnetlib.Telnet.read_until", "module": "telnetlib", "doc": ["Read until a given byte string, expected, is encountered or until timeout seconds have passed.", "When no match is found, return whatever is available instead, possibly empty bytes.", "Raise EOFError if the connection is closed and no cooked data is available."]}
{"index": 6338, "name": "telnetlib.Telnet.read_all", "module": "telnetlib", "doc": ["Read all data until EOF as bytes; block until connection closed."]}
{"index": 6339, "name": "telnetlib.Telnet.read_some", "module": "telnetlib", "doc": ["Read at least one byte of cooked data unless EOF is hit.", "Return b'' if EOF is hit.", "Block if no data is immediately available."]}
{"index": 6340, "name": "telnetlib.Telnet.read_very_eager", "module": "telnetlib", "doc": ["Read everything that can be without blocking in I/O (eager).", "Raise EOFError if connection closed and no cooked data available.", "Return b'' if no cooked data available otherwise.", "Do not block unless in the midst of an IAC sequence."]}
{"index": 6341, "name": "telnetlib.Telnet.read_eager", "module": "telnetlib", "doc": ["Read readily available data.", "Raise EOFError if connection closed and no cooked data available.", "Return b'' if no cooked data available otherwise.", "Do not block unless in the midst of an IAC sequence."]}
{"index": 6342, "name": "telnetlib.Telnet.read_lazy", "module": "telnetlib", "doc": ["Process and return data already in the queues (lazy).", "Raise EOFError if connection closed and no data available.", "Return b'' if no cooked data available otherwise.", "Do not block unless in the midst of an IAC sequence."]}
{"index": 6343, "name": "telnetlib.Telnet.read_very_lazy", "module": "telnetlib", "doc": ["Return any data available in the cooked queue (very lazy).", "Raise EOFError if connection closed and no data available.", "Return b'' if no cooked data available otherwise.", "This method never blocks."]}
{"index": 6344, "name": "telnetlib.Telnet.read_sb_data", "module": "telnetlib", "doc": ["Return the data collected between a SB/SE pair (suboption begin/end).", "The callback should access these data when it was invoked with a SE command.", "This method never blocks."]}
{"index": 6345, "name": "telnetlib.Telnet.open", "module": "telnetlib", "doc": ["Connect to a host.", "The optional second argument is the port number, which defaults to the standard Telnet port (23).", "The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).", "Do not try to reopen an already connected instance."]}
{"index": 6346, "name": "telnetlib.Telnet.msg", "module": "telnetlib", "doc": ["Print a debug message when the debug level is > 0.", "If extra arguments are present, they are substituted in the message using the standard string formatting operator."]}
{"index": 6347, "name": "telnetlib.Telnet.set_debuglevel", "module": "telnetlib", "doc": ["Set the debug level.", "The higher the value of debuglevel, the more debug output you get (on sys.stdout)."]}
{"index": 6348, "name": "telnetlib.Telnet.close", "module": "telnetlib", "doc": ["Close the connection."]}
{"index": 6349, "name": "telnetlib.Telnet.get_socket", "module": "telnetlib", "doc": ["Return the socket object used internally."]}
{"index": 6350, "name": "telnetlib.Telnet.fileno", "module": "telnetlib", "doc": ["Return the file descriptor of the socket object used internally."]}
{"index": 6351, "name": "telnetlib.Telnet.write", "module": "telnetlib", "doc": ["Write a byte string to the socket, doubling any IAC characters.", "This can block if the connection is blocked.", "May raise OSError if the connection is closed."]}
{"index": 6352, "name": "telnetlib.Telnet.interact", "module": "telnetlib", "doc": ["Interaction function, emulates a very dumb Telnet client."]}
{"index": 6353, "name": "telnetlib.Telnet.mt_interact", "module": "telnetlib", "doc": ["Multithreaded version of interact()."]}
{"index": 6354, "name": "telnetlib.Telnet.expect", "module": "telnetlib", "doc": ["Read until one from a list of a regular expressions matches.", "The first argument is a list of regular expressions, either compiled (regex objects) or uncompiled (byte strings).", "The optional second argument is a timeout, in seconds; the default is to block indefinitely.", "Return a tuple of three items: the index in the list of the first regular expression that matches; the match object returned; and the bytes read up till and including the match.", "If end of file is found and no bytes were read, raise EOFError.", "Otherwise, when nothing matches, return (-1, None, data) where data is the bytes received so far (may be empty bytes if a timeout happened).", "If a regular expression ends with a greedy match (such as .", "*) or if more than one expression can match the same input, the results are non-deterministic, and may depend on the I/O timing."]}
{"index": 6355, "name": "telnetlib.Telnet.set_option_negotiation_callback", "module": "telnetlib", "doc": ["Each time a telnet option is read on the input flow, this callback (if set) is called with the following parameters: callback(telnet socket, command (DO/DONT/WILL/WONT), option).", "No other action is done afterwards by telnetlib."]}
{"index": 6356, "name": "tempfile.TemporaryFile", "module": "tempfile", "doc": ["Return a file-like object that can be used as a temporary storage area.", "The file is created securely, using the same rules as mkstemp().", "It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected).", "Under Unix, the directory entry for the file is either not created at all or is removed immediately after the file is created.", "Other platforms do not support this; your code should not rely on a temporary file created using this function having or not having a visible name in the file system.", "The resulting object can be used as a context manager (see Examples).", "On completion of the context or destruction of the file object the temporary file will be removed from the filesystem.", "The mode parameter defaults to 'w+b' so that the file created can be read and written without being closed.", "Binary mode is used so that it behaves consistently on all platforms without regard for the data that is stored.", "buffering, encoding and newline are interpreted as for open().", "The dir, prefix and suffix parameters have the same meaning and defaults as with mkstemp().", "The returned object is a true file object on POSIX platforms.", "On other platforms, it is a file-like object whose file attribute is the underlying true file object.", "The os.O_TMPFILE flag is used if it is available and works (Linux-specific, requires Linux kernel 3.11 or later)."]}
{"index": 6357, "name": "tempfile.NamedTemporaryFile", "module": "tempfile", "doc": ["This function operates exactly as TemporaryFile() does, except that the file is guaranteed to have a visible name in the file system (on Unix, the directory entry is not unlinked).", "That name can be retrieved from the name attribute of the returned file-like object.", "Whether the name can be used to open the file a second time, while the named temporary file is still open, varies across platforms (it can be so used on Unix; it cannot on Windows NT or later).", "If delete is true (the default), the file is deleted as soon as it is closed.", "The returned object is always a file-like object whose file attribute is the underlying true file object.", "This file-like object can be used in a with statement, just like a normal file."]}
{"index": 6358, "name": "tempfile.SpooledTemporaryFile", "module": "tempfile", "doc": ["This function operates exactly as TemporaryFile() does, except that data is spooled in memory until the file size exceeds max_size, or until the file\u2019s fileno() method is called, at which point the contents are written to disk and operation proceeds as with TemporaryFile().", "The resulting file has one additional method, rollover(), which causes the file to roll over to an on-disk file regardless of its size.", "The returned object is a file-like object whose _file attribute is either an io.BytesIO or io.StringIO object (depending on whether binary or text mode was specified) or a true file object, depending on whether rollover() has been called.", "This file-like object can be used in a with statement, just like a normal file."]}
{"index": 6359, "name": "tempfile.TemporaryDirectory", "module": "tempfile", "doc": ["This function securely creates a temporary directory using the same rules as mkdtemp().", "The resulting object can be used as a context manager (see Examples).", "On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem.", "The directory name can be retrieved from the name attribute of the returned object.", "When the returned object is used as a context manager, the name will be assigned to the target of the as clause in the with statement, if there is one.", "The directory can be explicitly cleaned up by calling the cleanup() method."]}
{"index": 6360, "name": "tempfile.mkstemp", "module": "tempfile", "doc": ["Creates a temporary file in the most secure manner possible.", "There are no race conditions in the file\u2019s creation, assuming that the platform properly implements the os.O_EXCL flag for os.open().", "The file is readable and writable only by the creating user ID.", "If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one.", "The file descriptor is not inherited by child processes.", "Unlike TemporaryFile(), the user of mkstemp() is responsible for deleting the temporary file when done with it.", "If suffix is not None, the file name will end with that suffix, otherwise there will be no suffix.", "mkstemp() does not put a dot between the file name and the suffix; if you need one, put it at the beginning of suffix.", "If prefix is not None, the file name will begin with that prefix; otherwise, a default prefix is used.", "The default is the return value of gettempprefix() or gettempprefixb(), as appropriate.", "If dir is not None, the file will be created in that directory; otherwise, a default directory is used.", "The default directory is chosen from a platform-dependent list, but the user of the application can control the directory location by setting the TMPDIR, TEMP or TMP environment variables.", "There is thus no guarantee that the generated filename will have any nice properties, such as not requiring quoting when passed to external commands via os.popen().", "If any of suffix, prefix, and dir are not None, they must be the same type.", "If they are bytes, the returned name will be bytes instead of str.", "If you want to force a bytes return value with otherwise default behavior, pass suffix=b''.", "If text is specified, it indicates whether to open the file in binary mode (the default) or text mode.", "On some platforms, this makes no difference.", "mkstemp() returns a tuple containing an OS-level handle to an open file (as would be returned by os.open()) and the absolute pathname of that file, in that order."]}
{"index": 6361, "name": "tempfile.mkdtemp", "module": "tempfile", "doc": ["Creates a temporary directory in the most secure manner possible.", "There are no race conditions in the directory\u2019s creation.", "The directory is readable, writable, and searchable only by the creating user ID.", "The user of mkdtemp() is responsible for deleting the temporary directory and its contents when done with it.", "The prefix, suffix, and dir arguments are the same as for mkstemp().", "mkdtemp() returns the absolute pathname of the new directory."]}
{"index": 6362, "name": "tempfile.gettempdir", "module": "tempfile", "doc": ["Return the name of the directory used for temporary files.", "This defines the default value for the dir argument to all functions in this module.", "Python searches a standard list of directories to find one which the calling user can create files in.", "The list is:", "The result of this search is cached, see the description of tempdir below."]}
{"index": 6363, "name": "tempfile.gettempdirb", "module": "tempfile", "doc": ["Same as gettempdir() but the return value is in bytes."]}
{"index": 6364, "name": "tempfile.gettempprefix", "module": "tempfile", "doc": ["Return the filename prefix used to create temporary files.", "This does not contain the directory component."]}
{"index": 6365, "name": "tempfile.gettempprefixb", "module": "tempfile", "doc": ["Same as gettempprefix() but the return value is in bytes."]}
{"index": 6366, "name": "tempfile.tempdir", "module": "tempfile", "doc": ["When set to a value other than None, this variable defines the default value for the dir argument to the functions defined in this module.", "If tempdir is None (the default) at any call to any of the above functions except gettempprefix() it is initialized following the algorithm described in gettempdir()."]}
{"index": 6367, "name": "tempfile.mktemp", "module": "tempfile", "doc": ["Return an absolute pathname of a file that did not exist at the time the call is made.", "The prefix, suffix, and dir arguments are similar to those of mkstemp(), except that bytes file names, suffix=None and prefix=None are not supported."]}
{"index": 6368, "name": "termios.tcgetattr", "module": "termios", "doc": ["Return a list containing the tty attributes for file descriptor fd, as follows: [iflag, oflag, cflag, lflag, ispeed, ospeed, cc] where cc is a list of the tty special characters (each a string of length 1, except the items with indices VMIN and VTIME, which are integers when these fields are defined).", "The interpretation of the flags and the speeds as well as the indexing in the cc array must be done using the symbolic constants defined in the termios module."]}
{"index": 6369, "name": "termios.tcsetattr", "module": "termios", "doc": ["Set the tty attributes for file descriptor fd from the attributes, which is a list like the one returned by tcgetattr().", "The when argument determines when the attributes are changed: TCSANOW to change immediately, TCSADRAIN to change after transmitting all queued output, or TCSAFLUSH to change after transmitting all queued output and discarding all queued input."]}
{"index": 6370, "name": "termios.tcsendbreak", "module": "termios", "doc": ["Send a break on file descriptor fd.", "A zero duration sends a break for 0.25\u20130.5 seconds; a nonzero duration has a system dependent meaning."]}
{"index": 6371, "name": "termios.tcdrain", "module": "termios", "doc": ["Wait until all output written to file descriptor fd has been transmitted."]}
{"index": 6372, "name": "termios.tcflush", "module": "termios", "doc": ["Discard queued data on file descriptor fd.", "The queue selector specifies which queue: TCIFLUSH for the input queue, TCOFLUSH for the output queue, or TCIOFLUSH for both queues."]}
{"index": 6373, "name": "termios.tcflow", "module": "termios", "doc": ["Suspend or resume input or output on file descriptor fd.", "The action argument can be TCOOFF to suspend output, TCOON to restart output, TCIOFF to suspend input, or TCION to restart input."]}
{"index": 6374, "name": "test.support.TestFailed", "module": "test", "doc": ["Exception to be raised when a test fails.", "This is deprecated in favor of unittest-based tests and unittest.TestCase\u2019s assertion methods."]}
{"index": 6375, "name": "test.support.ResourceDenied", "module": "test", "doc": ["Subclass of unittest.SkipTest.", "Raised when a resource (such as a network connection) is not available.", "Raised by the requires() function."]}
{"index": 6376, "name": "test.support.verbose", "module": "test", "doc": ["True when verbose output is enabled.", "Should be checked when more detailed information is desired about a running test.", "verbose is set by test.regrtest."]}
{"index": 6377, "name": "test.support.is_jython", "module": "test", "doc": ["True if the running interpreter is Jython."]}
{"index": 6378, "name": "test.support.is_android", "module": "test", "doc": ["True if the system is Android."]}
{"index": 6379, "name": "test.support.unix_shell", "module": "test", "doc": ["Path for shell if not on Windows; otherwise None."]}
{"index": 6380, "name": "test.support.FS_NONASCII", "module": "test", "doc": ["A non-ASCII character encodable by os.fsencode()."]}
{"index": 6381, "name": "test.support.TESTFN", "module": "test", "doc": ["Set to a name that is safe to use as the name of a temporary file.", "Any temporary file that is created should be closed and unlinked (removed)."]}
{"index": 6382, "name": "test.support.TESTFN_UNICODE", "module": "test", "doc": ["Set to a non-ASCII name for a temporary file."]}
{"index": 6383, "name": "test.support.TESTFN_ENCODING", "module": "test", "doc": ["Set to sys.getfilesystemencoding()."]}
{"index": 6384, "name": "test.support.TESTFN_UNENCODABLE", "module": "test", "doc": ["Set to a filename (str type) that should not be able to be encoded by file system encoding in strict mode.", "It may be None if it\u2019s not possible to generate such a filename."]}
{"index": 6385, "name": "test.support.TESTFN_UNDECODABLE", "module": "test", "doc": ["Set to a filename (bytes type) that should not be able to be decoded by file system encoding in strict mode.", "It may be None if it\u2019s not possible to generate such a filename."]}
{"index": 6386, "name": "test.support.TESTFN_NONASCII", "module": "test", "doc": ["Set to a filename containing the FS_NONASCII character."]}
{"index": 6387, "name": "test.support.IPV6_ENABLED", "module": "test", "doc": ["Set to True if IPV6 is enabled on this host, False otherwise."]}
{"index": 6388, "name": "test.support.SAVEDCWD", "module": "test", "doc": ["Set to os.getcwd()."]}
{"index": 6389, "name": "test.support.PGO", "module": "test", "doc": ["Set when tests can be skipped when they are not useful for PGO."]}
{"index": 6390, "name": "test.support.PIPE_MAX_SIZE", "module": "test", "doc": ["A constant that is likely larger than the underlying OS pipe buffer size, to make writes blocking."]}
{"index": 6391, "name": "test.support.SOCK_MAX_SIZE", "module": "test", "doc": ["A constant that is likely larger than the underlying OS socket buffer size, to make writes blocking."]}
{"index": 6392, "name": "test.support.TEST_SUPPORT_DIR", "module": "test", "doc": ["Set to the top level directory that contains test.support."]}
{"index": 6393, "name": "test.support.TEST_HOME_DIR", "module": "test", "doc": ["Set to the top level directory for the test package."]}
{"index": 6394, "name": "test.support.TEST_DATA_DIR", "module": "test", "doc": ["Set to the data directory within the test package."]}
{"index": 6395, "name": "test.support.MAX_Py_ssize_t", "module": "test", "doc": ["Set to sys.maxsize for big memory tests."]}
{"index": 6396, "name": "test.support.max_memuse", "module": "test", "doc": ["Set by set_memlimit() as the memory limit for big memory tests.", "Limited by MAX_Py_ssize_t."]}
{"index": 6397, "name": "test.support.real_max_memuse", "module": "test", "doc": ["Set by set_memlimit() as the memory limit for big memory tests.", "Not limited by MAX_Py_ssize_t."]}
{"index": 6398, "name": "test.support.MISSING_C_DOCSTRINGS", "module": "test", "doc": ["Return True if running on CPython, not on Windows, and configuration not set with WITH_DOC_STRINGS."]}
{"index": 6399, "name": "test.support.HAVE_DOCSTRINGS", "module": "test", "doc": ["Check for presence of docstrings."]}
{"index": 6400, "name": "test.support.TEST_HTTP_URL", "module": "test", "doc": ["Define the URL of a dedicated HTTP server for the network tests."]}
{"index": 6401, "name": "test.support.ALWAYS_EQ", "module": "test", "doc": ["Object that is equal to anything.", "Used to test mixed type comparison."]}
{"index": 6402, "name": "test.support.LARGEST", "module": "test", "doc": ["Object that is greater than anything (except itself).", "Used to test mixed type comparison."]}
{"index": 6403, "name": "test.support.SMALLEST", "module": "test", "doc": ["Object that is less than anything (except itself).", "Used to test mixed type comparison."]}
{"index": 6404, "name": "test.support.forget", "module": "test", "doc": ["Remove the module named module_name from sys.modules and delete any byte-compiled files of the module."]}
{"index": 6405, "name": "test.support.unload", "module": "test", "doc": ["Delete name from sys.modules."]}
{"index": 6406, "name": "test.support.unlink", "module": "test", "doc": ["Call os.unlink() on filename.", "On Windows platforms, this is wrapped with a wait loop that checks for the existence fo the file."]}
{"index": 6407, "name": "test.support.rmdir", "module": "test", "doc": ["Call os.rmdir() on filename.", "On Windows platforms, this is wrapped with a wait loop that checks for the existence of the file."]}
{"index": 6408, "name": "test.support.rmtree", "module": "test", "doc": ["Call shutil.rmtree() on path or call os.lstat() and os.rmdir() to remove a path and its contents.", "On Windows platforms, this is wrapped with a wait loop that checks for the existence of the files."]}
{"index": 6409, "name": "test.support.make_legacy_pyc", "module": "test", "doc": ["Move a PEP 3147/488 pyc file to its legacy pyc location and return the file system path to the legacy pyc file.", "The source value is the file system path to the source file.", "It does not need to exist, however the PEP 3147/488 pyc file must exist."]}
{"index": 6410, "name": "test.support.is_resource_enabled", "module": "test", "doc": ["Return True if resource is enabled and available.", "The list of available resources is only set when test.regrtest is executing the tests."]}
{"index": 6411, "name": "test.support.python_is_optimized", "module": "test", "doc": ["Return True if Python was not built with -O0 or -Og."]}
{"index": 6412, "name": "test.support.with_pymalloc", "module": "test", "doc": ["Return _testcapi.WITH_PYMALLOC."]}
{"index": 6413, "name": "test.support.requires", "module": "test", "doc": ["Raise ResourceDenied if resource is not available.", "msg is the argument to ResourceDenied if it is raised.", "Always returns True if called by a function whose __name__ is '__main__'.", "Used when tests are executed by test.regrtest."]}
{"index": 6414, "name": "test.support.system_must_validate_cert", "module": "test", "doc": ["Raise unittest.SkipTest on TLS certification validation failures."]}
{"index": 6415, "name": "test.support.sortdict", "module": "test", "doc": ["Return a repr of dict with keys sorted."]}
{"index": 6416, "name": "test.support.findfile", "module": "test", "doc": ["Return the path to the file named filename.", "If no match is found filename is returned.", "This does not equal a failure since it could be the path to the file.", "Setting subdir indicates a relative path to use to find the file rather than looking directly in the path directories."]}
{"index": 6417, "name": "test.support.create_empty_file", "module": "test", "doc": ["Create an empty file with filename.", "If it already exists, truncate it."]}
{"index": 6418, "name": "test.support.fd_count", "module": "test", "doc": ["Count the number of open file descriptors."]}
{"index": 6419, "name": "test.support.match_test", "module": "test", "doc": ["Match test to patterns set in set_match_tests()."]}
{"index": 6420, "name": "test.support.set_match_tests", "module": "test", "doc": ["Define match test with regular expression patterns."]}
{"index": 6421, "name": "test.support.run_unittest", "module": "test", "doc": ["Execute unittest.TestCase subclasses passed to the function.", "The function scans the classes for methods starting with the prefix test_ and executes the tests individually.", "It is also legal to pass strings as parameters; these should be keys in sys.modules.", "Each associated module will be scanned by unittest.TestLoader.loadTestsFromModule().", "This is usually seen in the following test_main() function:", "This will run all tests defined in the named module."]}
{"index": 6422, "name": "test.support.run_doctest", "module": "test", "doc": ["Run doctest.testmod() on the given module.", "Return (failure_count, test_count).", "If verbosity is None, doctest.testmod() is run with verbosity set to verbose.", "Otherwise, it is run with verbosity set to None.", "optionflags is passed as optionflags to doctest.testmod()."]}
{"index": 6423, "name": "test.support.setswitchinterval", "module": "test", "doc": ["Set the sys.setswitchinterval() to the given interval.", "Defines a minimum interval for Android systems to prevent the system from hanging."]}
{"index": 6424, "name": "test.support.check_impl_detail", "module": "test", "doc": ["Use this check to guard CPython\u2019s implementation-specific tests or to run them only on the implementations guarded by the arguments:"]}
{"index": 6425, "name": "test.support.check_warnings", "module": "test", "doc": ["A convenience wrapper for warnings.catch_warnings() that makes it easier to test that a warning was correctly raised.", "It is approximately equivalent to calling warnings.catch_warnings(record=True) with warnings.simplefilter() set to always and with the option to automatically validate the results that are recorded.", "check_warnings accepts 2-tuples of the form (\"message regexp\", WarningCategory) as positional arguments.", "If one or more filters are provided, or if the optional keyword argument quiet is False, it checks to make sure the warnings are as expected:  each specified filter must match at least one of the warnings raised by the enclosed code or the test fails, and if any warnings are raised that do not match any of the specified filters the test fails.", "To disable the first of these checks, set quiet to True.", "If no arguments are specified, it defaults to:", "In this case all warnings are caught and no errors are raised.", "On entry to the context manager, a WarningRecorder instance is returned.", "The underlying warnings list from catch_warnings() is available via the recorder object\u2019s warnings attribute.", "As a convenience, the attributes of the object representing the most recent warning can also be accessed directly through the recorder object (see example below).", "If no warning has been raised, then any of the attributes that would otherwise be expected on an object representing a warning will return None.", "The recorder object also has a reset() method, which clears the warnings list.", "The context manager is designed to be used like this:", "In this case if either warning was not raised, or some other warning was raised, check_warnings() would raise an error.", "When a test needs to look more deeply into the warnings, rather than just checking whether or not they occurred, code like this can be used:", "Here all warnings will be caught, and the test code tests the captured warnings directly."]}
{"index": 6426, "name": "test.support.check_no_resource_warning", "module": "test", "doc": ["Context manager to check that no ResourceWarning was raised.", "You must remove the object which may emit ResourceWarning before the end of the context manager."]}
{"index": 6427, "name": "test.support.set_memlimit", "module": "test", "doc": ["Set the values for max_memuse and real_max_memuse for big memory tests."]}
{"index": 6428, "name": "test.support.record_original_stdout", "module": "test", "doc": ["Store the value from stdout.", "It is meant to hold the stdout at the time the regrtest began."]}
{"index": 6429, "name": "test.support.get_original_stdout", "module": "test", "doc": ["Return the original stdout set by record_original_stdout() or sys.stdout if it\u2019s not set."]}
{"index": 6430, "name": "test.support.strip_python_strerr", "module": "test", "doc": ["Strip the stderr of a Python process from potential debug output emitted by the interpreter.", "This will typically be run on the result of subprocess.Popen.communicate()."]}
{"index": 6431, "name": "test.support.args_from_interpreter_flags", "module": "test", "doc": ["Return a list of command line arguments reproducing the current settings in sys.flags and sys.warnoptions."]}
{"index": 6432, "name": "test.support.optim_args_from_interpreter_flags", "module": "test", "doc": ["Return a list of command line arguments reproducing the current optimization settings in sys.flags."]}
{"index": 6433, "name": "test.support.captured_stdin", "module": "test", "doc": ["A context managers that temporarily replaces the named stream with io.StringIO object.", "Example use with output streams:", "Example use with input stream:"]}
{"index": 6434, "name": "test.support.captured_stdout", "module": "test", "doc": ["A context managers that temporarily replaces the named stream with io.StringIO object.", "Example use with output streams:", "Example use with input stream:"]}
{"index": 6435, "name": "test.support.captured_stderr", "module": "test", "doc": ["A context managers that temporarily replaces the named stream with io.StringIO object.", "Example use with output streams:", "Example use with input stream:"]}
{"index": 6436, "name": "test.support.temp_dir", "module": "test", "doc": ["A context manager that creates a temporary directory at path and yields the directory.", "If path is None, the temporary directory is created using tempfile.mkdtemp().", "If quiet is False, the context manager raises an exception on error.", "Otherwise, if path is specified and cannot be created, only a warning is issued."]}
{"index": 6437, "name": "test.support.change_cwd", "module": "test", "doc": ["A context manager that temporarily changes the current working directory to path and yields the directory.", "If quiet is False, the context manager raises an exception on error.", "Otherwise, it issues only a warning and keeps the current working directory the same."]}
{"index": 6438, "name": "test.support.temp_cwd", "module": "test", "doc": ["A context manager that temporarily creates a new directory and changes the current working directory (CWD).", "The context manager creates a temporary directory in the current directory with name name before temporarily changing the current working directory.", "If name is None, the temporary directory is created using tempfile.mkdtemp().", "If quiet is False and it is not possible to create or change the CWD, an error is raised.", "Otherwise, only a warning is raised and the original CWD is used."]}
{"index": 6439, "name": "test.support.temp_umask", "module": "test", "doc": ["A context manager that temporarily sets the process umask."]}
{"index": 6440, "name": "test.support.transient_internet", "module": "test", "doc": ["A context manager that raises ResourceDenied when various issues with the internet connection manifest themselves as exceptions."]}
{"index": 6441, "name": "test.support.disable_faulthandler", "module": "test", "doc": ["A context manager that replaces sys.stderr with sys.__stderr__."]}
{"index": 6442, "name": "test.support.gc_collect", "module": "test", "doc": ["Force as many objects as possible to be collected.", "This is needed because timely deallocation is not guaranteed by the garbage collector.", "This means that __del__ methods may be called later than expected and weakrefs may remain alive for longer than expected."]}
{"index": 6443, "name": "test.support.disable_gc", "module": "test", "doc": ["A context manager that disables the garbage collector upon entry and reenables it upon exit."]}
{"index": 6444, "name": "test.support.swap_attr", "module": "test", "doc": ["Context manager to swap out an attribute with a new object.", "Usage:", "This will set obj.attr to 5 for the duration of the with block, restoring the old value at the end of the block.", "If attr doesn\u2019t exist on obj, it will be created and then deleted at the end of the block.", "The old value (or None if it doesn\u2019t exist) will be assigned to the target of the \u201cas\u201d clause, if there is one."]}
{"index": 6445, "name": "test.support.swap_item", "module": "test", "doc": ["Context manager to swap out an item with a new object.", "Usage:", "This will set obj[\"item\"] to 5 for the duration of the with block, restoring the old value at the end of the block.", "If item doesn\u2019t exist on obj, it will be created and then deleted at the end of the block.", "The old value (or None if it doesn\u2019t exist) will be assigned to the target of the \u201cas\u201d clause, if there is one."]}
{"index": 6446, "name": "test.support.wait_threads_exit", "module": "test", "doc": ["Context manager to wait until all threads created in the with statement exit."]}
{"index": 6447, "name": "test.support.start_threads", "module": "test", "doc": ["Context manager to start threads.", "It attempts to join the threads upon exit."]}
{"index": 6448, "name": "test.support.calcobjsize", "module": "test", "doc": ["Return struct.calcsize() for nP{fmt}0n or, if gettotalrefcount exists, 2PnP{fmt}0P."]}
{"index": 6449, "name": "test.support.calcvobjsize", "module": "test", "doc": ["Return struct.calcsize() for nPn{fmt}0n or, if gettotalrefcount exists, 2PnPn{fmt}0P."]}
{"index": 6450, "name": "test.support.checksizeof", "module": "test", "doc": ["For testcase test, assert that the sys.getsizeof for o plus the GC header size equals size."]}
{"index": 6451, "name": "test.support.can_symlink", "module": "test", "doc": ["Return True if the OS supports symbolic links, False otherwise."]}
{"index": 6452, "name": "test.support.can_xattr", "module": "test", "doc": ["Return True if the OS supports xattr, False otherwise."]}
{"index": 6453, "name": "test.support.skip_unless_symlink", "module": "test", "doc": ["A decorator for running tests that require support for symbolic links."]}
{"index": 6454, "name": "test.support.skip_unless_xattr", "module": "test", "doc": ["A decorator for running tests that require support for xattr."]}
{"index": 6455, "name": "test.support.skip_unless_bind_unix_socket", "module": "test", "doc": ["A decorator for running tests that require a functional bind() for Unix sockets."]}
{"index": 6456, "name": "test.support.anticipate_failure", "module": "test", "doc": ["A decorator to conditionally mark tests with unittest.expectedFailure().", "Any use of this decorator should have an associated comment identifying the relevant tracker issue."]}
{"index": 6457, "name": "test.support.run_with_locale", "module": "test", "doc": ["A decorator for running a function in a different locale, correctly resetting it after it has finished.", "catstr is the locale category as a string (for example \"LC_ALL\").", "The locales passed will be tried sequentially, and the first valid locale will be used."]}
{"index": 6458, "name": "test.support.run_with_tz", "module": "test", "doc": ["A decorator for running a function in a specific timezone, correctly resetting it after it has finished."]}
{"index": 6459, "name": "test.support.requires_freebsd_version", "module": "test", "doc": ["Decorator for the minimum version when running test on FreeBSD.", "If the FreeBSD version is less than the minimum, raise unittest.SkipTest."]}
{"index": 6460, "name": "test.support.requires_linux_version", "module": "test", "doc": ["Decorator for the minimum version when running test on Linux.", "If the Linux version is less than the minimum, raise unittest.SkipTest."]}
{"index": 6461, "name": "test.support.requires_mac_version", "module": "test", "doc": ["Decorator for the minimum version when running test on Mac OS X.", "If the MAC OS X version is less than the minimum, raise unittest.SkipTest."]}
{"index": 6462, "name": "test.support.requires_IEEE_754", "module": "test", "doc": ["Decorator for skipping tests on non-IEEE 754 platforms."]}
{"index": 6463, "name": "test.support.requires_zlib", "module": "test", "doc": ["Decorator for skipping tests if zlib doesn\u2019t exist."]}
{"index": 6464, "name": "test.support.requires_gzip", "module": "test", "doc": ["Decorator for skipping tests if gzip doesn\u2019t exist."]}
{"index": 6465, "name": "test.support.requires_bz2", "module": "test", "doc": ["Decorator for skipping tests if bz2 doesn\u2019t exist."]}
{"index": 6466, "name": "test.support.requires_lzma", "module": "test", "doc": ["Decorator for skipping tests if lzma doesn\u2019t exist."]}
{"index": 6467, "name": "test.support.requires_resource", "module": "test", "doc": ["Decorator for skipping tests if resource is not available."]}
{"index": 6468, "name": "test.support.requires_docstrings", "module": "test", "doc": ["Decorator for only running the test if HAVE_DOCSTRINGS."]}
{"index": 6469, "name": "test.support.cpython_only", "module": "test", "doc": ["Decorator for tests only applicable to CPython."]}
{"index": 6470, "name": "test.support.impl_detail", "module": "test", "doc": ["Decorator for invoking check_impl_detail() on guards.", "If that returns False, then uses msg as the reason for skipping the test."]}
{"index": 6471, "name": "test.support.no_tracing", "module": "test", "doc": ["Decorator to temporarily turn off tracing for the duration of the test."]}
{"index": 6472, "name": "test.support.refcount_test", "module": "test", "doc": ["Decorator for tests which involve reference counting.", "The decorator does not run the test if it is not run by CPython.", "Any trace function is unset for the duration of the test to prevent unexpected refcounts caused by the trace function."]}
{"index": 6473, "name": "test.support.reap_threads", "module": "test", "doc": ["Decorator to ensure the threads are cleaned up even if the test fails."]}
{"index": 6474, "name": "test.support.bigmemtest", "module": "test", "doc": ["Decorator for bigmem tests.", "size is a requested size for the test (in arbitrary, test-interpreted units.)", "memuse is the number of bytes per unit for the test, or a good estimate of it.", "For example, a test that needs two byte buffers, of 4 GiB each, could be decorated with @bigmemtest(size=_4G, memuse=2).", "The size argument is normally passed to the decorated test method as an extra argument.", "If dry_run is True, the value passed to the test method may be less than the requested value.", "If dry_run is False, it means the test doesn\u2019t support dummy runs when -M is not specified."]}
{"index": 6475, "name": "test.support.bigaddrspacetest", "module": "test", "doc": ["Decorator for tests that fill the address space.", "f is the function to wrap."]}
{"index": 6476, "name": "test.support.make_bad_fd", "module": "test", "doc": ["Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor."]}
{"index": 6477, "name": "test.support.check_syntax_error", "module": "test", "doc": ["Test for syntax errors in statement by attempting to compile statement.", "testcase is the unittest instance for the test.", "errtext is the text of the error raised by SyntaxError.", "If lineno is not None, compares to the line of the SyntaxError.", "If offset is not None, compares to the offset of the SyntaxError."]}
{"index": 6478, "name": "test.support.open_urlresource", "module": "test", "doc": ["Open url.", "If open fails, raises TestFailed."]}
{"index": 6479, "name": "test.support.import_module", "module": "test", "doc": ["This function imports and returns the named module.", "Unlike a normal import, this function raises unittest.SkipTest if the module cannot be imported.", "Module and package deprecation messages are suppressed during this import if deprecated is True.", "If a module is required on a platform but optional for others, set required_on to an iterable of platform prefixes which will be compared against sys.platform."]}
{"index": 6480, "name": "test.support.import_fresh_module", "module": "test", "doc": ["This function imports and returns a fresh copy of the named Python module by removing the named module from sys.modules before doing the import.", "Note that unlike reload(), the original module is not affected by this operation.", "fresh is an iterable of additional module names that are also removed from the sys.modules cache before doing the import.", "blocked is an iterable of module names that are replaced with None in the module cache during the import to ensure that attempts to import them raise ImportError.", "The named module and any modules named in the fresh and blocked parameters are saved before starting the import and then reinserted into sys.modules when the fresh import is complete.", "Module and package deprecation messages are suppressed during this import if deprecated is True.", "This function will raise ImportError if the named module cannot be imported.", "Example use:"]}
{"index": 6481, "name": "test.support.modules_setup", "module": "test", "doc": ["Return a copy of sys.modules."]}
{"index": 6482, "name": "test.support.modules_cleanup", "module": "test", "doc": ["Remove modules except for oldmodules and encodings in order to preserve internal cache."]}
{"index": 6483, "name": "test.support.threading_setup", "module": "test", "doc": ["Return current thread count and copy of dangling threads."]}
{"index": 6484, "name": "test.support.threading_cleanup", "module": "test", "doc": ["Cleanup up threads not specified in original_values.", "Designed to emit a warning if a test leaves running threads in the background."]}
{"index": 6485, "name": "test.support.join_thread", "module": "test", "doc": ["Join a thread within timeout.", "Raise an AssertionError if thread is still alive after timeout seconds."]}
{"index": 6486, "name": "test.support.reap_children", "module": "test", "doc": ["Use this at the end of test_main whenever sub-processes are started.", "This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks."]}
{"index": 6487, "name": "test.support.get_attribute", "module": "test", "doc": ["Get an attribute, raising unittest.SkipTest if AttributeError is raised."]}
{"index": 6488, "name": "test.support.bind_port", "module": "test", "doc": ["Bind the socket to a free port and return the port number.", "Relies on ephemeral ports in order to ensure we are using an unbound port.", "This is important as many tests may be running simultaneously, especially in a buildbot environment.", "This method raises an exception if the sock.family is AF_INET and sock.type is SOCK_STREAM, and the socket has SO_REUSEADDR or SO_REUSEPORT set on it.", "Tests should never set these socket options for TCP/IP sockets.", "The only case for setting these options is testing multicasting via multiple UDP sockets.", "Additionally, if the SO_EXCLUSIVEADDRUSE socket option is available (i.e.", "on Windows), it will be set on the socket.", "This will prevent anyone else from binding to our host/port for the duration of the test."]}
{"index": 6489, "name": "test.support.bind_unix_socket", "module": "test", "doc": ["Bind a unix socket, raising unittest.SkipTest if PermissionError is raised."]}
{"index": 6490, "name": "test.support.find_unused_port", "module": "test", "doc": ["Returns an unused port that should be suitable for binding.", "This is achieved by creating a temporary socket with the same family and type as the sock parameter (default is AF_INET, SOCK_STREAM), and binding it to the specified host address (defaults to 0.0.0.0) with the port set to 0, eliciting an unused ephemeral port from the OS.", "The temporary socket is then closed and deleted, and the ephemeral port is returned.", "Either this method or bind_port() should be used for any tests where a server socket needs to be bound to a particular port for the duration of the test.", "Which one to use depends on whether the calling code is creating a Python socket, or if an unused port needs to be provided in a constructor or passed to an external program (i.e.", "the -accept argument to openssl\u2019s s_server mode).", "Always prefer bind_port() over find_unused_port() where possible.", "Using a hard coded port is discouraged since it can make multiple instances of the test impossible to run simultaneously, which is a problem for buildbots."]}
{"index": 6491, "name": "test.support.load_package_tests", "module": "test", "doc": ["Generic implementation of the unittest load_tests protocol for use in test packages.", "pkg_dir is the root directory of the package; loader, standard_tests, and pattern are the arguments expected by load_tests.", "In simple cases, the test package\u2019s __init__.py can be the following:"]}
{"index": 6492, "name": "test.support.fs_is_case_insensitive", "module": "test", "doc": ["Return True if the file system for directory is case-insensitive."]}
{"index": 6493, "name": "test.support.detect_api_mismatch", "module": "test", "doc": ["Returns the set of attributes, functions or methods of ref_api not found on other_api, except for a defined list of items to be ignored in this check specified in ignore.", "By default this skips private attributes beginning with \u2018_\u2019 but includes all magic methods, i.e.", "those starting and ending in \u2018__\u2019."]}
{"index": 6494, "name": "test.support.patch", "module": "test", "doc": ["Override object_to_patch.attr_name with new_value.", "Also add cleanup procedure to test_instance to restore object_to_patch for attr_name.", "The attr_name should be a valid attribute for object_to_patch."]}
{"index": 6495, "name": "test.support.run_in_subinterp", "module": "test", "doc": ["Run code in subinterpreter.", "Raise unittest.SkipTest if tracemalloc is enabled."]}
{"index": 6496, "name": "test.support.check_free_after_iterating", "module": "test", "doc": ["Assert that iter is deallocated after iterating."]}
{"index": 6497, "name": "test.support.missing_compiler_executable", "module": "test", "doc": ["Check for the existence of the compiler executables whose names are listed in cmd_names or all the compiler executables when cmd_names is empty and return the first missing executable or None when none is found missing."]}
{"index": 6498, "name": "test.support.check__all__", "module": "test", "doc": ["Assert that the __all__ variable of module contains all public names.", "The module\u2019s public names (its API) are detected automatically based on whether they match the public name convention and were defined in module.", "The name_of_module argument can specify (as a string or tuple thereof) what module(s) an API could be defined in order to be detected as a public API.", "One case for this is when module imports part of its public API from other modules, possibly a C backend (like csv and its _csv).", "The extra argument can be a set of names that wouldn\u2019t otherwise be automatically detected as \u201cpublic\u201d, like objects without a proper __module__ attribute.", "If provided, it will be added to the automatically detected ones.", "The blacklist argument can be a set of names that must not be treated as part of the public API even though their names indicate otherwise.", "Example use:"]}
{"index": 6499, "name": "test.support.TransientResource", "module": "test", "doc": ["Instances are a context manager that raises ResourceDenied if the specified exception type is raised.", "Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the with statement.", "Only if all pairs match properly against attributes on the exception is ResourceDenied raised."]}
{"index": 6500, "name": "test.support.EnvironmentVarGuard", "module": "test", "doc": ["Class used to temporarily set or unset environment variables.", "Instances can be used as a context manager and have a complete dictionary interface for querying/modifying the underlying os.environ.", "After exit from the context manager all changes to environment variables done through this instance will be rolled back."]}
{"index": 6501, "name": "test.support.EnvironmentVarGuard.set", "module": "test", "doc": ["Temporarily set the environment variable envvar to the value of value."]}
{"index": 6502, "name": "test.support.EnvironmentVarGuard.unset", "module": "test", "doc": ["Temporarily unset the environment variable envvar."]}
{"index": 6503, "name": "test.support.SuppressCrashReport", "module": "test", "doc": ["A context manager used to try to prevent crash dialog popups on tests that are expected to crash a subprocess.", "On Windows, it disables Windows Error Reporting dialogs using SetErrorMode.", "On UNIX, resource.setrlimit() is used to set resource.RLIMIT_CORE\u2019s soft limit to 0 to prevent coredump file creation.", "On both platforms, the old value is restored by __exit__()."]}
{"index": 6504, "name": "test.support.CleanImport", "module": "test", "doc": ["A context manager to force import to return a new module reference.", "This is useful for testing module-level behaviors, such as the emission of a DeprecationWarning on import.", "Example usage:"]}
{"index": 6505, "name": "test.support.DirsOnSysPath", "module": "test", "doc": ["A context manager to temporarily add directories to sys.path.", "This makes a copy of sys.path, appends any directories given as positional arguments, then reverts sys.path to the copied settings when the context ends.", "Note that all sys.path modifications in the body of the context manager, including replacement of the object, will be reverted at the end of the block."]}
{"index": 6506, "name": "test.support.SaveSignals", "module": "test", "doc": ["Class to save and restore signal handlers registered by the Python signal handler."]}
{"index": 6507, "name": "test.support.Matcher.matches", "module": "test", "doc": ["Try to match a single dict with the supplied arguments."]}
{"index": 6508, "name": "test.support.Matcher.match_value", "module": "test", "doc": ["Try to match a single stored value (dv) with a supplied value (v)."]}
{"index": 6509, "name": "test.support.WarningsRecorder", "module": "test", "doc": ["Class used to record warnings for unit tests.", "See documentation of check_warnings() above for more details."]}
{"index": 6510, "name": "test.support.BasicTestRunner.run", "module": "test", "doc": ["Run test and return the result."]}
{"index": 6511, "name": "test.support.TestHandler", "module": "test", "doc": ["Class for logging support."]}
{"index": 6512, "name": "test.support.FakePath", "module": "test", "doc": ["Simple path-like object.", "It implements the __fspath__() method which just returns the path argument.", "If path is an exception, it will be raised in __fspath__()."]}
{"index": 6513, "name": "test.support.script_helper.interpreter_requires_environment", "module": "test", "doc": ["Return True if sys.executable interpreter requires environment variables in order to be able to run at all.", "This is designed to be used with @unittest.skipIf() to annotate tests that need to use an assert_python*() function to launch an isolated mode (-I) or no environment mode (-E) sub-interpreter process.", "A normal build & test does not run into this situation but it can happen when trying to run the standard library test suite from an interpreter that doesn\u2019t have an obvious home with Python\u2019s current home finding logic.", "Setting PYTHONHOME is one way to get most of the testsuite to run in that situation.", "PYTHONPATH or PYTHONUSERSITE are other common environment variables that might impact whether or not the interpreter can start."]}
{"index": 6514, "name": "test.support.script_helper.run_python_until_end", "module": "test", "doc": ["Set up the environment based on env_vars for running the interpreter in a subprocess.", "The values can include __isolated, __cleanenv, __cwd, and TERM."]}
{"index": 6515, "name": "test.support.script_helper.assert_python_ok", "module": "test", "doc": ["Assert that running the interpreter with args and optional environment variables env_vars succeeds (rc == 0) and return a (return code, stdout, stderr) tuple.", "If the __cleanenv keyword is set, env_vars is used as a fresh environment.", "Python is started in isolated mode (command line option -I), except if the __isolated keyword is set to False."]}
{"index": 6516, "name": "test.support.script_helper.assert_python_failure", "module": "test", "doc": ["Assert that running the interpreter with args and optional environment variables env_vars fails (rc != 0) and return a (return code, stdout, stderr) tuple.", "See assert_python_ok() for more options."]}
{"index": 6517, "name": "test.support.script_helper.spawn_python", "module": "test", "doc": ["Run a Python subprocess with the given arguments.", "kw is extra keyword args to pass to subprocess.Popen().", "Returns a subprocess.Popen object."]}
{"index": 6518, "name": "test.support.script_helper.kill_python", "module": "test", "doc": ["Run the given subprocess.Popen process until completion and return stdout."]}
{"index": 6519, "name": "test.support.script_helper.make_script", "module": "test", "doc": ["Create script containing source in path script_dir and script_basename.", "If omit_suffix is False, append .py to the name.", "Return the full script path."]}
{"index": 6520, "name": "test.support.script_helper.make_zip_script", "module": "test", "doc": ["Create zip file at zip_dir and zip_basename with extension zip which contains the files in script_name.", "name_in_zip is the archive name.", "Return a tuple containing (full path, full path of archive name)."]}
{"index": 6521, "name": "test.support.script_helper.make_pkg", "module": "test", "doc": ["Create a directory named pkg_dir containing an __init__ file with init_source as its contents."]}
{"index": 6522, "name": "test.support.script_helper.make_zip_pkg", "module": "test", "doc": ["Create a zip package directory with a path of zip_dir and zip_basename containing an empty __init__ file and a file script_basename containing the source.", "If compiled is True, both source files will be compiled and added to the zip package.", "Return a tuple of the full zip path and the archive name for the zip file."]}
{"index": 6523, "name": "textwrap.wrap", "module": "textwrap", "doc": ["Wraps the single paragraph in text (a string) so every line is at most width characters long.", "Returns a list of output lines, without final newlines.", "Optional keyword arguments correspond to the instance attributes of TextWrapper, documented below.", "width defaults to 70.", "See the TextWrapper.wrap() method for additional details on how wrap() behaves."]}
{"index": 6524, "name": "textwrap.fill", "module": "textwrap", "doc": ["Wraps the single paragraph in text, and returns a single string containing the wrapped paragraph.", "fill() is shorthand for", "In particular, fill() accepts exactly the same keyword arguments as wrap()."]}
{"index": 6525, "name": "textwrap.shorten", "module": "textwrap", "doc": ["Collapse and truncate the given text to fit in the given width.", "First the whitespace in text is collapsed (all whitespace is replaced by single spaces).", "If the result fits in the width, it is returned.", "Otherwise, enough words are dropped from the end so that the remaining words plus the placeholder fit within width:", "Optional keyword arguments correspond to the instance attributes of TextWrapper, documented below.", "Note that the whitespace is collapsed before the text is passed to the TextWrapper fill() function, so changing the value of tabsize, expand_tabs, drop_whitespace, and replace_whitespace will have no effect."]}
{"index": 6526, "name": "textwrap.dedent", "module": "textwrap", "doc": ["Remove any common leading whitespace from every line in text.", "This can be used to make triple-quoted strings line up with the left edge of the display, while still presenting them in the source code in indented form.", "Note that tabs and spaces are both treated as whitespace, but they are not equal: the lines \"\u00a0 hello\" and \"\\thello\" are considered to have no common leading whitespace.", "Lines containing only whitespace are ignored in the input and normalized to a single newline character in the output.", "For example:"]}
{"index": 6527, "name": "textwrap.indent", "module": "textwrap", "doc": ["Add prefix to the beginning of selected lines in text.", "Lines are separated by calling text.splitlines(True).", "By default, prefix is added to all lines that do not consist solely of whitespace (including any line endings).", "For example:", "The optional predicate argument can be used to control which lines are indented.", "For example, it is easy to add prefix to even empty and whitespace-only lines:"]}
{"index": 6528, "name": "textwrap.TextWrapper", "module": "textwrap", "doc": ["The TextWrapper constructor accepts a number of optional keyword arguments.", "Each keyword argument corresponds to an instance attribute, so for example", "is the same as", "You can re-use the same TextWrapper object many times, and you can change any of its options through direct assignment to instance attributes between uses.", "The TextWrapper instance attributes (and keyword arguments to the constructor) are as follows:", "TextWrapper also provides some public methods, analogous to the module-level convenience functions:"]}
{"index": 6529, "name": "textwrap.TextWrapper.width", "module": "textwrap", "doc": ["(default: 70) The maximum length of wrapped lines.", "As long as there are no individual words in the input text longer than width, TextWrapper guarantees that no output line will be longer than width characters."]}
{"index": 6530, "name": "textwrap.TextWrapper.expand_tabs", "module": "textwrap", "doc": ["(default: True) If true, then all tab characters in text will be expanded to spaces using the expandtabs() method of text."]}
{"index": 6531, "name": "textwrap.TextWrapper.tabsize", "module": "textwrap", "doc": ["(default: 8) If expand_tabs is true, then all tab characters in text will be expanded to zero or more spaces, depending on the current column and the given tab size."]}
{"index": 6532, "name": "textwrap.TextWrapper.replace_whitespace", "module": "textwrap", "doc": ["(default: True) If true, after tab expansion but before wrapping, the wrap() method will replace each whitespace character with a single space.", "The whitespace characters replaced are as follows: tab, newline, vertical tab, formfeed, and carriage return ('\\t\\n\\v\\f\\r')."]}
{"index": 6533, "name": "textwrap.TextWrapper.drop_whitespace", "module": "textwrap", "doc": ["(default: True) If true, whitespace at the beginning and ending of every line (after wrapping but before indenting) is dropped.", "Whitespace at the beginning of the paragraph, however, is not dropped if non-whitespace follows it.", "If whitespace being dropped takes up an entire line, the whole line is dropped."]}
{"index": 6534, "name": "textwrap.TextWrapper.initial_indent", "module": "textwrap", "doc": ["(default: '') String that will be prepended to the first line of wrapped output.", "Counts towards the length of the first line.", "The empty string is not indented."]}
{"index": 6535, "name": "textwrap.TextWrapper.subsequent_indent", "module": "textwrap", "doc": ["(default: '') String that will be prepended to all lines of wrapped output except the first.", "Counts towards the length of each line except the first."]}
{"index": 6536, "name": "textwrap.TextWrapper.fix_sentence_endings", "module": "textwrap", "doc": ["(default: False) If true, TextWrapper attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces.", "This is generally desired for text in a monospaced font.", "However, the sentence detection algorithm is imperfect: it assumes that a sentence ending consists of a lowercase letter followed by one of '.", "', '!", "', or '?", "', possibly followed by one of '\"' or \"'\", followed by a space.", "One problem with this is algorithm is that it is unable to detect the difference between \u201cDr.\u201d in", "and \u201cSpot.\u201d in", "fix_sentence_endings is false by default.", "Since the sentence detection algorithm relies on string.lowercase for the definition of \u201clowercase letter,\u201d and a convention of using two spaces after a period to separate sentences on the same line, it is specific to English-language texts."]}
{"index": 6537, "name": "textwrap.TextWrapper.break_long_words", "module": "textwrap", "doc": ["(default: True) If true, then words longer than width will be broken in order to ensure that no lines are longer than width.", "If it is false, long words will not be broken, and some lines may be longer than width.", "(Long words will be put on a line by themselves, in order to minimize the amount by which width is exceeded.)"]}
{"index": 6538, "name": "textwrap.TextWrapper.break_on_hyphens", "module": "textwrap", "doc": ["(default: True) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English.", "If false, only whitespaces will be considered as potentially good places for line breaks, but you need to set break_long_words to false if you want truly insecable words.", "Default behaviour in previous versions was to always allow breaking hyphenated words."]}
{"index": 6539, "name": "textwrap.TextWrapper.max_lines", "module": "textwrap", "doc": ["(default: None) If not None, then the output will contain at most max_lines lines, with placeholder appearing at the end of the output."]}
{"index": 6540, "name": "textwrap.TextWrapper.placeholder", "module": "textwrap", "doc": ["(default: ' [...]') String that will appear at the end of the output text if it has been truncated."]}
{"index": 6541, "name": "textwrap.TextWrapper.wrap", "module": "textwrap", "doc": ["Wraps the single paragraph in text (a string) so every line is at most width characters long.", "All wrapping options are taken from instance attributes of the TextWrapper instance.", "Returns a list of output lines, without final newlines.", "If the wrapped output has no content, the returned list is empty."]}
{"index": 6542, "name": "textwrap.TextWrapper.fill", "module": "textwrap", "doc": ["Wraps the single paragraph in text, and returns a single string containing the wrapped paragraph."]}
{"index": 6543, "name": "threading.active_count", "module": "threading", "doc": ["Return the number of Thread objects currently alive.", "The returned count is equal to the length of the list returned by enumerate()."]}
{"index": 6544, "name": "threading.current_thread", "module": "threading", "doc": ["Return the current Thread object, corresponding to the caller\u2019s thread of control.", "If the caller\u2019s thread of control was not created through the threading module, a dummy thread object with limited functionality is returned."]}
{"index": 6545, "name": "threading.get_ident", "module": "threading", "doc": ["Return the \u2018thread identifier\u2019 of the current thread.", "This is a nonzero integer.", "Its value has no direct meaning; it is intended as a magic cookie to be used e.g.", "to index a dictionary of thread-specific data.", "Thread identifiers may be recycled when a thread exits and another thread is created."]}
{"index": 6546, "name": "threading.enumerate", "module": "threading", "doc": ["Return a list of all Thread objects currently alive.", "The list includes daemonic threads, dummy thread objects created by current_thread(), and the main thread.", "It excludes terminated threads and threads that have not yet been started."]}
{"index": 6547, "name": "threading.main_thread", "module": "threading", "doc": ["Return the main Thread object.", "In normal conditions, the main thread is the thread from which the Python interpreter was started."]}
{"index": 6548, "name": "threading.settrace", "module": "threading", "doc": ["Set a trace function for all threads started from the threading module.", "The func will be passed to  sys.settrace() for each thread, before its run() method is called."]}
{"index": 6549, "name": "threading.setprofile", "module": "threading", "doc": ["Set a profile function for all threads started from the threading module.", "The func will be passed to  sys.setprofile() for each thread, before its run() method is called."]}
{"index": 6550, "name": "threading.stack_size", "module": "threading", "doc": ["Return the thread stack size used when creating new threads.", "The optional size argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32 KiB).", "If size is not specified, 0 is used.", "If changing the thread stack size is unsupported, a RuntimeError is raised.", "If the specified stack size is invalid, a ValueError is raised and the stack size is unmodified.", "32 KiB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself.", "Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32 KiB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4 KiB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information).", "Availability: Windows, systems with POSIX threads."]}
{"index": 6551, "name": "threading.TIMEOUT_MAX", "module": "threading", "doc": ["The maximum value allowed for the timeout parameter of blocking functions (Lock.acquire(), RLock.acquire(), Condition.wait(), etc.).", "Specifying a timeout greater than this value will raise an OverflowError."]}
{"index": 6552, "name": "threading.local", "module": "threading", "doc": ["A class that represents thread-local data.", "For more details and extensive examples, see the documentation string of the _threading_local module."]}
{"index": 6553, "name": "threading.Thread", "module": "threading", "doc": ["This constructor should always be called with keyword arguments.", "Arguments are:", "group should be None; reserved for future extension when a ThreadGroup class is implemented.", "target is the callable object to be invoked by the run() method.", "Defaults to None, meaning nothing is called.", "name is the thread name.", "By default, a unique name is constructed of the form \u201cThread-N\u201d where N is a small decimal number.", "args is the argument tuple for the target invocation.", "Defaults to ().", "kwargs is a dictionary of keyword arguments for the target invocation.", "Defaults to {}.", "If not None, daemon explicitly sets whether the thread is daemonic.", "If None (the default), the daemonic property is inherited from the current thread.", "If the subclass overrides the constructor, it must make sure to invoke the base class constructor (Thread.__init__()) before doing anything else to the thread."]}
{"index": 6554, "name": "threading.Thread.start", "module": "threading", "doc": ["Start the thread\u2019s activity.", "It must be called at most once per thread object.", "It arranges for the object\u2019s run() method to be invoked in a separate thread of control.", "This method will raise a RuntimeError if called more than once on the same thread object."]}
{"index": 6555, "name": "threading.Thread.run", "module": "threading", "doc": ["Method representing the thread\u2019s activity.", "You may override this method in a subclass.", "The standard run() method invokes the callable object passed to the object\u2019s constructor as the target argument, if any, with positional and keyword arguments taken from the args and kwargs arguments, respectively."]}
{"index": 6556, "name": "threading.Thread.join", "module": "threading", "doc": ["Wait until the thread terminates.", "This blocks the calling thread until the thread whose join() method is called terminates \u2013 either normally or through an unhandled exception \u2013 or until the optional timeout occurs.", "When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof).", "As join() always returns None, you must call is_alive() after join() to decide whether a timeout happened \u2013 if the thread is still alive, the join() call timed out.", "When the timeout argument is not present or None, the operation will block until the thread terminates.", "A thread can be join()ed many times.", "join() raises a RuntimeError if an attempt is made to join the current thread as that would cause a deadlock.", "It is also an error to join() a thread before it has been started and attempts to do so raise the same exception."]}
{"index": 6557, "name": "threading.Thread.name", "module": "threading", "doc": ["A string used for identification purposes only.", "It has no semantics.", "Multiple threads may be given the same name.", "The initial name is set by the constructor."]}
{"index": 6558, "name": "threading.Thread.getName", "module": "threading", "doc": ["Old getter/setter API for name; use it directly as a property instead."]}
{"index": 6559, "name": "threading.Thread.setName", "module": "threading", "doc": ["Old getter/setter API for name; use it directly as a property instead."]}
{"index": 6560, "name": "threading.Thread.ident", "module": "threading", "doc": ["The \u2018thread identifier\u2019 of this thread or None if the thread has not been started.", "This is a nonzero integer.", "See the get_ident() function.", "Thread identifiers may be recycled when a thread exits and another thread is created.", "The identifier is available even after the thread has exited."]}
{"index": 6561, "name": "threading.Thread.is_alive", "module": "threading", "doc": ["Return whether the thread is alive.", "This method returns True just before the run() method starts until just after the run() method terminates.", "The module function enumerate() returns a list of all alive threads."]}
{"index": 6562, "name": "threading.Thread.daemon", "module": "threading", "doc": ["A boolean value indicating whether this thread is a daemon thread (True) or not (False).", "This must be set before start() is called, otherwise RuntimeError is raised.", "Its initial value is inherited from the creating thread; the main thread is not a daemon thread and therefore all threads created in the main thread default to daemon = False.", "The entire Python program exits when no alive non-daemon threads are left."]}
{"index": 6563, "name": "threading.Thread.isDaemon", "module": "threading", "doc": ["Old getter/setter API for daemon; use it directly as a property instead."]}
{"index": 6564, "name": "threading.Thread.setDaemon", "module": "threading", "doc": ["Old getter/setter API for daemon; use it directly as a property instead."]}
{"index": 6565, "name": "threading.Lock", "module": "threading", "doc": ["The class implementing primitive lock objects.", "Once a thread has acquired a lock, subsequent attempts to acquire it block, until it is released; any thread may release it.", "Note that Lock is actually a factory function which returns an instance of the most efficient version of the concrete Lock class that is supported by the platform."]}
{"index": 6566, "name": "threading.Lock.acquire", "module": "threading", "doc": ["Acquire a lock, blocking or non-blocking.", "When invoked with the blocking argument set to True (the default), block until the lock is unlocked, then set it to locked and return True.", "When invoked with the blocking argument set to False, do not block.", "If a call with blocking set to True would block, return False immediately; otherwise, set the lock to locked and return True.", "When invoked with the floating-point timeout argument set to a positive value, block for at most the number of seconds specified by timeout and as long as the lock cannot be acquired.", "A timeout argument of -1 specifies an unbounded wait.", "It is forbidden to specify a timeout when blocking is false.", "The return value is True if the lock is acquired successfully, False if not (for example if the timeout expired)."]}
{"index": 6567, "name": "threading.Lock.release", "module": "threading", "doc": ["Release a lock.", "This can be called from any thread, not only the thread which has acquired the lock.", "When the lock is locked, reset it to unlocked, and return.", "If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.", "When invoked on an unlocked lock, a RuntimeError is raised.", "There is no return value."]}
{"index": 6568, "name": "threading.RLock", "module": "threading", "doc": ["This class implements reentrant lock objects.", "A reentrant lock must be released by the thread that acquired it.", "Once a thread has acquired a reentrant lock, the same thread may acquire it again without blocking; the thread must release it once for each time it has acquired it.", "Note that RLock is actually a factory function which returns an instance of the most efficient version of the concrete RLock class that is supported by the platform."]}
{"index": 6569, "name": "threading.RLock.acquire", "module": "threading", "doc": ["Acquire a lock, blocking or non-blocking.", "When invoked without arguments: if this thread already owns the lock, increment the recursion level by one, and return immediately.", "Otherwise, if another thread owns the lock, block until the lock is unlocked.", "Once the lock is unlocked (not owned by any thread), then grab ownership, set the recursion level to one, and return.", "If more than one thread is blocked waiting until the lock is unlocked, only one at a time will be able to grab ownership of the lock.", "There is no return value in this case.", "When invoked with the blocking argument set to true, do the same thing as when called without arguments, and return true.", "When invoked with the blocking argument set to false, do not block.", "If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true.", "When invoked with the floating-point timeout argument set to a positive value, block for at most the number of seconds specified by timeout and as long as the lock cannot be acquired.", "Return true if the lock has been acquired, false if the timeout has elapsed."]}
{"index": 6570, "name": "threading.RLock.release", "module": "threading", "doc": ["Release a lock, decrementing the recursion level.", "If after the decrement it is zero, reset the lock to unlocked (not owned by any thread), and if any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.", "If after the decrement the recursion level is still nonzero, the lock remains locked and owned by the calling thread.", "Only call this method when the calling thread owns the lock.", "A RuntimeError is raised if this method is called when the lock is unlocked.", "There is no return value."]}
{"index": 6571, "name": "threading.Condition", "module": "threading", "doc": ["This class implements condition variable objects.", "A condition variable allows one or more threads to wait until they are notified by another thread.", "If the lock argument is given and not None, it must be a Lock or RLock object, and it is used as the underlying lock.", "Otherwise, a new RLock object is created and used as the underlying lock."]}
{"index": 6572, "name": "threading.Condition.acquire", "module": "threading", "doc": ["Acquire the underlying lock.", "This method calls the corresponding method on the underlying lock; the return value is whatever that method returns."]}
{"index": 6573, "name": "threading.Condition.release", "module": "threading", "doc": ["Release the underlying lock.", "This method calls the corresponding method on the underlying lock; there is no return value."]}
{"index": 6574, "name": "threading.Condition.wait", "module": "threading", "doc": ["Wait until notified or until a timeout occurs.", "If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised.", "This method releases the underlying lock, and then blocks until it is awakened by a notify() or notify_all() call for the same condition variable in another thread, or until the optional timeout occurs.", "Once awakened or timed out, it re-acquires the lock and returns.", "When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof).", "When the underlying lock is an RLock, it is not released using its release() method, since this may not actually unlock the lock when it was acquired multiple times recursively.", "Instead, an internal interface of the RLock class is used, which really unlocks it even when it has been recursively acquired several times.", "Another internal interface is then used to restore the recursion level when the lock is reacquired.", "The return value is True unless a given timeout expired, in which case it is False."]}
{"index": 6575, "name": "threading.Condition.wait_for", "module": "threading", "doc": ["Wait until a condition evaluates to true.", "predicate should be a callable which result will be interpreted as a boolean value.", "A timeout may be provided giving the maximum time to wait.", "This utility method may call wait() repeatedly until the predicate is satisfied, or until a timeout occurs.", "The return value is the last return value of the predicate and will evaluate to False if the method timed out.", "Ignoring the timeout feature, calling this method is roughly equivalent to writing:", "Therefore, the same rules apply as with wait(): The lock must be held when called and is re-acquired on return.", "The predicate is evaluated with the lock held."]}
{"index": 6576, "name": "threading.Condition.notify", "module": "threading", "doc": ["By default, wake up one thread waiting on this condition, if any.", "If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised.", "This method wakes up at most n of the threads waiting for the condition variable; it is a no-op if no threads are waiting.", "The current implementation wakes up exactly n threads, if at least n threads are waiting.", "However, it\u2019s not safe to rely on this behavior.", "A future, optimized implementation may occasionally wake up more than n threads.", "Note: an awakened thread does not actually return from its wait() call until it can reacquire the lock.", "Since notify() does not release the lock, its caller should."]}
{"index": 6577, "name": "threading.Condition.notify_all", "module": "threading", "doc": ["Wake up all threads waiting on this condition.", "This method acts like notify(), but wakes up all waiting threads instead of one.", "If the calling thread has not acquired the lock when this method is called, a RuntimeError is raised."]}
{"index": 6578, "name": "threading.Semaphore", "module": "threading", "doc": ["This class implements semaphore objects.", "A semaphore manages an atomic counter representing the number of release() calls minus the number of acquire() calls, plus an initial value.", "The acquire() method blocks if necessary until it can return without making the counter negative.", "If not given, value defaults to 1.", "The optional argument gives the initial value for the internal counter; it defaults to 1.", "If the value given is less than 0, ValueError is raised."]}
{"index": 6579, "name": "threading.Semaphore.acquire", "module": "threading", "doc": ["Acquire a semaphore.", "When invoked without arguments:", "When invoked with blocking set to false, do not block.", "If a call without an argument would block, return false immediately; otherwise, do the same thing as when called without arguments, and return true.", "When invoked with a timeout other than None, it will block for at most timeout seconds.", "If acquire does not complete successfully in that interval, return false.", "Return true otherwise."]}
{"index": 6580, "name": "threading.Semaphore.release", "module": "threading", "doc": ["Release a semaphore, incrementing the internal counter by one.", "When it was zero on entry and another thread is waiting for it to become larger than zero again, wake up that thread."]}
{"index": 6581, "name": "threading.BoundedSemaphore", "module": "threading", "doc": ["Class implementing bounded semaphore objects.", "A bounded semaphore checks to make sure its current value doesn\u2019t exceed its initial value.", "If it does, ValueError is raised.", "In most situations semaphores are used to guard resources with limited capacity.", "If the semaphore is released too many times it\u2019s a sign of a bug.", "If not given, value defaults to 1."]}
{"index": 6582, "name": "threading.Event", "module": "threading", "doc": ["Class implementing event objects.", "An event manages a flag that can be set to true with the set() method and reset to false with the clear() method.", "The wait() method blocks until the flag is true.", "The flag is initially false."]}
{"index": 6583, "name": "threading.Event.is_set", "module": "threading", "doc": ["Return true if and only if the internal flag is true."]}
{"index": 6584, "name": "threading.Event.set", "module": "threading", "doc": ["Set the internal flag to true.", "All threads waiting for it to become true are awakened.", "Threads that call wait() once the flag is true will not block at all."]}
{"index": 6585, "name": "threading.Event.clear", "module": "threading", "doc": ["Reset the internal flag to false.", "Subsequently, threads calling wait() will block until set() is called to set the internal flag to true again."]}
{"index": 6586, "name": "threading.Event.wait", "module": "threading", "doc": ["Block until the internal flag is true.", "If the internal flag is true on entry, return immediately.", "Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs.", "When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof).", "This method returns true if and only if the internal flag has been set to true, either before the wait call or after the wait starts, so it will always return True except if a timeout is given and the operation times out."]}
{"index": 6587, "name": "threading.Timer", "module": "threading", "doc": ["Create a timer that will run function with arguments args and  keyword arguments kwargs, after interval seconds have passed.", "If args is None (the default) then an empty list will be used.", "If kwargs is None (the default) then an empty dict will be used."]}
{"index": 6588, "name": "threading.Timer.cancel", "module": "threading", "doc": ["Stop the timer, and cancel the execution of the timer\u2019s action.", "This will only work if the timer is still in its waiting stage."]}
{"index": 6589, "name": "threading.Barrier", "module": "threading", "doc": ["Create a barrier object for parties number of threads.", "An action, when provided, is a callable to be called by one of the threads when they are released.", "timeout is the default timeout value if none is specified for the wait() method."]}
{"index": 6590, "name": "threading.Barrier.wait", "module": "threading", "doc": ["Pass the barrier.", "When all the threads party to the barrier have called this function, they are all released simultaneously.", "If a timeout is provided, it is used in preference to any that was supplied to the class constructor.", "The return value is an integer in the range 0 to parties \u2013 1, different for each thread.", "This can be used to select a thread to do some special housekeeping, e.g.", ":", "If an action was provided to the constructor, one of the threads will have called it prior to being released.", "Should this call raise an error, the barrier is put into the broken state.", "If the call times out, the barrier is put into the broken state.", "This method may raise a BrokenBarrierError exception if the barrier is broken or reset while a thread is waiting."]}
{"index": 6591, "name": "threading.Barrier.reset", "module": "threading", "doc": ["Return the barrier to the default, empty state.", "Any threads waiting on it will receive the BrokenBarrierError exception.", "Note that using this function may can require some external synchronization if there are other threads whose state is unknown.", "If a barrier is broken it may be better to just leave it and create a new one."]}
{"index": 6592, "name": "threading.Barrier.abort", "module": "threading", "doc": ["Put the barrier into a broken state.", "This causes any active or future calls to wait() to fail with the BrokenBarrierError.", "Use this for example if one of the needs to abort, to avoid deadlocking the application.", "It may be preferable to simply create the barrier with a sensible timeout value to automatically guard against one of the threads going awry."]}
{"index": 6593, "name": "threading.Barrier.parties", "module": "threading", "doc": ["The number of threads required to pass the barrier."]}
{"index": 6594, "name": "threading.Barrier.n_waiting", "module": "threading", "doc": ["The number of threads currently waiting in the barrier."]}
{"index": 6595, "name": "threading.Barrier.broken", "module": "threading", "doc": ["A boolean that is True if the barrier is in the broken state."]}
{"index": 6596, "name": "threading.BrokenBarrierError", "module": "threading", "doc": ["This exception, a subclass of RuntimeError, is raised when the Barrier object is reset or broken."]}
{"index": 6597, "name": "time.asctime", "module": "time", "doc": ["Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a string of the following form: 'Sun Jun 20 23:21:05 1993'.", "If t is not provided, the current time as returned by localtime() is used.", "Locale information is not used by asctime()."]}
{"index": 6598, "name": "time.clock", "module": "time", "doc": ["On Unix, return the current processor time as a floating point number expressed in seconds.", "The precision, and in fact the very definition of the meaning of \u201cprocessor time\u201d, depends on that of the C function of the same name.", "On Windows, this function returns wall-clock seconds elapsed since the first call to this function, as a floating point number, based on the Win32 function QueryPerformanceCounter().", "The resolution is typically better than one microsecond."]}
{"index": 6599, "name": "time.pthread_getcpuclockid", "module": "time", "doc": ["Return the clk_id of the thread-specific CPU-time clock for the specified thread_id.", "Use threading.get_ident() or the ident attribute of threading.Thread objects to get a suitable value for thread_id.", "Availability: Unix (see the man page for pthread_getcpuclockid(3) for further information)."]}
{"index": 6600, "name": "time.clock_getres", "module": "time", "doc": ["Return the resolution (precision) of the specified clock clk_id.", "Refer to Clock ID Constants for a list of accepted values for clk_id.", "Availability: Unix."]}
{"index": 6601, "name": "time.clock_gettime", "module": "time", "doc": ["Return the time of the specified clock clk_id.", "Refer to Clock ID Constants for a list of accepted values for clk_id.", "Availability: Unix."]}
{"index": 6602, "name": "time.clock_gettime_ns", "module": "time", "doc": ["Similar to clock_gettime() but return time as nanoseconds.", "Availability: Unix."]}
{"index": 6603, "name": "time.clock_settime", "module": "time", "doc": ["Set the time of the specified clock clk_id.", "Currently, CLOCK_REALTIME is the only accepted value for clk_id.", "Availability: Unix."]}
{"index": 6604, "name": "time.clock_settime_ns", "module": "time", "doc": ["Similar to clock_settime() but set time with nanoseconds.", "Availability: Unix."]}
{"index": 6605, "name": "time.ctime", "module": "time", "doc": ["Convert a time expressed in seconds since the epoch to a string representing local time.", "If secs is not provided or None, the current time as returned by time() is used.", "ctime(secs) is equivalent to asctime(localtime(secs)).", "Locale information is not used by ctime()."]}
{"index": 6606, "name": "time.get_clock_info", "module": "time", "doc": ["Get information on the specified clock as a namespace object.", "Supported clock names and the corresponding functions to read their value are:", "The result has the following attributes:"]}
{"index": 6607, "name": "time.gmtime", "module": "time", "doc": ["Convert a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero.", "If secs is not provided or None, the current time as returned by time() is used.", "Fractions of a second are ignored.", "See above for a description of the struct_time object.", "See calendar.timegm() for the inverse of this function."]}
{"index": 6608, "name": "time.localtime", "module": "time", "doc": ["Like gmtime() but converts to local time.", "If secs is not provided or None, the current time as returned by time() is used.", "The dst flag is set to 1 when DST applies to the given time."]}
{"index": 6609, "name": "time.mktime", "module": "time", "doc": ["This is the inverse function of localtime().", "Its argument is the struct_time or full 9-tuple (since the dst flag is needed; use -1 as the dst flag if it is unknown) which expresses the time in local time, not UTC.", "It returns a floating point number, for compatibility with time().", "If the input value cannot be represented as a valid time, either OverflowError or ValueError will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries).", "The earliest date for which it can generate a time is platform-dependent."]}
{"index": 6610, "name": "time.monotonic", "module": "time", "doc": ["Return the value (in fractional seconds) of a monotonic clock, i.e.", "a clock that cannot go backwards.", "The clock is not affected by system clock updates.", "The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid."]}
{"index": 6611, "name": "time.monotonic_ns", "module": "time", "doc": ["Similar to monotonic(), but return time as nanoseconds."]}
{"index": 6612, "name": "time.perf_counter", "module": "time", "doc": ["Return the value (in fractional seconds) of a performance counter, i.e.", "a clock with the highest available resolution to measure a short duration.", "It does include time elapsed during sleep and is system-wide.", "The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid."]}
{"index": 6613, "name": "time.perf_counter_ns", "module": "time", "doc": ["Similar to perf_counter(), but return time as nanoseconds."]}
{"index": 6614, "name": "time.process_time", "module": "time", "doc": ["Return the value (in fractional seconds) of the sum of the system and user CPU time of the current process.", "It does not include time elapsed during sleep.", "It is process-wide by definition.", "The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls is valid."]}
{"index": 6615, "name": "time.process_time_ns", "module": "time", "doc": ["Similar to process_time() but return time as nanoseconds."]}
{"index": 6616, "name": "time.sleep", "module": "time", "doc": ["Suspend execution of the calling thread for the given number of seconds.", "The argument may be a floating point number to indicate a more precise sleep time.", "The actual suspension time may be less than that requested because any caught signal will terminate the sleep() following execution of that signal\u2019s catching routine.", "Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system."]}
{"index": 6617, "name": "time.strftime", "module": "time", "doc": ["Convert a tuple or struct_time representing a time as returned by gmtime() or localtime() to a string as specified by the format argument.", "If t is not provided, the current time as returned by localtime() is used.", "format must be a string.", "ValueError is raised if any field in t is outside of the allowed range.", "0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one.", "The following directives can be embedded in the format string.", "They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the strftime() result:", "Notes:", "Here is an example, a format for dates compatible with that specified  in the RFC 2822 Internet email standard.", "1", "Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C.  To see the full set of format codes supported on your platform, consult the strftime(3) documentation.", "On some platforms, an optional field width and precision specification can immediately follow the initial '%' of a directive in the following order; this is also not portable.", "The field width is normally 2 except for %j where it is 3."]}
{"index": 6618, "name": "time.strptime", "module": "time", "doc": ["Parse a string representing a time according to a format.", "The return value is a struct_time as returned by gmtime() or localtime().", "The format parameter uses the same directives as those used by strftime(); it defaults to \"%a %b %d %H:%M:%S %Y\" which matches the formatting returned by ctime().", "If string cannot be parsed according to format, or if it has excess data after parsing, ValueError is raised.", "The default values used to fill in any missing data when more accurate values cannot be inferred are (1900, 1, 1, 0, 0, 0, 0, 1, -1).", "Both string and format must be strings.", "For example:", "Support for the %Z directive is based on the values contained in tzname and whether daylight is true.", "Because of this, it is platform-specific except for recognizing UTC and GMT which are always known (and are considered to be non-daylight savings timezones).", "Only the directives specified in the documentation are supported.", "Because strftime() is implemented per platform it can sometimes offer more directives than those listed.", "But strptime() is independent of any platform and thus does not necessarily support all directives available that are not documented as supported."]}
{"index": 6619, "name": "time.struct_time", "module": "time", "doc": ["The type of the time value sequence returned by gmtime(), localtime(), and strptime().", "It is an object with a named tuple interface: values can be accessed by index and by attribute name.", "The following values are present:", "Note that unlike the C structure, the month value is a range of [1, 12], not [0, 11].", "In calls to mktime(), tm_isdst may be set to 1 when daylight savings time is in effect, and 0 when it is not.", "A value of -1 indicates that this is not known, and will usually result in the correct state being filled in.", "When a tuple with an incorrect length is passed to a function expecting a struct_time, or having elements of the wrong type, a TypeError is raised."]}
{"index": 6620, "name": "time.time", "module": "time", "doc": ["Return the time in seconds since the epoch as a floating point number.", "The specific date of the epoch and the handling of leap seconds is platform dependent.", "On Windows and most Unix systems, the epoch is January 1, 1970, 00:00:00 (UTC) and leap seconds are not counted towards the time in seconds since the epoch.", "This is commonly referred to as Unix time.", "To find out what the epoch is on a given platform, look at gmtime(0).", "Note that even though the time is always returned as a floating point number, not all systems provide time with a better precision than 1 second.", "While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls.", "The number returned by time() may be converted into a more common time format (i.e.", "year, month, day, hour, etc\u2026) in UTC by passing it to gmtime() function or in local time by passing it to the localtime() function.", "In both cases a struct_time object is returned, from which the components of the calendar date may be accessed as attributes."]}
{"index": 6621, "name": "time.thread_time", "module": "time", "doc": ["Return the value (in fractional seconds) of the sum of the system and user CPU time of the current thread.", "It does not include time elapsed during sleep.", "It is thread-specific by definition.", "The reference point of the returned value is undefined, so that only the difference between the results of consecutive calls in the same thread is valid.", "Availability: Windows, Linux, Unix systems supporting CLOCK_THREAD_CPUTIME_ID."]}
{"index": 6622, "name": "time.thread_time_ns", "module": "time", "doc": ["Similar to thread_time() but return time as nanoseconds."]}
{"index": 6623, "name": "time.time_ns", "module": "time", "doc": ["Similar to time() but returns time as an integer number of nanoseconds since the epoch."]}
{"index": 6624, "name": "time.tzset", "module": "time", "doc": ["Reset the time conversion rules used by the library routines.", "The environment variable TZ specifies how this is done.", "It will also set the variables tzname (from the TZ environment variable), timezone (non-DST seconds West of UTC), altzone (DST seconds west of UTC) and daylight (to 0 if this timezone does not have any daylight saving time rules, or to nonzero if there is a time, past, present or future when daylight saving time applies).", "Availability: Unix.", "The standard format of the TZ environment variable is (whitespace added for clarity):", "Where the components are:", "On many Unix systems (including *BSD, Linux, Solaris, and Darwin), it is more convenient to use the system\u2019s zoneinfo (tzfile(5))  database to specify the timezone rules.", "To do this, set the  TZ environment variable to the path of the required timezone  datafile, relative to the root of the systems \u2018zoneinfo\u2019 timezone database, usually located at /usr/share/zoneinfo.", "For example,  'US/Eastern', 'Australia/Melbourne', 'Egypt' or  'Europe/Amsterdam'."]}
{"index": 6625, "name": "time.CLOCK_BOOTTIME", "module": "time", "doc": ["Identical to CLOCK_MONOTONIC, except it also includes any time that the system is suspended.", "This allows applications to get a suspend-aware monotonic  clock  without having to deal with the complications of CLOCK_REALTIME, which may have  discontinuities if the time is changed using settimeofday() or similar.", "Availability: Linux 2.6.39 or later."]}
{"index": 6626, "name": "time.CLOCK_HIGHRES", "module": "time", "doc": ["The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal hardware source, and may give close to nanosecond resolution.", "CLOCK_HIGHRES is the nonadjustable, high-resolution clock.", "Availability: Solaris."]}
{"index": 6627, "name": "time.CLOCK_MONOTONIC", "module": "time", "doc": ["Clock that cannot be set and represents monotonic time since some unspecified starting point.", "Availability: Unix."]}
{"index": 6628, "name": "time.CLOCK_MONOTONIC_RAW", "module": "time", "doc": ["Similar to CLOCK_MONOTONIC, but provides access to a raw hardware-based time that is not subject to NTP adjustments.", "Availability: Linux 2.6.28 and newer, macOS 10.12 and newer."]}
{"index": 6629, "name": "time.CLOCK_PROCESS_CPUTIME_ID", "module": "time", "doc": ["High-resolution per-process timer from the CPU.", "Availability: Unix."]}
{"index": 6630, "name": "time.CLOCK_PROF", "module": "time", "doc": ["High-resolution per-process timer from the CPU.", "Availability: FreeBSD, NetBSD 7 or later, OpenBSD."]}
{"index": 6631, "name": "time.CLOCK_THREAD_CPUTIME_ID", "module": "time", "doc": ["Thread-specific CPU-time clock.", "Availability: Unix."]}
{"index": 6632, "name": "time.CLOCK_UPTIME", "module": "time", "doc": ["Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.", "Availability: FreeBSD, OpenBSD 5.5 or later."]}
{"index": 6633, "name": "time.CLOCK_REALTIME", "module": "time", "doc": ["System-wide real-time clock.", "Setting this clock requires appropriate privileges.", "Availability: Unix."]}
{"index": 6634, "name": "time.altzone", "module": "time", "doc": ["The offset of the local DST timezone, in seconds west of UTC, if one is defined.", "This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK).", "Only use this if daylight is nonzero.", "See note below."]}
{"index": 6635, "name": "time.daylight", "module": "time", "doc": ["Nonzero if a DST timezone is defined.", "See note below."]}
{"index": 6636, "name": "time.timezone", "module": "time", "doc": ["The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK).", "See note below."]}
{"index": 6637, "name": "time.tzname", "module": "time", "doc": ["A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.", "If no DST timezone is defined, the second string should not be used.", "See note below."]}
{"index": 6638, "name": "id2", "module": "time", "doc": ["The use of %Z is now deprecated, but the %z escape that expands to the preferred  hour/minute offset is not supported by all ANSI C libraries.", "Also, a strict reading of the original 1982 RFC 822 standard calls for a two-digit year (%y rather than %Y), but practice moved to 4-digit years long before the year 2000.", "After that, RFC 822 became obsolete and the 4-digit year has been first recommended by RFC 1123 and then mandated by RFC 2822."]}
{"index": 6639, "name": "timeit.timeit", "module": "timeit", "doc": ["Create a Timer instance with the given statement, setup code and timer function and run its timeit() method with number executions.", "The optional globals argument specifies a namespace in which to execute the code."]}
{"index": 6640, "name": "timeit.repeat", "module": "timeit", "doc": ["Create a Timer instance with the given statement, setup code and timer function and run its repeat() method with the given repeat count and number executions.", "The optional globals argument specifies a namespace in which to execute the code."]}
{"index": 6641, "name": "timeit.default_timer", "module": "timeit", "doc": ["The default timer, which is always time.perf_counter()."]}
{"index": 6642, "name": "timeit.Timer", "module": "timeit", "doc": ["Class for timing execution speed of small code snippets.", "The constructor takes a statement to be timed, an additional statement used for setup, and a timer function.", "Both statements default to 'pass'; the timer function is platform-dependent (see the module doc string).", "stmt and setup may also contain multiple statements separated by ; or newlines, as long as they don\u2019t contain multi-line string literals.", "The statement will by default be executed within timeit\u2019s namespace; this behavior can be controlled by passing a namespace to globals.", "To measure the execution time of the first statement, use the timeit() method.", "The repeat() and autorange() methods are convenience methods to call timeit() multiple times.", "The execution time of setup is excluded from the overall timed execution run.", "The stmt and setup parameters can also take objects that are callable without arguments.", "This will embed calls to them in a timer function that will then be executed by timeit().", "Note that the timing overhead is a little larger in this case because of the extra function calls."]}
{"index": 6643, "name": "timeit.Timer.timeit", "module": "timeit", "doc": ["Time number executions of the main statement.", "This executes the setup statement once, and then returns the time it takes to execute the main statement a number of times, measured in seconds as a float.", "The argument is the number of times through the loop, defaulting to one million.", "The main statement, the setup statement and the timer function to be used are passed to the constructor."]}
{"index": 6644, "name": "timeit.Timer.autorange", "module": "timeit", "doc": ["Automatically determine how many times to call timeit().", "This is a convenience function that calls timeit() repeatedly so that the total time >= 0.2 second, returning the eventual (number of loops, time taken for that number of loops).", "It calls timeit() with increasing numbers from the sequence 1, 2, 5, 10, 20, 50, \u2026 until the time taken is at least 0.2 second.", "If callback is given and is not None, it will be called after each trial with two arguments: callback(number, time_taken)."]}
{"index": 6645, "name": "timeit.Timer.repeat", "module": "timeit", "doc": ["Call timeit() a few times.", "This is a convenience function that calls the timeit() repeatedly, returning a list of results.", "The first argument specifies how many times to call timeit().", "The second argument specifies the number argument for timeit()."]}
{"index": 6646, "name": "timeit.Timer.print_exc", "module": "timeit", "doc": ["Helper to print a traceback from the timed code.", "Typical use:", "The advantage over the standard traceback is that source lines in the compiled template will be displayed.", "The optional file argument directs where the traceback is sent; it defaults to sys.stderr."]}
{"index": 6647, "name": "cmdoption-timeit-n", "module": "timeit", "doc": ["how many times to execute \u2018statement\u2019"]}
{"index": 6648, "name": "cmdoption-timeit-r", "module": "timeit", "doc": ["how many times to repeat the timer (default 5)"]}
{"index": 6649, "name": "cmdoption-timeit-s", "module": "timeit", "doc": ["statement to be executed once initially (default pass)"]}
{"index": 6650, "name": "cmdoption-timeit-p", "module": "timeit", "doc": ["measure process time, not wallclock time, using time.process_time() instead of time.perf_counter(), which is the default"]}
{"index": 6651, "name": "cmdoption-timeit-v", "module": "timeit", "doc": ["print raw timing results; repeat for more digits precision"]}
{"index": 6652, "name": "cmdoption-timeit-h", "module": "timeit", "doc": ["print a short usage message and exit"]}
{"index": 6653, "name": "tkinter.Tk", "module": "tkinter", "doc": ["The Tk class is instantiated without arguments.", "This creates a toplevel widget of Tk which usually is the main window of an application.", "Each instance has its own associated Tcl interpreter."]}
{"index": 6654, "name": "tkinter.Tcl", "module": "tkinter", "doc": ["The Tcl() function is a factory function which creates an object much like that created by the Tk class, except that it does not initialize the Tk subsystem.", "This is most often useful when driving the Tcl interpreter in an environment where one doesn\u2019t want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server).", "An object created by the Tcl() object can have a Toplevel window created (and the Tk subsystem initialized) by calling its loadtk() method."]}
{"index": 6655, "name": "tkinter.Widget.tk.createfilehandler", "module": "tkinter", "doc": ["Registers the file handler callback function func.", "The file argument may either be an object with a fileno() method (such as a file or socket object), or an integer file descriptor.", "The mask argument is an ORed combination of any of the three constants below.", "The callback is called as follows:"]}
{"index": 6656, "name": "tkinter.Widget.tk.deletefilehandler", "module": "tkinter", "doc": ["Unregisters a file handler."]}
{"index": 6657, "name": "tkinter.READABLE", "module": "tkinter", "doc": ["Constants used in the mask arguments."]}
{"index": 6658, "name": "tkinter.WRITABLE", "module": "tkinter", "doc": ["Constants used in the mask arguments."]}
{"index": 6659, "name": "tkinter.EXCEPTION", "module": "tkinter", "doc": ["Constants used in the mask arguments."]}
{"index": 6660, "name": "tkinter.scrolledtext.ScrolledText.frame", "module": "tkinter", "doc": ["The frame which surrounds the text and scroll bar widgets."]}
{"index": 6661, "name": "tkinter.scrolledtext.ScrolledText.vbar", "module": "tkinter", "doc": ["The scroll bar widget."]}
{"index": 6662, "name": "tkinter.tix.Tk", "module": "tkinter", "doc": ["Toplevel widget of Tix which represents mostly the main window of an application.", "It has an associated Tcl interpreter.", "Classes in the tkinter.tix module subclasses the classes in the tkinter.", "The former imports the latter, so to use tkinter.tix with Tkinter, all you need to do is to import one module.", "In general, you can just import tkinter.tix, and replace the toplevel call to tkinter.Tk with tix.Tk:"]}
{"index": 6663, "name": "tkinter.tix.Balloon", "module": "tkinter", "doc": ["A Balloon that pops up over a widget to provide help.", "When the user moves the cursor inside a widget to which a Balloon widget has been bound, a small pop-up window with a descriptive message will be shown on the screen."]}
{"index": 6664, "name": "tkinter.tix.ButtonBox", "module": "tkinter", "doc": ["The ButtonBox widget creates a box of buttons, such as is commonly used for Ok Cancel."]}
{"index": 6665, "name": "tkinter.tix.ComboBox", "module": "tkinter", "doc": ["The ComboBox widget is similar to the combo box control in MS Windows.", "The user can select a choice by either typing in the entry subwidget or selecting from the listbox subwidget."]}
{"index": 6666, "name": "tkinter.tix.Control", "module": "tkinter", "doc": ["The Control widget is also known as the SpinBox widget.", "The user can adjust the value by pressing the two arrow buttons or by entering the value directly into the entry.", "The new value will be checked against the user-defined upper and lower limits."]}
{"index": 6667, "name": "tkinter.tix.LabelEntry", "module": "tkinter", "doc": ["The LabelEntry widget packages an entry widget and a label into one mega widget.", "It can be used to simplify the creation of \u201centry-form\u201d type of interface."]}
{"index": 6668, "name": "tkinter.tix.LabelFrame", "module": "tkinter", "doc": ["The LabelFrame widget packages a frame widget and a label into one mega widget.", "To create widgets inside a LabelFrame widget, one creates the new widgets relative to the frame subwidget and manage them inside the frame subwidget."]}
{"index": 6669, "name": "tkinter.tix.Meter", "module": "tkinter", "doc": ["The Meter widget can be used to show the progress of a background job which may take a long time to execute."]}
{"index": 6670, "name": "tkinter.tix.OptionMenu", "module": "tkinter", "doc": ["The OptionMenu creates a menu button of options."]}
{"index": 6671, "name": "tkinter.tix.PopupMenu", "module": "tkinter", "doc": ["The PopupMenu widget can be used as a replacement of the tk_popup command.", "The advantage of the Tix PopupMenu widget is it requires less application code to manipulate."]}
{"index": 6672, "name": "tkinter.tix.Select", "module": "tkinter", "doc": ["The Select widget is a container of button subwidgets.", "It can be used to provide radio-box or check-box style of selection options for the user."]}
{"index": 6673, "name": "tkinter.tix.StdButtonBox", "module": "tkinter", "doc": ["The StdButtonBox widget is a group of standard buttons for Motif-like dialog boxes."]}
{"index": 6674, "name": "tkinter.tix.DirList", "module": "tkinter", "doc": ["The DirList widget displays a list view of a directory, its previous directories and its sub-directories.", "The user can choose one of the directories displayed in the list or change to another directory."]}
{"index": 6675, "name": "tkinter.tix.DirTree", "module": "tkinter", "doc": ["The DirTree widget displays a tree view of a directory, its previous directories and its sub-directories.", "The user can choose one of the directories displayed in the list or change to another directory."]}
{"index": 6676, "name": "tkinter.tix.DirSelectDialog", "module": "tkinter", "doc": ["The DirSelectDialog widget presents the directories in the file system in a dialog window.", "The user can use this dialog window to navigate through the file system to select the desired directory."]}
{"index": 6677, "name": "tkinter.tix.DirSelectBox", "module": "tkinter", "doc": ["The DirSelectBox is similar to the standard Motif(TM) directory-selection box.", "It is generally used for the user to choose a directory.", "DirSelectBox stores the directories mostly recently selected into a ComboBox widget so that they can be quickly selected again."]}
{"index": 6678, "name": "tkinter.tix.ExFileSelectBox", "module": "tkinter", "doc": ["The ExFileSelectBox widget is usually embedded in a tixExFileSelectDialog widget.", "It provides a convenient method for the user to select files.", "The style of the ExFileSelectBox widget is very similar to the standard file dialog on MS Windows 3.1."]}
{"index": 6679, "name": "tkinter.tix.FileSelectBox", "module": "tkinter", "doc": ["The FileSelectBox is similar to the standard Motif(TM) file-selection box.", "It is generally used for the user to choose a file.", "FileSelectBox stores the files mostly recently selected into a ComboBox widget so that they can be quickly selected again."]}
{"index": 6680, "name": "tkinter.tix.FileEntry", "module": "tkinter", "doc": ["The FileEntry widget can be used to input a filename.", "The user can type in the filename manually.", "Alternatively, the user can press the button widget that sits next to the entry, which will bring up a file selection dialog."]}
{"index": 6681, "name": "tkinter.tix.HList", "module": "tkinter", "doc": ["The HList widget can be used to display any data that have a hierarchical structure, for example, file system directory trees.", "The list entries are indented and connected by branch lines according to their places in the hierarchy."]}
{"index": 6682, "name": "tkinter.tix.CheckList", "module": "tkinter", "doc": ["The CheckList widget displays a list of items to be selected by the user.", "CheckList acts similarly to the Tk checkbutton or radiobutton widgets, except it is capable of handling many more items than checkbuttons or radiobuttons."]}
{"index": 6683, "name": "tkinter.tix.Tree", "module": "tkinter", "doc": ["The Tree widget can be used to display hierarchical data in a tree form.", "The user can adjust the view of the tree by opening or closing parts of the tree."]}
{"index": 6684, "name": "tkinter.tix.TList", "module": "tkinter", "doc": ["The TList widget can be used to display data in a tabular format.", "The list entries of a TList widget are similar to the entries in the Tk listbox widget.", "The main differences are (1) the TList widget can display the list entries in a two dimensional format and (2) you can use graphical images as well as multiple colors and fonts for the list entries."]}
{"index": 6685, "name": "tkinter.tix.PanedWindow", "module": "tkinter", "doc": ["The PanedWindow widget allows the user to interactively manipulate the sizes of several panes.", "The panes can be arranged either vertically or horizontally.", "The user changes the sizes of the panes by dragging the resize handle between two panes."]}
{"index": 6686, "name": "tkinter.tix.ListNoteBook", "module": "tkinter", "doc": ["The ListNoteBook widget is very similar to the TixNoteBook widget: it can be used to display many windows in a limited space using a notebook metaphor.", "The notebook is divided into a stack of pages (windows).", "At one time only one of these pages can be shown.", "The user can navigate through these pages by choosing the name of the desired page in the hlist subwidget."]}
{"index": 6687, "name": "tkinter.tix.NoteBook", "module": "tkinter", "doc": ["The NoteBook widget can be used to display many windows in a limited space using a notebook metaphor.", "The notebook is divided into a stack of pages.", "At one time only one of these pages can be shown.", "The user can navigate through these pages by choosing the visual \u201ctabs\u201d at the top of the NoteBook widget."]}
{"index": 6688, "name": "tkinter.tix.InputOnly", "module": "tkinter", "doc": ["The InputOnly widgets are to accept inputs from the user, which can be done with the bind command (Unix only)."]}
{"index": 6689, "name": "tkinter.tix.Form", "module": "tkinter", "doc": ["The Form geometry manager based on attachment rules for all Tk widgets."]}
{"index": 6690, "name": "tkinter.tix.tixCommand", "module": "tkinter", "doc": ["The tix commands provide access to miscellaneous elements of Tix\u2019s internal state and the Tix application context.", "Most of the information manipulated by these methods pertains to the application as a whole, or to a screen or display, rather than to a particular window.", "To view the current settings, the common usage is:"]}
{"index": 6691, "name": "tkinter.tix.tixCommand.tix_configure", "module": "tkinter", "doc": ["Query or modify the configuration options of the Tix application context.", "If no option is specified, returns a dictionary all of the available options.", "If option is specified with no value, then the method returns a list describing the one named option (this list will be identical to the corresponding sublist of the value returned if no option is specified).", "If one or more option-value pairs are specified, then the method modifies the given option(s) to have the given value(s); in this case the method returns an empty string.", "Option may be any of the configuration options."]}
{"index": 6692, "name": "tkinter.tix.tixCommand.tix_cget", "module": "tkinter", "doc": ["Returns the current value of the configuration option given by option.", "Option may be any of the configuration options."]}
{"index": 6693, "name": "tkinter.tix.tixCommand.tix_getbitmap", "module": "tkinter", "doc": ["Locates a bitmap file of the name name.xpm or name in one of the bitmap directories (see the tix_addbitmapdir() method).", "By using tix_getbitmap(), you can avoid hard coding the pathnames of the bitmap files in your application.", "When successful, it returns the complete pathname of the bitmap file, prefixed with the character @.", "The returned value can be used to configure the bitmap option of the Tk and Tix widgets."]}
{"index": 6694, "name": "tkinter.tix.tixCommand.tix_addbitmapdir", "module": "tkinter", "doc": ["Tix maintains a list of directories under which the tix_getimage() and tix_getbitmap() methods will search for image files.", "The standard bitmap directory is $TIX_LIBRARY/bitmaps.", "The tix_addbitmapdir() method adds directory into this list.", "By using this method, the image files of an applications can also be located using the tix_getimage() or tix_getbitmap() method."]}
{"index": 6695, "name": "tkinter.tix.tixCommand.tix_filedialog", "module": "tkinter", "doc": ["Returns the file selection dialog that may be shared among different calls from this application.", "This method will create a file selection dialog widget when it is called the first time.", "This dialog will be returned by all subsequent calls to tix_filedialog().", "An optional dlgclass parameter can be passed as a string to specified what type of file selection dialog widget is desired.", "Possible options are tix, FileSelectDialog or tixExFileSelectDialog."]}
{"index": 6696, "name": "tkinter.tix.tixCommand.tix_getimage", "module": "tkinter", "doc": ["Locates an image file of the name name.xpm, name.xbm or name.ppm in one of the bitmap directories (see the tix_addbitmapdir() method above).", "If more than one file with the same name (but different extensions) exist, then the image type is chosen according to the depth of the X display: xbm images are chosen on monochrome displays and color images are chosen on color displays.", "By using tix_getimage(), you can avoid hard coding the pathnames of the image files in your application.", "When successful, this method returns the name of the newly created image, which can be used to configure the image option of the Tk and Tix widgets."]}
{"index": 6697, "name": "tkinter.tix.tixCommand.tix_option_get", "module": "tkinter", "doc": ["Gets the options maintained by the Tix scheme mechanism."]}
{"index": 6698, "name": "tkinter.tix.tixCommand.tix_resetoptions", "module": "tkinter", "doc": ["Resets the scheme and fontset of the Tix application to newScheme and newFontSet, respectively.", "This affects only those widgets created after this call.", "Therefore, it is best to call the resetoptions method before the creation of any widgets in a Tix application.", "The optional parameter newScmPrio can be given to reset the priority level of the Tk options set by the Tix schemes.", "Because of the way Tk handles the X option database, after Tix has been has imported and inited, it is not possible to reset the color schemes and font sets using the tix_config() method.", "Instead, the tix_resetoptions() method must be used."]}
{"index": 6699, "name": "tkinter.ttk.Widget", "module": "tkinter", "doc": ["statespec will usually be a list or a tuple."]}
{"index": 6700, "name": "tkinter.ttk.Widget.identify", "module": "tkinter", "doc": ["Returns the name of the element at position x y, or the empty string if the point does not lie within any element.", "x and y are pixel coordinates relative to the widget."]}
{"index": 6701, "name": "tkinter.ttk.Widget.instate", "module": "tkinter", "doc": ["Test the widget\u2019s state.", "If a callback is not specified, returns True if the widget state matches statespec and False otherwise.", "If callback is specified then it is called with args if widget state matches statespec."]}
{"index": 6702, "name": "tkinter.ttk.Widget.state", "module": "tkinter", "doc": ["Modify or inquire widget state.", "If statespec is specified, sets the widget state according to it and return a new statespec indicating which flags were changed.", "If statespec is not specified, returns the currently-enabled state flags."]}
{"index": 6703, "name": "tkinter.ttk.Combobox.current", "module": "tkinter", "doc": ["If newindex is specified, sets the combobox value to the element position newindex.", "Otherwise, returns the index of the current value or -1 if the current value is not in the values list."]}
{"index": 6704, "name": "tkinter.ttk.Combobox.get", "module": "tkinter", "doc": ["Returns the current value of the combobox."]}
{"index": 6705, "name": "tkinter.ttk.Combobox.set", "module": "tkinter", "doc": ["Sets the value of the combobox to value."]}
{"index": 6706, "name": "tkinter.ttk.Spinbox.get", "module": "tkinter", "doc": ["Returns the current value of the spinbox."]}
{"index": 6707, "name": "tkinter.ttk.Spinbox.set", "module": "tkinter", "doc": ["Sets the value of the spinbox to value."]}
{"index": 6708, "name": "tkinter.ttk.Notebook.add", "module": "tkinter", "doc": ["Adds a new tab to the notebook.", "If window is currently managed by the notebook but hidden, it is restored to its previous position.", "See Tab Options for the list of available options."]}
{"index": 6709, "name": "tkinter.ttk.Notebook.forget", "module": "tkinter", "doc": ["Removes the tab specified by tab_id, unmaps and unmanages the associated window."]}
{"index": 6710, "name": "tkinter.ttk.Notebook.hide", "module": "tkinter", "doc": ["Hides the tab specified by tab_id.", "The tab will not be displayed, but the associated window remains managed by the notebook and its configuration remembered.", "Hidden tabs may be restored with the add() command."]}
{"index": 6711, "name": "tkinter.ttk.Notebook.identify", "module": "tkinter", "doc": ["Returns the name of the tab element at position x, y, or the empty string if none."]}
{"index": 6712, "name": "tkinter.ttk.Notebook.index", "module": "tkinter", "doc": ["Returns the numeric index of the tab specified by tab_id, or the total number of tabs if tab_id is the string \u201cend\u201d."]}
{"index": 6713, "name": "tkinter.ttk.Notebook.insert", "module": "tkinter", "doc": ["Inserts a pane at the specified position.", "pos is either the string \u201cend\u201d, an integer index, or the name of a managed child.", "If child is already managed by the notebook, moves it to the specified position.", "See Tab Options for the list of available options."]}
{"index": 6714, "name": "tkinter.ttk.Notebook.select", "module": "tkinter", "doc": ["Selects the specified tab_id.", "The associated child window will be displayed, and the previously-selected window (if different) is unmapped.", "If tab_id is omitted, returns the widget name of the currently selected pane."]}
{"index": 6715, "name": "tkinter.ttk.Notebook.tab", "module": "tkinter", "doc": ["Query or modify the options of the specific tab_id.", "If kw is not given, returns a dictionary of the tab option values.", "If option is specified, returns the value of that option.", "Otherwise, sets the options to the corresponding values."]}
{"index": 6716, "name": "tkinter.ttk.Notebook.tabs", "module": "tkinter", "doc": ["Returns a list of windows managed by the notebook."]}
{"index": 6717, "name": "tkinter.ttk.Notebook.enable_traversal", "module": "tkinter", "doc": ["Enable keyboard traversal for a toplevel window containing this notebook.", "This will extend the bindings for the toplevel window containing the notebook as follows:", "Multiple notebooks in a single toplevel may be enabled for traversal, including nested notebooks.", "However, notebook traversal only works properly if all panes have the notebook they are in as master."]}
{"index": 6718, "name": "tkinter.ttk.Progressbar.start", "module": "tkinter", "doc": ["Begin autoincrement mode: schedules a recurring timer event that calls Progressbar.step() every interval milliseconds.", "If omitted, interval defaults to 50 milliseconds."]}
{"index": 6719, "name": "tkinter.ttk.Progressbar.step", "module": "tkinter", "doc": ["Increments the progress bar\u2019s value by amount.", "amount defaults to 1.0 if omitted."]}
{"index": 6720, "name": "tkinter.ttk.Progressbar.stop", "module": "tkinter", "doc": ["Stop autoincrement mode: cancels any recurring timer event initiated by Progressbar.start() for this progress bar."]}
{"index": 6721, "name": "tkinter.ttk.Treeview.bbox", "module": "tkinter", "doc": ["Returns the bounding box (relative to the treeview widget\u2019s window) of the specified item in the form (x, y, width, height).", "If column is specified, returns the bounding box of that cell.", "If the item is not visible (i.e., if it is a descendant of a closed item or is scrolled offscreen), returns an empty string."]}
{"index": 6722, "name": "tkinter.ttk.Treeview.get_children", "module": "tkinter", "doc": ["Returns the list of children belonging to item.", "If item is not specified, returns root children."]}
{"index": 6723, "name": "tkinter.ttk.Treeview.set_children", "module": "tkinter", "doc": ["Replaces item\u2019s child with newchildren.", "Children present in item that are not present in newchildren are detached from the tree.", "No items in newchildren may be an ancestor of item.", "Note that not specifying newchildren results in detaching item\u2019s children."]}
{"index": 6724, "name": "tkinter.ttk.Treeview.column", "module": "tkinter", "doc": ["Query or modify the options for the specified column.", "If kw is not given, returns a dict of the column option values.", "If option is specified then the value for that option is returned.", "Otherwise, sets the options to the corresponding values.", "The valid options/values are:", "To configure the tree column, call this with column = \u201c#0\u201d"]}
{"index": 6725, "name": "tkinter.ttk.Treeview.delete", "module": "tkinter", "doc": ["Delete all specified items and all their descendants.", "The root item may not be deleted."]}
{"index": 6726, "name": "tkinter.ttk.Treeview.detach", "module": "tkinter", "doc": ["Unlinks all of the specified items from the tree.", "The items and all of their descendants are still present, and may be reinserted at another point in the tree, but will not be displayed.", "The root item may not be detached."]}
{"index": 6727, "name": "tkinter.ttk.Treeview.exists", "module": "tkinter", "doc": ["Returns True if the specified item is present in the tree."]}
{"index": 6728, "name": "tkinter.ttk.Treeview.focus", "module": "tkinter", "doc": ["If item is specified, sets the focus item to item.", "Otherwise, returns the current focus item, or \u2018\u2019 if there is none."]}
{"index": 6729, "name": "tkinter.ttk.Treeview.heading", "module": "tkinter", "doc": ["Query or modify the heading options for the specified column.", "If kw is not given, returns a dict of the heading option values.", "If option is specified then the value for that option is returned.", "Otherwise, sets the options to the corresponding values.", "The valid options/values are:", "To configure the tree column heading, call this with column = \u201c#0\u201d."]}
{"index": 6730, "name": "tkinter.ttk.Treeview.identify", "module": "tkinter", "doc": ["Returns a description of the specified component under the point given by x and y, or the empty string if no such component is present at that position."]}
{"index": 6731, "name": "tkinter.ttk.Treeview.identify_row", "module": "tkinter", "doc": ["Returns the item ID of the item at position y."]}
{"index": 6732, "name": "tkinter.ttk.Treeview.identify_column", "module": "tkinter", "doc": ["Returns the data column identifier of the cell at position x.", "The tree column has ID #0."]}
{"index": 6733, "name": "tkinter.ttk.Treeview.identify_region", "module": "tkinter", "doc": ["Returns one of:", "Availability: Tk 8.6."]}
{"index": 6734, "name": "tkinter.ttk.Treeview.identify_element", "module": "tkinter", "doc": ["Returns the element at position x, y.", "Availability: Tk 8.6."]}
{"index": 6735, "name": "tkinter.ttk.Treeview.index", "module": "tkinter", "doc": ["Returns the integer index of item within its parent\u2019s list of children."]}
{"index": 6736, "name": "tkinter.ttk.Treeview.insert", "module": "tkinter", "doc": ["Creates a new item and returns the item identifier of the newly created item.", "parent is the item ID of the parent item, or the empty string to create a new top-level item.", "index is an integer, or the value \u201cend\u201d, specifying where in the list of parent\u2019s children to insert the new item.", "If index is less than or equal to zero, the new node is inserted at the beginning; if index is greater than or equal to the current number of children, it is inserted at the end.", "If iid is specified, it is used as the item identifier; iid must not already exist in the tree.", "Otherwise, a new unique identifier is generated.", "See Item Options for the list of available points."]}
{"index": 6737, "name": "tkinter.ttk.Treeview.item", "module": "tkinter", "doc": ["Query or modify the options for the specified item.", "If no options are given, a dict with options/values for the item is returned.", "If option is specified then the value for that option is returned.", "Otherwise, sets the options to the corresponding values as given by kw."]}
{"index": 6738, "name": "tkinter.ttk.Treeview.move", "module": "tkinter", "doc": ["Moves item to position index in parent\u2019s list of children.", "It is illegal to move an item under one of its descendants.", "If index is less than or equal to zero, item is moved to the beginning; if greater than or equal to the number of children, it is moved to the end.", "If item was detached it is reattached."]}
{"index": 6739, "name": "tkinter.ttk.Treeview.next", "module": "tkinter", "doc": ["Returns the identifier of item\u2019s next sibling, or \u2018\u2019 if item is the last child of its parent."]}
{"index": 6740, "name": "tkinter.ttk.Treeview.parent", "module": "tkinter", "doc": ["Returns the ID of the parent of item, or \u2018\u2019 if item is at the top level of the hierarchy."]}
{"index": 6741, "name": "tkinter.ttk.Treeview.prev", "module": "tkinter", "doc": ["Returns the identifier of item\u2019s previous sibling, or \u2018\u2019 if item is the first child of its parent."]}
{"index": 6742, "name": "tkinter.ttk.Treeview.reattach", "module": "tkinter", "doc": ["An alias for Treeview.move()."]}
{"index": 6743, "name": "tkinter.ttk.Treeview.see", "module": "tkinter", "doc": ["Ensure that item is visible.", "Sets all of item\u2019s ancestors open option to True, and scrolls the widget if necessary so that item is within the visible portion of the tree."]}
{"index": 6744, "name": "tkinter.ttk.Treeview.selection", "module": "tkinter", "doc": ["If selop is not specified, returns selected items.", "Otherwise, it will act according to the following selection methods."]}
{"index": 6745, "name": "tkinter.ttk.Treeview.selection_set", "module": "tkinter", "doc": ["items becomes the new selection."]}
{"index": 6746, "name": "tkinter.ttk.Treeview.selection_add", "module": "tkinter", "doc": ["Add items to the selection."]}
{"index": 6747, "name": "tkinter.ttk.Treeview.selection_remove", "module": "tkinter", "doc": ["Remove items from the selection."]}
{"index": 6748, "name": "tkinter.ttk.Treeview.selection_toggle", "module": "tkinter", "doc": ["Toggle the selection state of each item in items."]}
{"index": 6749, "name": "tkinter.ttk.Treeview.set", "module": "tkinter", "doc": ["With one argument, returns a dictionary of column/value pairs for the specified item.", "With two arguments, returns the current value of the specified column.", "With three arguments, sets the value of given column in given item to the specified value."]}
{"index": 6750, "name": "tkinter.ttk.Treeview.tag_bind", "module": "tkinter", "doc": ["Bind a callback for the given event sequence to the tag tagname.", "When an event is delivered to an item, the callbacks for each of the item\u2019s tags option are called."]}
{"index": 6751, "name": "tkinter.ttk.Treeview.tag_configure", "module": "tkinter", "doc": ["Query or modify the options for the specified tagname.", "If kw is not given, returns a dict of the option settings for tagname.", "If option is specified, returns the value for that option for the specified tagname.", "Otherwise, sets the options to the corresponding values for the given tagname."]}
{"index": 6752, "name": "tkinter.ttk.Treeview.tag_has", "module": "tkinter", "doc": ["If item is specified, returns 1 or 0 depending on whether the specified item has the given tagname.", "Otherwise, returns a list of all items that have the specified tag.", "Availability: Tk 8.6"]}
{"index": 6753, "name": "tkinter.ttk.Treeview.xview", "module": "tkinter", "doc": ["Query or modify horizontal position of the treeview."]}
{"index": 6754, "name": "tkinter.ttk.Treeview.yview", "module": "tkinter", "doc": ["Query or modify vertical position of the treeview."]}
{"index": 6755, "name": "tkinter.ttk.Style", "module": "tkinter", "doc": ["This class is used to manipulate the style database."]}
{"index": 6756, "name": "tkinter.ttk.Style.configure", "module": "tkinter", "doc": ["Query or set the default value of the specified option(s) in style.", "Each key in kw is an option and each value is a string identifying the value for that option.", "For example, to change every default button to be a flat button with some padding and a different background color:"]}
{"index": 6757, "name": "tkinter.ttk.Style.map", "module": "tkinter", "doc": ["Query or sets dynamic values of the specified option(s) in style.", "Each key in kw is an option and each value should be a list or a tuple (usually) containing statespecs grouped in tuples, lists, or some other preference.", "A statespec is a compound of one or more states and then a value.", "An example may make it more understandable:", "Note that the order of the (states, value) sequences for an option does matter, if the order is changed to [('active', 'blue'), ('pressed', 'red')] in the foreground option, for example, the result would be a blue foreground when the widget were in active or pressed states."]}
{"index": 6758, "name": "tkinter.ttk.Style.lookup", "module": "tkinter", "doc": ["Returns the value specified for option in style.", "If state is specified, it is expected to be a sequence of one or more states.", "If the default argument is set, it is used as a fallback value in case no specification for option is found.", "To check what font a Button uses by default:"]}
{"index": 6759, "name": "tkinter.ttk.Style.layout", "module": "tkinter", "doc": ["Define the widget layout for given style.", "If layoutspec is omitted, return the layout specification for given style.", "layoutspec, if specified, is expected to be a list or some other sequence type (excluding strings), where each item should be a tuple and the first item is the layout name and the second item should have the format described in Layouts.", "To understand the format, see the following example (it is not intended to do anything useful):"]}
{"index": 6760, "name": "tkinter.ttk.Style.element_create", "module": "tkinter", "doc": ["Create a new element in the current theme, of the given etype which is expected to be either \u201cimage\u201d, \u201cfrom\u201d or \u201cvsapi\u201d.", "The latter is only available in Tk 8.6a for Windows XP and Vista and is not described here.", "If \u201cimage\u201d is used, args should contain the default image name followed by statespec/value pairs (this is the imagespec), and kw may have the following options:", "If \u201cfrom\u201d is used as the value of etype, element_create() will clone an existing element.", "args is expected to contain a themename, from which the element will be cloned, and optionally an element to clone from.", "If this element to clone from is not specified, an empty element will be used.", "kw is discarded."]}
{"index": 6761, "name": "tkinter.ttk.Style.element_names", "module": "tkinter", "doc": ["Returns the list of elements defined in the current theme."]}
{"index": 6762, "name": "tkinter.ttk.Style.element_options", "module": "tkinter", "doc": ["Returns the list of elementname\u2019s options."]}
{"index": 6763, "name": "tkinter.ttk.Style.theme_create", "module": "tkinter", "doc": ["Create a new theme.", "It is an error if themename already exists.", "If parent is specified, the new theme will inherit styles, elements and layouts from the parent theme.", "If settings are present they are expected to have the same syntax used for theme_settings()."]}
{"index": 6764, "name": "tkinter.ttk.Style.theme_settings", "module": "tkinter", "doc": ["Temporarily sets the current theme to themename, apply specified settings and then restore the previous theme.", "Each key in settings is a style and each value may contain the keys \u2018configure\u2019, \u2018map\u2019, \u2018layout\u2019 and \u2018element create\u2019 and they are expected to have the same format as specified by the methods Style.configure(), Style.map(), Style.layout() and Style.element_create() respectively.", "As an example, let\u2019s change the Combobox for the default theme a bit:"]}
{"index": 6765, "name": "tkinter.ttk.Style.theme_names", "module": "tkinter", "doc": ["Returns a list of all known themes."]}
{"index": 6766, "name": "tkinter.ttk.Style.theme_use", "module": "tkinter", "doc": ["If themename is not given, returns the theme in use.", "Otherwise, sets the current theme to themename, refreshes all widgets and emits a <<ThemeChanged>> event."]}
{"index": 6767, "name": "token.tok_name", "module": "token", "doc": ["Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated."]}
{"index": 6768, "name": "token.ISTERMINAL", "module": "token", "doc": ["Return true for terminal token values."]}
{"index": 6769, "name": "token.ISNONTERMINAL", "module": "token", "doc": ["Return true for non-terminal token values."]}
{"index": 6770, "name": "token.ISEOF", "module": "token", "doc": ["Return true if x is the marker indicating the end of input."]}
{"index": 6771, "name": "token.COMMENT", "module": "token", "doc": ["Token value used to indicate a comment."]}
{"index": 6772, "name": "token.NL", "module": "token", "doc": ["Token value used to indicate a non-terminating newline.", "The NEWLINE token indicates the end of a logical line of Python code; NL tokens are generated when a logical line of code is continued over multiple physical lines."]}
{"index": 6773, "name": "token.ENCODING", "module": "token", "doc": ["Token value that indicates the encoding used to decode the source bytes into text.", "The first token returned by tokenize.tokenize() will always be an ENCODING token."]}
{"index": 6774, "name": "tokenize.tokenize", "module": "tokenize", "doc": ["The tokenize() generator requires one argument, readline, which must be a callable object which provides the same interface as the io.IOBase.readline() method of file objects.", "Each call to the function should return one line of input as bytes.", "The generator produces 5-tuples with these members: the token type; the token string; a 2-tuple (srow, scol) of ints specifying the row and column where the token begins in the source; a 2-tuple (erow, ecol) of ints specifying the row and column where the token ends in the source; and the line on which the token was found.", "The line passed (the last tuple item) is the logical line; continuation lines are included.", "The 5 tuple is returned as a named tuple with the field names: type string start end line.", "The returned named tuple has an additional property named exact_type that contains the exact operator type for OP tokens.", "For all other token types exact_type equals the named tuple type field.", "tokenize() determines the source encoding of the file by looking for a UTF-8 BOM or encoding cookie, according to PEP 263."]}
{"index": 6775, "name": "tokenize.untokenize", "module": "tokenize", "doc": ["Converts tokens back into Python source code.", "The iterable must return sequences with at least two elements, the token type and the token string.", "Any additional sequence elements are ignored.", "The reconstructed script is returned as a single string.", "The result is guaranteed to tokenize back to match the input so that the conversion is lossless and round-trips are assured.", "The guarantee applies only to the token type and token string as the spacing between tokens (column positions) may change.", "It returns bytes, encoded using the ENCODING token, which is the first token sequence output by tokenize()."]}
{"index": 6776, "name": "tokenize.detect_encoding", "module": "tokenize", "doc": ["The detect_encoding() function is used to detect the encoding that should be used to decode a Python source file.", "It requires one argument, readline, in the same way as the tokenize() generator.", "It will call readline a maximum of twice, and return the encoding used (as a string) and a list of any lines (not decoded from bytes) it has read in.", "It detects the encoding from the presence of a UTF-8 BOM or an encoding cookie as specified in PEP 263.", "If both a BOM and a cookie are present, but disagree, a SyntaxError will be raised.", "Note that if the BOM is found, 'utf-8-sig' will be returned as an encoding.", "If no encoding is specified, then the default of 'utf-8' will be returned.", "Use open() to open Python source files: it uses detect_encoding() to detect the file encoding."]}
{"index": 6777, "name": "tokenize.open", "module": "tokenize", "doc": ["Open a file in read only mode using the encoding detected by detect_encoding()."]}
{"index": 6778, "name": "tokenize.TokenError", "module": "tokenize", "doc": ["Raised when either a docstring or expression that may be split over several lines is not completed anywhere in the file, for example:", "or:"]}
{"index": 6779, "name": "cmdoption-tokenize-h", "module": "tokenize", "doc": ["show this help message and exit"]}
{"index": 6780, "name": "cmdoption-tokenize-e", "module": "tokenize", "doc": ["display token names using the exact type"]}
{"index": 6781, "name": "cmdoption-trace-help", "module": "trace", "doc": ["Display usage and exit."]}
{"index": 6782, "name": "cmdoption-trace-version", "module": "trace", "doc": ["Display the version of the module and exit."]}
{"index": 6783, "name": "cmdoption-trace-c", "module": "trace", "doc": ["Produce a set of annotated listing files upon program completion that shows how many times each statement was executed.", "See also --coverdir, --file and --no-report below."]}
{"index": 6784, "name": "cmdoption-trace-t", "module": "trace", "doc": ["Display lines as they are executed."]}
{"index": 6785, "name": "cmdoption-trace-l", "module": "trace", "doc": ["Display the functions executed by running the program."]}
{"index": 6786, "name": "cmdoption-trace-r", "module": "trace", "doc": ["Produce an annotated list from an earlier program run that used the --count and --file option.", "This does not execute any code."]}
{"index": 6787, "name": "cmdoption-trace-T", "module": "trace", "doc": ["Display the calling relationships exposed by running the program."]}
{"index": 6788, "name": "cmdoption-trace-f", "module": "trace", "doc": ["Name of a file to accumulate counts over several tracing runs.", "Should be used with the --count option."]}
{"index": 6789, "name": "cmdoption-trace-C", "module": "trace", "doc": ["Directory where the report files go.", "The coverage report for package.module is written to file dir/package/module.cover."]}
{"index": 6790, "name": "cmdoption-trace-m", "module": "trace", "doc": ["When generating annotated listings, mark lines which were not executed with >>>>>>."]}
{"index": 6791, "name": "cmdoption-trace-s", "module": "trace", "doc": ["When using --count or --report, write a brief summary to stdout for each file processed."]}
{"index": 6792, "name": "cmdoption-trace-R", "module": "trace", "doc": ["Do not generate annotated listings.", "This is useful if you intend to make several runs with --count, and then produce a single set of annotated listings at the end."]}
{"index": 6793, "name": "cmdoption-trace-g", "module": "trace", "doc": ["Prefix each line with the time since the program started.", "Only used while tracing."]}
{"index": 6794, "name": "cmdoption-trace-ignore-module", "module": "trace", "doc": ["Ignore each of the given module names and its submodules (if it is a package).", "The argument can be a list of names separated by a comma."]}
{"index": 6795, "name": "cmdoption-trace-ignore-dir", "module": "trace", "doc": ["Ignore all modules and packages in the named directory and subdirectories.", "The argument can be a list of directories separated by os.pathsep."]}
{"index": 6796, "name": "trace.Trace", "module": "trace", "doc": ["Create an object to trace execution of a single statement or expression.", "All parameters are optional.", "count enables counting of line numbers.", "trace enables line execution tracing.", "countfuncs enables listing of the functions called during the run.", "countcallers enables call relationship tracking.", "ignoremods is a list of modules or packages to ignore.", "ignoredirs is a list of directories whose modules or packages should be ignored.", "infile is the name of the file from which to read stored count information.", "outfile is the name of the file in which to write updated count information.", "timing enables a timestamp relative to when tracing was started to be displayed."]}
{"index": 6797, "name": "trace.Trace.run", "module": "trace", "doc": ["Execute the command and gather statistics from the execution with the current tracing parameters.", "cmd must be a string or code object, suitable for passing into exec()."]}
{"index": 6798, "name": "trace.Trace.runctx", "module": "trace", "doc": ["Execute the command and gather statistics from the execution with the current tracing parameters, in the defined global and local environments.", "If not defined, globals and locals default to empty dictionaries."]}
{"index": 6799, "name": "trace.Trace.runfunc", "module": "trace", "doc": ["Call func with the given arguments under control of the Trace object with the current tracing parameters."]}
{"index": 6800, "name": "trace.Trace.results", "module": "trace", "doc": ["Return a CoverageResults object that contains the cumulative results of all previous calls to run, runctx and runfunc for the given Trace instance.", "Does not reset the accumulated trace results."]}
{"index": 6801, "name": "trace.CoverageResults", "module": "trace", "doc": ["A container for coverage results, created by Trace.results().", "Should not be created directly by the user."]}
{"index": 6802, "name": "trace.CoverageResults.update", "module": "trace", "doc": ["Merge in data from another CoverageResults object."]}
{"index": 6803, "name": "trace.CoverageResults.write_results", "module": "trace", "doc": ["Write coverage results.", "Set show_missing to show lines that had no hits.", "Set summary to include in the output the coverage summary per module.", "coverdir specifies the directory into which the coverage result files will be output.", "If None, the results for each source file are placed in its directory."]}
{"index": 6804, "name": "traceback.print_tb", "module": "traceback", "doc": ["Print up to limit stack trace entries from traceback object tb (starting from the caller\u2019s frame) if limit is positive.", "Otherwise, print the last abs(limit) entries.", "If limit is omitted or None, all entries are printed.", "If file is omitted or None, the output goes to sys.stderr; otherwise it should be an open file or file-like object to receive the output."]}
{"index": 6805, "name": "traceback.print_exception", "module": "traceback", "doc": ["Print exception information and stack trace entries from traceback object tb to file.", "This differs from print_tb() in the following ways:", "The optional limit argument has the same meaning as for print_tb().", "If chain is true (the default), then chained exceptions (the __cause__ or __context__ attributes of the exception) will be printed as well, like the interpreter itself does when printing an unhandled exception."]}
{"index": 6806, "name": "traceback.print_exc", "module": "traceback", "doc": ["This is a shorthand for print_exception(*sys.exc_info(), limit, file, chain)."]}
{"index": 6807, "name": "traceback.print_last", "module": "traceback", "doc": ["This is a shorthand for print_exception(sys.last_type, sys.last_value, sys.last_traceback, limit, file, chain).", "In general it will work only after an exception has reached an interactive prompt (see sys.last_type)."]}
{"index": 6808, "name": "traceback.print_stack", "module": "traceback", "doc": ["Print up to limit stack trace entries (starting from the invocation point) if limit is positive.", "Otherwise, print the last abs(limit) entries.", "If limit is omitted or None, all entries are printed.", "The optional f argument can be used to specify an alternate stack frame to start.", "The optional file argument has the same meaning as for print_tb()."]}
{"index": 6809, "name": "traceback.extract_tb", "module": "traceback", "doc": ["Return a StackSummary object representing a list of \u201cpre-processed\u201d stack trace entries extracted from the traceback object tb.", "It is useful for alternate formatting of stack traces.", "The optional limit argument has the same meaning as for print_tb().", "A \u201cpre-processed\u201d stack trace entry is a FrameSummary object containing attributes filename, lineno, name, and line representing the information that is usually printed for a stack trace.", "The line is a string with leading and trailing whitespace stripped; if the source is not available it is None."]}
{"index": 6810, "name": "traceback.extract_stack", "module": "traceback", "doc": ["Extract the raw traceback from the current stack frame.", "The return value has the same format as for extract_tb().", "The optional f and limit arguments have the same meaning as for print_stack()."]}
{"index": 6811, "name": "traceback.format_list", "module": "traceback", "doc": ["Given a list of tuples or FrameSummary objects as returned by extract_tb() or extract_stack(), return a list of strings ready for printing.", "Each string in the resulting list corresponds to the item with the same index in the argument list.", "Each string ends in a newline; the strings may contain internal newlines as well, for those items whose source text line is not None."]}
{"index": 6812, "name": "traceback.format_exception_only", "module": "traceback", "doc": ["Format the exception part of a traceback.", "The arguments are the exception type and value such as given by sys.last_type and sys.last_value.", "The return value is a list of strings, each ending in a newline.", "Normally, the list contains a single string; however, for SyntaxError exceptions, it contains several lines that (when printed) display detailed information about where the syntax error occurred.", "The message indicating which exception occurred is the always last string in the list."]}
{"index": 6813, "name": "traceback.format_exception", "module": "traceback", "doc": ["Format a stack trace and the exception information.", "The arguments  have the same meaning as the corresponding arguments to print_exception().", "The return value is a list of strings, each ending in a newline and some containing internal newlines.", "When these lines are concatenated and printed, exactly the same text is printed as does print_exception()."]}
{"index": 6814, "name": "traceback.format_exc", "module": "traceback", "doc": ["This is like print_exc(limit) but returns a string instead of printing to a file."]}
{"index": 6815, "name": "traceback.format_tb", "module": "traceback", "doc": ["A shorthand for format_list(extract_tb(tb, limit))."]}
{"index": 6816, "name": "traceback.format_stack", "module": "traceback", "doc": ["A shorthand for format_list(extract_stack(f, limit))."]}
{"index": 6817, "name": "traceback.clear_frames", "module": "traceback", "doc": ["Clears the local variables of all the stack frames in a traceback tb by calling the clear() method of each frame object."]}
{"index": 6818, "name": "traceback.walk_stack", "module": "traceback", "doc": ["Walk a stack following f.f_back from the given frame, yielding the frame and line number for each frame.", "If f is None, the current stack is used.", "This helper is used with StackSummary.extract()."]}
{"index": 6819, "name": "traceback.walk_tb", "module": "traceback", "doc": ["Walk a traceback following tb_next yielding the frame and line number for each frame.", "This helper is used with StackSummary.extract()."]}
{"index": 6820, "name": "traceback.TracebackException", "module": "traceback", "doc": ["Capture an exception for later rendering.", "limit, lookup_lines and capture_locals are as for the StackSummary class.", "Note that when locals are captured, they are also shown in the traceback."]}
{"index": 6821, "name": "traceback.TracebackException.__cause__", "module": "traceback", "doc": ["A TracebackException of the original __cause__."]}
{"index": 6822, "name": "traceback.TracebackException.__context__", "module": "traceback", "doc": ["A TracebackException of the original __context__."]}
{"index": 6823, "name": "traceback.TracebackException.__suppress_context__", "module": "traceback", "doc": ["The __suppress_context__ value from the original exception."]}
{"index": 6824, "name": "traceback.TracebackException.stack", "module": "traceback", "doc": ["A StackSummary representing the traceback."]}
{"index": 6825, "name": "traceback.TracebackException.exc_type", "module": "traceback", "doc": ["The class of the original traceback."]}
{"index": 6826, "name": "traceback.TracebackException.filename", "module": "traceback", "doc": ["For syntax errors - the file name where the error occurred."]}
{"index": 6827, "name": "traceback.TracebackException.lineno", "module": "traceback", "doc": ["For syntax errors - the line number where the error occurred."]}
{"index": 6828, "name": "traceback.TracebackException.text", "module": "traceback", "doc": ["For syntax errors - the text where the error occurred."]}
{"index": 6829, "name": "traceback.TracebackException.offset", "module": "traceback", "doc": ["For syntax errors - the offset into the text where the error occurred."]}
{"index": 6830, "name": "traceback.TracebackException.msg", "module": "traceback", "doc": ["For syntax errors - the compiler error message."]}
{"index": 6831, "name": "traceback.TracebackException.from_exception", "module": "traceback", "doc": ["Capture an exception for later rendering.", "limit, lookup_lines and capture_locals are as for the StackSummary class.", "Note that when locals are captured, they are also shown in the traceback."]}
{"index": 6832, "name": "traceback.TracebackException.format", "module": "traceback", "doc": ["Format the exception.", "If chain is not True, __cause__ and __context__ will not be formatted.", "The return value is a generator of strings, each ending in a newline and some containing internal newlines.", "print_exception() is a wrapper around this method which just prints the lines to a file.", "The message indicating which exception occurred is always the last string in the output."]}
{"index": 6833, "name": "traceback.TracebackException.format_exception_only", "module": "traceback", "doc": ["Format the exception part of the traceback.", "The return value is a generator of strings, each ending in a newline.", "Normally, the generator emits a single string; however, for SyntaxError exceptions, it emits several lines that (when printed) display detailed information about where the syntax error occurred.", "The message indicating which exception occurred is always the last string in the output."]}
{"index": 6834, "name": "traceback.StackSummary.extract", "module": "traceback", "doc": ["Construct a StackSummary object from a frame generator (such as is returned by walk_stack() or walk_tb()).", "If limit is supplied, only this many frames are taken from frame_gen.", "If lookup_lines is False, the returned FrameSummary objects will not have read their lines in yet, making the cost of creating the StackSummary cheaper (which may be valuable if it may not actually get formatted).", "If capture_locals is True the local variables in each FrameSummary are captured as object representations."]}
{"index": 6835, "name": "traceback.StackSummary.from_list", "module": "traceback", "doc": ["Construct a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples.", "Each tuple should be a 4-tuple with filename, lineno, name, line as the elements."]}
{"index": 6836, "name": "traceback.StackSummary.format", "module": "traceback", "doc": ["Returns a list of strings ready for printing.", "Each string in the resulting list corresponds to a single frame from the stack.", "Each string ends in a newline; the strings may contain internal newlines as well, for those items with source text lines.", "For long sequences of the same frame and line, the first few repetitions are shown, followed by a summary line stating the exact number of further repetitions."]}
{"index": 6837, "name": "traceback.FrameSummary", "module": "traceback", "doc": ["Represent a single frame in the traceback or stack that is being formatted or printed.", "It may optionally have a stringified version of the frames locals included in it.", "If lookup_line is False, the source code is not looked up until the FrameSummary has the line attribute accessed (which also happens when casting it to a tuple).", "line may be directly provided, and will prevent line lookups happening at all.", "locals is an optional local variable dictionary, and if supplied the variable representations are stored in the summary for later display."]}
{"index": 6838, "name": "tracemalloc.clear_traces", "module": "tracemalloc", "doc": ["Clear traces of memory blocks allocated by Python.", "See also stop()."]}
{"index": 6839, "name": "tracemalloc.get_object_traceback", "module": "tracemalloc", "doc": ["Get the traceback where the Python object obj was allocated.", "Return a Traceback instance, or None if the tracemalloc module is not tracing memory allocations or did not trace the allocation of the object.", "See also gc.get_referrers() and sys.getsizeof() functions."]}
{"index": 6840, "name": "tracemalloc.get_traceback_limit", "module": "tracemalloc", "doc": ["Get the maximum number of frames stored in the traceback of a trace.", "The tracemalloc module must be tracing memory allocations to get the limit, otherwise an exception is raised.", "The limit is set by the start() function."]}
{"index": 6841, "name": "tracemalloc.get_traced_memory", "module": "tracemalloc", "doc": ["Get the current size and peak size of memory blocks traced by the tracemalloc module as a tuple: (current: int, peak: int)."]}
{"index": 6842, "name": "tracemalloc.get_tracemalloc_memory", "module": "tracemalloc", "doc": ["Get the memory usage in bytes of the tracemalloc module used to store traces of memory blocks.", "Return an int."]}
{"index": 6843, "name": "tracemalloc.is_tracing", "module": "tracemalloc", "doc": ["True if the tracemalloc module is tracing Python memory allocations, False otherwise.", "See also start() and stop() functions."]}
{"index": 6844, "name": "tracemalloc.start", "module": "tracemalloc", "doc": ["Start tracing Python memory allocations: install hooks on Python memory allocators.", "Collected tracebacks of traces will be limited to nframe frames.", "By default, a trace of a memory block only stores the most recent frame: the limit is 1. nframe must be greater or equal to 1.", "Storing more than 1 frame is only useful to compute statistics grouped by 'traceback' or to compute cumulative statistics: see the Snapshot.compare_to() and Snapshot.statistics() methods.", "Storing more frames increases the memory and CPU overhead of the tracemalloc module.", "Use the get_tracemalloc_memory() function to measure how much memory is used by the tracemalloc module.", "The PYTHONTRACEMALLOC environment variable (PYTHONTRACEMALLOC=NFRAME) and the -X tracemalloc=NFRAME command line option can be used to start tracing at startup.", "See also stop(), is_tracing() and get_traceback_limit() functions."]}
{"index": 6845, "name": "tracemalloc.stop", "module": "tracemalloc", "doc": ["Stop tracing Python memory allocations: uninstall hooks on Python memory allocators.", "Also clears all previously collected traces of memory blocks allocated by Python.", "Call take_snapshot() function to take a snapshot of traces before clearing them.", "See also start(), is_tracing() and clear_traces() functions."]}
{"index": 6846, "name": "tracemalloc.take_snapshot", "module": "tracemalloc", "doc": ["Take a snapshot of traces of memory blocks allocated by Python.", "Return a new Snapshot instance.", "The snapshot does not include memory blocks allocated before the tracemalloc module started to trace memory allocations.", "Tracebacks of traces are limited to get_traceback_limit() frames.", "Use the nframe parameter of the start() function to store more frames.", "The tracemalloc module must be tracing memory allocations to take a snapshot, see the start() function.", "See also the get_object_traceback() function."]}
{"index": 6847, "name": "tracemalloc.DomainFilter", "module": "tracemalloc", "doc": ["Filter traces of memory blocks by their address space (domain)."]}
{"index": 6848, "name": "tracemalloc.DomainFilter.inclusive", "module": "tracemalloc", "doc": ["If inclusive is True (include), match memory blocks allocated in the address space domain.", "If inclusive is False (exclude), match memory blocks not allocated in the address space domain."]}
{"index": 6849, "name": "tracemalloc.DomainFilter.domain", "module": "tracemalloc", "doc": ["Address space of a memory block (int).", "Read-only property."]}
{"index": 6850, "name": "tracemalloc.Filter", "module": "tracemalloc", "doc": ["Filter on traces of memory blocks.", "See the fnmatch.fnmatch() function for the syntax of filename_pattern.", "The '.pyc' file extension is replaced with '.py'.", "Examples:"]}
{"index": 6851, "name": "tracemalloc.Filter.domain", "module": "tracemalloc", "doc": ["Address space of a memory block (int or None).", "tracemalloc uses the domain 0 to trace memory allocations made by Python.", "C extensions can use other domains to trace other resources."]}
{"index": 6852, "name": "tracemalloc.Filter.inclusive", "module": "tracemalloc", "doc": ["If inclusive is True (include), only match memory blocks allocated in a file with a name matching filename_pattern at line number lineno.", "If inclusive is False (exclude), ignore memory blocks allocated in a file with a name matching filename_pattern at line number lineno."]}
{"index": 6853, "name": "tracemalloc.Filter.lineno", "module": "tracemalloc", "doc": ["Line number (int) of the filter.", "If lineno is None, the filter matches any line number."]}
{"index": 6854, "name": "tracemalloc.Filter.filename_pattern", "module": "tracemalloc", "doc": ["Filename pattern of the filter (str).", "Read-only property."]}
{"index": 6855, "name": "tracemalloc.Filter.all_frames", "module": "tracemalloc", "doc": ["If all_frames is True, all frames of the traceback are checked.", "If all_frames is False, only the most recent frame is checked.", "This attribute has no effect if the traceback limit is 1.", "See the get_traceback_limit() function and Snapshot.traceback_limit attribute."]}
{"index": 6856, "name": "tracemalloc.Frame", "module": "tracemalloc", "doc": ["Frame of a traceback.", "The Traceback class is a sequence of Frame instances."]}
{"index": 6857, "name": "tracemalloc.Frame.filename", "module": "tracemalloc", "doc": ["Filename (str)."]}
{"index": 6858, "name": "tracemalloc.Frame.lineno", "module": "tracemalloc", "doc": ["Line number (int)."]}
{"index": 6859, "name": "tracemalloc.Snapshot", "module": "tracemalloc", "doc": ["Snapshot of traces of memory blocks allocated by Python.", "The take_snapshot() function creates a snapshot instance."]}
{"index": 6860, "name": "tracemalloc.Snapshot.compare_to", "module": "tracemalloc", "doc": ["Compute the differences with an old snapshot.", "Get statistics as a sorted list of StatisticDiff instances grouped by key_type.", "See the Snapshot.statistics() method for key_type and cumulative parameters.", "The result is sorted from the biggest to the smallest by: absolute value of StatisticDiff.size_diff, StatisticDiff.size, absolute value of StatisticDiff.count_diff, Statistic.count and then by StatisticDiff.traceback."]}
{"index": 6861, "name": "tracemalloc.Snapshot.dump", "module": "tracemalloc", "doc": ["Write the snapshot into a file.", "Use load() to reload the snapshot."]}
{"index": 6862, "name": "tracemalloc.Snapshot.filter_traces", "module": "tracemalloc", "doc": ["Create a new Snapshot instance with a filtered traces sequence, filters is a list of DomainFilter and Filter instances.", "If filters is an empty list, return a new Snapshot instance with a copy of the traces.", "All inclusive filters are applied at once, a trace is ignored if no inclusive filters match it.", "A trace is ignored if at least one exclusive filter matches it."]}
{"index": 6863, "name": "tracemalloc.Snapshot.load", "module": "tracemalloc", "doc": ["Load a snapshot from a file.", "See also dump()."]}
{"index": 6864, "name": "tracemalloc.Snapshot.statistics", "module": "tracemalloc", "doc": ["Get statistics as a sorted list of Statistic instances grouped by key_type:", "If cumulative is True, cumulate size and count of memory blocks of all frames of the traceback of a trace, not only the most recent frame.", "The cumulative mode can only be used with key_type equals to 'filename' and 'lineno'.", "The result is sorted from the biggest to the smallest by: Statistic.size, Statistic.count and then by Statistic.traceback."]}
{"index": 6865, "name": "tracemalloc.Snapshot.traceback_limit", "module": "tracemalloc", "doc": ["Maximum number of frames stored in the traceback of traces: result of the get_traceback_limit() when the snapshot was taken."]}
{"index": 6866, "name": "tracemalloc.Snapshot.traces", "module": "tracemalloc", "doc": ["Traces of all memory blocks allocated by Python: sequence of Trace instances.", "The sequence has an undefined order.", "Use the Snapshot.statistics() method to get a sorted list of statistics."]}
{"index": 6867, "name": "tracemalloc.Statistic", "module": "tracemalloc", "doc": ["Statistic on memory allocations.", "Snapshot.statistics() returns a list of Statistic instances.", "See also the StatisticDiff class."]}
{"index": 6868, "name": "tracemalloc.Statistic.count", "module": "tracemalloc", "doc": ["Number of memory blocks (int)."]}
{"index": 6869, "name": "tracemalloc.Statistic.size", "module": "tracemalloc", "doc": ["Total size of memory blocks in bytes (int)."]}
{"index": 6870, "name": "tracemalloc.Statistic.traceback", "module": "tracemalloc", "doc": ["Traceback where the memory block was allocated, Traceback instance."]}
{"index": 6871, "name": "tracemalloc.StatisticDiff", "module": "tracemalloc", "doc": ["Statistic difference on memory allocations between an old and a new Snapshot instance.", "Snapshot.compare_to() returns a list of StatisticDiff instances.", "See also the Statistic class."]}
{"index": 6872, "name": "tracemalloc.StatisticDiff.count", "module": "tracemalloc", "doc": ["Number of memory blocks in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot."]}
{"index": 6873, "name": "tracemalloc.StatisticDiff.count_diff", "module": "tracemalloc", "doc": ["Difference of number of memory blocks between the old and the new snapshots (int): 0 if the memory blocks have been allocated in the new snapshot."]}
{"index": 6874, "name": "tracemalloc.StatisticDiff.size", "module": "tracemalloc", "doc": ["Total size of memory blocks in bytes in the new snapshot (int): 0 if the memory blocks have been released in the new snapshot."]}
{"index": 6875, "name": "tracemalloc.StatisticDiff.size_diff", "module": "tracemalloc", "doc": ["Difference of total size of memory blocks in bytes between the old and the new snapshots (int): 0 if the memory blocks have been allocated in the new snapshot."]}
{"index": 6876, "name": "tracemalloc.StatisticDiff.traceback", "module": "tracemalloc", "doc": ["Traceback where the memory blocks were allocated, Traceback instance."]}
{"index": 6877, "name": "tracemalloc.Trace", "module": "tracemalloc", "doc": ["Trace of a memory block.", "The Snapshot.traces attribute is a sequence of Trace instances."]}
{"index": 6878, "name": "tracemalloc.Trace.domain", "module": "tracemalloc", "doc": ["Address space of a memory block (int).", "Read-only property.", "tracemalloc uses the domain 0 to trace memory allocations made by Python.", "C extensions can use other domains to trace other resources."]}
{"index": 6879, "name": "tracemalloc.Trace.size", "module": "tracemalloc", "doc": ["Size of the memory block in bytes (int)."]}
{"index": 6880, "name": "tracemalloc.Trace.traceback", "module": "tracemalloc", "doc": ["Traceback where the memory block was allocated, Traceback instance."]}
{"index": 6881, "name": "tracemalloc.Traceback", "module": "tracemalloc", "doc": ["Sequence of Frame instances sorted from the oldest frame to the most recent frame.", "A traceback contains at least 1 frame.", "If the tracemalloc module failed to get a frame, the filename \"<unknown>\" at line number 0 is used.", "When a snapshot is taken, tracebacks of traces are limited to get_traceback_limit() frames.", "See the take_snapshot() function.", "The Trace.traceback attribute is an instance of Traceback instance."]}
{"index": 6882, "name": "tracemalloc.Traceback.format", "module": "tracemalloc", "doc": ["Format the traceback as a list of lines with newlines.", "Use the linecache module to retrieve lines from the source code.", "If limit is set, format the limit most recent frames if limit is positive.", "Otherwise, format the abs(limit) oldest frames.", "If most_recent_first is True, the order of the formatted frames is reversed, returning the most recent frame first instead of last.", "Similar to the traceback.format_tb() function, except that format() does not include newlines.", "Example:", "Output:"]}
{"index": 6883, "name": "tty.setraw", "module": "tty", "doc": ["Change the mode of the file descriptor fd to raw.", "If when is omitted, it defaults to termios.TCSAFLUSH, and is passed to termios.tcsetattr()."]}
{"index": 6884, "name": "tty.setcbreak", "module": "tty", "doc": ["Change the mode of file descriptor fd to cbreak.", "If when is omitted, it defaults to termios.TCSAFLUSH, and is passed to termios.tcsetattr()."]}
{"index": 6885, "name": "turtle.forward", "module": "turtle", "doc": ["Move the turtle forward by the specified distance, in the direction the turtle is headed."]}
{"index": 6886, "name": "turtle.fd", "module": "turtle", "doc": ["Move the turtle forward by the specified distance, in the direction the turtle is headed."]}
{"index": 6887, "name": "turtle.back", "module": "turtle", "doc": ["Move the turtle backward by distance, opposite to the direction the turtle is headed.", "Do not change the turtle\u2019s heading."]}
{"index": 6888, "name": "turtle.bk", "module": "turtle", "doc": ["Move the turtle backward by distance, opposite to the direction the turtle is headed.", "Do not change the turtle\u2019s heading."]}
{"index": 6889, "name": "turtle.backward", "module": "turtle", "doc": ["Move the turtle backward by distance, opposite to the direction the turtle is headed.", "Do not change the turtle\u2019s heading."]}
{"index": 6890, "name": "turtle.right", "module": "turtle", "doc": ["Turn turtle right by angle units.", "(Units are by default degrees, but can be set via the degrees() and radians() functions.)", "Angle orientation depends on the turtle mode, see mode()."]}
{"index": 6891, "name": "turtle.rt", "module": "turtle", "doc": ["Turn turtle right by angle units.", "(Units are by default degrees, but can be set via the degrees() and radians() functions.)", "Angle orientation depends on the turtle mode, see mode()."]}
{"index": 6892, "name": "turtle.left", "module": "turtle", "doc": ["Turn turtle left by angle units.", "(Units are by default degrees, but can be set via the degrees() and radians() functions.)", "Angle orientation depends on the turtle mode, see mode()."]}
{"index": 6893, "name": "turtle.lt", "module": "turtle", "doc": ["Turn turtle left by angle units.", "(Units are by default degrees, but can be set via the degrees() and radians() functions.)", "Angle orientation depends on the turtle mode, see mode()."]}
{"index": 6894, "name": "turtle.goto", "module": "turtle", "doc": ["If y is None, x must be a pair of coordinates or a Vec2D (e.g.", "as returned by pos()).", "Move turtle to an absolute position.", "If the pen is down, draw line.", "Do not change the turtle\u2019s orientation."]}
{"index": 6895, "name": "turtle.setpos", "module": "turtle", "doc": ["If y is None, x must be a pair of coordinates or a Vec2D (e.g.", "as returned by pos()).", "Move turtle to an absolute position.", "If the pen is down, draw line.", "Do not change the turtle\u2019s orientation."]}
{"index": 6896, "name": "turtle.setposition", "module": "turtle", "doc": ["If y is None, x must be a pair of coordinates or a Vec2D (e.g.", "as returned by pos()).", "Move turtle to an absolute position.", "If the pen is down, draw line.", "Do not change the turtle\u2019s orientation."]}
{"index": 6897, "name": "turtle.setx", "module": "turtle", "doc": ["Set the turtle\u2019s first coordinate to x, leave second coordinate unchanged."]}
{"index": 6898, "name": "turtle.sety", "module": "turtle", "doc": ["Set the turtle\u2019s second coordinate to y, leave first coordinate unchanged."]}
{"index": 6899, "name": "turtle.setheading", "module": "turtle", "doc": ["Set the orientation of the turtle to to_angle.", "Here are some common directions in degrees:"]}
{"index": 6900, "name": "turtle.seth", "module": "turtle", "doc": ["Set the orientation of the turtle to to_angle.", "Here are some common directions in degrees:"]}
{"index": 6901, "name": "turtle.home", "module": "turtle", "doc": ["Move turtle to the origin \u2013 coordinates (0,0) \u2013 and set its heading to its start-orientation (which depends on the mode, see mode())."]}
{"index": 6902, "name": "turtle.circle", "module": "turtle", "doc": ["Draw a circle with given radius.", "The center is radius units left of the turtle; extent \u2013 an angle \u2013 determines which part of the circle is drawn.", "If extent is not given, draw the entire circle.", "If extent is not a full circle, one endpoint of the arc is the current pen position.", "Draw the arc in counterclockwise direction if radius is positive, otherwise in clockwise direction.", "Finally the direction of the turtle is changed by the amount of extent.", "As the circle is approximated by an inscribed regular polygon, steps determines the number of steps to use.", "If not given, it will be calculated automatically.", "May be used to draw regular polygons."]}
{"index": 6903, "name": "turtle.dot", "module": "turtle", "doc": ["Draw a circular dot with diameter size, using color.", "If size is not given, the maximum of pensize+4 and 2*pensize is used."]}
{"index": 6904, "name": "turtle.stamp", "module": "turtle", "doc": ["Stamp a copy of the turtle shape onto the canvas at the current turtle position.", "Return a stamp_id for that stamp, which can be used to delete it by calling clearstamp(stamp_id)."]}
{"index": 6905, "name": "turtle.clearstamp", "module": "turtle", "doc": ["Delete stamp with given stampid."]}
{"index": 6906, "name": "turtle.clearstamps", "module": "turtle", "doc": ["Delete all or first/last n of turtle\u2019s stamps.", "If n is None, delete all stamps, if n > 0 delete first n stamps, else if n < 0 delete last n stamps."]}
{"index": 6907, "name": "turtle.undo", "module": "turtle", "doc": ["Undo (repeatedly) the last turtle action(s).", "Number of available undo actions is determined by the size of the undobuffer."]}
{"index": 6908, "name": "turtle.speed", "module": "turtle", "doc": ["Set the turtle\u2019s speed to an integer value in the range 0..10.", "If no argument is given, return current speed.", "If input is a number greater than 10 or smaller than 0.5, speed is set to 0.", "Speedstrings are mapped to speedvalues as follows:", "Speeds from 1 to 10 enforce increasingly faster animation of line drawing and turtle turning.", "Attention: speed = 0 means that no animation takes place.", "forward/back makes turtle jump and likewise left/right make the turtle turn instantly."]}
{"index": 6909, "name": "turtle.position", "module": "turtle", "doc": ["Return the turtle\u2019s current location (x,y) (as a Vec2D vector)."]}
{"index": 6910, "name": "turtle.pos", "module": "turtle", "doc": ["Return the turtle\u2019s current location (x,y) (as a Vec2D vector)."]}
{"index": 6911, "name": "turtle.towards", "module": "turtle", "doc": ["Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle.", "This depends on the turtle\u2019s start orientation which depends on the mode - \u201cstandard\u201d/\u201dworld\u201d or \u201clogo\u201d)."]}
{"index": 6912, "name": "turtle.xcor", "module": "turtle", "doc": ["Return the turtle\u2019s x coordinate."]}
{"index": 6913, "name": "turtle.ycor", "module": "turtle", "doc": ["Return the turtle\u2019s y coordinate."]}
{"index": 6914, "name": "turtle.heading", "module": "turtle", "doc": ["Return the turtle\u2019s current heading (value depends on the turtle mode, see mode())."]}
{"index": 6915, "name": "turtle.distance", "module": "turtle", "doc": ["Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units."]}
{"index": 6916, "name": "turtle.degrees", "module": "turtle", "doc": ["Set angle measurement units, i.e.", "set number of \u201cdegrees\u201d for a full circle.", "Default value is 360 degrees."]}
{"index": 6917, "name": "turtle.radians", "module": "turtle", "doc": ["Set the angle measurement units to radians.", "Equivalent to degrees(2*math.pi)."]}
{"index": 6918, "name": "turtle.pendown", "module": "turtle", "doc": ["Pull the pen down \u2013 drawing when moving."]}
{"index": 6919, "name": "turtle.pd", "module": "turtle", "doc": ["Pull the pen down \u2013 drawing when moving."]}
{"index": 6920, "name": "turtle.down", "module": "turtle", "doc": ["Pull the pen down \u2013 drawing when moving."]}
{"index": 6921, "name": "turtle.penup", "module": "turtle", "doc": ["Pull the pen up \u2013 no drawing when moving."]}
{"index": 6922, "name": "turtle.pu", "module": "turtle", "doc": ["Pull the pen up \u2013 no drawing when moving."]}
{"index": 6923, "name": "turtle.up", "module": "turtle", "doc": ["Pull the pen up \u2013 no drawing when moving."]}
{"index": 6924, "name": "turtle.pensize", "module": "turtle", "doc": ["Set the line thickness to width or return it.", "If resizemode is set to \u201cauto\u201d and turtleshape is a polygon, that polygon is drawn with the same line thickness.", "If no argument is given, the current pensize is returned."]}
{"index": 6925, "name": "turtle.width", "module": "turtle", "doc": ["Set the line thickness to width or return it.", "If resizemode is set to \u201cauto\u201d and turtleshape is a polygon, that polygon is drawn with the same line thickness.", "If no argument is given, the current pensize is returned."]}
{"index": 6926, "name": "turtle.pen", "module": "turtle", "doc": ["Return or set the pen\u2019s attributes in a \u201cpen-dictionary\u201d with the following key/value pairs:", "This dictionary can be used as argument for a subsequent call to pen() to restore the former pen-state.", "Moreover one or more of these attributes can be provided as keyword-arguments.", "This can be used to set several pen attributes in one statement."]}
{"index": 6927, "name": "turtle.isdown", "module": "turtle", "doc": ["Return True if pen is down, False if it\u2019s up."]}
{"index": 6928, "name": "turtle.pencolor", "module": "turtle", "doc": ["Return or set the pencolor.", "Four input formats are allowed:"]}
{"index": 6929, "name": "turtle.fillcolor", "module": "turtle", "doc": ["Return or set the fillcolor.", "Four input formats are allowed:"]}
{"index": 6930, "name": "turtle.color", "module": "turtle", "doc": ["Return or set pencolor and fillcolor.", "Several input formats are allowed.", "They use 0 to 3 arguments as follows:"]}
{"index": 6931, "name": "turtle.filling", "module": "turtle", "doc": ["Return fillstate (True if filling, False else)."]}
{"index": 6932, "name": "turtle.begin_fill", "module": "turtle", "doc": ["To be called just before drawing a shape to be filled."]}
{"index": 6933, "name": "turtle.end_fill", "module": "turtle", "doc": ["Fill the shape drawn after the last call to begin_fill()."]}
{"index": 6934, "name": "turtle.reset", "module": "turtle", "doc": ["Delete the turtle\u2019s drawings from the screen, re-center the turtle and set variables to the default values."]}
{"index": 6935, "name": "turtle.clear", "module": "turtle", "doc": ["Delete the turtle\u2019s drawings from the screen.", "Do not move turtle.", "State and position of the turtle as well as drawings of other turtles are not affected."]}
{"index": 6936, "name": "turtle.write", "module": "turtle", "doc": ["Write text - the string representation of arg - at the current turtle position according to align (\u201cleft\u201d, \u201ccenter\u201d or right\u201d) and with the given font.", "If move is true, the pen is moved to the bottom-right corner of the text.", "By default, move is False."]}
{"index": 6937, "name": "turtle.hideturtle", "module": "turtle", "doc": ["Make the turtle invisible.", "It\u2019s a good idea to do this while you\u2019re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably."]}
{"index": 6938, "name": "turtle.ht", "module": "turtle", "doc": ["Make the turtle invisible.", "It\u2019s a good idea to do this while you\u2019re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably."]}
{"index": 6939, "name": "turtle.showturtle", "module": "turtle", "doc": ["Make the turtle visible."]}
{"index": 6940, "name": "turtle.st", "module": "turtle", "doc": ["Make the turtle visible."]}
{"index": 6941, "name": "turtle.isvisible", "module": "turtle", "doc": ["Return True if the Turtle is shown, False if it\u2019s hidden."]}
{"index": 6942, "name": "turtle.shape", "module": "turtle", "doc": ["Set turtle shape to shape with given name or, if name is not given, return name of current shape.", "Shape with name must exist in the TurtleScreen\u2019s shape dictionary.", "Initially there are the following polygon shapes: \u201carrow\u201d, \u201cturtle\u201d, \u201ccircle\u201d, \u201csquare\u201d, \u201ctriangle\u201d, \u201cclassic\u201d.", "To learn about how to deal with shapes see Screen method register_shape()."]}
{"index": 6943, "name": "turtle.resizemode", "module": "turtle", "doc": ["Set resizemode to one of the values: \u201cauto\u201d, \u201cuser\u201d, \u201cnoresize\u201d.", "If rmode is not given, return current resizemode.", "Different resizemodes have the following effects:", "resizemode(\u201cuser\u201d) is called by shapesize() when used with arguments."]}
{"index": 6944, "name": "turtle.shapesize", "module": "turtle", "doc": ["Return or set the pen\u2019s attributes x/y-stretchfactors and/or outline.", "Set resizemode to \u201cuser\u201d.", "If and only if resizemode is set to \u201cuser\u201d, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes\u2019s outline."]}
{"index": 6945, "name": "turtle.turtlesize", "module": "turtle", "doc": ["Return or set the pen\u2019s attributes x/y-stretchfactors and/or outline.", "Set resizemode to \u201cuser\u201d.", "If and only if resizemode is set to \u201cuser\u201d, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shapes\u2019s outline."]}
{"index": 6946, "name": "turtle.shearfactor", "module": "turtle", "doc": ["Set or return the current shearfactor.", "Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle.", "Do not change the turtle\u2019s heading (direction of movement).", "If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared."]}
{"index": 6947, "name": "turtle.tilt", "module": "turtle", "doc": ["Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle\u2019s heading (direction of movement)."]}
{"index": 6948, "name": "turtle.settiltangle", "module": "turtle", "doc": ["Rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle.", "Do not change the turtle\u2019s heading (direction of movement)."]}
{"index": 6949, "name": "turtle.tiltangle", "module": "turtle", "doc": ["Set or return the current tilt-angle.", "If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle.", "Do not change the turtle\u2019s heading (direction of movement).", "If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement)."]}
{"index": 6950, "name": "turtle.shapetransform", "module": "turtle", "doc": ["Set or return the current transformation matrix of the turtle shape.", "If none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements.", "Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row t11, t12 and second row t21, 22.", "The determinant t11 * t22 - t12 * t21 must not be zero, otherwise an error is raised.", "Modify stretchfactor, shearfactor and tiltangle according to the given matrix."]}
{"index": 6951, "name": "turtle.get_shapepoly", "module": "turtle", "doc": ["Return the current shape polygon as tuple of coordinate pairs.", "This can be used to define a new shape or components of a compound shape."]}
{"index": 6952, "name": "turtle.onclick", "module": "turtle", "doc": ["Bind fun to mouse-click events on this turtle.", "If fun is None, existing bindings are removed.", "Example for the anonymous turtle, i.e.", "the procedural way:"]}
{"index": 6953, "name": "turtle.onrelease", "module": "turtle", "doc": ["Bind fun to mouse-button-release events on this turtle.", "If fun is None, existing bindings are removed."]}
{"index": 6954, "name": "turtle.ondrag", "module": "turtle", "doc": ["Bind fun to mouse-move events on this turtle.", "If fun is None, existing bindings are removed.", "Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle.", "Subsequently, clicking and dragging the Turtle will move it across the screen thereby producing handdrawings (if pen is down)."]}
{"index": 6955, "name": "turtle.begin_poly", "module": "turtle", "doc": ["Start recording the vertices of a polygon.", "Current turtle position is first vertex of polygon."]}
{"index": 6956, "name": "turtle.end_poly", "module": "turtle", "doc": ["Stop recording the vertices of a polygon.", "Current turtle position is last vertex of polygon.", "This will be connected with the first vertex."]}
{"index": 6957, "name": "turtle.get_poly", "module": "turtle", "doc": ["Return the last recorded polygon."]}
{"index": 6958, "name": "turtle.clone", "module": "turtle", "doc": ["Create and return a clone of the turtle with same position, heading and turtle properties."]}
{"index": 6959, "name": "turtle.getturtle", "module": "turtle", "doc": ["Return the Turtle object itself.", "Only reasonable use: as a function to return the \u201canonymous turtle\u201d:"]}
{"index": 6960, "name": "turtle.getpen", "module": "turtle", "doc": ["Return the Turtle object itself.", "Only reasonable use: as a function to return the \u201canonymous turtle\u201d:"]}
{"index": 6961, "name": "turtle.getscreen", "module": "turtle", "doc": ["Return the TurtleScreen object the turtle is drawing on.", "TurtleScreen methods can then be called for that object."]}
{"index": 6962, "name": "turtle.setundobuffer", "module": "turtle", "doc": ["Set or disable undobuffer.", "If size is an integer an empty undobuffer of given size is installed.", "size gives the maximum number of turtle actions that can be undone by the undo() method/function.", "If size is None, the undobuffer is disabled."]}
{"index": 6963, "name": "turtle.undobufferentries", "module": "turtle", "doc": ["Return number of entries in the undobuffer."]}
{"index": 6964, "name": "turtle.bgcolor", "module": "turtle", "doc": ["Set or return background color of the TurtleScreen."]}
{"index": 6965, "name": "turtle.bgpic", "module": "turtle", "doc": ["Set background image or return name of current backgroundimage.", "If picname is a filename, set the corresponding image as background.", "If picname is \"nopic\", delete background image, if present.", "If picname is None, return the filename of the current backgroundimage."]}
{"index": 6966, "name": "id0", "module": "turtle", "doc": ["Delete all drawings and all turtles from the TurtleScreen.", "Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on."]}
{"index": 6967, "name": "turtle.clearscreen", "module": "turtle", "doc": ["Delete all drawings and all turtles from the TurtleScreen.", "Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on."]}
{"index": 6968, "name": "id1", "module": "turtle", "doc": ["Reset all Turtles on the Screen to their initial state."]}
{"index": 6969, "name": "turtle.resetscreen", "module": "turtle", "doc": ["Reset all Turtles on the Screen to their initial state."]}
{"index": 6970, "name": "turtle.screensize", "module": "turtle", "doc": ["If no arguments are given, return current (canvaswidth, canvasheight).", "Else resize the canvas the turtles are drawing on.", "Do not alter the drawing window.", "To observe hidden parts of the canvas, use the scrollbars.", "With this method, one can make visible those parts of a drawing which were outside the canvas before.", "e.g.", "to search for an erroneously escaped turtle ;-)"]}
{"index": 6971, "name": "turtle.setworldcoordinates", "module": "turtle", "doc": ["Set up user-defined coordinate system and switch to mode \u201cworld\u201d if necessary.", "This performs a screen.reset().", "If mode \u201cworld\u201d is already active, all drawings are redrawn according to the new coordinates.", "ATTENTION: in user-defined coordinate systems angles may appear distorted."]}
{"index": 6972, "name": "turtle.delay", "module": "turtle", "doc": ["Set or return the drawing delay in milliseconds.", "(This is approximately the time interval between two consecutive canvas updates.)", "The longer the drawing delay, the slower the animation.", "Optional argument:"]}
{"index": 6973, "name": "turtle.tracer", "module": "turtle", "doc": ["Turn turtle animation on/off and set delay for update drawings.", "If n is given, only each n-th regular screen update is really performed.", "(Can be used to accelerate the drawing of complex graphics.)", "When called without arguments, returns the currently stored value of n. Second argument sets delay value (see delay())."]}
{"index": 6974, "name": "turtle.update", "module": "turtle", "doc": ["Perform a TurtleScreen update.", "To be used when tracer is turned off."]}
{"index": 6975, "name": "turtle.listen", "module": "turtle", "doc": ["Set focus on TurtleScreen (in order to collect key-events).", "Dummy arguments are provided in order to be able to pass listen() to the onclick method."]}
{"index": 6976, "name": "turtle.onkey", "module": "turtle", "doc": ["Bind fun to key-release event of key.", "If fun is None, event bindings are removed.", "Remark: in order to be able to register key-events, TurtleScreen must have the focus.", "(See method listen().)"]}
{"index": 6977, "name": "turtle.onkeyrelease", "module": "turtle", "doc": ["Bind fun to key-release event of key.", "If fun is None, event bindings are removed.", "Remark: in order to be able to register key-events, TurtleScreen must have the focus.", "(See method listen().)"]}
{"index": 6978, "name": "turtle.onkeypress", "module": "turtle", "doc": ["Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given.", "Remark: in order to be able to register key-events, TurtleScreen must have focus.", "(See method listen().)"]}
{"index": 6979, "name": "id2", "module": "turtle", "doc": ["Bind fun to mouse-click events on this screen.", "If fun is None, existing bindings are removed.", "Example for a TurtleScreen instance named screen and a Turtle instance named turtle:"]}
{"index": 6980, "name": "turtle.onscreenclick", "module": "turtle", "doc": ["Bind fun to mouse-click events on this screen.", "If fun is None, existing bindings are removed.", "Example for a TurtleScreen instance named screen and a Turtle instance named turtle:"]}
{"index": 6981, "name": "turtle.ontimer", "module": "turtle", "doc": ["Install a timer that calls fun after t milliseconds."]}
{"index": 6982, "name": "turtle.mainloop", "module": "turtle", "doc": ["Starts event loop - calling Tkinter\u2019s mainloop function.", "Must be the last statement in a turtle graphics program.", "Must not be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics."]}
{"index": 6983, "name": "turtle.done", "module": "turtle", "doc": ["Starts event loop - calling Tkinter\u2019s mainloop function.", "Must be the last statement in a turtle graphics program.", "Must not be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics."]}
{"index": 6984, "name": "turtle.textinput", "module": "turtle", "doc": ["Pop up a dialog window for input of a string.", "Parameter title is the title of the dialog window, prompt is a text mostly describing what information to input.", "Return the string input.", "If the dialog is canceled, return None."]}
{"index": 6985, "name": "turtle.numinput", "module": "turtle", "doc": ["Pop up a dialog window for input of a number.", "title is the title of the dialog window, prompt is a text mostly describing what numerical information to input.", "default: default value, minval: minimum value for input, maxval: maximum value for input The number input must be in the range minval .. maxval if these are given.", "If not, a hint is issued and the dialog remains open for correction.", "Return the number input.", "If the dialog is canceled,  return None."]}
{"index": 6986, "name": "turtle.mode", "module": "turtle", "doc": ["Set turtle mode (\u201cstandard\u201d, \u201clogo\u201d or \u201cworld\u201d) and perform reset.", "If mode is not given, current mode is returned.", "Mode \u201cstandard\u201d is compatible with old turtle.", "Mode \u201clogo\u201d is compatible with most Logo turtle graphics.", "Mode \u201cworld\u201d uses user-defined \u201cworld coordinates\u201d.", "Attention: in this mode angles appear distorted if x/y unit-ratio doesn\u2019t equal 1."]}
{"index": 6987, "name": "turtle.colormode", "module": "turtle", "doc": ["Return the colormode or set it to 1.0 or 255.", "Subsequently r, g, b values of color triples have to be in the range 0..cmode."]}
{"index": 6988, "name": "turtle.getcanvas", "module": "turtle", "doc": ["Return the Canvas of this TurtleScreen.", "Useful for insiders who know what to do with a Tkinter Canvas."]}
{"index": 6989, "name": "turtle.getshapes", "module": "turtle", "doc": ["Return a list of names of all currently available turtle shapes."]}
{"index": 6990, "name": "turtle.register_shape", "module": "turtle", "doc": ["There are three different ways to call this function:", "Add a turtle shape to TurtleScreen\u2019s shapelist.", "Only thusly registered shapes can be used by issuing the command shape(shapename)."]}
{"index": 6991, "name": "turtle.addshape", "module": "turtle", "doc": ["There are three different ways to call this function:", "Add a turtle shape to TurtleScreen\u2019s shapelist.", "Only thusly registered shapes can be used by issuing the command shape(shapename)."]}
{"index": 6992, "name": "turtle.turtles", "module": "turtle", "doc": ["Return the list of turtles on the screen."]}
{"index": 6993, "name": "turtle.window_height", "module": "turtle", "doc": ["Return the height of the turtle window."]}
{"index": 6994, "name": "turtle.window_width", "module": "turtle", "doc": ["Return the width of the turtle window."]}
{"index": 6995, "name": "turtle.bye", "module": "turtle", "doc": ["Shut the turtlegraphics window."]}
{"index": 6996, "name": "turtle.exitonclick", "module": "turtle", "doc": ["Bind bye() method to mouse clicks on the Screen.", "If the value \u201cusing_IDLE\u201d in the configuration dictionary is False (default value), also enter mainloop.", "Remark: If IDLE with the -n switch (no subprocess) is used, this value should be set to True in turtle.cfg.", "In this case IDLE\u2019s own mainloop is active also for the client script."]}
{"index": 6997, "name": "turtle.setup", "module": "turtle", "doc": ["Set the size and position of the main window.", "Default values of arguments are stored in the configuration dictionary and can be changed via a turtle.cfg file."]}
{"index": 6998, "name": "turtle.title", "module": "turtle", "doc": ["Set title of turtle window to titlestring."]}
{"index": 6999, "name": "turtle.RawTurtle", "module": "turtle", "doc": ["Create a turtle.", "The turtle has all methods described above as \u201cmethods of Turtle/RawTurtle\u201d."]}
{"index": 7000, "name": "turtle.RawPen", "module": "turtle", "doc": ["Create a turtle.", "The turtle has all methods described above as \u201cmethods of Turtle/RawTurtle\u201d."]}
{"index": 7001, "name": "turtle.Turtle", "module": "turtle", "doc": ["Subclass of RawTurtle, has the same interface but draws on a default Screen object created automatically when needed for the first time."]}
{"index": 7002, "name": "turtle.TurtleScreen", "module": "turtle", "doc": ["Provides screen oriented methods like setbg() etc.", "that are described above."]}
{"index": 7003, "name": "turtle.Screen", "module": "turtle", "doc": ["Subclass of TurtleScreen, with four methods added."]}
{"index": 7004, "name": "turtle.ScrolledCanvas", "module": "turtle", "doc": ["Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles."]}
{"index": 7005, "name": "turtle.Shape", "module": "turtle", "doc": ["Data structure modeling shapes.", "The pair (type_, data) must follow this specification:"]}
{"index": 7006, "name": "turtle.Shape.addcomponent", "module": "turtle", "doc": ["Example:", "See Compound shapes."]}
{"index": 7007, "name": "turtle.Vec2D", "module": "turtle", "doc": ["A two-dimensional vector class, used as a helper class for implementing turtle graphics.", "May be useful for turtle graphics programs too.", "Derived from tuple, so a vector is a tuple!", "Provides (for a, b vectors, k number):"]}
{"index": 7008, "name": "turtle.write_docstringdict", "module": "turtle", "doc": ["Create and write docstring-dictionary to a Python script with the given filename.", "This function has to be called explicitly (it is not used by the turtle graphics classes).", "The docstring dictionary will be written to the Python script filename.py.", "It is intended to serve as a template for translation of the docstrings into different languages."]}
{"index": 7009, "name": "types.new_class", "module": "types", "doc": ["Creates a class object dynamically using the appropriate metaclass.", "The first three arguments are the components that make up a class definition header: the class name, the base classes (in order), the keyword arguments (such as metaclass).", "The exec_body argument is a callback that is used to populate the freshly created class namespace.", "It should accept the class namespace as its sole argument and update the namespace directly with the class contents.", "If no callback is provided, it has the same effect as passing in lambda ns: ns."]}
{"index": 7010, "name": "types.prepare_class", "module": "types", "doc": ["Calculates the appropriate metaclass and creates the class namespace.", "The arguments are the components that make up a class definition header: the class name, the base classes (in order) and the keyword arguments (such as metaclass).", "The return value is a 3-tuple: metaclass, namespace, kwds", "metaclass is the appropriate metaclass, namespace is the prepared class namespace and kwds is an updated copy of the passed in kwds argument with any 'metaclass' entry removed.", "If no kwds argument is passed in, this will be an empty dict."]}
{"index": 7011, "name": "types.resolve_bases", "module": "types", "doc": ["Resolve MRO entries dynamically as specified by PEP 560.", "This function looks for items in bases that are not instances of type, and returns a tuple where each such object that has an __mro_entries__ method is replaced with an unpacked result of calling this method.", "If a bases item is an instance of type, or it doesn\u2019t have an __mro_entries__ method, then it is included in the return tuple unchanged."]}
{"index": 7012, "name": "types.FunctionType", "module": "types", "doc": ["The type of user-defined functions and functions created by lambda  expressions."]}
{"index": 7013, "name": "types.LambdaType", "module": "types", "doc": ["The type of user-defined functions and functions created by lambda  expressions."]}
{"index": 7014, "name": "types.GeneratorType", "module": "types", "doc": ["The type of generator-iterator objects, created by generator functions."]}
{"index": 7015, "name": "types.CoroutineType", "module": "types", "doc": ["The type of coroutine objects, created by async def functions."]}
{"index": 7016, "name": "types.AsyncGeneratorType", "module": "types", "doc": ["The type of asynchronous generator-iterator objects, created by asynchronous generator functions."]}
{"index": 7017, "name": "types.CodeType", "module": "types", "doc": ["The type for code objects such as returned by compile()."]}
{"index": 7018, "name": "types.MethodType", "module": "types", "doc": ["The type of methods of user-defined class instances."]}
{"index": 7019, "name": "types.BuiltinFunctionType", "module": "types", "doc": ["The type of built-in functions like len() or sys.exit(), and methods of built-in classes.", "(Here, the term \u201cbuilt-in\u201d means \u201cwritten in C\u201d.)"]}
{"index": 7020, "name": "types.BuiltinMethodType", "module": "types", "doc": ["The type of built-in functions like len() or sys.exit(), and methods of built-in classes.", "(Here, the term \u201cbuilt-in\u201d means \u201cwritten in C\u201d.)"]}
{"index": 7021, "name": "types.WrapperDescriptorType", "module": "types", "doc": ["The type of methods of some built-in data types and base classes such as object.__init__() or object.__lt__()."]}
{"index": 7022, "name": "types.MethodWrapperType", "module": "types", "doc": ["The type of bound methods of some built-in data types and base classes.", "For example it is the type of object().__str__."]}
{"index": 7023, "name": "types.MethodDescriptorType", "module": "types", "doc": ["The type of methods of some built-in data types such as str.join()."]}
{"index": 7024, "name": "types.ClassMethodDescriptorType", "module": "types", "doc": ["The type of unbound class methods of some built-in data types such as dict.__dict__['fromkeys']."]}
{"index": 7025, "name": "types.ModuleType", "module": "types", "doc": ["The type of modules.", "Constructor takes the name of the module to be created and optionally its docstring."]}
{"index": 7026, "name": "types.ModuleType.__doc__", "module": "types", "doc": ["The docstring of the module.", "Defaults to None."]}
{"index": 7027, "name": "types.ModuleType.__loader__", "module": "types", "doc": ["The loader which loaded the module.", "Defaults to None."]}
{"index": 7028, "name": "types.ModuleType.__name__", "module": "types", "doc": ["The name of the module."]}
{"index": 7029, "name": "types.ModuleType.__package__", "module": "types", "doc": ["Which package a module belongs to.", "If the module is top-level (i.e.", "not a part of any specific package) then the attribute should be set to '', else it should be set to the name of the package (which can be __name__ if the module is a package itself).", "Defaults to None."]}
{"index": 7030, "name": "types.TracebackType", "module": "types", "doc": ["The type of traceback objects such as found in sys.exc_info()[2].", "See the language reference for details of the available attributes and operations, and guidance on creating tracebacks dynamically."]}
{"index": 7031, "name": "types.FrameType", "module": "types", "doc": ["The type of frame objects such as found in tb.tb_frame if tb is a traceback object.", "See the language reference for details of the available attributes and operations."]}
{"index": 7032, "name": "types.GetSetDescriptorType", "module": "types", "doc": ["The type of objects defined in extension modules with PyGetSetDef, such as FrameType.f_locals or array.array.typecode.", "This type is used as descriptor for object attributes; it has the same purpose as the property type, but for classes defined in extension modules."]}
{"index": 7033, "name": "types.MemberDescriptorType", "module": "types", "doc": ["The type of objects defined in extension modules with PyMemberDef, such as datetime.timedelta.days.", "This type is used as descriptor for simple C data members which use standard conversion functions; it has the same purpose as the property type, but for classes defined in extension modules."]}
{"index": 7034, "name": "types.MappingProxyType", "module": "types", "doc": ["Read-only proxy of a mapping.", "It provides a dynamic view on the mapping\u2019s entries, which means that when the mapping changes, the view reflects these changes."]}
{"index": 7035, "name": "types.MappingProxyType.copy", "module": "types", "doc": ["Return a shallow copy of the underlying mapping."]}
{"index": 7036, "name": "types.MappingProxyType.get", "module": "types", "doc": ["Return the value for key if key is in the underlying mapping, else default.", "If default is not given, it defaults to None, so that this method never raises a KeyError."]}
{"index": 7037, "name": "types.MappingProxyType.items", "module": "types", "doc": ["Return a new view of the underlying mapping\u2019s items ((key, value) pairs)."]}
{"index": 7038, "name": "types.MappingProxyType.keys", "module": "types", "doc": ["Return a new view of the underlying mapping\u2019s keys."]}
{"index": 7039, "name": "types.MappingProxyType.values", "module": "types", "doc": ["Return a new view of the underlying mapping\u2019s values."]}
{"index": 7040, "name": "types.SimpleNamespace", "module": "types", "doc": ["A simple object subclass that provides attribute access to its namespace, as well as a meaningful repr.", "Unlike object, with SimpleNamespace you can add and remove attributes.", "If a SimpleNamespace object is initialized with keyword arguments, those are directly added to the underlying namespace.", "The type is roughly equivalent to the following code:", "SimpleNamespace may be useful as a replacement for class NS: pass.", "However, for a structured record type use namedtuple() instead."]}
{"index": 7041, "name": "types.DynamicClassAttribute", "module": "types", "doc": ["Route attribute access on a class to __getattr__.", "This is a descriptor, used to define attributes that act differently when accessed through an instance and through a class.", "Instance access remains normal, but access to an attribute through a class will be routed to the class\u2019s __getattr__ method; this is done by raising AttributeError.", "This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see Enum for an example)."]}
{"index": 7042, "name": "types.coroutine", "module": "types", "doc": ["This function transforms a generator function into a coroutine function which returns a generator-based coroutine.", "The generator-based coroutine is still a generator iterator, but is also considered to be a coroutine object and is awaitable.", "However, it may not necessarily implement the __await__() method.", "If gen_func is a generator function, it will be modified in-place.", "If gen_func is not a generator function, it will be wrapped.", "If it returns an instance of collections.abc.Generator, the instance will be wrapped in an awaitable proxy object.", "All other types of objects will be returned as is."]}
{"index": 7043, "name": "typing.TypeVar", "module": "typing", "doc": ["Type variable.", "Usage:", "Type variables exist primarily for the benefit of static type checkers.", "They serve as the parameters for generic types as well as for generic function definitions.", "See class Generic for more information on generic types.", "Generic functions work as follows:", "The latter example\u2019s signature is essentially the overloading of (str, str) -> str and (bytes, bytes) -> bytes.", "Also note that if the arguments are instances of some subclass of str, the return type is still plain str.", "At runtime, isinstance(x, T) will raise TypeError.", "In general, isinstance() and issubclass() should not be used with types.", "Type variables may be marked covariant or contravariant by passing covariant=True or contravariant=True.", "See PEP 484 for more details.", "By default type variables are invariant.", "Alternatively, a type variable may specify an upper bound using bound=<type>.", "This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see PEP 484."]}
{"index": 7044, "name": "typing.Generic", "module": "typing", "doc": ["Abstract base class for generic types.", "A generic type is typically declared by inheriting from an instantiation of this class with one or more type variables.", "For example, a generic mapping type might be defined as:", "This class can then be used as follows:"]}
{"index": 7045, "name": "typing.Type", "module": "typing", "doc": ["A variable annotated with C may accept a value of type C. In contrast, a variable annotated with Type[C] may accept values that are classes themselves \u2013 specifically, it will accept the class object of C. For example:", "Note that Type[C] is covariant:", "The fact that Type[C] is covariant implies that all subclasses of C should implement the same constructor signature and class method signatures as C. The type checker should flag violations of this, but should also allow constructor calls in subclasses that match the constructor calls in the indicated base class.", "How the type checker is required to handle this particular case may change in future revisions of PEP 484.", "The only legal parameters for Type are classes, Any, type variables, and unions of any of these types.", "For example:", "Type[Any] is equivalent to Type which in turn is equivalent to type, which is the root of Python\u2019s metaclass hierarchy."]}
{"index": 7046, "name": "typing.Iterable", "module": "typing", "doc": ["A generic version of collections.abc.Iterable."]}
{"index": 7047, "name": "typing.Iterator", "module": "typing", "doc": ["A generic version of collections.abc.Iterator."]}
{"index": 7048, "name": "typing.Reversible", "module": "typing", "doc": ["A generic version of collections.abc.Reversible."]}
{"index": 7049, "name": "typing.SupportsInt", "module": "typing", "doc": ["An ABC with one abstract method __int__."]}
{"index": 7050, "name": "typing.SupportsFloat", "module": "typing", "doc": ["An ABC with one abstract method __float__."]}
{"index": 7051, "name": "typing.SupportsComplex", "module": "typing", "doc": ["An ABC with one abstract method __complex__."]}
{"index": 7052, "name": "typing.SupportsBytes", "module": "typing", "doc": ["An ABC with one abstract method __bytes__."]}
{"index": 7053, "name": "typing.SupportsAbs", "module": "typing", "doc": ["An ABC with one abstract method __abs__ that is covariant in its return type."]}
{"index": 7054, "name": "typing.SupportsRound", "module": "typing", "doc": ["An ABC with one abstract method __round__ that is covariant in its return type."]}
{"index": 7055, "name": "typing.Container", "module": "typing", "doc": ["A generic version of collections.abc.Container."]}
{"index": 7056, "name": "typing.Hashable", "module": "typing", "doc": ["An alias to collections.abc.Hashable"]}
{"index": 7057, "name": "typing.Sized", "module": "typing", "doc": ["An alias to collections.abc.Sized"]}
{"index": 7058, "name": "typing.Collection", "module": "typing", "doc": ["A generic version of collections.abc.Collection"]}
{"index": 7059, "name": "typing.AbstractSet", "module": "typing", "doc": ["A generic version of collections.abc.Set."]}
{"index": 7060, "name": "typing.MutableSet", "module": "typing", "doc": ["A generic version of collections.abc.MutableSet."]}
{"index": 7061, "name": "typing.Mapping", "module": "typing", "doc": ["A generic version of collections.abc.Mapping.", "This type can be used as follows:"]}
{"index": 7062, "name": "typing.MutableMapping", "module": "typing", "doc": ["A generic version of collections.abc.MutableMapping."]}
{"index": 7063, "name": "typing.Sequence", "module": "typing", "doc": ["A generic version of collections.abc.Sequence."]}
{"index": 7064, "name": "typing.MutableSequence", "module": "typing", "doc": ["A generic version of collections.abc.MutableSequence."]}
{"index": 7065, "name": "typing.ByteString", "module": "typing", "doc": ["A generic version of collections.abc.ByteString.", "This type represents the types bytes, bytearray, and memoryview.", "As a shorthand for this type, bytes can be used to annotate arguments of any of the types mentioned above."]}
{"index": 7066, "name": "typing.Deque", "module": "typing", "doc": ["A generic version of collections.deque."]}
{"index": 7067, "name": "typing.List", "module": "typing", "doc": ["Generic version of list.", "Useful for annotating return types.", "To annotate arguments it is preferred to use an abstract collection type such as Sequence or Iterable.", "This type may be used as follows:"]}
{"index": 7068, "name": "typing.Set", "module": "typing", "doc": ["A generic version of builtins.set.", "Useful for annotating return types.", "To annotate arguments it is preferred to use an abstract collection type such as AbstractSet."]}
{"index": 7069, "name": "typing.FrozenSet", "module": "typing", "doc": ["A generic version of builtins.frozenset."]}
{"index": 7070, "name": "typing.MappingView", "module": "typing", "doc": ["A generic version of collections.abc.MappingView."]}
{"index": 7071, "name": "typing.KeysView", "module": "typing", "doc": ["A generic version of collections.abc.KeysView."]}
{"index": 7072, "name": "typing.ItemsView", "module": "typing", "doc": ["A generic version of collections.abc.ItemsView."]}
{"index": 7073, "name": "typing.ValuesView", "module": "typing", "doc": ["A generic version of collections.abc.ValuesView."]}
{"index": 7074, "name": "typing.Awaitable", "module": "typing", "doc": ["A generic version of collections.abc.Awaitable."]}
{"index": 7075, "name": "typing.Coroutine", "module": "typing", "doc": ["A generic version of collections.abc.Coroutine.", "The variance and order of type variables correspond to those of Generator, for example:"]}
{"index": 7076, "name": "typing.AsyncIterable", "module": "typing", "doc": ["A generic version of collections.abc.AsyncIterable."]}
{"index": 7077, "name": "typing.AsyncIterator", "module": "typing", "doc": ["A generic version of collections.abc.AsyncIterator."]}
{"index": 7078, "name": "typing.ContextManager", "module": "typing", "doc": ["A generic version of contextlib.AbstractContextManager."]}
{"index": 7079, "name": "typing.AsyncContextManager", "module": "typing", "doc": ["A generic version of contextlib.AbstractAsyncContextManager."]}
{"index": 7080, "name": "typing.Dict", "module": "typing", "doc": ["A generic version of dict.", "Useful for annotating return types.", "To annotate arguments it is preferred to use an abstract collection type such as Mapping.", "This type can be used as follows:"]}
{"index": 7081, "name": "typing.DefaultDict", "module": "typing", "doc": ["A generic version of collections.defaultdict."]}
{"index": 7082, "name": "typing.OrderedDict", "module": "typing", "doc": ["A generic version of collections.OrderedDict."]}
{"index": 7083, "name": "typing.Counter", "module": "typing", "doc": ["A generic version of collections.Counter."]}
{"index": 7084, "name": "typing.ChainMap", "module": "typing", "doc": ["A generic version of collections.ChainMap."]}
{"index": 7085, "name": "typing.Generator", "module": "typing", "doc": ["A generator can be annotated by the generic type Generator[YieldType, SendType, ReturnType].", "For example:", "Note that unlike many other generics in the typing module, the SendType of Generator behaves contravariantly, not covariantly or invariantly.", "If your generator will only yield values, set the SendType and ReturnType to None:", "Alternatively, annotate your generator as having a return type of either Iterable[YieldType] or Iterator[YieldType]:"]}
{"index": 7086, "name": "typing.AsyncGenerator", "module": "typing", "doc": ["An async generator can be annotated by the generic type AsyncGenerator[YieldType, SendType].", "For example:", "Unlike normal generators, async generators cannot return a value, so there is no ReturnType type parameter.", "As with Generator, the SendType behaves contravariantly.", "If your generator will only yield values, set the SendType to None:", "Alternatively, annotate your generator as having a return type of either AsyncIterable[YieldType] or AsyncIterator[YieldType]:"]}
{"index": 7087, "name": "typing.Text", "module": "typing", "doc": ["Text is an alias for str.", "It is provided to supply a forward compatible path for Python 2 code: in Python 2, Text is an alias for unicode.", "Use Text to indicate that a value must contain a unicode string in a manner that is compatible with both Python 2 and Python 3:"]}
{"index": 7088, "name": "typing.IO", "module": "typing", "doc": ["Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open()."]}
{"index": 7089, "name": "typing.TextIO", "module": "typing", "doc": ["Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open()."]}
{"index": 7090, "name": "typing.BinaryIO", "module": "typing", "doc": ["Generic type IO[AnyStr] and its subclasses TextIO(IO[str]) and BinaryIO(IO[bytes]) represent the types of I/O streams such as returned by open()."]}
{"index": 7091, "name": "typing.Pattern", "module": "typing", "doc": ["These type aliases correspond to the return types from re.compile() and re.match().", "These types (and the corresponding functions) are generic in AnyStr and can be made specific by writing Pattern[str], Pattern[bytes], Match[str], or Match[bytes]."]}
{"index": 7092, "name": "typing.Match", "module": "typing", "doc": ["These type aliases correspond to the return types from re.compile() and re.match().", "These types (and the corresponding functions) are generic in AnyStr and can be made specific by writing Pattern[str], Pattern[bytes], Match[str], or Match[bytes]."]}
{"index": 7093, "name": "typing.NamedTuple", "module": "typing", "doc": ["Typed version of collections.namedtuple().", "Usage:", "This is equivalent to:", "To give a field a default value, you can assign to it in the class body:", "Fields with a default value must come after any fields without a default.", "The resulting class has two extra attributes: _field_types, giving a dict mapping field names to types, and _field_defaults, a dict mapping field names to default values.", "(The field names are in the _fields attribute, which is part of the namedtuple API.)", "NamedTuple subclasses can also have docstrings and methods:", "Backward-compatible usage:"]}
{"index": 7094, "name": "typing.ForwardRef", "module": "typing", "doc": ["A class used for internal typing representation of string forward references.", "For example, List[\"SomeClass\"] is implicitly transformed into List[ForwardRef(\"SomeClass\")].", "This class should not be instantiated by a user, but may be used by introspection tools."]}
{"index": 7095, "name": "typing.NewType", "module": "typing", "doc": ["A helper function to indicate a distinct types to a typechecker, see NewType.", "At runtime it returns a function that returns its argument.", "Usage:"]}
{"index": 7096, "name": "typing.cast", "module": "typing", "doc": ["Cast a value to a type.", "This returns the value unchanged.", "To the type checker this signals that the return value has the designated type, but at runtime we intentionally don\u2019t check anything (we want this to be as fast as possible)."]}
{"index": 7097, "name": "typing.get_type_hints", "module": "typing", "doc": ["Return a dictionary containing type hints for a function, method, module or class object.", "This is often the same as obj.__annotations__.", "In addition, forward references encoded as string literals are handled by evaluating them in globals and locals namespaces.", "If necessary, Optional[t] is added for function and method annotations if a default value equal to None is set.", "For a class C, return a dictionary constructed by merging all the __annotations__ along C.__mro__ in reverse order."]}
{"index": 7098, "name": "typing.overload", "module": "typing", "doc": ["The @overload decorator allows describing functions and methods that support multiple different combinations of argument types.", "A series of @overload-decorated definitions must be followed by exactly one non-@overload-decorated definition (for the same function/method).", "The @overload-decorated definitions are for the benefit of the type checker only, since they will be overwritten by the non-@overload-decorated definition, while the latter is used at runtime but should be ignored by a type checker.", "At runtime, calling a @overload-decorated function directly will raise NotImplementedError.", "An example of overload that gives a more precise type than can be expressed using a union or a type variable:", "See PEP 484 for details and comparison with other typing semantics."]}
{"index": 7099, "name": "typing.no_type_check", "module": "typing", "doc": ["Decorator to indicate that annotations are not type hints.", "This works as class or function decorator.", "With a class, it applies recursively to all methods defined in that class (but not to methods defined in its superclasses or subclasses).", "This mutates the function(s) in place."]}
{"index": 7100, "name": "typing.no_type_check_decorator", "module": "typing", "doc": ["Decorator to give another decorator the no_type_check() effect.", "This wraps the decorator with something that wraps the decorated function in no_type_check()."]}
{"index": 7101, "name": "typing.type_check_only", "module": "typing", "doc": ["Decorator to mark a class or function to be unavailable at runtime.", "This decorator is itself not available at runtime.", "It is mainly intended to mark classes that are defined in type stub files if an implementation returns an instance of a private class:", "Note that returning instances of private classes is not recommended.", "It is usually preferable to make such classes public."]}
{"index": 7102, "name": "typing.Any", "module": "typing", "doc": ["Special type indicating an unconstrained type."]}
{"index": 7103, "name": "typing.NoReturn", "module": "typing", "doc": ["Special type indicating that a function never returns.", "For example:"]}
{"index": 7104, "name": "typing.Union", "module": "typing", "doc": ["Union type; Union[X, Y] means either X or Y.", "To define a union, use e.g.", "Union[int, str].", "Details:"]}
{"index": 7105, "name": "typing.Optional", "module": "typing", "doc": ["Optional type.", "Optional[X] is equivalent to Union[X, None].", "Note that this is not the same concept as an optional argument, which is one that has a default.", "An optional argument with a default does not require the Optional qualifier on its type annotation just because it is optional.", "For example:", "On the other hand, if an explicit value of None is allowed, the use of Optional is appropriate, whether the argument is optional or not.", "For example:"]}
{"index": 7106, "name": "typing.Tuple", "module": "typing", "doc": ["Tuple type; Tuple[X, Y] is the type of a tuple of two items with the first item of type X and the second of type Y.", "The type of the empty tuple can be written as Tuple[()].", "Example: Tuple[T1, T2] is a tuple of two elements corresponding to type variables T1 and T2.", "Tuple[int, float, str] is a tuple of an int, a float and a string.", "To specify a variable-length tuple of homogeneous type, use literal ellipsis, e.g.", "Tuple[int, ...].", "A plain Tuple is equivalent to Tuple[Any, ...], and in turn to tuple."]}
{"index": 7107, "name": "typing.Callable", "module": "typing", "doc": ["Callable type; Callable[[int], str] is a function of (int) -> str.", "The subscription syntax must always be used with exactly two values: the argument list and the return type.", "The argument list must be a list of types or an ellipsis; the return type must be a single type.", "There is no syntax to indicate optional or keyword arguments; such function types are rarely used as callback types.", "Callable[..., ReturnType] (literal ellipsis) can be used to type hint a callable taking any number of arguments and returning ReturnType.", "A plain Callable is equivalent to Callable[..., Any], and in turn to collections.abc.Callable."]}
{"index": 7108, "name": "typing.ClassVar", "module": "typing", "doc": ["Special type construct to mark class variables.", "As introduced in PEP 526, a variable annotation wrapped in ClassVar indicates that a given attribute is intended to be used as a class variable and should not be set on instances of that class.", "Usage:", "ClassVar accepts only types and cannot be further subscribed.", "ClassVar is not a class itself, and should not be used with isinstance() or issubclass().", "ClassVar does not change Python runtime behavior, but it can be used by third-party type checkers.", "For example, a type checker might flag the following code as an error:"]}
{"index": 7109, "name": "typing.AnyStr", "module": "typing", "doc": ["AnyStr is a type variable defined as AnyStr = TypeVar('AnyStr', str, bytes).", "It is meant to be used for functions that may accept any kind of string without allowing different kinds of strings to mix.", "For example:"]}
{"index": 7110, "name": "typing.TYPE_CHECKING", "module": "typing", "doc": ["A special constant that is assumed to be True by 3rd party static type checkers.", "It is False at runtime.", "Usage:", "Note that the first type annotation must be enclosed in quotes, making it a \u201cforward reference\u201d, to hide the expensive_mod reference from the interpreter runtime.", "Type annotations for local variables are not evaluated, so the second annotation does not need to be enclosed in quotes."]}
{"index": 7111, "name": "unicodedata.lookup", "module": "unicodedata", "doc": ["Look up character by name.", "If a character with the given name is found, return the corresponding character.", "If not found, KeyError is raised."]}
{"index": 7112, "name": "unicodedata.name", "module": "unicodedata", "doc": ["Returns the name assigned to the character chr as a string.", "If no name is defined, default is returned, or, if not given, ValueError is raised."]}
{"index": 7113, "name": "unicodedata.decimal", "module": "unicodedata", "doc": ["Returns the decimal value assigned to the character chr as integer.", "If no such value is defined, default is returned, or, if not given, ValueError is raised."]}
{"index": 7114, "name": "unicodedata.digit", "module": "unicodedata", "doc": ["Returns the digit value assigned to the character chr as integer.", "If no such value is defined, default is returned, or, if not given, ValueError is raised."]}
{"index": 7115, "name": "unicodedata.numeric", "module": "unicodedata", "doc": ["Returns the numeric value assigned to the character chr as float.", "If no such value is defined, default is returned, or, if not given, ValueError is raised."]}
{"index": 7116, "name": "unicodedata.category", "module": "unicodedata", "doc": ["Returns the general category assigned to the character chr as string."]}
{"index": 7117, "name": "unicodedata.bidirectional", "module": "unicodedata", "doc": ["Returns the bidirectional class assigned to the character chr as string.", "If no such value is defined, an empty string is returned."]}
{"index": 7118, "name": "unicodedata.combining", "module": "unicodedata", "doc": ["Returns the canonical combining class assigned to the character chr as integer.", "Returns 0 if no combining class is defined."]}
{"index": 7119, "name": "unicodedata.east_asian_width", "module": "unicodedata", "doc": ["Returns the east asian width assigned to the character chr as string."]}
{"index": 7120, "name": "unicodedata.mirrored", "module": "unicodedata", "doc": ["Returns the mirrored property assigned to the character chr as integer.", "Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise."]}
{"index": 7121, "name": "unicodedata.decomposition", "module": "unicodedata", "doc": ["Returns the character decomposition mapping assigned to the character chr as string.", "An empty string is returned in case no such mapping is defined."]}
{"index": 7122, "name": "unicodedata.normalize", "module": "unicodedata", "doc": ["Return the normal form form for the Unicode string unistr.", "Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.", "The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence.", "In Unicode, several characters can be expressed in various way.", "For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA).", "For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form.", "Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again.", "In addition to these two forms, there are two additional normal forms based on compatibility equivalence.", "In Unicode, certain characters are supported which normally would be unified with other characters.", "For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I).", "However, it is supported in Unicode for compatibility with existing character sets (e.g.", "gb2312).", "The normal form KD (NFKD) will apply the compatibility decomposition, i.e.", "replace all compatibility characters with their equivalents.", "The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition.", "Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal."]}
{"index": 7123, "name": "unicodedata.unidata_version", "module": "unicodedata", "doc": ["The version of the Unicode database used in this module."]}
{"index": 7124, "name": "unicodedata.ucd_3_2_0", "module": "unicodedata", "doc": ["This is an object that has the same methods as the entire module, but uses the Unicode database version 3.2 instead, for applications that require this specific version of the Unicode database (such as IDNA)."]}
{"index": 7125, "name": "id3", "module": "unicodedata", "doc": ["http://www.unicode.org/Public/11.0.0/ucd/NameAliases.txt"]}
{"index": 7126, "name": "id4", "module": "unicodedata", "doc": ["http://www.unicode.org/Public/11.0.0/ucd/NameAliases.txt"]}
{"index": 7127, "name": "cmdoption-unittest-b", "module": "unittest", "doc": ["The standard output and standard error streams are buffered during the test run.", "Output during a passing test is discarded.", "Output is echoed normally on test fail or error and is added to the failure messages."]}
{"index": 7128, "name": "cmdoption-unittest-c", "module": "unittest", "doc": ["Control-C during the test run waits for the current test to end and then reports all the results so far.", "A second Control-C raises the normal KeyboardInterrupt exception.", "See Signal Handling for the functions that provide this functionality."]}
{"index": 7129, "name": "cmdoption-unittest-f", "module": "unittest", "doc": ["Stop the test run on the first error or failure."]}
{"index": 7130, "name": "cmdoption-unittest-k", "module": "unittest", "doc": ["Only run test methods and classes that match the pattern or substring.", "This option may be used multiple times, in which case all test cases that match of the given patterns are included.", "Patterns that contain a wildcard character (*) are matched against the test name using fnmatch.fnmatchcase(); otherwise simple case-sensitive substring matching is used.", "Patterns are matched against the fully qualified test method name as imported by the test loader.", "For example, -k foo matches foo_tests.SomeTest.test_something, bar_tests.SomeTest.test_foo, but not bar_tests.FooTest.test_something."]}
{"index": 7131, "name": "cmdoption-unittest-locals", "module": "unittest", "doc": ["Show local variables in tracebacks."]}
{"index": 7132, "name": "cmdoption-unittest-discover-v", "module": "unittest", "doc": ["Verbose output"]}
{"index": 7133, "name": "cmdoption-unittest-discover-s", "module": "unittest", "doc": ["Directory to start discovery (.", "default)"]}
{"index": 7134, "name": "cmdoption-unittest-discover-p", "module": "unittest", "doc": ["Pattern to match test files (test*.py default)"]}
{"index": 7135, "name": "cmdoption-unittest-discover-t", "module": "unittest", "doc": ["Top level directory of project (defaults to start directory)"]}
{"index": 7136, "name": "unittest.skip", "module": "unittest", "doc": ["Unconditionally skip the decorated test.", "reason should describe why the test is being skipped."]}
{"index": 7137, "name": "unittest.skipIf", "module": "unittest", "doc": ["Skip the decorated test if condition is true."]}
{"index": 7138, "name": "unittest.skipUnless", "module": "unittest", "doc": ["Skip the decorated test unless condition is true."]}
{"index": 7139, "name": "unittest.expectedFailure", "module": "unittest", "doc": ["Mark the test as an expected failure.", "If the test fails it will be considered a success.", "If the test passes, it will be considered a failure."]}
{"index": 7140, "name": "unittest.SkipTest", "module": "unittest", "doc": ["This exception is raised to skip a test.", "Usually you can use TestCase.skipTest() or one of the skipping decorators instead of raising this directly."]}
{"index": 7141, "name": "unittest.TestCase", "module": "unittest", "doc": ["Instances of the TestCase class represent the logical test units in the unittest universe.", "This class is intended to be used as a base class, with specific tests being implemented by concrete subclasses.", "This class implements the interface needed by the test runner to allow it to drive the tests, and methods that the test code can use to check for and report various kinds of failure.", "Each instance of TestCase will run a single base method: the method named methodName.", "In most uses of TestCase, you will neither change the methodName nor reimplement the default runTest() method.", "TestCase instances provide three groups of methods: one group used to run the test, another used by the test implementation to check conditions and report failures, and some inquiry methods allowing information about the test itself to be gathered.", "Methods in the first group (running the test) are:", "The TestCase class provides several assert methods to check for and report failures.", "The following table lists the most commonly used methods (see the tables below for more assert methods):", "All the assert methods accept a msg argument that, if specified, is used as the error message on failure (see also longMessage).", "Note that the msg keyword argument can be passed to assertRaises(), assertRaisesRegex(), assertWarns(), assertWarnsRegex() only when they are used as a context manager.", "It is also possible to check the production of exceptions, warnings, and log messages using the following methods:", "There are also other methods used to perform more specific checks, such as:", "The assertEqual() method dispatches the equality check for objects of the same type to different type-specific methods.", "These methods are already implemented for most of the built-in types, but it\u2019s also possible to register new methods using addTypeEqualityFunc():", "The list of type-specific methods automatically used by assertEqual() are summarized in the following table.", "Note that it\u2019s usually not necessary to invoke these methods directly.", "Finally the TestCase provides the following methods and attributes:", "Testing frameworks can use the following methods to collect information on the test:"]}
{"index": 7142, "name": "unittest.TestCase.setUp", "module": "unittest", "doc": ["Method called to prepare the test fixture.", "This is called immediately before calling the test method; other than AssertionError or SkipTest, any exception raised by this method will be considered an error rather than a test failure.", "The default implementation does nothing."]}
{"index": 7143, "name": "unittest.TestCase.tearDown", "module": "unittest", "doc": ["Method called immediately after the test method has been called and the result recorded.", "This is called even if the test method raised an exception, so the implementation in subclasses may need to be particularly careful about checking internal state.", "Any exception, other than AssertionError or SkipTest, raised by this method will be considered an additional error rather than a test failure (thus increasing the total number of reported errors).", "This method will only be called if the setUp() succeeds, regardless of the outcome of the test method.", "The default implementation does nothing."]}
{"index": 7144, "name": "unittest.TestCase.setUpClass", "module": "unittest", "doc": ["A class method called before tests in an individual class are run.", "setUpClass is called with the class as the only argument and must be decorated as a classmethod():", "See Class and Module Fixtures for more details."]}
{"index": 7145, "name": "unittest.TestCase.tearDownClass", "module": "unittest", "doc": ["A class method called after tests in an individual class have run.", "tearDownClass is called with the class as the only argument and must be decorated as a classmethod():", "See Class and Module Fixtures for more details."]}
{"index": 7146, "name": "unittest.TestCase.run", "module": "unittest", "doc": ["Run the test, collecting the result into the TestResult object passed as result.", "If result is omitted or None, a temporary result object is created (by calling the defaultTestResult() method) and used.", "The result object is returned to run()\u2019s caller.", "The same effect may be had by simply calling the TestCase instance."]}
{"index": 7147, "name": "unittest.TestCase.skipTest", "module": "unittest", "doc": ["Calling this during a test method or setUp() skips the current test.", "See Skipping tests and expected failures for more information."]}
{"index": 7148, "name": "unittest.TestCase.subTest", "module": "unittest", "doc": ["Return a context manager which executes the enclosed code block as a subtest.", "msg and params are optional, arbitrary values which are displayed whenever a subtest fails, allowing you to identify them clearly.", "A test case can contain any number of subtest declarations, and they can be arbitrarily nested.", "See Distinguishing test iterations using subtests for more information."]}
{"index": 7149, "name": "unittest.TestCase.debug", "module": "unittest", "doc": ["Run the test without collecting the result.", "This allows exceptions raised by the test to be propagated to the caller, and can be used to support running tests under a debugger."]}
{"index": 7150, "name": "unittest.TestCase.assertEqual", "module": "unittest", "doc": ["Test that first and second are equal.", "If the values do not compare equal, the test will fail.", "In addition, if first and second are the exact same type and one of list, tuple, dict, set, frozenset or str or any type that a subclass registers with addTypeEqualityFunc() the type-specific equality function will be called in order to generate a more useful default error message (see also the list of type-specific methods)."]}
{"index": 7151, "name": "unittest.TestCase.assertNotEqual", "module": "unittest", "doc": ["Test that first and second are not equal.", "If the values do compare equal, the test will fail."]}
{"index": 7152, "name": "unittest.TestCase.assertTrue", "module": "unittest", "doc": ["Test that expr is true (or false).", "Note that this is equivalent to bool(expr) is True and not to expr is True (use assertIs(expr, True) for the latter).", "This method should also be avoided when more specific methods are available (e.g.", "assertEqual(a, b) instead of assertTrue(a == b)), because they provide a better error message in case of failure."]}
{"index": 7153, "name": "unittest.TestCase.assertFalse", "module": "unittest", "doc": ["Test that expr is true (or false).", "Note that this is equivalent to bool(expr) is True and not to expr is True (use assertIs(expr, True) for the latter).", "This method should also be avoided when more specific methods are available (e.g.", "assertEqual(a, b) instead of assertTrue(a == b)), because they provide a better error message in case of failure."]}
{"index": 7154, "name": "unittest.TestCase.assertIs", "module": "unittest", "doc": ["Test that first and second evaluate (or don\u2019t evaluate) to the same object."]}
{"index": 7155, "name": "unittest.TestCase.assertIsNot", "module": "unittest", "doc": ["Test that first and second evaluate (or don\u2019t evaluate) to the same object."]}
{"index": 7156, "name": "unittest.TestCase.assertIsNone", "module": "unittest", "doc": ["Test that expr is (or is not) None."]}
{"index": 7157, "name": "unittest.TestCase.assertIsNotNone", "module": "unittest", "doc": ["Test that expr is (or is not) None."]}
{"index": 7158, "name": "unittest.TestCase.assertIn", "module": "unittest", "doc": ["Test that first is (or is not) in second."]}
{"index": 7159, "name": "unittest.TestCase.assertNotIn", "module": "unittest", "doc": ["Test that first is (or is not) in second."]}
{"index": 7160, "name": "unittest.TestCase.assertIsInstance", "module": "unittest", "doc": ["Test that obj is (or is not) an instance of cls (which can be a class or a tuple of classes, as supported by isinstance()).", "To check for the exact type, use assertIs(type(obj), cls)."]}
{"index": 7161, "name": "unittest.TestCase.assertNotIsInstance", "module": "unittest", "doc": ["Test that obj is (or is not) an instance of cls (which can be a class or a tuple of classes, as supported by isinstance()).", "To check for the exact type, use assertIs(type(obj), cls)."]}
{"index": 7162, "name": "unittest.TestCase.assertRaises", "module": "unittest", "doc": ["Test that an exception is raised when callable is called with any positional or keyword arguments that are also passed to assertRaises().", "The test passes if exception is raised, is an error if another exception is raised, or fails if no exception is raised.", "To catch any of a group of exceptions, a tuple containing the exception classes may be passed as exception.", "If only the exception and possibly the msg arguments are given, return a context manager so that the code under test can be written inline rather than as a function:", "When used as a context manager, assertRaises() accepts the additional keyword argument msg.", "The context manager will store the caught exception object in its exception attribute.", "This can be useful if the intention is to perform additional checks on the exception raised:"]}
{"index": 7163, "name": "unittest.TestCase.assertRaisesRegex", "module": "unittest", "doc": ["Like assertRaises() but also tests that regex matches on the string representation of the raised exception.", "regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().", "Examples:", "or:"]}
{"index": 7164, "name": "unittest.TestCase.assertWarns", "module": "unittest", "doc": ["Test that a warning is triggered when callable is called with any positional or keyword arguments that are also passed to assertWarns().", "The test passes if warning is triggered and fails if it isn\u2019t.", "Any exception is an error.", "To catch any of a group of warnings, a tuple containing the warning classes may be passed as warnings.", "If only the warning and possibly the msg arguments are given, return a context manager so that the code under test can be written inline rather than as a function:", "When used as a context manager, assertWarns() accepts the additional keyword argument msg.", "The context manager will store the caught warning object in its warning attribute, and the source line which triggered the warnings in the filename and lineno attributes.", "This can be useful if the intention is to perform additional checks on the warning caught:", "This method works regardless of the warning filters in place when it is called."]}
{"index": 7165, "name": "unittest.TestCase.assertWarnsRegex", "module": "unittest", "doc": ["Like assertWarns() but also tests that regex matches on the message of the triggered warning.", "regex may be a regular expression object or a string containing a regular expression suitable for use by re.search().", "Example:", "or:"]}
{"index": 7166, "name": "unittest.TestCase.assertLogs", "module": "unittest", "doc": ["A context manager to test that at least one message is logged on the logger or one of its children, with at least the given level.", "If given, logger should be a logging.Logger object or a str giving the name of a logger.", "The default is the root logger, which will catch all messages.", "If given, level should be either a numeric logging level or its string equivalent (for example either \"ERROR\" or logging.ERROR).", "The default is logging.INFO.", "The test passes if at least one message emitted inside the with block matches the logger and level conditions, otherwise it fails.", "The object returned by the context manager is a recording helper which keeps tracks of the matching log messages.", "It has two attributes:", "Example:"]}
{"index": 7167, "name": "unittest.TestCase.records", "module": "unittest", "doc": ["A list of logging.LogRecord objects of the matching log messages."]}
{"index": 7168, "name": "unittest.TestCase.output", "module": "unittest", "doc": ["A list of str objects with the formatted output of matching messages."]}
{"index": 7169, "name": "unittest.TestCase.assertAlmostEqual", "module": "unittest", "doc": ["Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero.", "Note that these methods round the values to the given number of decimal places (i.e.", "like the round() function) and not significant digits.", "If delta is supplied instead of places then the difference between first and second must be less or equal to (or greater than) delta.", "Supplying both delta and places raises a TypeError."]}
{"index": 7170, "name": "unittest.TestCase.assertNotAlmostEqual", "module": "unittest", "doc": ["Test that first and second are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal places (default 7), and comparing to zero.", "Note that these methods round the values to the given number of decimal places (i.e.", "like the round() function) and not significant digits.", "If delta is supplied instead of places then the difference between first and second must be less or equal to (or greater than) delta.", "Supplying both delta and places raises a TypeError."]}
{"index": 7171, "name": "unittest.TestCase.assertGreater", "module": "unittest", "doc": ["Test that first is respectively >, >=, < or <= than second depending on the method name.", "If not, the test will fail:"]}
{"index": 7172, "name": "unittest.TestCase.assertGreaterEqual", "module": "unittest", "doc": ["Test that first is respectively >, >=, < or <= than second depending on the method name.", "If not, the test will fail:"]}
{"index": 7173, "name": "unittest.TestCase.assertLess", "module": "unittest", "doc": ["Test that first is respectively >, >=, < or <= than second depending on the method name.", "If not, the test will fail:"]}
{"index": 7174, "name": "unittest.TestCase.assertLessEqual", "module": "unittest", "doc": ["Test that first is respectively >, >=, < or <= than second depending on the method name.", "If not, the test will fail:"]}
{"index": 7175, "name": "unittest.TestCase.assertRegex", "module": "unittest", "doc": ["Test that a regex search matches (or does not match) text.", "In case of failure, the error message will include the pattern and the text (or the pattern and the part of text that unexpectedly matched).", "regex may be a regular expression object or a string containing a regular expression suitable for use by re.search()."]}
{"index": 7176, "name": "unittest.TestCase.assertNotRegex", "module": "unittest", "doc": ["Test that a regex search matches (or does not match) text.", "In case of failure, the error message will include the pattern and the text (or the pattern and the part of text that unexpectedly matched).", "regex may be a regular expression object or a string containing a regular expression suitable for use by re.search()."]}
{"index": 7177, "name": "unittest.TestCase.assertCountEqual", "module": "unittest", "doc": ["Test that sequence first contains the same elements as second, regardless of their order.", "When they don\u2019t, an error message listing the differences between the sequences will be generated.", "Duplicate elements are not ignored when comparing first and second.", "It verifies whether each element has the same count in both sequences.", "Equivalent to: assertEqual(Counter(list(first)), Counter(list(second))) but works with sequences of unhashable objects as well."]}
{"index": 7178, "name": "unittest.TestCase.addTypeEqualityFunc", "module": "unittest", "doc": ["Registers a type-specific method called by assertEqual() to check if two objects of exactly the same typeobj (not subclasses) compare equal.", "function must take two positional arguments and a third msg=None keyword argument just as assertEqual() does.", "It must raise self.failureException(msg) when inequality between the first two parameters is detected \u2013 possibly providing useful information and explaining the inequalities in details in the error message."]}
{"index": 7179, "name": "unittest.TestCase.assertMultiLineEqual", "module": "unittest", "doc": ["Test that the multiline string first is equal to the string second.", "When not equal a diff of the two strings highlighting the differences will be included in the error message.", "This method is used by default when comparing strings with assertEqual()."]}
{"index": 7180, "name": "unittest.TestCase.assertSequenceEqual", "module": "unittest", "doc": ["Tests that two sequences are equal.", "If a seq_type is supplied, both first and second must be instances of seq_type or a failure will be raised.", "If the sequences are different an error message is constructed that shows the difference between the two.", "This method is not called directly by assertEqual(), but it\u2019s used to implement assertListEqual() and assertTupleEqual()."]}
{"index": 7181, "name": "unittest.TestCase.assertListEqual", "module": "unittest", "doc": ["Tests that two lists or tuples are equal.", "If not, an error message is constructed that shows only the differences between the two.", "An error is also raised if either of the parameters are of the wrong type.", "These methods are used by default when comparing lists or tuples with assertEqual()."]}
{"index": 7182, "name": "unittest.TestCase.assertTupleEqual", "module": "unittest", "doc": ["Tests that two lists or tuples are equal.", "If not, an error message is constructed that shows only the differences between the two.", "An error is also raised if either of the parameters are of the wrong type.", "These methods are used by default when comparing lists or tuples with assertEqual()."]}
{"index": 7183, "name": "unittest.TestCase.assertSetEqual", "module": "unittest", "doc": ["Tests that two sets are equal.", "If not, an error message is constructed that lists the differences between the sets.", "This method is used by default when comparing sets or frozensets with assertEqual().", "Fails if either of first or second does not have a set.difference() method."]}
{"index": 7184, "name": "unittest.TestCase.assertDictEqual", "module": "unittest", "doc": ["Test that two dictionaries are equal.", "If not, an error message is constructed that shows the differences in the dictionaries.", "This method will be used by default to compare dictionaries in calls to assertEqual()."]}
{"index": 7185, "name": "unittest.TestCase.fail", "module": "unittest", "doc": ["Signals a test failure unconditionally, with msg or None for the error message."]}
{"index": 7186, "name": "unittest.TestCase.failureException", "module": "unittest", "doc": ["This class attribute gives the exception raised by the test method.", "If a test framework needs to use a specialized exception, possibly to carry additional information, it must subclass this exception in order to \u201cplay fair\u201d with the framework.", "The initial value of this attribute is AssertionError."]}
{"index": 7187, "name": "unittest.TestCase.longMessage", "module": "unittest", "doc": ["This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails.", "True is the default value.", "In this case, the custom message is appended to the end of the standard failure message.", "When set to False, the custom message replaces the standard message.", "The class setting can be overridden in individual test methods by assigning an instance attribute, self.longMessage, to True or False before calling the assert methods.", "The class setting gets reset before each test call."]}
{"index": 7188, "name": "unittest.TestCase.maxDiff", "module": "unittest", "doc": ["This attribute controls the maximum length of diffs output by assert methods that report diffs on failure.", "It defaults to 80*8 characters.", "Assert methods affected by this attribute are assertSequenceEqual() (including all the sequence comparison methods that delegate to it), assertDictEqual() and assertMultiLineEqual().", "Setting maxDiff to None means that there is no maximum length of diffs."]}
{"index": 7189, "name": "unittest.TestCase.countTestCases", "module": "unittest", "doc": ["Return the number of tests represented by this test object.", "For TestCase instances, this will always be 1."]}
{"index": 7190, "name": "unittest.TestCase.defaultTestResult", "module": "unittest", "doc": ["Return an instance of the test result class that should be used for this test case class (if no other result instance is provided to the run() method).", "For TestCase instances, this will always be an instance of TestResult; subclasses of TestCase should override this as necessary."]}
{"index": 7191, "name": "unittest.TestCase.id", "module": "unittest", "doc": ["Return a string identifying the specific test case.", "This is usually the full name of the test method, including the module and class name."]}
{"index": 7192, "name": "unittest.TestCase.shortDescription", "module": "unittest", "doc": ["Returns a description of the test, or None if no description has been provided.", "The default implementation of this method returns the first line of the test method\u2019s docstring, if available, or None."]}
{"index": 7193, "name": "unittest.TestCase.addCleanup", "module": "unittest", "doc": ["Add a function to be called after tearDown() to cleanup resources used during the test.", "Functions will be called in reverse order to the order they are added (LIFO).", "They are called with any arguments and keyword arguments passed into addCleanup() when they are added.", "If setUp() fails, meaning that tearDown() is not called, then any cleanup functions added will still be called."]}
{"index": 7194, "name": "unittest.TestCase.doCleanups", "module": "unittest", "doc": ["This method is called unconditionally after tearDown(), or after setUp() if setUp() raises an exception.", "It is responsible for calling all the cleanup functions added by addCleanup().", "If you need cleanup functions to be called prior to tearDown() then you can call doCleanups() yourself.", "doCleanups() pops methods off the stack of cleanup functions one at a time, so it can be called at any time."]}
{"index": 7195, "name": "unittest.FunctionTestCase", "module": "unittest", "doc": ["This class implements the portion of the TestCase interface which allows the test runner to drive the test, but does not provide the methods which test code can use to check and report errors.", "This is used to create test cases using legacy test code, allowing it to be integrated into a unittest-based test framework."]}
{"index": 7196, "name": "unittest.TestSuite", "module": "unittest", "doc": ["This class represents an aggregation of individual test cases and test suites.", "The class presents the interface needed by the test runner to allow it to be run as any other test case.", "Running a TestSuite instance is the same as iterating over the suite, running each test individually.", "If tests is given, it must be an iterable of individual test cases or other test suites that will be used to build the suite initially.", "Additional methods are provided to add test cases and suites to the collection later on.", "TestSuite objects behave much like TestCase objects, except they do not actually implement a test.", "Instead, they are used to aggregate tests into groups of tests that should be run together.", "Some additional methods are available to add tests to TestSuite instances:", "TestSuite shares the following methods with TestCase:", "In the typical usage of a TestSuite object, the run() method is invoked by a TestRunner rather than by the end-user test harness."]}
{"index": 7197, "name": "unittest.TestSuite.addTest", "module": "unittest", "doc": ["Add a TestCase or TestSuite to the suite."]}
{"index": 7198, "name": "unittest.TestSuite.addTests", "module": "unittest", "doc": ["Add all the tests from an iterable of TestCase and TestSuite instances to this test suite.", "This is equivalent to iterating over tests, calling addTest() for each element."]}
{"index": 7199, "name": "unittest.TestSuite.run", "module": "unittest", "doc": ["Run the tests associated with this suite, collecting the result into the test result object passed as result.", "Note that unlike TestCase.run(), TestSuite.run() requires the result object to be passed in."]}
{"index": 7200, "name": "unittest.TestSuite.debug", "module": "unittest", "doc": ["Run the tests associated with this suite without collecting the result.", "This allows exceptions raised by the test to be propagated to the caller and can be used to support running tests under a debugger."]}
{"index": 7201, "name": "unittest.TestSuite.countTestCases", "module": "unittest", "doc": ["Return the number of tests represented by this test object, including all individual tests and sub-suites."]}
{"index": 7202, "name": "unittest.TestSuite.__iter__", "module": "unittest", "doc": ["Tests grouped by a TestSuite are always accessed by iteration.", "Subclasses can lazily provide tests by overriding __iter__().", "Note that this method may be called several times on a single suite (for example when counting tests or comparing for equality) so the tests returned by repeated iterations before TestSuite.run() must be the same for each call iteration.", "After TestSuite.run(), callers should not rely on the tests returned by this method unless the caller uses a subclass that overrides TestSuite._removeTestAtIndex() to preserve test references."]}
{"index": 7203, "name": "unittest.TestLoader", "module": "unittest", "doc": ["The TestLoader class is used to create test suites from classes and modules.", "Normally, there is no need to create an instance of this class; the unittest module provides an instance that can be shared as unittest.defaultTestLoader.", "Using a subclass or instance, however, allows customization of some configurable properties.", "TestLoader objects have the following attributes:", "TestLoader objects have the following methods:", "The following attributes of a TestLoader can be configured either by subclassing or assignment on an instance:"]}
{"index": 7204, "name": "unittest.TestLoader.errors", "module": "unittest", "doc": ["A list of the non-fatal errors encountered while loading tests.", "Not reset by the loader at any point.", "Fatal errors are signalled by the relevant a method raising an exception to the caller.", "Non-fatal errors are also indicated by a synthetic test that will raise the original error when run."]}
{"index": 7205, "name": "unittest.TestLoader.loadTestsFromTestCase", "module": "unittest", "doc": ["Return a suite of all test cases contained in the TestCase-derived testCaseClass.", "A test case instance is created for each method named by getTestCaseNames().", "By default these are the method names beginning with test.", "If getTestCaseNames() returns no methods, but the runTest() method is implemented, a single test case is created for that method instead."]}
{"index": 7206, "name": "unittest.TestLoader.loadTestsFromModule", "module": "unittest", "doc": ["Return a suite of all test cases contained in the given module.", "This method searches module for classes derived from TestCase and creates an instance of the class for each test method defined for the class.", "If a module provides a load_tests function it will be called to load the tests.", "This allows modules to customize test loading.", "This is the load_tests protocol.", "The pattern argument is passed as the third argument to load_tests."]}
{"index": 7207, "name": "unittest.TestLoader.loadTestsFromName", "module": "unittest", "doc": ["Return a suite of all test cases given a string specifier.", "The specifier name is a \u201cdotted name\u201d that may resolve either to a module, a test case class, a test method within a test case class, a TestSuite instance, or a callable object which returns a TestCase or TestSuite instance.", "These checks are applied in the order listed here; that is, a method on a possible test case class will be picked up as \u201ca test method within a test case class\u201d, rather than \u201ca callable object\u201d.", "For example, if you have a module SampleTests containing a TestCase-derived class SampleTestCase with three test methods (test_one(), test_two(), and test_three()), the specifier 'SampleTests.SampleTestCase' would cause this method to return a suite which will run all three test methods.", "Using the specifier 'SampleTests.SampleTestCase.test_two' would cause it to return a test suite which will run only the test_two() test method.", "The specifier can refer to modules and packages which have not been imported; they will be imported as a side-effect.", "The method optionally resolves name relative to the given module."]}
{"index": 7208, "name": "unittest.TestLoader.loadTestsFromNames", "module": "unittest", "doc": ["Similar to loadTestsFromName(), but takes a sequence of names rather than a single name.", "The return value is a test suite which supports all the tests defined for each name."]}
{"index": 7209, "name": "unittest.TestLoader.getTestCaseNames", "module": "unittest", "doc": ["Return a sorted sequence of method names found within testCaseClass; this should be a subclass of TestCase."]}
{"index": 7210, "name": "unittest.TestLoader.discover", "module": "unittest", "doc": ["Find all the test modules by recursing into subdirectories from the specified start directory, and return a TestSuite object containing them.", "Only test files that match pattern will be loaded.", "(Using shell style pattern matching.)", "Only module names that are importable (i.e.", "are valid Python identifiers) will be loaded.", "All test modules must be importable from the top level of the project.", "If the start directory is not the top level directory then the top level directory must be specified separately.", "If importing a module fails, for example due to a syntax error, then this will be recorded as a single error and discovery will continue.", "If the import failure is due to SkipTest being raised, it will be recorded as a skip instead of an error.", "If a package (a directory containing a file named __init__.py) is found, the package will be checked for a load_tests function.", "If this exists then it will be called package.load_tests(loader, tests, pattern).", "Test discovery takes care to ensure that a package is only checked for tests once during an invocation, even if the load_tests function itself calls loader.discover.", "If load_tests exists then discovery does not recurse into the package, load_tests is responsible for loading all tests in the package.", "The pattern is deliberately not stored as a loader attribute so that packages can continue discovery themselves.", "top_level_dir is stored so load_tests does not need to pass this argument in to loader.discover().", "start_dir can be a dotted module name as well as a directory."]}
{"index": 7211, "name": "unittest.TestLoader.testMethodPrefix", "module": "unittest", "doc": ["String giving the prefix of method names which will be interpreted as test methods.", "The default value is 'test'.", "This affects getTestCaseNames() and all the loadTestsFrom*() methods."]}
{"index": 7212, "name": "unittest.TestLoader.sortTestMethodsUsing", "module": "unittest", "doc": ["Function to be used to compare method names when sorting them in getTestCaseNames() and all the loadTestsFrom*() methods."]}
{"index": 7213, "name": "unittest.TestLoader.suiteClass", "module": "unittest", "doc": ["Callable object that constructs a test suite from a list of tests.", "No methods on the resulting object are needed.", "The default value is the TestSuite class.", "This affects all the loadTestsFrom*() methods."]}
{"index": 7214, "name": "unittest.TestLoader.testNamePatterns", "module": "unittest", "doc": ["List of Unix shell-style wildcard test name patterns that test methods have to match to be included in test suites (see -v option).", "If this attribute is not None (the default), all test methods to be included in test suites must match one of the patterns in this list.", "Note that matches are always performed using fnmatch.fnmatchcase(), so unlike patterns passed to the -v option, simple substring patterns will have to be converted using * wildcards.", "This affects all the loadTestsFrom*() methods."]}
{"index": 7215, "name": "unittest.TestResult", "module": "unittest", "doc": ["This class is used to compile information about which tests have succeeded and which have failed.", "A TestResult object stores the results of a set of tests.", "The TestCase and TestSuite classes ensure that results are properly recorded; test authors do not need to worry about recording the outcome of tests.", "Testing frameworks built on top of unittest may want access to the TestResult object generated by running a set of tests for reporting purposes; a TestResult instance is returned by the TestRunner.run() method for this purpose.", "TestResult instances have the following attributes that will be of interest when inspecting the results of running a set of tests:", "The following methods of the TestResult class are used to maintain the internal data structures, and may be extended in subclasses to support additional reporting requirements.", "This is particularly useful in building tools which support interactive reporting while tests are being run."]}
{"index": 7216, "name": "unittest.TestResult.errors", "module": "unittest", "doc": ["A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "Each tuple represents a test which raised an unexpected exception."]}
{"index": 7217, "name": "unittest.TestResult.failures", "module": "unittest", "doc": ["A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "Each tuple represents a test where a failure was explicitly signalled using the TestCase.assert*() methods."]}
{"index": 7218, "name": "unittest.TestResult.skipped", "module": "unittest", "doc": ["A list containing 2-tuples of TestCase instances and strings holding the reason for skipping the test."]}
{"index": 7219, "name": "unittest.TestResult.expectedFailures", "module": "unittest", "doc": ["A list containing 2-tuples of TestCase instances and strings holding formatted tracebacks.", "Each tuple represents an expected failure of the test case."]}
{"index": 7220, "name": "unittest.TestResult.unexpectedSuccesses", "module": "unittest", "doc": ["A list containing TestCase instances that were marked as expected failures, but succeeded."]}
{"index": 7221, "name": "unittest.TestResult.shouldStop", "module": "unittest", "doc": ["Set to True when the execution of tests should stop by stop()."]}
{"index": 7222, "name": "unittest.TestResult.testsRun", "module": "unittest", "doc": ["The total number of tests run so far."]}
{"index": 7223, "name": "unittest.TestResult.buffer", "module": "unittest", "doc": ["If set to true, sys.stdout and sys.stderr will be buffered in between startTest() and stopTest() being called.", "Collected output will only be echoed onto the real sys.stdout and sys.stderr if the test fails or errors.", "Any output is also attached to the failure / error message."]}
{"index": 7224, "name": "unittest.TestResult.failfast", "module": "unittest", "doc": ["If set to true stop() will be called on the first failure or error, halting the test run."]}
{"index": 7225, "name": "unittest.TestResult.tb_locals", "module": "unittest", "doc": ["If set to true then local variables will be shown in tracebacks."]}
{"index": 7226, "name": "unittest.TestResult.wasSuccessful", "module": "unittest", "doc": ["Return True if all tests run so far have passed, otherwise returns False."]}
{"index": 7227, "name": "unittest.TestResult.stop", "module": "unittest", "doc": ["This method can be called to signal that the set of tests being run should be aborted by setting the shouldStop attribute to True.", "TestRunner objects should respect this flag and return without running any additional tests.", "For example, this feature is used by the TextTestRunner class to stop the test framework when the user signals an interrupt from the keyboard.", "Interactive tools which provide TestRunner implementations can use this in a similar manner."]}
{"index": 7228, "name": "unittest.TestResult.startTest", "module": "unittest", "doc": ["Called when the test case test is about to be run."]}
{"index": 7229, "name": "unittest.TestResult.stopTest", "module": "unittest", "doc": ["Called after the test case test has been executed, regardless of the outcome."]}
{"index": 7230, "name": "unittest.TestResult.startTestRun", "module": "unittest", "doc": ["Called once before any tests are executed."]}
{"index": 7231, "name": "unittest.TestResult.stopTestRun", "module": "unittest", "doc": ["Called once after all tests are executed."]}
{"index": 7232, "name": "unittest.TestResult.addError", "module": "unittest", "doc": ["Called when the test case test raises an unexpected exception.", "err is a tuple of the form returned by sys.exc_info(): (type, value, traceback).", "The default implementation appends a tuple (test, formatted_err) to the instance\u2019s errors attribute, where formatted_err is a formatted traceback derived from err."]}
{"index": 7233, "name": "unittest.TestResult.addFailure", "module": "unittest", "doc": ["Called when the test case test signals a failure.", "err is a tuple of the form returned by sys.exc_info(): (type, value, traceback).", "The default implementation appends a tuple (test, formatted_err) to the instance\u2019s failures attribute, where formatted_err is a formatted traceback derived from err."]}
{"index": 7234, "name": "unittest.TestResult.addSuccess", "module": "unittest", "doc": ["Called when the test case test succeeds.", "The default implementation does nothing."]}
{"index": 7235, "name": "unittest.TestResult.addSkip", "module": "unittest", "doc": ["Called when the test case test is skipped.", "reason is the reason the test gave for skipping.", "The default implementation appends a tuple (test, reason) to the instance\u2019s skipped attribute."]}
{"index": 7236, "name": "unittest.TestResult.addExpectedFailure", "module": "unittest", "doc": ["Called when the test case test fails, but was marked with the expectedFailure() decorator.", "The default implementation appends a tuple (test, formatted_err) to the instance\u2019s expectedFailures attribute, where formatted_err is a formatted traceback derived from err."]}
{"index": 7237, "name": "unittest.TestResult.addUnexpectedSuccess", "module": "unittest", "doc": ["Called when the test case test was marked with the expectedFailure() decorator, but succeeded.", "The default implementation appends the test to the instance\u2019s unexpectedSuccesses attribute."]}
{"index": 7238, "name": "unittest.TestResult.addSubTest", "module": "unittest", "doc": ["Called when a subtest finishes.", "test is the test case corresponding to the test method.", "subtest is a custom TestCase instance describing the subtest.", "If outcome is None, the subtest succeeded.", "Otherwise, it failed with an exception where outcome is a tuple of the form returned by sys.exc_info(): (type, value, traceback).", "The default implementation does nothing when the outcome is a success, and records subtest failures as normal failures."]}
{"index": 7239, "name": "unittest.TextTestResult", "module": "unittest", "doc": ["A concrete implementation of TestResult used by the TextTestRunner."]}
{"index": 7240, "name": "unittest.defaultTestLoader", "module": "unittest", "doc": ["Instance of the TestLoader class intended to be shared.", "If no customization of the TestLoader is needed, this instance can be used instead of repeatedly creating new instances."]}
{"index": 7241, "name": "unittest.TextTestRunner", "module": "unittest", "doc": ["A basic test runner implementation that outputs results to a stream.", "If stream is None, the default, sys.stderr is used as the output stream.", "This class has a few configurable parameters, but is essentially very simple.", "Graphical applications which run test suites should provide alternate implementations.", "Such implementations should accept **kwargs as the interface to construct runners changes when features are added to unittest.", "By default this runner shows DeprecationWarning, PendingDeprecationWarning, ResourceWarning and ImportWarning even if they are ignored by default.", "Deprecation warnings caused by deprecated unittest methods are also special-cased and, when the warning filters are 'default' or 'always', they will appear only once per-module, in order to avoid too many warning messages.", "This behavior can be overridden using Python\u2019s -Wd or -Wa options (see Warning control) and leaving warnings to None."]}
{"index": 7242, "name": "unittest.TextTestRunner._makeResult", "module": "unittest", "doc": ["This method returns the instance of TestResult used by run().", "It is not intended to be called directly, but can be overridden in subclasses to provide a custom TestResult.", "_makeResult() instantiates the class or callable passed in the TextTestRunner constructor as the resultclass argument.", "It defaults to TextTestResult if no resultclass is provided.", "The result class is instantiated with the following arguments:"]}
{"index": 7243, "name": "unittest.TextTestRunner.run", "module": "unittest", "doc": ["This method is the main public interface to the TextTestRunner.", "This method takes a TestSuite or TestCase instance.", "A TestResult is created by calling _makeResult() and the test(s) are run and the results printed to stdout."]}
{"index": 7244, "name": "unittest.main", "module": "unittest", "doc": ["A command-line program that loads a set of tests from module and runs them; this is primarily for making test modules conveniently executable.", "The simplest use for this function is to include the following line at the end of a test script:", "You can run tests with more detailed information by passing in the verbosity argument:", "The defaultTest argument is either the name of a single test or an iterable of test names to run if no test names are specified via argv.", "If not specified or None and no test names are provided via argv, all tests found in module are run.", "The argv argument can be a list of options passed to the program, with the first element being the program name.", "If not specified or None, the values of sys.argv are used.", "The testRunner argument can either be a test runner class or an already created instance of it.", "By default main calls sys.exit() with an exit code indicating success or failure of the tests run.", "The testLoader argument has to be a TestLoader instance, and defaults to defaultTestLoader.", "main supports being used from the interactive interpreter by passing in the argument exit=False.", "This displays the result on standard output without calling sys.exit():", "The failfast, catchbreak and buffer parameters have the same effect as the same-name command-line options.", "The warnings argument specifies the warning filter that should be used while running the tests.", "If it\u2019s not specified, it will remain None if a -W option is passed to python (see Warning control), otherwise it will be set to 'default'.", "Calling main actually returns an instance of the TestProgram class.", "This stores the result of the tests run as the result attribute."]}
{"index": 7245, "name": "unittest.installHandler", "module": "unittest", "doc": ["Install the control-c handler.", "When a signal.SIGINT is received (usually in response to the user pressing control-c) all registered results have stop() called."]}
{"index": 7246, "name": "unittest.registerResult", "module": "unittest", "doc": ["Register a TestResult object for control-c handling.", "Registering a result stores a weak reference to it, so it doesn\u2019t prevent the result from being garbage collected.", "Registering a TestResult object has no side-effects if control-c handling is not enabled, so test frameworks can unconditionally register all results they create independently of whether or not handling is enabled."]}
{"index": 7247, "name": "unittest.removeResult", "module": "unittest", "doc": ["Remove a registered result.", "Once a result has been removed then stop() will no longer be called on that result object in response to a control-c."]}
{"index": 7248, "name": "unittest.removeHandler", "module": "unittest", "doc": ["When called without arguments this function removes the control-c handler if it has been installed.", "This function can also be used as a test decorator to temporarily remove the handler while the test is being executed:"]}
{"index": 7249, "name": "id3", "module": "unittest", "doc": ["There are also generator expressions and more advanced uses of generators, but we aren\u2019t concerned about them here.", "A very good introduction to generators and how powerful they are is: Generator Tricks for Systems Programmers."]}
{"index": 7250, "name": "id5", "module": "unittest", "doc": ["An exception to this rule are the non-callable mocks.", "Attributes use the callable variant because otherwise non-callable mocks couldn\u2019t have callable methods."]}
{"index": 7251, "name": "unittest.mock.Mock", "module": "unittest", "doc": ["Create a new Mock object.", "Mock takes several optional arguments that specify the behaviour of the Mock object:", "Mocks can also be called with arbitrary keyword arguments.", "These will be used to set attributes on the mock after it is created.", "See the configure_mock() method for details."]}
{"index": 7252, "name": "unittest.mock.Mock.assert_called", "module": "unittest", "doc": ["Assert that the mock was called at least once."]}
{"index": 7253, "name": "unittest.mock.Mock.assert_called_once", "module": "unittest", "doc": ["Assert that the mock was called exactly once."]}
{"index": 7254, "name": "unittest.mock.Mock.assert_called_with", "module": "unittest", "doc": ["This method is a convenient way of asserting that calls are made in a particular way:"]}
{"index": 7255, "name": "unittest.mock.Mock.assert_called_once_with", "module": "unittest", "doc": ["Assert that the mock was called exactly once and that that call was with the specified arguments."]}
{"index": 7256, "name": "unittest.mock.Mock.assert_any_call", "module": "unittest", "doc": ["assert the mock has been called with the specified arguments.", "The assert passes if the mock has ever been called, unlike assert_called_with() and assert_called_once_with() that only pass if the call is the most recent one, and in the case of assert_called_once_with() it must also be the only call."]}
{"index": 7257, "name": "unittest.mock.Mock.assert_has_calls", "module": "unittest", "doc": ["assert the mock has been called with the specified calls.", "The mock_calls list is checked for the calls.", "If any_order is false (the default) then the calls must be sequential.", "There can be extra calls before or after the specified calls.", "If any_order is true then the calls can be in any order, but they must all appear in mock_calls."]}
{"index": 7258, "name": "unittest.mock.Mock.assert_not_called", "module": "unittest", "doc": ["Assert the mock was never called."]}
{"index": 7259, "name": "unittest.mock.Mock.reset_mock", "module": "unittest", "doc": ["The reset_mock method resets all the call attributes on a mock object:", "This can be useful where you want to make a series of assertions that reuse the same object.", "Note that reset_mock() doesn\u2019t clear the return value, side_effect or any child attributes you have set using normal assignment by default.", "In case you want to reset return_value or side_effect, then pass the corresponding parameter as True.", "Child mocks and the return value mock (if any) are reset as well."]}
{"index": 7260, "name": "unittest.mock.Mock.mock_add_spec", "module": "unittest", "doc": ["Add a spec to a mock.", "spec can either be an object or a list of strings.", "Only attributes on the spec can be fetched as attributes from the mock.", "If spec_set is true then only attributes on the spec can be set."]}
{"index": 7261, "name": "unittest.mock.Mock.attach_mock", "module": "unittest", "doc": ["Attach a mock as an attribute of this one, replacing its name and parent.", "Calls to the attached mock will be recorded in the method_calls and mock_calls attributes of this one."]}
{"index": 7262, "name": "unittest.mock.Mock.configure_mock", "module": "unittest", "doc": ["Set attributes on the mock through keyword arguments.", "Attributes plus return values and side effects can be set on child mocks using standard dot notation and unpacking a dictionary in the method call:", "The same thing can be achieved in the constructor call to mocks:", "configure_mock() exists to make it easier to do configuration after the mock has been created."]}
{"index": 7263, "name": "unittest.mock.Mock.__dir__", "module": "unittest", "doc": ["Mock objects limit the results of dir(some_mock) to useful results.", "For mocks with a spec this includes all the permitted attributes for the mock.", "See FILTER_DIR for what this filtering does, and how to switch it off."]}
{"index": 7264, "name": "unittest.mock.Mock._get_child_mock", "module": "unittest", "doc": ["Create the child mocks for attributes and return value.", "By default child mocks will be the same type as the parent.", "Subclasses of Mock may want to override this to customize the way child mocks are made.", "For non-callable mocks the callable variant will be used (rather than any custom subclass)."]}
{"index": 7265, "name": "unittest.mock.Mock.called", "module": "unittest", "doc": ["A boolean representing whether or not the mock object has been called:"]}
{"index": 7266, "name": "unittest.mock.Mock.call_count", "module": "unittest", "doc": ["An integer telling you how many times the mock object has been called:"]}
{"index": 7267, "name": "unittest.mock.Mock.return_value", "module": "unittest", "doc": ["Set this to configure the value returned by calling the mock:", "The default return value is a mock object and you can configure it in the normal way:", "return_value can also be set in the constructor:"]}
{"index": 7268, "name": "unittest.mock.Mock.side_effect", "module": "unittest", "doc": ["This can either be a function to be called when the mock is called, an iterable or an exception (class or instance) to be raised.", "If you pass in a function it will be called with same arguments as the mock and unless the function returns the DEFAULT singleton the call to the mock will then return whatever the function returns.", "If the function returns DEFAULT then the mock will return its normal value (from the return_value).", "If you pass in an iterable, it is used to retrieve an iterator which must yield a value on every call.", "This value can either be an exception instance to be raised, or a value to be returned from the call to the mock (DEFAULT handling is identical to the function case).", "An example of a mock that raises an exception (to test exception handling of an API):", "Using side_effect to return a sequence of values:", "Using a callable:", "side_effect can be set in the constructor.", "Here\u2019s an example that adds one to the value the mock is called with and returns it:", "Setting side_effect to None clears it:"]}
{"index": 7269, "name": "unittest.mock.Mock.call_args", "module": "unittest", "doc": ["This is either None (if the mock hasn\u2019t been called), or the arguments that the mock was last called with.", "This will be in the form of a tuple: the first member is any ordered arguments the mock was called with (or an empty tuple) and the second member is any keyword arguments (or an empty dictionary).", "call_args, along with members of the lists call_args_list, method_calls and mock_calls are call objects.", "These are tuples, so they can be unpacked to get at the individual arguments and make more complex assertions.", "See calls as tuples."]}
{"index": 7270, "name": "unittest.mock.Mock.call_args_list", "module": "unittest", "doc": ["This is a list of all the calls made to the mock object in sequence (so the length of the list is the number of times it has been called).", "Before any calls have been made it is an empty list.", "The call object can be used for conveniently constructing lists of calls to compare with call_args_list.", "Members of call_args_list are call objects.", "These can be unpacked as tuples to get at the individual arguments.", "See calls as tuples."]}
{"index": 7271, "name": "unittest.mock.Mock.method_calls", "module": "unittest", "doc": ["As well as tracking calls to themselves, mocks also track calls to methods and attributes, and their methods and attributes:", "Members of method_calls are call objects.", "These can be unpacked as tuples to get at the individual arguments.", "See calls as tuples."]}
{"index": 7272, "name": "unittest.mock.Mock.mock_calls", "module": "unittest", "doc": ["mock_calls records all calls to the mock object, its methods, magic methods and return value mocks.", "Members of mock_calls are call objects.", "These can be unpacked as tuples to get at the individual arguments.", "See calls as tuples."]}
{"index": 7273, "name": "unittest.mock.Mock.__class__", "module": "unittest", "doc": ["Normally the __class__ attribute of an object will return its type.", "For a mock object with a spec, __class__ returns the spec class instead.", "This allows mock objects to pass isinstance() tests for the object they are replacing / masquerading as:", "__class__ is assignable to, this allows a mock to pass an isinstance() check without forcing you to use a spec:"]}
{"index": 7274, "name": "unittest.mock.NonCallableMock", "module": "unittest", "doc": ["A non-callable version of Mock.", "The constructor parameters have the same meaning of Mock, with the exception of return_value and side_effect which have no meaning on a non-callable mock."]}
{"index": 7275, "name": "unittest.mock.PropertyMock", "module": "unittest", "doc": ["A mock intended to be used as a property, or other descriptor, on a class.", "PropertyMock provides __get__() and __set__() methods so you can specify a return value when it is fetched.", "Fetching a PropertyMock instance from an object calls the mock, with no args.", "Setting it calls the mock with the value being set."]}
{"index": 7276, "name": "id3", "module": "unittest", "doc": ["The only exceptions are magic methods and attributes (those that have leading and trailing double underscores).", "Mock doesn\u2019t create these but instead raises an AttributeError.", "This is because the interpreter will often implicitly request these methods, and gets very confused to get a new Mock object when it expects a magic method.", "If you need magic method support see magic methods."]}
{"index": 7277, "name": "unittest.mock.patch", "module": "unittest", "doc": ["patch() acts as a function decorator, class decorator or a context manager.", "Inside the body of the function or with statement, the target is patched with a new object.", "When the function/with statement exits the patch is undone.", "If new is omitted, then the target is replaced with a MagicMock.", "If patch() is used as a decorator and new is omitted, the created mock is passed in as an extra argument to the decorated function.", "If patch() is used as a context manager the created mock is returned by the context manager.", "target should be a string in the form 'package.module.ClassName'.", "The target is imported and the specified object replaced with the new object, so the target must be importable from the environment you are calling patch() from.", "The target is imported when the decorated function is executed, not at decoration time.", "The spec and spec_set keyword arguments are passed to the MagicMock if patch is creating one for you.", "In addition you can pass spec=True or spec_set=True, which causes patch to pass in the object being mocked as the spec/spec_set object.", "new_callable allows you to specify a different class, or callable object, that will be called to create the new object.", "By default MagicMock is used.", "A more powerful form of spec is autospec.", "If you set autospec=True then the mock will be created with a spec from the object being replaced.", "All attributes of the mock will also have the spec of the corresponding attribute of the object being replaced.", "Methods and functions being mocked will have their arguments checked and will raise a TypeError if they are called with the wrong signature.", "For mocks replacing a class, their return value (the \u2018instance\u2019) will have the same spec as the class.", "See the create_autospec() function and Autospeccing.", "Instead of autospec=True you can pass autospec=some_object to use an arbitrary object as the spec instead of the one being replaced.", "By default patch() will fail to replace attributes that don\u2019t exist.", "If you pass in create=True, and the attribute doesn\u2019t exist, patch will create the attribute for you when the patched function is called, and delete it again after the patched function has exited.", "This is useful for writing tests against attributes that your production code creates at runtime.", "It is off by default because it can be dangerous.", "With it switched on you can write passing tests against APIs that don\u2019t actually exist!", "Patch can be used as a TestCase class decorator.", "It works by decorating each test method in the class.", "This reduces the boilerplate code when your test methods share a common patchings set.", "patch() finds tests by looking for method names that start with patch.TEST_PREFIX.", "By default this is 'test', which matches the way unittest finds tests.", "You can specify an alternative prefix by setting patch.TEST_PREFIX.", "Patch can be used as a context manager, with the with statement.", "Here the patching applies to the indented block after the with statement.", "If you use \u201cas\u201d then the patched object will be bound to the name after the \u201cas\u201d; very useful if patch() is creating a mock object for you.", "patch() takes arbitrary keyword arguments.", "These will be passed to the Mock (or new_callable) on construction.", "patch.dict(...), patch.multiple(...) and patch.object(...) are available for alternate use-cases."]}
{"index": 7278, "name": "unittest.mock.patch.object", "module": "unittest", "doc": ["patch the named member (attribute) on an object (target) with a mock object.", "patch.object() can be used as a decorator, class decorator or a context manager.", "Arguments new, spec, create, spec_set, autospec and new_callable have the same meaning as for patch().", "Like patch(), patch.object() takes arbitrary keyword arguments for configuring the mock object it creates.", "When used as a class decorator patch.object() honours patch.TEST_PREFIX for choosing which methods to wrap."]}
{"index": 7279, "name": "unittest.mock.patch.dict", "module": "unittest", "doc": ["Patch a dictionary, or dictionary like object, and restore the dictionary to its original state after the test.", "in_dict can be a dictionary or a mapping like container.", "If it is a mapping then it must at least support getting, setting and deleting items plus iterating over keys.", "in_dict can also be a string specifying the name of the dictionary, which will then be fetched by importing it.", "values can be a dictionary of values to set in the dictionary.", "values can also be an iterable of (key, value) pairs.", "If clear is true then the dictionary will be cleared before the new values are set.", "patch.dict() can also be called with arbitrary keyword arguments to set values in the dictionary.", "patch.dict() can be used as a context manager, decorator or class decorator.", "When used as a class decorator patch.dict() honours patch.TEST_PREFIX for choosing which methods to wrap."]}
{"index": 7280, "name": "unittest.mock.patch.multiple", "module": "unittest", "doc": ["Perform multiple patches in a single call.", "It takes the object to be patched (either as an object or a string to fetch the object by importing) and keyword arguments for the patches:", "Use DEFAULT as the value if you want patch.multiple() to create mocks for you.", "In this case the created mocks are passed into a decorated function by keyword, and a dictionary is returned when patch.multiple() is used as a context manager.", "patch.multiple() can be used as a decorator, class decorator or a context manager.", "The arguments spec, spec_set, create, autospec and new_callable have the same meaning as for patch().", "These arguments will be applied to all patches done by patch.multiple().", "When used as a class decorator patch.multiple() honours patch.TEST_PREFIX for choosing which methods to wrap."]}
{"index": 7281, "name": "unittest.mock.patch.stopall", "module": "unittest", "doc": ["Stop all active patches.", "Only stops patches started with start."]}
{"index": 7282, "name": "unittest.mock.MagicMock", "module": "unittest", "doc": ["MagicMock is a subclass of Mock with default implementations of most of the magic methods.", "You can use MagicMock without having to configure the magic methods yourself.", "The constructor parameters have the same meaning as for Mock.", "If you use the spec or spec_set arguments then only magic methods that exist in the spec will be created."]}
{"index": 7283, "name": "unittest.mock.NonCallableMagicMock", "module": "unittest", "doc": ["A non-callable version of MagicMock.", "The constructor parameters have the same meaning as for MagicMock, with the exception of return_value and side_effect which have no meaning on a non-callable mock."]}
{"index": 7284, "name": "id8", "module": "unittest", "doc": ["Magic methods should be looked up on the class rather than the instance.", "Different versions of Python are inconsistent about applying this rule.", "The supported protocol methods should work with all supported versions of Python."]}
{"index": 7285, "name": "id9", "module": "unittest", "doc": ["Magic methods should be looked up on the class rather than the instance.", "Different versions of Python are inconsistent about applying this rule.", "The supported protocol methods should work with all supported versions of Python."]}
{"index": 7286, "name": "unittest.mock.sentinel", "module": "unittest", "doc": ["The sentinel object provides a convenient way of providing unique objects for your tests.", "Attributes are created on demand when you access them by name.", "Accessing the same attribute will always return the same object.", "The objects returned have a sensible repr so that test failure messages are readable."]}
{"index": 7287, "name": "unittest.mock.DEFAULT", "module": "unittest", "doc": ["The DEFAULT object is a pre-created sentinel (actually sentinel.DEFAULT).", "It can be used by side_effect functions to indicate that the normal return value should be used."]}
{"index": 7288, "name": "unittest.mock.call", "module": "unittest", "doc": ["call() is a helper object for making simpler assertions, for comparing with call_args, call_args_list, mock_calls and method_calls.", "call() can also be used with assert_has_calls()."]}
{"index": 7289, "name": "unittest.mock.call.call_list", "module": "unittest", "doc": ["For a call object that represents multiple calls, call_list() returns a list of all the intermediate calls as well as the final call."]}
{"index": 7290, "name": "unittest.mock.create_autospec", "module": "unittest", "doc": ["Create a mock object using another object as a spec.", "Attributes on the mock will use the corresponding attribute on the spec object as their spec.", "Functions or methods being mocked will have their arguments checked to ensure that they are called with the correct signature.", "If spec_set is True then attempting to set attributes that don\u2019t exist on the spec object will raise an AttributeError.", "If a class is used as a spec then the return value of the mock (the instance of the class) will have the same spec.", "You can use a class as the spec for an instance object by passing instance=True.", "The returned mock will only be callable if instances of the mock are callable.", "create_autospec() also takes arbitrary keyword arguments that are passed to the constructor of the created mock."]}
{"index": 7291, "name": "unittest.mock.mock_open", "module": "unittest", "doc": ["A helper function to create a mock to replace the use of open().", "It works for open() called directly or used as a context manager.", "The mock argument is the mock object to configure.", "If None (the default) then a MagicMock will be created for you, with the API limited to methods or attributes available on standard file handles.", "read_data is a string for the read(), readline(), and readlines() methods of the file handle to return.", "Calls to those methods will take data from read_data until it is depleted.", "The mock of these methods is pretty simplistic: every time the mock is called, the read_data is rewound to the start.", "If you need more control over the data that you are feeding to the tested code you will need to customize this mock for yourself.", "When that is insufficient, one of the in-memory filesystem packages on PyPI can offer a realistic filesystem for testing."]}
{"index": 7292, "name": "id11", "module": "unittest", "doc": ["This only applies to classes or already instantiated objects.", "Calling a mocked class to create a mock instance does not create a real instance.", "It is only attribute lookups - along with calls to dir() - that are done."]}
{"index": 7293, "name": "unittest.mock.seal", "module": "unittest", "doc": ["Seal will disable the automatic creation of mocks when accessing an attribute of the mock being sealed or any of its attributes that are already mocks recursively.", "If a mock instance with a name or a spec is assigned to an attribute it won\u2019t be considered in the sealing chain.", "This allows one to prevent seal from fixing part of the mock object."]}
{"index": 7294, "name": "urllib.error.URLError", "module": "urllib", "doc": ["The handlers raise this exception (or derived exceptions) when they run into a problem.", "It is a subclass of OSError."]}
{"index": 7295, "name": "urllib.error.URLError.reason", "module": "urllib", "doc": ["The reason for this error.", "It can be a message string or another exception instance."]}
{"index": 7296, "name": "urllib.error.HTTPError", "module": "urllib", "doc": ["Though being an exception (a subclass of URLError), an HTTPError can also function as a non-exceptional file-like return value (the same thing that urlopen() returns).", "This is useful when handling exotic HTTP errors, such as requests for authentication."]}
{"index": 7297, "name": "urllib.error.HTTPError.code", "module": "urllib", "doc": ["An HTTP status code as defined in RFC 2616.", "This numeric value corresponds to a value found in the dictionary of codes as found in http.server.BaseHTTPRequestHandler.responses."]}
{"index": 7298, "name": "urllib.error.HTTPError.reason", "module": "urllib", "doc": ["This is usually a string explaining the reason for this error."]}
{"index": 7299, "name": "urllib.error.HTTPError.headers", "module": "urllib", "doc": ["The HTTP response headers for the HTTP request that caused the HTTPError."]}
{"index": 7300, "name": "urllib.error.ContentTooShortError", "module": "urllib", "doc": ["This exception is raised when the urlretrieve() function detects that the amount of the downloaded data is less than the expected amount (given by the Content-Length header).", "The content attribute stores the downloaded (and supposedly truncated) data."]}
{"index": 7301, "name": "urllib.parse.urlparse", "module": "urllib", "doc": ["Parse a URL into six components, returning a 6-item named tuple.", "This corresponds to the general structure of a URL: scheme://netloc/path;parameters?query#fragment.", "Each tuple item is a string, possibly empty.", "The components are not broken up in smaller parts (for example, the network location is a single string), and % escapes are not expanded.", "The delimiters as shown above are not part of the result, except for a leading slash in the path component, which is retained if present.", "For example:", "Following the syntax specifications in RFC 1808, urlparse recognizes a netloc only if it is properly introduced by \u2018//\u2019.", "Otherwise the input is presumed to be a relative URL and thus to start with a path component.", "The scheme argument gives the default addressing scheme, to be used only if the URL does not specify one.", "It should be the same type (text or bytes) as urlstring, except that the default value '' is always allowed, and is automatically converted to b'' if appropriate.", "If the allow_fragments argument is false, fragment identifiers are not recognized.", "Instead, they are parsed as part of the path, parameters or query component, and fragment is set to the empty string in the return value.", "The return value is a named tuple, which means that its items can be accessed by index or as named attributes, which are:", "Reading the port attribute will raise a ValueError if an invalid port is specified in the URL.", "See section Structured Parse Results for more information on the result object.", "Unmatched square brackets in the netloc attribute will raise a ValueError.", "Characters in the netloc attribute that decompose under NFKC normalization (as used by the IDNA encoding) into any of /, ?, #, @, or : will raise a ValueError.", "If the URL is decomposed before parsing, no error will be raised.", "As is the case with all named tuples, the subclass has a few additional methods and attributes that are particularly useful.", "One such method is _replace().", "The _replace() method will return a new ParseResult object replacing specified fields with new values."]}
{"index": 7302, "name": "urllib.parse.parse_qs", "module": "urllib", "doc": ["Parse a query string given as a string argument (data of type application/x-www-form-urlencoded).", "Data are returned as a dictionary.", "The dictionary keys are the unique query variable names and the values are lists of values for each name.", "The optional argument keep_blank_values is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings.", "A true value indicates that blanks should be retained as  blank strings.", "The default false value indicates that blank values are to be ignored and treated as if they were not included.", "The optional argument strict_parsing is a flag indicating what to do with parsing errors.", "If false (the default), errors are silently ignored.", "If true, errors raise a ValueError exception.", "The optional encoding and errors parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the bytes.decode() method.", "The optional argument max_num_fields is the maximum number of fields to read.", "If set, then throws a ValueError if there are more than max_num_fields fields read.", "Use the urllib.parse.urlencode() function (with the doseq parameter set to True) to convert such dictionaries into query strings."]}
{"index": 7303, "name": "urllib.parse.parse_qsl", "module": "urllib", "doc": ["Parse a query string given as a string argument (data of type application/x-www-form-urlencoded).", "Data are returned as a list of name, value pairs.", "The optional argument keep_blank_values is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings.", "A true value indicates that blanks should be retained as  blank strings.", "The default false value indicates that blank values are to be ignored and treated as if they were not included.", "The optional argument strict_parsing is a flag indicating what to do with parsing errors.", "If false (the default), errors are silently ignored.", "If true, errors raise a ValueError exception.", "The optional encoding and errors parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the bytes.decode() method.", "The optional argument max_num_fields is the maximum number of fields to read.", "If set, then throws a ValueError if there are more than max_num_fields fields read.", "Use the urllib.parse.urlencode() function to convert such lists of pairs into query strings."]}
{"index": 7304, "name": "urllib.parse.urlunparse", "module": "urllib", "doc": ["Construct a URL from a tuple as returned by urlparse().", "The parts argument can be any six-item iterable.", "This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ?", "with an empty query; the RFC states that these are equivalent)."]}
{"index": 7305, "name": "urllib.parse.urlsplit", "module": "urllib", "doc": ["This is similar to urlparse(), but does not split the params from the URL.", "This should generally be used instead of urlparse() if the more recent URL syntax allowing parameters to be applied to each segment of the path portion of the URL (see RFC 2396) is wanted.", "A separate function is needed to separate the path segments and parameters.", "This function returns a 5-item named tuple:", "The return value is a named tuple, its items can be accessed by index or as named attributes:", "Reading the port attribute will raise a ValueError if an invalid port is specified in the URL.", "See section Structured Parse Results for more information on the result object.", "Unmatched square brackets in the netloc attribute will raise a ValueError.", "Characters in the netloc attribute that decompose under NFKC normalization (as used by the IDNA encoding) into any of /, ?, #, @, or : will raise a ValueError.", "If the URL is decomposed before parsing, no error will be raised."]}
{"index": 7306, "name": "urllib.parse.urlunsplit", "module": "urllib", "doc": ["Combine the elements of a tuple as returned by urlsplit() into a complete URL as a string.", "The parts argument can be any five-item iterable.", "This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a ?", "with an empty query; the RFC states that these are equivalent)."]}
{"index": 7307, "name": "urllib.parse.urljoin", "module": "urllib", "doc": ["Construct a full (\u201cabsolute\u201d) URL by combining a \u201cbase URL\u201d (base) with another URL (url).", "Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL.", "For example:", "The allow_fragments argument has the same meaning and default as for urlparse().", "If you do not want that behavior, preprocess the url with urlsplit() and urlunsplit(), removing possible scheme and netloc parts."]}
{"index": 7308, "name": "urllib.parse.urldefrag", "module": "urllib", "doc": ["If url contains a fragment identifier, return a modified version of url with no fragment identifier, and the fragment identifier as a separate string.", "If there is no fragment identifier in url, return url unmodified and an empty string.", "The return value is a named tuple, its items can be accessed by index or as named attributes:", "See section Structured Parse Results for more information on the result object."]}
{"index": 7309, "name": "urllib.parse.urllib.parse.SplitResult.geturl", "module": "urllib", "doc": ["Return the re-combined version of the original URL as a string.", "This may differ from the original URL in that the scheme may be normalized to lower case and empty components may be dropped.", "Specifically, empty parameters, queries, and fragment identifiers will be removed.", "For urldefrag() results, only empty fragment identifiers will be removed.", "For urlsplit() and urlparse() results, all noted changes will be made to the URL returned by this method.", "The result of this method remains unchanged if passed back through the original parsing function:"]}
{"index": 7310, "name": "urllib.parse.DefragResult", "module": "urllib", "doc": ["Concrete class for urldefrag() results containing str data.", "The encode() method returns a DefragResultBytes instance."]}
{"index": 7311, "name": "urllib.parse.ParseResult", "module": "urllib", "doc": ["Concrete class for urlparse() results containing str data.", "The encode() method returns a ParseResultBytes instance."]}
{"index": 7312, "name": "urllib.parse.SplitResult", "module": "urllib", "doc": ["Concrete class for urlsplit() results containing str data.", "The encode() method returns a SplitResultBytes instance."]}
{"index": 7313, "name": "urllib.parse.DefragResultBytes", "module": "urllib", "doc": ["Concrete class for urldefrag() results containing bytes data.", "The decode() method returns a DefragResult instance."]}
{"index": 7314, "name": "urllib.parse.ParseResultBytes", "module": "urllib", "doc": ["Concrete class for urlparse() results containing bytes data.", "The decode() method returns a ParseResult instance."]}
{"index": 7315, "name": "urllib.parse.SplitResultBytes", "module": "urllib", "doc": ["Concrete class for urlsplit() results containing bytes data.", "The decode() method returns a SplitResult instance."]}
{"index": 7316, "name": "urllib.parse.quote", "module": "urllib", "doc": ["Replace special characters in string using the %xx escape.", "Letters, digits, and the characters '_.-~' are never quoted.", "By default, this function is intended for quoting the path section of URL.", "The optional safe parameter specifies additional ASCII characters that should not be quoted \u2014 its default value is '/'.", "string may be either a str or a bytes.", "The optional encoding and errors parameters specify how to deal with non-ASCII characters, as accepted by the str.encode() method.", "encoding defaults to 'utf-8'.", "errors defaults to 'strict', meaning unsupported characters raise a UnicodeEncodeError.", "encoding and errors must not be supplied if string is a bytes, or a TypeError is raised.", "Note that quote(string, safe, encoding, errors) is equivalent to quote_from_bytes(string.encode(encoding, errors), safe).", "Example: quote('/El Ni\u00f1o/') yields '/El%20Ni%C3%B1o/'."]}
{"index": 7317, "name": "urllib.parse.quote_plus", "module": "urllib", "doc": ["Like quote(), but also replace spaces by plus signs, as required for quoting HTML form values when building up a query string to go into a URL.", "Plus signs in the original string are escaped unless they are included in safe.", "It also does not have safe default to '/'.", "Example: quote_plus('/El Ni\u00f1o/') yields '%2FEl+Ni%C3%B1o%2F'."]}
{"index": 7318, "name": "urllib.parse.quote_from_bytes", "module": "urllib", "doc": ["Like quote(), but accepts a bytes object rather than a str, and does not perform string-to-bytes encoding.", "Example: quote_from_bytes(b'a&\\xef') yields 'a%26%EF'."]}
{"index": 7319, "name": "urllib.parse.unquote", "module": "urllib", "doc": ["Replace %xx escapes by their single-character equivalent.", "The optional encoding and errors parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the bytes.decode() method.", "string must be a str.", "encoding defaults to 'utf-8'.", "errors defaults to 'replace', meaning invalid sequences are replaced by a placeholder character.", "Example: unquote('/El%20Ni%C3%B1o/') yields '/El Ni\u00f1o/'."]}
{"index": 7320, "name": "urllib.parse.unquote_plus", "module": "urllib", "doc": ["Like unquote(), but also replace plus signs by spaces, as required for unquoting HTML form values.", "string must be a str.", "Example: unquote_plus('/El+Ni%C3%B1o/') yields '/El Ni\u00f1o/'."]}
{"index": 7321, "name": "urllib.parse.unquote_to_bytes", "module": "urllib", "doc": ["Replace %xx escapes by their single-octet equivalent, and return a bytes object.", "string may be either a str or a bytes.", "If it is a str, unescaped non-ASCII characters in string are encoded into UTF-8 bytes.", "Example: unquote_to_bytes('a%26%EF') yields b'a&\\xef'."]}
{"index": 7322, "name": "urllib.parse.urlencode", "module": "urllib", "doc": ["Convert a mapping object or a sequence of two-element tuples, which may contain str or bytes objects, to a percent-encoded ASCII text string.", "If the resultant string is to be used as a data for POST operation with the urlopen() function, then it should be encoded to bytes, otherwise it would result in a TypeError.", "The resulting string is a series of key=value pairs separated by '&' characters, where both key and value are quoted using the quote_via function.", "By default, quote_plus() is used to quote the values, which means spaces are quoted as a '+' character and \u2018/\u2019 characters are encoded as %2F, which follows the standard for GET requests (application/x-www-form-urlencoded).", "An alternate function that can be passed as quote_via is quote(), which will encode spaces as %20 and not encode \u2018/\u2019 characters.", "For maximum control of what is quoted, use quote and specify a value for safe.", "When a sequence of two-element tuples is used as the query argument, the first element of each tuple is a key and the second is a value.", "The value element in itself can be a sequence and in that case, if the optional parameter doseq is evaluates to True, individual key=value pairs separated by '&' are generated for each element of the value sequence for the key.", "The order of parameters in the encoded string will match the order of parameter tuples in the sequence.", "The safe, encoding, and errors parameters are passed down to quote_via (the encoding and errors parameters are only passed when a query element is a str).", "To reverse this encoding process, parse_qs() and parse_qsl() are provided in this module to parse query strings into Python data structures.", "Refer to urllib examples to find out how urlencode method can be used for generating query string for a URL or data for POST."]}
{"index": 7323, "name": "urllib.request.urlopen", "module": "urllib", "doc": ["Open the URL url, which can be either a string or a Request object.", "data must be an object specifying additional data to be sent to the server, or None if no such data is needed.", "See Request for details.", "urllib.request module uses HTTP/1.1 and includes Connection:close header in its HTTP requests.", "The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).", "This actually only works for HTTP, HTTPS and FTP connections.", "If context is specified, it must be a ssl.SSLContext instance describing the various SSL options.", "See HTTPSConnection for more details.", "The optional cafile and capath parameters specify a set of trusted CA certificates for HTTPS requests.", "cafile should point to a single file containing a bundle of CA certificates, whereas capath should point to a directory of hashed certificate files.", "More information can be found in ssl.SSLContext.load_verify_locations().", "The cadefault parameter is ignored.", "This function always returns an object which can work as a context manager and has methods such as", "For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse object slightly modified.", "In addition to the three new methods above, the msg attribute contains the same information as the reason attribute \u2014 the reason phrase returned by server \u2014 instead of the response headers as it is specified in the documentation for HTTPResponse.", "For FTP, file, and data URLs and requests explicitly handled by legacy URLopener and FancyURLopener classes, this function returns a urllib.response.addinfourl object.", "Raises URLError on protocol errors.", "Note that None may be returned if no handler handles the request (though the default installed global OpenerDirector uses UnknownHandler to ensure this never happens).", "In addition, if proxy settings are detected (for example, when a *_proxy environment variable like http_proxy is set), ProxyHandler is default installed and makes sure the requests are handled through the proxy.", "The legacy urllib.urlopen function from Python 2.6 and earlier has been discontinued; urllib.request.urlopen() corresponds to the old urllib2.urlopen.", "Proxy handling, which was done by passing a dictionary parameter to urllib.urlopen, can be obtained by using ProxyHandler objects."]}
{"index": 7324, "name": "urllib.request.install_opener", "module": "urllib", "doc": ["Install an OpenerDirector instance as the default global opener.", "Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call OpenerDirector.open() instead of urlopen().", "The code does not check for a real OpenerDirector, and any class with the appropriate interface will work."]}
{"index": 7325, "name": "urllib.request.build_opener", "module": "urllib", "doc": ["Return an OpenerDirector instance, which chains the handlers in the order given.", "handlers can be either instances of BaseHandler, or subclasses of BaseHandler (in which case it must be possible to call the constructor without any parameters).", "Instances of the following classes will be in front of the handlers, unless the handlers contain them, instances of them or subclasses of them: ProxyHandler (if proxy settings are detected), UnknownHandler, HTTPHandler, HTTPDefaultErrorHandler, HTTPRedirectHandler, FTPHandler, FileHandler, HTTPErrorProcessor.", "If the Python installation has SSL support (i.e., if the ssl module can be imported), HTTPSHandler will also be added.", "A BaseHandler subclass may also change its handler_order attribute to modify its position in the handlers list."]}
{"index": 7326, "name": "urllib.request.pathname2url", "module": "urllib", "doc": ["Convert the pathname path from the local syntax for a path to the form used in the path component of a URL.", "This does not produce a complete URL.", "The return value will already be quoted using the quote() function."]}
{"index": 7327, "name": "urllib.request.url2pathname", "module": "urllib", "doc": ["Convert the path component path from a percent-encoded URL to the local syntax for a path.", "This does not accept a complete URL.", "This function uses unquote() to decode path."]}
{"index": 7328, "name": "urllib.request.getproxies", "module": "urllib", "doc": ["This helper function returns a dictionary of scheme to proxy server URL mappings.", "It scans the environment for variables named <scheme>_proxy, in a case insensitive approach, for all operating systems first, and when it cannot find it, looks for proxy information from Mac OSX System Configuration for Mac OS X and Windows Systems Registry for Windows.", "If both lowercase and uppercase environment variables exist (and disagree), lowercase is preferred."]}
{"index": 7329, "name": "urllib.request.Request", "module": "urllib", "doc": ["This class is an abstraction of a URL request.", "url should be a string containing a valid URL.", "data must be an object specifying additional data to send to the server, or None if no such data is needed.", "Currently HTTP requests are the only ones that use data.", "The supported object types include bytes, file-like objects, and iterables.", "If no Content-Length nor Transfer-Encoding header field has been provided, HTTPHandler will set these headers according to the type of data.", "Content-Length will be used to send bytes objects, while Transfer-Encoding: chunked as specified in RFC 7230, Section 3.3.1 will be used to send files and other iterables.", "For an HTTP POST request method, data should be a buffer in the standard application/x-www-form-urlencoded format.", "The urllib.parse.urlencode() function takes a mapping or sequence of 2-tuples and returns an ASCII string in this format.", "It should be encoded to bytes before being used as the data parameter.", "headers should be a dictionary, and will be treated as if add_header() was called with each key and value as arguments.", "This is often used to \u201cspoof\u201d the User-Agent header value, which is used by a browser to identify itself \u2013 some HTTP servers only allow requests coming from common browsers as opposed to scripts.", "For example, Mozilla Firefox may identify itself as \"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11\", while urllib\u2019s default user agent string is \"Python-urllib/2.6\" (on Python 2.6).", "An appropriate Content-Type header should be included if the data argument is present.", "If this header has not been provided and data is not None, Content-Type: application/x-www-form-urlencoded will be added as a default.", "The next two arguments are only of interest for correct handling of third-party HTTP cookies:", "origin_req_host should be the request-host of the origin transaction, as defined by RFC 2965.", "It defaults to http.cookiejar.request_host(self).", "This is the host name or IP address of the original request that was initiated by the user.", "For example, if the request is for an image in an HTML document, this should be the request-host of the request for the page containing the image.", "unverifiable should indicate whether the request is unverifiable, as defined by RFC 2965.", "It defaults to False.", "An unverifiable request is one whose URL the user did not have the option to approve.", "For example, if the request is for an image in an HTML document, and the user had no option to approve the automatic fetching of the image, this should be true.", "method should be a string that indicates the HTTP request method that will be used (e.g.", "'HEAD').", "If provided, its value is stored in the method attribute and is used by get_method().", "The default is 'GET' if data is None or 'POST' otherwise.", "Subclasses may indicate a different default method by setting the method attribute in the class itself."]}
{"index": 7330, "name": "urllib.request.OpenerDirector", "module": "urllib", "doc": ["The OpenerDirector class opens URLs via BaseHandlers chained together.", "It manages the chaining of handlers, and recovery from errors."]}
{"index": 7331, "name": "urllib.request.BaseHandler", "module": "urllib", "doc": ["This is the base class for all registered handlers \u2014 and handles only the simple mechanics of registration."]}
{"index": 7332, "name": "urllib.request.HTTPDefaultErrorHandler", "module": "urllib", "doc": ["A class which defines a default handler for HTTP error responses; all responses are turned into HTTPError exceptions."]}
{"index": 7333, "name": "urllib.request.HTTPRedirectHandler", "module": "urllib", "doc": ["A class to handle redirections."]}
{"index": 7334, "name": "urllib.request.HTTPCookieProcessor", "module": "urllib", "doc": ["A class to handle HTTP Cookies."]}
{"index": 7335, "name": "urllib.request.ProxyHandler", "module": "urllib", "doc": ["Cause requests to go through a proxy.", "If proxies is given, it must be a dictionary mapping protocol names to URLs of proxies.", "The default is to read the list of proxies from the environment variables <protocol>_proxy.", "If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry\u2019s Internet Settings section, and in a Mac OS X environment proxy information is retrieved from the OS X System Configuration Framework.", "To disable autodetected proxy pass an empty dictionary.", "The no_proxy environment variable can be used to specify hosts which shouldn\u2019t be reached via proxy; if set, it should be a comma-separated list of hostname suffixes, optionally with :port appended, for example cern.ch,ncsa.uiuc.edu,some.host:8080."]}
{"index": 7336, "name": "urllib.request.HTTPPasswordMgr", "module": "urllib", "doc": ["Keep a database of  (realm, uri) -> (user, password) mappings."]}
{"index": 7337, "name": "urllib.request.HTTPPasswordMgrWithDefaultRealm", "module": "urllib", "doc": ["Keep a database of  (realm, uri) -> (user, password) mappings.", "A realm of None is considered a catch-all realm, which is searched if no other realm fits."]}
{"index": 7338, "name": "urllib.request.HTTPPasswordMgrWithPriorAuth", "module": "urllib", "doc": ["A variant of HTTPPasswordMgrWithDefaultRealm that also has a database of uri -> is_authenticated mappings.", "Can be used by a BasicAuth handler to determine when to send authentication credentials immediately instead of waiting for a 401 response first."]}
{"index": 7339, "name": "urllib.request.AbstractBasicAuthHandler", "module": "urllib", "doc": ["This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy.", "password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.", "If passwd_mgr also provides is_authenticated and update_authenticated methods (see HTTPPasswordMgrWithPriorAuth Objects), then the handler will use the is_authenticated result for a given URI to determine whether or not to send authentication credentials with the request.", "If is_authenticated returns True for the URI, credentials are sent.", "If is_authenticated is False, credentials are not sent, and then if a 401 response is received the request is re-sent with the authentication credentials.", "If authentication succeeds, update_authenticated is called to set is_authenticated True for the URI, so that subsequent requests to the URI or any of its super-URIs will automatically include the authentication credentials."]}
{"index": 7340, "name": "urllib.request.HTTPBasicAuthHandler", "module": "urllib", "doc": ["Handle authentication with the remote host.", "password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.", "HTTPBasicAuthHandler will raise a ValueError when presented with a wrong Authentication scheme."]}
{"index": 7341, "name": "urllib.request.ProxyBasicAuthHandler", "module": "urllib", "doc": ["Handle authentication with the proxy.", "password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported."]}
{"index": 7342, "name": "urllib.request.AbstractDigestAuthHandler", "module": "urllib", "doc": ["This is a mixin class that helps with HTTP authentication, both to the remote host and to a proxy.", "password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported."]}
{"index": 7343, "name": "urllib.request.HTTPDigestAuthHandler", "module": "urllib", "doc": ["Handle authentication with the remote host.", "password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported.", "When both Digest Authentication Handler and Basic Authentication Handler are both added, Digest Authentication is always tried first.", "If the Digest Authentication returns a 40x response again, it is sent to Basic Authentication handler to Handle.", "This Handler method will raise a ValueError when presented with an authentication scheme other than Digest or Basic."]}
{"index": 7344, "name": "urllib.request.ProxyDigestAuthHandler", "module": "urllib", "doc": ["Handle authentication with the proxy.", "password_mgr, if given, should be something that is compatible with HTTPPasswordMgr; refer to section HTTPPasswordMgr Objects for information on the interface that must be supported."]}
{"index": 7345, "name": "urllib.request.HTTPHandler", "module": "urllib", "doc": ["A class to handle opening of HTTP URLs."]}
{"index": 7346, "name": "urllib.request.HTTPSHandler", "module": "urllib", "doc": ["A class to handle opening of HTTPS URLs.", "context and check_hostname have the same meaning as in http.client.HTTPSConnection."]}
{"index": 7347, "name": "urllib.request.FileHandler", "module": "urllib", "doc": ["Open local files."]}
{"index": 7348, "name": "urllib.request.DataHandler", "module": "urllib", "doc": ["Open data URLs."]}
{"index": 7349, "name": "urllib.request.FTPHandler", "module": "urllib", "doc": ["Open FTP URLs."]}
{"index": 7350, "name": "urllib.request.CacheFTPHandler", "module": "urllib", "doc": ["Open FTP URLs, keeping a cache of open FTP connections to minimize delays."]}
{"index": 7351, "name": "urllib.request.UnknownHandler", "module": "urllib", "doc": ["A catch-all class to handle unknown URLs."]}
{"index": 7352, "name": "urllib.request.HTTPErrorProcessor", "module": "urllib", "doc": ["Process HTTP error responses."]}
{"index": 7353, "name": "urllib.request.Request.full_url", "module": "urllib", "doc": ["The original URL passed to the constructor.", "Request.full_url is a property with setter, getter and a deleter.", "Getting full_url returns the original request URL with the fragment, if it was present."]}
{"index": 7354, "name": "urllib.request.Request.type", "module": "urllib", "doc": ["The URI scheme."]}
{"index": 7355, "name": "urllib.request.Request.host", "module": "urllib", "doc": ["The URI authority, typically a host, but may also contain a port separated by a colon."]}
{"index": 7356, "name": "urllib.request.Request.origin_req_host", "module": "urllib", "doc": ["The original host for the request, without port."]}
{"index": 7357, "name": "urllib.request.Request.selector", "module": "urllib", "doc": ["The URI path.", "If the Request uses a proxy, then selector will be the full URL that is passed to the proxy."]}
{"index": 7358, "name": "urllib.request.Request.data", "module": "urllib", "doc": ["The entity body for the request, or None if not specified."]}
{"index": 7359, "name": "urllib.request.Request.unverifiable", "module": "urllib", "doc": ["boolean, indicates whether the request is unverifiable as defined by RFC 2965."]}
{"index": 7360, "name": "urllib.request.Request.method", "module": "urllib", "doc": ["The HTTP request method to use.", "By default its value is None, which means that get_method() will do its normal computation of the method to be used.", "Its value can be set (thus overriding the default computation in get_method()) either by providing a default value by setting it at the class level in a Request subclass, or by passing a value in to the Request constructor via the method argument."]}
{"index": 7361, "name": "urllib.request.Request.get_method", "module": "urllib", "doc": ["Return a string indicating the HTTP request method.", "If Request.method is not None, return its value, otherwise return 'GET' if Request.data is None, or 'POST' if it\u2019s not.", "This is only meaningful for HTTP requests."]}
{"index": 7362, "name": "urllib.request.Request.add_header", "module": "urllib", "doc": ["Add another header to the request.", "Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server.", "Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the key collides.", "Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header."]}
{"index": 7363, "name": "urllib.request.Request.add_unredirected_header", "module": "urllib", "doc": ["Add a header that will not be added to a redirected request."]}
{"index": 7364, "name": "urllib.request.Request.has_header", "module": "urllib", "doc": ["Return whether the instance has the named header (checks both regular and unredirected)."]}
{"index": 7365, "name": "urllib.request.Request.remove_header", "module": "urllib", "doc": ["Remove named header from the request instance (both from regular and unredirected headers)."]}
{"index": 7366, "name": "urllib.request.Request.get_full_url", "module": "urllib", "doc": ["Return the URL given in the constructor.", "Returns Request.full_url"]}
{"index": 7367, "name": "urllib.request.Request.set_proxy", "module": "urllib", "doc": ["Prepare the request by connecting to a proxy server.", "The host and type will replace those of the instance, and the instance\u2019s selector will be the original URL given in the constructor."]}
{"index": 7368, "name": "urllib.request.Request.get_header", "module": "urllib", "doc": ["Return the value of the given header.", "If the header is not present, return the default value."]}
{"index": 7369, "name": "urllib.request.Request.header_items", "module": "urllib", "doc": ["Return a list of tuples (header_name, header_value) of the Request headers."]}
{"index": 7370, "name": "urllib.request.OpenerDirector.add_handler", "module": "urllib", "doc": ["handler should be an instance of BaseHandler.", "The following methods are searched, and added to the possible chains (note that HTTP errors are a special case).", "Note that, in the following, protocol should be replaced with the actual protocol to handle, for example http_response() would be the HTTP protocol response handler.", "Also type should be replaced with the actual HTTP code, for example http_error_404() would handle HTTP 404 errors."]}
{"index": 7371, "name": "urllib.request.OpenerDirector.open", "module": "urllib", "doc": ["Open the given url (which can be a request object or a string), optionally passing the given data.", "Arguments, return values and exceptions raised are the same as those of urlopen() (which simply calls the open() method on the currently installed global OpenerDirector).", "The optional timeout parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used).", "The timeout feature actually works only for HTTP, HTTPS and FTP connections)."]}
{"index": 7372, "name": "urllib.request.OpenerDirector.error", "module": "urllib", "doc": ["Handle an error of the given protocol.", "This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific).", "The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the http_error_<type>() methods of the handler classes.", "Return values and exceptions raised are the same as those of urlopen()."]}
{"index": 7373, "name": "urllib.request.BaseHandler.add_parent", "module": "urllib", "doc": ["Add a director as parent."]}
{"index": 7374, "name": "urllib.request.BaseHandler.close", "module": "urllib", "doc": ["Remove any parents."]}
{"index": 7375, "name": "urllib.request.BaseHandler.parent", "module": "urllib", "doc": ["A valid OpenerDirector, which can be used to open using a different protocol, or handle errors."]}
{"index": 7376, "name": "urllib.request.BaseHandler.default_open", "module": "urllib", "doc": ["This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs.", "This method, if implemented, will be called by the parent OpenerDirector.", "It should return a file-like object as described in the return value of the open() of OpenerDirector, or None.", "It should raise URLError, unless a truly exceptional thing happens (for example, MemoryError should not be mapped to URLError).", "This method will be called before any protocol-specific open method."]}
{"index": 7377, "name": "urllib.request.BaseHandler.unknown_open", "module": "urllib", "doc": ["This method is not defined in BaseHandler, but subclasses should define it if they want to catch all URLs with no specific registered handler to open it.", "This method, if implemented, will be called by the parent OpenerDirector.", "Return values should be the same as for default_open()."]}
{"index": 7378, "name": "urllib.request.BaseHandler.http_error_default", "module": "urllib", "doc": ["This method is not defined in BaseHandler, but subclasses should override it if they intend to provide a catch-all for otherwise unhandled HTTP errors.", "It will be called automatically by the  OpenerDirector getting the error, and should not normally be called in other circumstances.", "req will be a Request object, fp will be a file-like object with the HTTP error body, code will be the three-digit code of the error, msg will be the user-visible explanation of the code and hdrs will be a mapping object with the headers of the error.", "Return values and exceptions raised should be the same as those of urlopen()."]}
{"index": 7379, "name": "urllib.request.HTTPRedirectHandler.redirect_request", "module": "urllib", "doc": ["Return a Request or None in response to a redirect.", "This is called by the default implementations of the http_error_30*() methods when a redirection is received from the server.", "If a redirection should take place, return a new Request to allow http_error_30*() to perform the redirect to newurl.", "Otherwise, raise HTTPError if no other handler should try to handle this URL, or return None if you can\u2019t but another handler might."]}
{"index": 7380, "name": "urllib.request.HTTPRedirectHandler.http_error_301", "module": "urllib", "doc": ["Redirect to the Location: or URI: URL.", "This method is called by the parent OpenerDirector when getting an HTTP \u2018moved permanently\u2019 response."]}
{"index": 7381, "name": "urllib.request.HTTPRedirectHandler.http_error_302", "module": "urllib", "doc": ["The same as http_error_301(), but called for the \u2018found\u2019 response."]}
{"index": 7382, "name": "urllib.request.HTTPRedirectHandler.http_error_303", "module": "urllib", "doc": ["The same as http_error_301(), but called for the \u2018see other\u2019 response."]}
{"index": 7383, "name": "urllib.request.HTTPRedirectHandler.http_error_307", "module": "urllib", "doc": ["The same as http_error_301(), but called for the \u2018temporary redirect\u2019 response."]}
{"index": 7384, "name": "urllib.request.HTTPCookieProcessor.cookiejar", "module": "urllib", "doc": ["The http.cookiejar.CookieJar in which cookies are stored."]}
{"index": 7385, "name": "urllib.request.HTTPPasswordMgr.add_password", "module": "urllib", "doc": ["uri can be either a single URI, or a sequence of URIs.", "realm, user and passwd must be strings.", "This causes (user, passwd) to be used as authentication tokens when authentication for realm and a super-URI of any of the given URIs is given."]}
{"index": 7386, "name": "urllib.request.HTTPPasswordMgr.find_user_password", "module": "urllib", "doc": ["Get user/password for given realm and URI, if any.", "This method will return (None, None) if there is no matching user/password.", "For HTTPPasswordMgrWithDefaultRealm objects, the realm None will be searched if the given realm has no matching user/password."]}
{"index": 7387, "name": "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password", "module": "urllib", "doc": ["realm, uri, user, passwd are as for HTTPPasswordMgr.add_password().", "is_authenticated sets the initial value of the is_authenticated flag for the given URI or list of URIs.", "If is_authenticated is specified as True, realm is ignored."]}
{"index": 7388, "name": "id0", "module": "urllib", "doc": ["Same as for HTTPPasswordMgrWithDefaultRealm objects"]}
{"index": 7389, "name": "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated", "module": "urllib", "doc": ["Update the is_authenticated flag for the given uri or list of URIs."]}
{"index": 7390, "name": "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated", "module": "urllib", "doc": ["Returns the current state of the is_authenticated flag for the given URI."]}
{"index": 7391, "name": "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed", "module": "urllib", "doc": ["Handle an authentication request by getting a user/password pair, and re-trying the request.", "authreq should be the name of the header where the information about the realm is included in the request, host specifies the URL and path to authenticate for, req should be the (failed) Request object, and headers should be the error headers.", "host is either an authority (e.g.", "\"python.org\") or a URL containing an authority component (e.g.", "\"http://python.org/\").", "In either case, the authority must not contain a userinfo component (so, \"python.org\" and \"python.org:80\" are fine, \"joe:password@python.org\" is not)."]}
{"index": 7392, "name": "urllib.request.HTTPBasicAuthHandler.http_error_401", "module": "urllib", "doc": ["Retry the request with authentication information, if available."]}
{"index": 7393, "name": "urllib.request.ProxyBasicAuthHandler.http_error_407", "module": "urllib", "doc": ["Retry the request with authentication information, if available."]}
{"index": 7394, "name": "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed", "module": "urllib", "doc": ["authreq should be the name of the header where the information about the realm is included in the request, host should be the host to authenticate to, req should be the (failed) Request object, and headers should be the error headers."]}
{"index": 7395, "name": "urllib.request.HTTPDigestAuthHandler.http_error_401", "module": "urllib", "doc": ["Retry the request with authentication information, if available."]}
{"index": 7396, "name": "urllib.request.ProxyDigestAuthHandler.http_error_407", "module": "urllib", "doc": ["Retry the request with authentication information, if available."]}
{"index": 7397, "name": "urllib.request.HTTPHandler.http_open", "module": "urllib", "doc": ["Send an HTTP request, which can be either GET or POST, depending on req.has_data()."]}
{"index": 7398, "name": "urllib.request.HTTPSHandler.https_open", "module": "urllib", "doc": ["Send an HTTPS request, which can be either GET or POST, depending on req.has_data()."]}
{"index": 7399, "name": "urllib.request.FileHandler.file_open", "module": "urllib", "doc": ["Open the file locally, if there is no host name, or the host name is 'localhost'."]}
{"index": 7400, "name": "urllib.request.DataHandler.data_open", "module": "urllib", "doc": ["Read a data URL.", "This kind of URL contains the content encoded in the URL itself.", "The data URL syntax is specified in RFC 2397.", "This implementation ignores white spaces in base64 encoded data URLs so the URL may be wrapped in whatever source file it comes from.", "But even though some browsers don\u2019t mind about a missing padding at the end of a base64 encoded data URL, this implementation will raise an ValueError in that case."]}
{"index": 7401, "name": "urllib.request.FTPHandler.ftp_open", "module": "urllib", "doc": ["Open the FTP file indicated by req.", "The login is always done with empty username and password."]}
{"index": 7402, "name": "urllib.request.CacheFTPHandler.setTimeout", "module": "urllib", "doc": ["Set timeout of connections to t seconds."]}
{"index": 7403, "name": "urllib.request.CacheFTPHandler.setMaxConns", "module": "urllib", "doc": ["Set maximum number of cached connections to m."]}
{"index": 7404, "name": "urllib.request.UnknownHandler.unknown_open", "module": "urllib", "doc": ["Raise a URLError exception."]}
{"index": 7405, "name": "urllib.request.HTTPErrorProcessor.http_response", "module": "urllib", "doc": ["Process HTTP error responses.", "For 200 error codes, the response object is returned immediately.", "For non-200 error codes, this simply passes the job on to the http_error_<type>() handler methods, via OpenerDirector.error().", "Eventually, HTTPDefaultErrorHandler will raise an HTTPError if no other handler handles the error."]}
{"index": 7406, "name": "urllib.request.HTTPErrorProcessor.https_response", "module": "urllib", "doc": ["Process HTTPS error responses.", "The behavior is same as http_response()."]}
{"index": 7407, "name": "urllib.request.urlretrieve", "module": "urllib", "doc": ["Copy a network object denoted by a URL to a local file.", "If the URL points to a local file, the object will not be copied unless filename is supplied.", "Return a tuple (filename, headers) where filename is the local file name under which the object can be found, and headers is whatever the info() method of the object returned by urlopen() returned (for a remote object).", "Exceptions are the same as for urlopen().", "The second argument, if present, specifies the file location to copy to (if absent, the location will be a tempfile with a generated name).", "The third argument, if present, is a callable that will be called once on establishment of the network connection and once after each block read thereafter.", "The callable will be passed three arguments; a count of blocks transferred so far, a block size in bytes, and the total size of the file.", "The third argument may be -1 on older FTP servers which do not return a file size in response to a retrieval request.", "The following example illustrates the most common usage scenario:", "If the url uses the http: scheme identifier, the optional data argument may be given to specify a POST request (normally the request type is GET).", "The data argument must be a bytes object in standard application/x-www-form-urlencoded format; see the urllib.parse.urlencode() function.", "urlretrieve() will raise ContentTooShortError when it detects that the amount of data available  was less than the expected amount (which is the size reported by a  Content-Length header).", "This can occur, for example, when the  download is interrupted.", "The Content-Length is treated as a lower bound: if there\u2019s more data  to read, urlretrieve reads more data, but if less data is available,  it raises the exception.", "You can still retrieve the downloaded data in this case, it is stored  in the content attribute of the exception instance.", "If no Content-Length header was supplied, urlretrieve can not check the size of the data it has downloaded, and just returns it.", "In this case you just have to assume that the download was successful."]}
{"index": 7408, "name": "urllib.request.urlcleanup", "module": "urllib", "doc": ["Cleans up temporary files that may have been left behind by previous calls to urlretrieve()."]}
{"index": 7409, "name": "urllib.request.URLopener", "module": "urllib", "doc": ["Base class for opening and reading URLs.", "Unless you need to support opening objects using schemes other than http:, ftp:, or file:, you probably want to use FancyURLopener.", "By default, the URLopener class sends a User-Agent header of urllib/VVV, where VVV is the urllib version number.", "Applications can define their own User-Agent header by subclassing URLopener or FancyURLopener and setting the class attribute version to an appropriate string value in the subclass definition.", "The optional proxies parameter should be a dictionary mapping scheme names to proxy URLs, where an empty dictionary turns proxies off completely.", "Its default value is None, in which case environmental proxy settings will be used if present, as discussed in the definition of urlopen(), above.", "Additional keyword parameters, collected in x509, may be used for authentication of the client when using the https: scheme.", "The keywords key_file and cert_file are supported to provide an  SSL key and certificate; both are needed to support client authentication.", "URLopener objects will raise an OSError exception if the server returns an error code."]}
{"index": 7410, "name": "urllib.request.URLopener.open", "module": "urllib", "doc": ["Open fullurl using the appropriate protocol.", "This method sets up cache and proxy information, then calls the appropriate open method with its input arguments.", "If the scheme is not recognized, open_unknown() is called.", "The data argument has the same meaning as the data argument of urlopen().", "This method always quotes fullurl using quote()."]}
{"index": 7411, "name": "urllib.request.URLopener.open_unknown", "module": "urllib", "doc": ["Overridable interface to open unknown URL types."]}
{"index": 7412, "name": "urllib.request.URLopener.retrieve", "module": "urllib", "doc": ["Retrieves the contents of url and places it in filename.", "The return value is a tuple consisting of a local filename and either an email.message.Message object containing the response headers (for remote URLs) or None (for local URLs).", "The caller must then open and read the contents of filename.", "If filename is not given and the URL refers to a local file, the input filename is returned.", "If the URL is non-local and filename is not given, the filename is the output of tempfile.mktemp() with a suffix that matches the suffix of the last path component of the input URL.", "If reporthook is given, it must be a function accepting three numeric parameters: A chunk number, the maximum size chunks are read in and the total size of the download (-1 if unknown).", "It will be called once at the start and after each chunk of data is read from the network.", "reporthook is ignored for local URLs.", "If the url uses the http: scheme identifier, the optional data argument may be given to specify a POST request (normally the request type is GET).", "The data argument must in standard application/x-www-form-urlencoded format; see the urllib.parse.urlencode() function."]}
{"index": 7413, "name": "urllib.request.URLopener.version", "module": "urllib", "doc": ["Variable that specifies the user agent of the opener object.", "To get urllib to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor."]}
{"index": 7414, "name": "urllib.request.FancyURLopener", "module": "urllib", "doc": ["FancyURLopener subclasses URLopener providing default handling for the following HTTP response codes: 301, 302, 303, 307 and 401.", "For the 30x response codes listed above, the Location header is used to fetch the actual URL.", "For 401 response codes (authentication required), basic HTTP authentication is performed.", "For the 30x response codes, recursion is bounded by the value of the maxtries attribute, which defaults to 10.", "For all other response codes, the method http_error_default() is called which you can override in subclasses to handle the error appropriately.", "The parameters to the constructor are the same as those for URLopener.", "The FancyURLopener class offers one additional method that should be overloaded to provide the appropriate behavior:"]}
{"index": 7415, "name": "urllib.request.FancyURLopener.prompt_user_passwd", "module": "urllib", "doc": ["Return information needed to authenticate the user at the given host in the specified security realm.", "The return value should be a tuple, (user, password), which can be used for basic authentication.", "The implementation prompts for this information on the terminal; an application should override this method to use an appropriate interaction model in the local environment."]}
{"index": 7416, "name": "urllib.robotparser.RobotFileParser", "module": "urllib", "doc": ["This class provides methods to read, parse and answer questions about the robots.txt file at url."]}
{"index": 7417, "name": "urllib.robotparser.RobotFileParser.set_url", "module": "urllib", "doc": ["Sets the URL referring to a robots.txt file."]}
{"index": 7418, "name": "urllib.robotparser.RobotFileParser.read", "module": "urllib", "doc": ["Reads the robots.txt URL and feeds it to the parser."]}
{"index": 7419, "name": "urllib.robotparser.RobotFileParser.parse", "module": "urllib", "doc": ["Parses the lines argument."]}
{"index": 7420, "name": "urllib.robotparser.RobotFileParser.can_fetch", "module": "urllib", "doc": ["Returns True if the useragent is allowed to fetch the url according to the rules contained in the parsed robots.txt file."]}
{"index": 7421, "name": "urllib.robotparser.RobotFileParser.mtime", "module": "urllib", "doc": ["Returns the time the robots.txt file was last fetched.", "This is useful for long-running web spiders that need to check for new robots.txt files periodically."]}
{"index": 7422, "name": "urllib.robotparser.RobotFileParser.modified", "module": "urllib", "doc": ["Sets the time the robots.txt file was last fetched to the current time."]}
{"index": 7423, "name": "urllib.robotparser.RobotFileParser.crawl_delay", "module": "urllib", "doc": ["Returns the value of the Crawl-delay parameter from robots.txt for the useragent in question.", "If there is no such parameter or it doesn\u2019t apply to the useragent specified or the robots.txt entry for this parameter has invalid syntax, return None."]}
{"index": 7424, "name": "urllib.robotparser.RobotFileParser.request_rate", "module": "urllib", "doc": ["Returns the contents of the Request-rate parameter from robots.txt as a named tuple RequestRate(requests, seconds).", "If there is no such parameter or it doesn\u2019t apply to the useragent specified or the robots.txt entry for this parameter has invalid syntax, return None."]}
{"index": 7425, "name": "uu.encode", "module": "uu", "doc": ["Uuencode file in_file into file out_file.", "The uuencoded file will have the header specifying name and mode as the defaults for the results of decoding the file.", "The default defaults are taken from in_file, or '-' and 0o666 respectively.", "If backtick is true, zeros are represented by '`' instead of spaces."]}
{"index": 7426, "name": "uu.decode", "module": "uu", "doc": ["This call decodes uuencoded file in_file placing the result on file out_file.", "If out_file is a pathname, mode is used to set the permission bits if the file must be created.", "Defaults for out_file and mode are taken from the uuencode header.", "However, if the file specified in the header already exists, a uu.Error is raised.", "decode() may print a warning to standard error if the input was produced by an incorrect uuencoder and Python could recover from that error.", "Setting quiet to a true value silences this warning."]}
{"index": 7427, "name": "uu.Error", "module": "uu", "doc": ["Subclass of Exception, this can be raised by uu.decode() under various situations, such as described above, but also including a badly formatted header, or truncated input file."]}
{"index": 7428, "name": "uuid.SafeUUID.safe", "module": "uuid", "doc": ["The UUID was generated by the platform in a multiprocessing-safe way."]}
{"index": 7429, "name": "uuid.SafeUUID.unsafe", "module": "uuid", "doc": ["The UUID was not generated in a multiprocessing-safe way."]}
{"index": 7430, "name": "uuid.SafeUUID.unknown", "module": "uuid", "doc": ["The platform does not provide information on whether the UUID was generated safely or not."]}
{"index": 7431, "name": "uuid.UUID", "module": "uuid", "doc": ["Create a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes in big-endian order as the bytes argument, a string of 16 bytes in little-endian order as the bytes_le argument, a tuple of six integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version, 8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as the fields argument, or a single 128-bit integer as the int argument.", "When a string of hex digits is given, curly braces, hyphens, and a URN prefix are all optional.", "For example, these expressions all yield the same UUID:", "Exactly one of hex, bytes, bytes_le, fields, or int must be given.", "The version argument is optional; if given, the resulting UUID will have its variant and version number set according to RFC 4122, overriding bits in the given hex, bytes, bytes_le, fields, or int.", "Comparison of UUID objects are made by way of comparing their UUID.int attributes.", "Comparison with a non-UUID object raises a TypeError.", "str(uuid) returns a string in the form 12345678-1234-5678-1234-567812345678 where the 32 hexadecimal digits represent the UUID."]}
{"index": 7432, "name": "uuid.UUID.bytes", "module": "uuid", "doc": ["The UUID as a 16-byte string (containing the six integer fields in big-endian byte order)."]}
{"index": 7433, "name": "uuid.UUID.bytes_le", "module": "uuid", "doc": ["The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order)."]}
{"index": 7434, "name": "uuid.UUID.fields", "module": "uuid", "doc": ["A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:"]}
{"index": 7435, "name": "uuid.UUID.hex", "module": "uuid", "doc": ["The UUID as a 32-character hexadecimal string."]}
{"index": 7436, "name": "uuid.UUID.int", "module": "uuid", "doc": ["The UUID as a 128-bit integer."]}
{"index": 7437, "name": "uuid.UUID.urn", "module": "uuid", "doc": ["The UUID as a URN as specified in RFC 4122."]}
{"index": 7438, "name": "uuid.UUID.variant", "module": "uuid", "doc": ["The UUID variant, which determines the internal layout of the UUID.", "This will be one of the constants RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE."]}
{"index": 7439, "name": "uuid.UUID.version", "module": "uuid", "doc": ["The UUID version number (1 through 5, meaningful only when the variant is RFC_4122)."]}
{"index": 7440, "name": "uuid.UUID.is_safe", "module": "uuid", "doc": ["An enumeration of SafeUUID which indicates whether the platform generated the UUID in a multiprocessing-safe way."]}
{"index": 7441, "name": "uuid.getnode", "module": "uuid", "doc": ["Get the hardware address as a 48-bit positive integer.", "The first time this runs, it may launch a separate program, which could be quite slow.", "If all attempts to obtain the hardware address fail, we choose a random 48-bit number with the multicast bit (least significant bit of the first octet) set to 1 as recommended in RFC 4122.", "\u201cHardware address\u201d means the MAC address of a network interface.", "On a machine with multiple network interfaces, universally administered MAC addresses (i.e.", "where the second least significant bit of the first octet is unset) will be preferred over locally administered MAC addresses, but with no other ordering guarantees."]}
{"index": 7442, "name": "uuid.uuid1", "module": "uuid", "doc": ["Generate a UUID from a host ID, sequence number, and the current time.", "If node is not given, getnode() is used to obtain the hardware address.", "If clock_seq is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen."]}
{"index": 7443, "name": "uuid.uuid3", "module": "uuid", "doc": ["Generate a UUID based on the MD5 hash of a namespace identifier (which is a UUID) and a name (which is a string)."]}
{"index": 7444, "name": "uuid.uuid4", "module": "uuid", "doc": ["Generate a random UUID."]}
{"index": 7445, "name": "uuid.uuid5", "module": "uuid", "doc": ["Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a UUID) and a name (which is a string)."]}
{"index": 7446, "name": "uuid.NAMESPACE_DNS", "module": "uuid", "doc": ["When this namespace is specified, the name string is a fully-qualified domain name."]}
{"index": 7447, "name": "uuid.NAMESPACE_URL", "module": "uuid", "doc": ["When this namespace is specified, the name string is a URL."]}
{"index": 7448, "name": "uuid.NAMESPACE_OID", "module": "uuid", "doc": ["When this namespace is specified, the name string is an ISO OID."]}
{"index": 7449, "name": "uuid.NAMESPACE_X500", "module": "uuid", "doc": ["When this namespace is specified, the name string is an X.500 DN in DER or a text output format."]}
{"index": 7450, "name": "uuid.RESERVED_NCS", "module": "uuid", "doc": ["Reserved for NCS compatibility."]}
{"index": 7451, "name": "uuid.RFC_4122", "module": "uuid", "doc": ["Specifies the UUID layout given in RFC 4122."]}
{"index": 7452, "name": "uuid.RESERVED_MICROSOFT", "module": "uuid", "doc": ["Reserved for Microsoft compatibility."]}
{"index": 7453, "name": "uuid.RESERVED_FUTURE", "module": "uuid", "doc": ["Reserved for future definition."]}
{"index": 7454, "name": "venv.EnvBuilder", "module": "venv", "doc": ["The EnvBuilder class accepts the following keyword arguments on instantiation:", "Creators of third-party virtual environment tools will be free to use the provided EnvBuilder class as a base class.", "The returned env-builder is an object which has a method, create:", "In addition, EnvBuilder provides this utility method that can be called from setup_scripts() or post_setup() in subclasses to assist in installing custom scripts into the virtual environment."]}
{"index": 7455, "name": "venv.EnvBuilder.create", "module": "venv", "doc": ["Create a virtual environment by specifying the target directory (absolute or relative to the current directory) which is to contain the virtual environment.", "The create method will either create the environment in the specified directory, or raise an appropriate exception.", "The create method of the EnvBuilder class illustrates the hooks available for subclass customization:", "Each of the methods ensure_directories(), create_configuration(), setup_python(), setup_scripts() and post_setup() can be overridden."]}
{"index": 7456, "name": "venv.EnvBuilder.ensure_directories", "module": "venv", "doc": ["Creates the environment directory and all necessary directories, and returns a context object.", "This is just a holder for attributes (such as paths), for use by the other methods.", "The directories are allowed to exist already, as long as either clear or upgrade were specified to allow operating on an existing environment directory."]}
{"index": 7457, "name": "venv.EnvBuilder.create_configuration", "module": "venv", "doc": ["Creates the pyvenv.cfg configuration file in the environment."]}
{"index": 7458, "name": "venv.EnvBuilder.setup_python", "module": "venv", "doc": ["Creates a copy or symlink to the Python executable in the environment.", "On POSIX systems, if a specific executable python3.x was used, symlinks to python and python3 will be created pointing to that executable, unless files with those names already exist."]}
{"index": 7459, "name": "venv.EnvBuilder.setup_scripts", "module": "venv", "doc": ["Installs activation scripts appropriate to the platform into the virtual environment."]}
{"index": 7460, "name": "venv.EnvBuilder.post_setup", "module": "venv", "doc": ["A placeholder method which can be overridden in third party implementations to pre-install packages in the virtual environment or perform other post-creation steps."]}
{"index": 7461, "name": "venv.EnvBuilder.install_scripts", "module": "venv", "doc": ["path is the path to a directory that should contain subdirectories \u201ccommon\u201d, \u201cposix\u201d, \u201cnt\u201d, each containing scripts destined for the bin directory in the environment.", "The contents of \u201ccommon\u201d and the directory corresponding to os.name are copied after some text replacement of placeholders:", "The directories are allowed to exist (for when an existing environment is being upgraded)."]}
{"index": 7462, "name": "venv.create", "module": "venv", "doc": ["Create an EnvBuilder with the given keyword arguments, and call its create() method with the env_dir argument."]}
{"index": 7463, "name": "warnings.warn", "module": "warnings", "doc": ["Issue a warning, or maybe ignore it or raise an exception.", "The category argument, if given, must be a warning category class (see above); it defaults to UserWarning.", "Alternatively message can be a Warning instance, in which case category will be ignored and message.__class__ will be used.", "In this case the message text will be str(message).", "This function raises an exception if the particular warning issued is changed into an error by the warnings filter see above.", "The stacklevel argument can be used by wrapper functions written in Python, like this:", "This makes the warning refer to deprecation()\u2019s caller, rather than to the source of deprecation() itself (since the latter would defeat the purpose of the warning message).", "source, if supplied, is the destroyed object which emitted a ResourceWarning."]}
{"index": 7464, "name": "warnings.warn_explicit", "module": "warnings", "doc": ["This is a low-level interface to the functionality of warn(), passing in explicitly the message, category, filename and line number, and optionally the module name and the registry (which should be the __warningregistry__ dictionary of the module).", "The module name defaults to the filename with .py stripped; if no registry is passed, the warning is never suppressed.", "message must be a string and category a subclass of Warning or message may be a Warning instance, in which case category will be ignored.", "module_globals, if supplied, should be the global namespace in use by the code for which the warning is issued.", "(This argument is used to support displaying source for modules found in zipfiles or other non-filesystem import sources).", "source, if supplied, is the destroyed object which emitted a ResourceWarning."]}
{"index": 7465, "name": "warnings.showwarning", "module": "warnings", "doc": ["Write a warning to a file.", "The default implementation calls formatwarning(message, category, filename, lineno, line) and writes the resulting string to file, which defaults to sys.stderr.", "You may replace this function with any callable by assigning to warnings.showwarning.", "line is a line of source code to be included in the warning message; if line is not supplied, showwarning() will try to read the line specified by filename and lineno."]}
{"index": 7466, "name": "warnings.formatwarning", "module": "warnings", "doc": ["Format a warning the standard way.", "This returns a string which may contain embedded newlines and ends in a newline.", "line is a line of source code to be included in the warning message; if line is not supplied, formatwarning() will try to read the line specified by filename and lineno."]}
{"index": 7467, "name": "warnings.filterwarnings", "module": "warnings", "doc": ["Insert an entry into the list of warnings filter specifications.", "The entry is inserted at the front by default; if append is true, it is inserted at the end.", "This checks the types of the arguments, compiles the message and module regular expressions, and inserts them as a tuple in the list of warnings filters.", "Entries closer to the front of the list override entries later in the list, if both match a particular warning.", "Omitted arguments default to a value that matches everything."]}
{"index": 7468, "name": "warnings.simplefilter", "module": "warnings", "doc": ["Insert a simple entry into the list of warnings filter specifications.", "The meaning of the function parameters is as for filterwarnings(), but regular expressions are not needed as the filter inserted always matches any message in any module as long as the category and line number match."]}
{"index": 7469, "name": "warnings.resetwarnings", "module": "warnings", "doc": ["Reset the warnings filter.", "This discards the effect of all previous calls to filterwarnings(), including that of the -W command line options and calls to simplefilter()."]}
{"index": 7470, "name": "warnings.catch_warnings", "module": "warnings", "doc": ["A context manager that copies and, upon exit, restores the warnings filter and the showwarning() function.", "If the record argument is False (the default) the context manager returns None on entry.", "If record is True, a list is returned that is progressively populated with objects as seen by a custom showwarning() function (which also suppresses output to sys.stdout).", "Each object in the list has attributes with the same names as the arguments to showwarning().", "The module argument takes a module that will be used instead of the module returned when you import warnings whose filter will be protected.", "This argument exists primarily for testing the warnings module itself."]}
{"index": 7471, "name": "wave.open", "module": "wave", "doc": ["If file is a string, open the file by that name, otherwise treat it as a file-like object.", "mode can be:", "Note that it does not allow read/write WAV files.", "A mode of 'rb' returns a Wave_read object, while a mode of 'wb' returns a Wave_write object.", "If mode is omitted and a file-like object is passed as file, file.mode is used as the default value for mode.", "If you pass in a file-like object, the wave object will not close it when its close() method is called; it is the caller\u2019s responsibility to close the file object.", "The open() function may be used in a with statement.", "When the with block completes, the Wave_read.close() or Wave_write.close() method is called."]}
{"index": 7472, "name": "wave.openfp", "module": "wave", "doc": ["A synonym for open(), maintained for backwards compatibility."]}
{"index": 7473, "name": "wave.Error", "module": "wave", "doc": ["An error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency."]}
{"index": 7474, "name": "wave.Wave_read.close", "module": "wave", "doc": ["Close the stream if it was opened by wave, and make the instance unusable.", "This is called automatically on object collection."]}
{"index": 7475, "name": "wave.Wave_read.getnchannels", "module": "wave", "doc": ["Returns number of audio channels (1 for mono, 2 for stereo)."]}
{"index": 7476, "name": "wave.Wave_read.getsampwidth", "module": "wave", "doc": ["Returns sample width in bytes."]}
{"index": 7477, "name": "wave.Wave_read.getframerate", "module": "wave", "doc": ["Returns sampling frequency."]}
{"index": 7478, "name": "wave.Wave_read.getnframes", "module": "wave", "doc": ["Returns number of audio frames."]}
{"index": 7479, "name": "wave.Wave_read.getcomptype", "module": "wave", "doc": ["Returns compression type ('NONE' is the only supported type)."]}
{"index": 7480, "name": "wave.Wave_read.getcompname", "module": "wave", "doc": ["Human-readable version of getcomptype().", "Usually 'not compressed' parallels 'NONE'."]}
{"index": 7481, "name": "wave.Wave_read.getparams", "module": "wave", "doc": ["Returns a namedtuple() (nchannels, sampwidth, framerate, nframes, comptype, compname), equivalent to output of the get*() methods."]}
{"index": 7482, "name": "wave.Wave_read.readframes", "module": "wave", "doc": ["Reads and returns at most n frames of audio, as a bytes object."]}
{"index": 7483, "name": "wave.Wave_read.rewind", "module": "wave", "doc": ["Rewind the file pointer to the beginning of the audio stream."]}
{"index": 7484, "name": "wave.Wave_read.getmarkers", "module": "wave", "doc": ["Returns None."]}
{"index": 7485, "name": "wave.Wave_read.getmark", "module": "wave", "doc": ["Raise an error."]}
{"index": 7486, "name": "wave.Wave_read.setpos", "module": "wave", "doc": ["Set the file pointer to the specified position."]}
{"index": 7487, "name": "wave.Wave_read.tell", "module": "wave", "doc": ["Return current file pointer position."]}
{"index": 7488, "name": "wave.Wave_write.close", "module": "wave", "doc": ["Make sure nframes is correct, and close the file if it was opened by wave.", "This method is called upon object collection.", "It will raise an exception if the output stream is not seekable and nframes does not match the number of frames actually written."]}
{"index": 7489, "name": "wave.Wave_write.setnchannels", "module": "wave", "doc": ["Set the number of channels."]}
{"index": 7490, "name": "wave.Wave_write.setsampwidth", "module": "wave", "doc": ["Set the sample width to n bytes."]}
{"index": 7491, "name": "wave.Wave_write.setframerate", "module": "wave", "doc": ["Set the frame rate to n."]}
{"index": 7492, "name": "wave.Wave_write.setnframes", "module": "wave", "doc": ["Set the number of frames to n.  This will be changed later if the number of frames actually written is different (this update attempt will raise an error if the output stream is not seekable)."]}
{"index": 7493, "name": "wave.Wave_write.setcomptype", "module": "wave", "doc": ["Set the compression type and description.", "At the moment, only compression type NONE is supported, meaning no compression."]}
{"index": 7494, "name": "wave.Wave_write.setparams", "module": "wave", "doc": ["The tuple should be (nchannels, sampwidth, framerate, nframes, comptype, compname), with values valid for the set*() methods.", "Sets all parameters."]}
{"index": 7495, "name": "wave.Wave_write.tell", "module": "wave", "doc": ["Return current position in the file, with the same disclaimer for the Wave_read.tell() and Wave_read.setpos() methods."]}
{"index": 7496, "name": "wave.Wave_write.writeframesraw", "module": "wave", "doc": ["Write audio frames, without correcting nframes."]}
{"index": 7497, "name": "wave.Wave_write.writeframes", "module": "wave", "doc": ["Write audio frames and make sure nframes is correct.", "It will raise an error if the output stream is not seekable and the total number of frames that have been written after data has been written does not match the previously set value for nframes."]}
{"index": 7498, "name": "weakref.ref", "module": "weakref", "doc": ["Return a weak reference to object.", "The original object can be retrieved by calling the reference object if the referent is still alive; if the referent is no longer alive, calling the reference object will cause None to be returned.", "If callback is provided and not None, and the returned weakref object is still alive, the callback will be called when the object is about to be finalized; the weak reference object will be passed as the only parameter to the callback; the referent will no longer be available.", "It is allowable for many weak references to be constructed for the same object.", "Callbacks registered for each weak reference will be called from the most recently registered callback to the oldest registered callback.", "Exceptions raised by the callback will be noted on the standard error output, but cannot be propagated; they are handled in exactly the same way as exceptions raised from an object\u2019s __del__() method.", "Weak references are hashable if the object is hashable.", "They will maintain their hash value even after the object was deleted.", "If hash() is called the first time only after the object was deleted, the call will raise TypeError.", "Weak references support tests for equality, but not ordering.", "If the referents are still alive, two references have the same equality relationship as their referents (regardless of the callback).", "If either referent has been deleted, the references are equal only if the reference objects are the same object.", "This is a subclassable type rather than a factory function."]}
{"index": 7499, "name": "weakref.ref.__callback__", "module": "weakref", "doc": ["This read-only attribute returns the callback currently associated to the weakref.", "If there is no callback or if the referent of the weakref is no longer alive then this attribute will have value None."]}
{"index": 7500, "name": "weakref.proxy", "module": "weakref", "doc": ["Return a proxy to object which uses a weak reference.", "This supports use of the proxy in most contexts instead of requiring the explicit dereferencing used with weak reference objects.", "The returned object will have a type of either ProxyType or CallableProxyType, depending on whether object is callable.", "Proxy objects are not hashable regardless of the referent; this avoids a number of problems related to their fundamentally mutable nature, and prevent their use as dictionary keys.", "callback is the same as the parameter of the same name to the ref() function."]}
{"index": 7501, "name": "weakref.getweakrefcount", "module": "weakref", "doc": ["Return the number of weak references and proxies which refer to object."]}
{"index": 7502, "name": "weakref.getweakrefs", "module": "weakref", "doc": ["Return a list of all weak reference and proxy objects which refer to object."]}
{"index": 7503, "name": "weakref.WeakKeyDictionary", "module": "weakref", "doc": ["Mapping class that references keys weakly.", "Entries in the dictionary will be discarded when there is no longer a strong reference to the key.", "This can be used to associate additional data with an object owned by other parts of an application without adding attributes to those objects.", "This can be especially useful with objects that override attribute accesses."]}
{"index": 7504, "name": "weakref.WeakKeyDictionary.keyrefs", "module": "weakref", "doc": ["Return an iterable of the weak references to the keys."]}
{"index": 7505, "name": "weakref.WeakValueDictionary", "module": "weakref", "doc": ["Mapping class that references values weakly.", "Entries in the dictionary will be discarded when no strong reference to the value exists any more."]}
{"index": 7506, "name": "weakref.WeakValueDictionary.valuerefs", "module": "weakref", "doc": ["Return an iterable of the weak references to the values."]}
{"index": 7507, "name": "weakref.WeakSet", "module": "weakref", "doc": ["Set class that keeps weak references to its elements.", "An element will be discarded when no strong reference to it exists any more."]}
{"index": 7508, "name": "weakref.WeakMethod", "module": "weakref", "doc": ["A custom ref subclass which simulates a weak reference to a bound method (i.e., a method defined on a class and looked up on an instance).", "Since a bound method is ephemeral, a standard weak reference cannot keep hold of it.", "WeakMethod has special code to recreate the bound method until either the object or the original function dies:"]}
{"index": 7509, "name": "weakref.finalize", "module": "weakref", "doc": ["Return a callable finalizer object which will be called when obj is garbage collected.", "Unlike an ordinary weak reference, a finalizer will always survive until the reference object is collected, greatly simplifying lifecycle management.", "A finalizer is considered alive until it is called (either explicitly or at garbage collection), and after that it is dead.", "Calling a live finalizer returns the result of evaluating func(*arg, **kwargs), whereas calling a dead finalizer returns None.", "Exceptions raised by finalizer callbacks during garbage collection will be shown on the standard error output, but cannot be propagated.", "They are handled in the same way as exceptions raised from an object\u2019s __del__() method or a weak reference\u2019s callback.", "When the program exits, each remaining live finalizer is called unless its atexit attribute has been set to false.", "They are called in reverse order of creation.", "A finalizer will never invoke its callback during the later part of the interpreter shutdown when module globals are liable to have been replaced by None."]}
{"index": 7510, "name": "weakref.finalize.__call__", "module": "weakref", "doc": ["If self is alive then mark it as dead and return the result of calling func(*args, **kwargs).", "If self is dead then return None."]}
{"index": 7511, "name": "weakref.finalize.detach", "module": "weakref", "doc": ["If self is alive then mark it as dead and return the tuple (obj, func, args, kwargs).", "If self is dead then return None."]}
{"index": 7512, "name": "weakref.finalize.peek", "module": "weakref", "doc": ["If self is alive then return the tuple (obj, func, args, kwargs).", "If self is dead then return None."]}
{"index": 7513, "name": "weakref.finalize.alive", "module": "weakref", "doc": ["Property which is true if the finalizer is alive, false otherwise."]}
{"index": 7514, "name": "weakref.finalize.atexit", "module": "weakref", "doc": ["A writable boolean property which by default is true.", "When the program exits, it calls all remaining live finalizers for which atexit is true.", "They are called in reverse order of creation."]}
{"index": 7515, "name": "weakref.ReferenceType", "module": "weakref", "doc": ["The type object for weak references objects."]}
{"index": 7516, "name": "weakref.ProxyType", "module": "weakref", "doc": ["The type object for proxies of objects which are not callable."]}
{"index": 7517, "name": "weakref.CallableProxyType", "module": "weakref", "doc": ["The type object for proxies of callable objects."]}
{"index": 7518, "name": "weakref.ProxyTypes", "module": "weakref", "doc": ["Sequence containing all the type objects for proxies.", "This can make it simpler to test if an object is a proxy without being dependent on naming both proxy types."]}
{"index": 7519, "name": "weakref.ReferenceError", "module": "weakref", "doc": ["Exception raised when a proxy object is used but the underlying object has been collected.", "This is the same as the standard ReferenceError exception."]}
{"index": 7520, "name": "webbrowser.Error", "module": "webbrowser", "doc": ["Exception raised when a browser control error occurs."]}
{"index": 7521, "name": "webbrowser.open", "module": "webbrowser", "doc": ["Display url using the default browser.", "If new is 0, the url is opened in the same browser window if possible.", "If new is 1, a new browser window is opened if possible.", "If new is 2, a new browser page (\u201ctab\u201d) is opened if possible.", "If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).", "Note that on some platforms, trying to open a filename using this function, may work and start the operating system\u2019s associated program.", "However, this is neither supported nor portable."]}
{"index": 7522, "name": "webbrowser.open_new", "module": "webbrowser", "doc": ["Open url in a new window of the default browser, if possible, otherwise, open url in the only browser window."]}
{"index": 7523, "name": "webbrowser.open_new_tab", "module": "webbrowser", "doc": ["Open url in a new page (\u201ctab\u201d) of the default browser, if possible, otherwise equivalent to open_new()."]}
{"index": 7524, "name": "webbrowser.get", "module": "webbrowser", "doc": ["Return a controller object for the browser type using.", "If using is None, return a controller for a default browser appropriate to the caller\u2019s environment."]}
{"index": 7525, "name": "webbrowser.register", "module": "webbrowser", "doc": ["Register the browser type name.", "Once a browser type is registered, the get() function can return a controller for that browser type.", "If instance is not provided, or is None, constructor will be called without parameters to create an instance when needed.", "If instance is provided, constructor will never be called, and may be None.", "Setting preferred to True makes this browser a preferred result for a get() call with no argument.", "Otherwise, this entry point is only useful if you plan to either set the BROWSER variable or call get() with a nonempty argument matching the name of a handler you declare."]}
{"index": 7526, "name": "webbrowser.controller.open", "module": "webbrowser", "doc": ["Display url using the browser handled by this controller.", "If new is 1, a new browser window is opened if possible.", "If new is 2, a new browser page (\u201ctab\u201d) is opened if possible."]}
{"index": 7527, "name": "webbrowser.controller.open_new", "module": "webbrowser", "doc": ["Open url in a new window of the browser handled by this controller, if possible, otherwise, open url in the only browser window.", "Alias open_new()."]}
{"index": 7528, "name": "webbrowser.controller.open_new_tab", "module": "webbrowser", "doc": ["Open url in a new page (\u201ctab\u201d) of the browser handled by this controller, if possible, otherwise equivalent to open_new()."]}
{"index": 7529, "name": "id2", "module": "webbrowser", "doc": ["Executables named here without a full path will be searched in the directories given in the PATH environment variable."]}
{"index": 7530, "name": "winreg.CloseKey", "module": "winreg", "doc": ["Closes a previously opened registry key.", "The hkey argument specifies a previously opened key."]}
{"index": 7531, "name": "winreg.ConnectRegistry", "module": "winreg", "doc": ["Establishes a connection to a predefined registry handle on another computer, and returns a handle object.", "computer_name is the name of the remote computer, of the form r\"\\\\computername\".", "If None, the local computer is used.", "key is the predefined handle to connect to.", "The return value is the handle of the opened key.", "If the function fails, an OSError exception is raised."]}
{"index": 7532, "name": "winreg.CreateKey", "module": "winreg", "doc": ["Creates or opens the specified key, returning a handle object.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that names the key this method opens or creates.", "If key is one of the predefined keys, sub_key may be None.", "In that case, the handle returned is the same key handle passed in to the function.", "If the key already exists, this function opens the existing key.", "The return value is the handle of the opened key.", "If the function fails, an OSError exception is raised."]}
{"index": 7533, "name": "winreg.CreateKeyEx", "module": "winreg", "doc": ["Creates or opens the specified key, returning a handle object.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that names the key this method opens or creates.", "reserved is a reserved integer, and must be zero.", "The default is zero.", "access is an integer that specifies an access mask that describes the desired security access for the key.", "Default is KEY_WRITE.", "See Access Rights for other allowed values.", "If key is one of the predefined keys, sub_key may be None.", "In that case, the handle returned is the same key handle passed in to the function.", "If the key already exists, this function opens the existing key.", "The return value is the handle of the opened key.", "If the function fails, an OSError exception is raised."]}
{"index": 7534, "name": "winreg.DeleteKey", "module": "winreg", "doc": ["Deletes the specified key.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that must be a subkey of the key identified by the key parameter.", "This value must not be None, and the key may not have subkeys.", "This method can not delete keys with subkeys.", "If the method succeeds, the entire key, including all of its values, is removed.", "If the method fails, an OSError exception is raised."]}
{"index": 7535, "name": "winreg.DeleteKeyEx", "module": "winreg", "doc": ["Deletes the specified key.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that must be a subkey of the key identified by the key parameter.", "This value must not be None, and the key may not have subkeys.", "reserved is a reserved integer, and must be zero.", "The default is zero.", "access is an integer that specifies an access mask that describes the desired security access for the key.", "Default is KEY_WOW64_64KEY.", "See Access Rights for other allowed values.", "This method can not delete keys with subkeys.", "If the method succeeds, the entire key, including all of its values, is removed.", "If the method fails, an OSError exception is raised.", "On unsupported Windows versions, NotImplementedError is raised."]}
{"index": 7536, "name": "winreg.DeleteValue", "module": "winreg", "doc": ["Removes a named value from a registry key.", "key is an already open key, or one of the predefined HKEY_* constants.", "value is a string that identifies the value to remove."]}
{"index": 7537, "name": "winreg.EnumKey", "module": "winreg", "doc": ["Enumerates subkeys of an open registry key, returning a string.", "key is an already open key, or one of the predefined HKEY_* constants.", "index is an integer that identifies the index of the key to retrieve.", "The function retrieves the name of one subkey each time it is called.", "It is typically called repeatedly until an OSError exception is raised, indicating, no more values are available."]}
{"index": 7538, "name": "winreg.EnumValue", "module": "winreg", "doc": ["Enumerates values of an open registry key, returning a tuple.", "key is an already open key, or one of the predefined HKEY_* constants.", "index is an integer that identifies the index of the value to retrieve.", "The function retrieves the name of one subkey each time it is called.", "It is typically called repeatedly, until an OSError exception is raised, indicating no more values.", "The result is a tuple of 3 items:"]}
{"index": 7539, "name": "winreg.ExpandEnvironmentStrings", "module": "winreg", "doc": ["Expands environment variable placeholders %NAME% in strings like REG_EXPAND_SZ:"]}
{"index": 7540, "name": "winreg.FlushKey", "module": "winreg", "doc": ["Writes all the attributes of a key to the registry.", "key is an already open key, or one of the predefined HKEY_* constants.", "It is not necessary to call FlushKey() to change a key.", "Registry changes are flushed to disk by the registry using its lazy flusher.", "Registry changes are also flushed to disk at system shutdown.", "Unlike CloseKey(), the FlushKey() method returns only when all the data has been written to the registry.", "An application should only call FlushKey() if it requires absolute certainty that registry changes are on disk."]}
{"index": 7541, "name": "winreg.LoadKey", "module": "winreg", "doc": ["Creates a subkey under the specified key and stores registration information from a specified file into that subkey.", "key is a handle returned by ConnectRegistry() or one of the constants HKEY_USERS or HKEY_LOCAL_MACHINE.", "sub_key is a string that identifies the subkey to load.", "file_name is the name of the file to load registry data from.", "This file must have been created with the SaveKey() function.", "Under the file allocation table (FAT) file system, the filename may not have an extension.", "A call to LoadKey() fails if the calling process does not have the SE_RESTORE_PRIVILEGE privilege.", "Note that privileges are different from permissions \u2013 see the RegLoadKey documentation for more details.", "If key is a handle returned by ConnectRegistry(), then the path specified in file_name is relative to the remote computer."]}
{"index": 7542, "name": "winreg.OpenKey", "module": "winreg", "doc": ["Opens the specified key, returning a handle object.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that identifies the sub_key to open.", "reserved is a reserved integer, and must be zero.", "The default is zero.", "access is an integer that specifies an access mask that describes the desired security access for the key.", "Default is KEY_READ.", "See Access Rights for other allowed values.", "The result is a new handle to the specified key.", "If the function fails, OSError is raised."]}
{"index": 7543, "name": "winreg.OpenKeyEx", "module": "winreg", "doc": ["Opens the specified key, returning a handle object.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that identifies the sub_key to open.", "reserved is a reserved integer, and must be zero.", "The default is zero.", "access is an integer that specifies an access mask that describes the desired security access for the key.", "Default is KEY_READ.", "See Access Rights for other allowed values.", "The result is a new handle to the specified key.", "If the function fails, OSError is raised."]}
{"index": 7544, "name": "winreg.QueryInfoKey", "module": "winreg", "doc": ["Returns information about a key, as a tuple.", "key is an already open key, or one of the predefined HKEY_* constants.", "The result is a tuple of 3 items:"]}
{"index": 7545, "name": "winreg.QueryValue", "module": "winreg", "doc": ["Retrieves the unnamed value for a key, as a string.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that holds the name of the subkey with which the value is associated.", "If this parameter is None or empty, the function retrieves the value set by the SetValue() method for the key identified by key.", "Values in the registry have name, type, and data components.", "This method retrieves the data for a key\u2019s first value that has a NULL name.", "But the underlying API call doesn\u2019t return the type, so always use QueryValueEx() if possible."]}
{"index": 7546, "name": "winreg.QueryValueEx", "module": "winreg", "doc": ["Retrieves the type and data for a specified value name associated with an open registry key.", "key is an already open key, or one of the predefined HKEY_* constants.", "value_name is a string indicating the value to query.", "The result is a tuple of 2 items:"]}
{"index": 7547, "name": "winreg.SaveKey", "module": "winreg", "doc": ["Saves the specified key, and all its subkeys to the specified file.", "key is an already open key, or one of the predefined HKEY_* constants.", "file_name is the name of the file to save registry data to.", "This file cannot already exist.", "If this filename includes an extension, it cannot be used on file allocation table (FAT) file systems by the LoadKey() method.", "If key represents a key on a remote computer, the path described by file_name is relative to the remote computer.", "The caller of this method must possess the SeBackupPrivilege security privilege.", "Note that privileges are different than permissions \u2013 see the Conflicts Between User Rights and Permissions documentation for more details.", "This function passes NULL for security_attributes to the API."]}
{"index": 7548, "name": "winreg.SetValue", "module": "winreg", "doc": ["Associates a value with a specified key.", "key is an already open key, or one of the predefined HKEY_* constants.", "sub_key is a string that names the subkey with which the value is associated.", "type is an integer that specifies the type of the data.", "Currently this must be REG_SZ, meaning only strings are supported.", "Use the SetValueEx() function for support for other data types.", "value is a string that specifies the new value.", "If the key specified by the sub_key parameter does not exist, the SetValue function creates it.", "Value lengths are limited by available memory.", "Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry.", "This helps the registry perform efficiently.", "The key identified by the key parameter must have been opened with KEY_SET_VALUE access."]}
{"index": 7549, "name": "winreg.SetValueEx", "module": "winreg", "doc": ["Stores data in the value field of an open registry key.", "key is an already open key, or one of the predefined HKEY_* constants.", "value_name is a string that names the subkey with which the value is associated.", "reserved can be anything \u2013 zero is always passed to the API.", "type is an integer that specifies the type of the data.", "See Value Types for the available types.", "value is a string that specifies the new value.", "This method can also set additional value and type information for the specified key.", "The key identified by the key parameter must have been opened with KEY_SET_VALUE access.", "To open the key, use the CreateKey() or OpenKey() methods.", "Value lengths are limited by available memory.", "Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry.", "This helps the registry perform efficiently."]}
{"index": 7550, "name": "winreg.DisableReflectionKey", "module": "winreg", "doc": ["Disables registry reflection for 32-bit processes running on a 64-bit operating system.", "key is an already open key, or one of the predefined HKEY_* constants.", "Will generally raise NotImplementedError if executed on a 32-bit operating system.", "If the key is not on the reflection list, the function succeeds but has no effect.", "Disabling reflection for a key does not affect reflection of any subkeys."]}
{"index": 7551, "name": "winreg.EnableReflectionKey", "module": "winreg", "doc": ["Restores registry reflection for the specified disabled key.", "key is an already open key, or one of the predefined HKEY_* constants.", "Will generally raise NotImplementedError if executed on a 32-bit operating system.", "Restoring reflection for a key does not affect reflection of any subkeys."]}
{"index": 7552, "name": "winreg.QueryReflectionKey", "module": "winreg", "doc": ["Determines the reflection state for the specified key.", "key is an already open key, or one of the predefined HKEY_* constants.", "Returns True if reflection is disabled.", "Will generally raise NotImplementedError if executed on a 32-bit operating system."]}
{"index": 7553, "name": "winreg.HKEY_CLASSES_ROOT", "module": "winreg", "doc": ["Registry entries subordinate to this key define types (or classes) of documents and the properties associated with those types.", "Shell and COM applications use the information stored under this key."]}
{"index": 7554, "name": "winreg.HKEY_CURRENT_USER", "module": "winreg", "doc": ["Registry entries subordinate to this key define the preferences of the current user.", "These preferences include the settings of environment variables, data about program groups, colors, printers, network connections, and application preferences."]}
{"index": 7555, "name": "winreg.HKEY_LOCAL_MACHINE", "module": "winreg", "doc": ["Registry entries subordinate to this key define the physical state of the computer, including data about the bus type, system memory, and installed hardware and software."]}
{"index": 7556, "name": "winreg.HKEY_USERS", "module": "winreg", "doc": ["Registry entries subordinate to this key define the default user configuration for new users on the local computer and the user configuration for the current user."]}
{"index": 7557, "name": "winreg.HKEY_PERFORMANCE_DATA", "module": "winreg", "doc": ["Registry entries subordinate to this key allow you to access performance data.", "The data is not actually stored in the registry; the registry functions cause the system to collect the data from its source."]}
{"index": 7558, "name": "winreg.HKEY_CURRENT_CONFIG", "module": "winreg", "doc": ["Contains information about the current hardware profile of the local computer system."]}
{"index": 7559, "name": "winreg.HKEY_DYN_DATA", "module": "winreg", "doc": ["This key is not used in versions of Windows after 98."]}
{"index": 7560, "name": "winreg.KEY_ALL_ACCESS", "module": "winreg", "doc": ["Combines the STANDARD_RIGHTS_REQUIRED, KEY_QUERY_VALUE, KEY_SET_VALUE, KEY_CREATE_SUB_KEY, KEY_ENUMERATE_SUB_KEYS, KEY_NOTIFY, and KEY_CREATE_LINK access rights."]}
{"index": 7561, "name": "winreg.KEY_WRITE", "module": "winreg", "doc": ["Combines the STANDARD_RIGHTS_WRITE, KEY_SET_VALUE, and KEY_CREATE_SUB_KEY access rights."]}
{"index": 7562, "name": "winreg.KEY_READ", "module": "winreg", "doc": ["Combines the STANDARD_RIGHTS_READ, KEY_QUERY_VALUE, KEY_ENUMERATE_SUB_KEYS, and KEY_NOTIFY values."]}
{"index": 7563, "name": "winreg.KEY_EXECUTE", "module": "winreg", "doc": ["Equivalent to KEY_READ."]}
{"index": 7564, "name": "winreg.KEY_QUERY_VALUE", "module": "winreg", "doc": ["Required to query the values of a registry key."]}
{"index": 7565, "name": "winreg.KEY_SET_VALUE", "module": "winreg", "doc": ["Required to create, delete, or set a registry value."]}
{"index": 7566, "name": "winreg.KEY_CREATE_SUB_KEY", "module": "winreg", "doc": ["Required to create a subkey of a registry key."]}
{"index": 7567, "name": "winreg.KEY_ENUMERATE_SUB_KEYS", "module": "winreg", "doc": ["Required to enumerate the subkeys of a registry key."]}
{"index": 7568, "name": "winreg.KEY_NOTIFY", "module": "winreg", "doc": ["Required to request change notifications for a registry key or for subkeys of a registry key."]}
{"index": 7569, "name": "winreg.KEY_CREATE_LINK", "module": "winreg", "doc": ["Reserved for system use."]}
{"index": 7570, "name": "winreg.KEY_WOW64_64KEY", "module": "winreg", "doc": ["Indicates that an application on 64-bit Windows should operate on the 64-bit registry view."]}
{"index": 7571, "name": "winreg.KEY_WOW64_32KEY", "module": "winreg", "doc": ["Indicates that an application on 64-bit Windows should operate on the 32-bit registry view."]}
{"index": 7572, "name": "winreg.REG_BINARY", "module": "winreg", "doc": ["Binary data in any form."]}
{"index": 7573, "name": "winreg.REG_DWORD", "module": "winreg", "doc": ["32-bit number."]}
{"index": 7574, "name": "winreg.REG_DWORD_LITTLE_ENDIAN", "module": "winreg", "doc": ["A 32-bit number in little-endian format.", "Equivalent to REG_DWORD."]}
{"index": 7575, "name": "winreg.REG_DWORD_BIG_ENDIAN", "module": "winreg", "doc": ["A 32-bit number in big-endian format."]}
{"index": 7576, "name": "winreg.REG_EXPAND_SZ", "module": "winreg", "doc": ["Null-terminated string containing references to environment variables (%PATH%)."]}
{"index": 7577, "name": "winreg.REG_LINK", "module": "winreg", "doc": ["A Unicode symbolic link."]}
{"index": 7578, "name": "winreg.REG_MULTI_SZ", "module": "winreg", "doc": ["A sequence of null-terminated strings, terminated by two null characters.", "(Python handles this termination automatically.)"]}
{"index": 7579, "name": "winreg.REG_NONE", "module": "winreg", "doc": ["No defined value type."]}
{"index": 7580, "name": "winreg.REG_QWORD", "module": "winreg", "doc": ["A 64-bit number."]}
{"index": 7581, "name": "winreg.REG_QWORD_LITTLE_ENDIAN", "module": "winreg", "doc": ["A 64-bit number in little-endian format.", "Equivalent to REG_QWORD."]}
{"index": 7582, "name": "winreg.REG_RESOURCE_LIST", "module": "winreg", "doc": ["A device-driver resource list."]}
{"index": 7583, "name": "winreg.REG_FULL_RESOURCE_DESCRIPTOR", "module": "winreg", "doc": ["A hardware setting."]}
{"index": 7584, "name": "winreg.REG_RESOURCE_REQUIREMENTS_LIST", "module": "winreg", "doc": ["A hardware resource list."]}
{"index": 7585, "name": "winreg.REG_SZ", "module": "winreg", "doc": ["A null-terminated string."]}
{"index": 7586, "name": "winreg.PyHKEY.Close", "module": "winreg", "doc": ["Closes the underlying Windows handle.", "If the handle is already closed, no error is raised."]}
{"index": 7587, "name": "winreg.PyHKEY.Detach", "module": "winreg", "doc": ["Detaches the Windows handle from the handle object.", "The result is an integer that holds the value of the handle before it is detached.", "If the handle is already detached or closed, this will return zero.", "After calling this function, the handle is effectively invalidated, but the handle is not closed.", "You would call this function when you need the underlying Win32 handle to exist beyond the lifetime of the handle object."]}
{"index": 7588, "name": "winreg.PyHKEY.__enter__", "module": "winreg", "doc": ["The HKEY object implements __enter__() and __exit__() and thus supports the context protocol for the with statement:", "will automatically close key when control leaves the with block."]}
{"index": 7589, "name": "winreg.PyHKEY.__exit__", "module": "winreg", "doc": ["The HKEY object implements __enter__() and __exit__() and thus supports the context protocol for the with statement:", "will automatically close key when control leaves the with block."]}
{"index": 7590, "name": "winsound.Beep", "module": "winsound", "doc": ["Beep the PC\u2019s speaker.", "The frequency parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767.", "The duration parameter specifies the number of milliseconds the sound should last.", "If the system is not able to beep the speaker, RuntimeError is raised."]}
{"index": 7591, "name": "winsound.PlaySound", "module": "winsound", "doc": ["Call the underlying PlaySound() function from the Platform API.", "The sound parameter may be a filename, a system sound alias, audio data as a bytes-like object, or None.", "Its interpretation depends on the value of flags, which can be a bitwise ORed combination of the constants described below.", "If the sound parameter is None, any currently playing waveform sound is stopped.", "If the system indicates an error, RuntimeError is raised."]}
{"index": 7592, "name": "winsound.MessageBeep", "module": "winsound", "doc": ["Call the underlying MessageBeep() function from the Platform API.", "This plays a sound as specified in the registry.", "The type argument specifies which sound to play; possible values are -1, MB_ICONASTERISK, MB_ICONEXCLAMATION, MB_ICONHAND, MB_ICONQUESTION, and MB_OK, all described below.", "The value -1 produces a \u201csimple beep\u201d; this is the final fallback if a sound cannot be played otherwise.", "If the system indicates an error, RuntimeError is raised."]}
{"index": 7593, "name": "winsound.SND_FILENAME", "module": "winsound", "doc": ["The sound parameter is the name of a WAV file.", "Do not use with SND_ALIAS."]}
{"index": 7594, "name": "winsound.SND_ALIAS", "module": "winsound", "doc": ["The sound parameter is a sound association name from the registry.", "If the registry contains no such name, play the system default sound unless SND_NODEFAULT is also specified.", "If no default sound is registered, raise RuntimeError.", "Do not use with SND_FILENAME.", "All Win32 systems support at least the following; most systems support many more:", "For example:"]}
{"index": 7595, "name": "winsound.SND_LOOP", "module": "winsound", "doc": ["Play the sound repeatedly.", "The SND_ASYNC flag must also be used to avoid blocking.", "Cannot be used with SND_MEMORY."]}
{"index": 7596, "name": "winsound.SND_MEMORY", "module": "winsound", "doc": ["The sound parameter to PlaySound() is a memory image of a WAV file, as a bytes-like object."]}
{"index": 7597, "name": "winsound.SND_PURGE", "module": "winsound", "doc": ["Stop playing all instances of the specified sound."]}
{"index": 7598, "name": "winsound.SND_ASYNC", "module": "winsound", "doc": ["Return immediately, allowing sounds to play asynchronously."]}
{"index": 7599, "name": "winsound.SND_NODEFAULT", "module": "winsound", "doc": ["If the specified sound cannot be found, do not play the system default sound."]}
{"index": 7600, "name": "winsound.SND_NOSTOP", "module": "winsound", "doc": ["Do not interrupt sounds currently playing."]}
{"index": 7601, "name": "winsound.SND_NOWAIT", "module": "winsound", "doc": ["Return immediately if the sound driver is busy."]}
{"index": 7602, "name": "winsound.MB_ICONASTERISK", "module": "winsound", "doc": ["Play the SystemDefault sound."]}
{"index": 7603, "name": "winsound.MB_ICONEXCLAMATION", "module": "winsound", "doc": ["Play the SystemExclamation sound."]}
{"index": 7604, "name": "winsound.MB_ICONHAND", "module": "winsound", "doc": ["Play the SystemHand sound."]}
{"index": 7605, "name": "winsound.MB_ICONQUESTION", "module": "winsound", "doc": ["Play the SystemQuestion sound."]}
{"index": 7606, "name": "winsound.MB_OK", "module": "winsound", "doc": ["Play the SystemDefault sound."]}
{"index": 7607, "name": "wsgiref.util.guess_scheme", "module": "wsgiref", "doc": ["Return a guess for whether wsgi.url_scheme should be \u201chttp\u201d or \u201chttps\u201d, by checking for a HTTPS environment variable in the environ dictionary.", "The return value is a string.", "This function is useful when creating a gateway that wraps CGI or a CGI-like protocol such as FastCGI.", "Typically, servers providing such protocols will include a HTTPS variable with a value of \u201c1\u201d \u201cyes\u201d, or \u201con\u201d when a request is received via SSL.", "So, this function returns \u201chttps\u201d if such a value is found, and \u201chttp\u201d otherwise."]}
{"index": 7608, "name": "wsgiref.util.request_uri", "module": "wsgiref", "doc": ["Return the full request URI, optionally including the query string, using the algorithm found in the \u201cURL Reconstruction\u201d section of PEP 3333.", "If include_query is false, the query string is not included in the resulting URI."]}
{"index": 7609, "name": "wsgiref.util.application_uri", "module": "wsgiref", "doc": ["Similar to request_uri(), except that the PATH_INFO and QUERY_STRING variables are ignored.", "The result is the base URI of the application object addressed by the request."]}
{"index": 7610, "name": "wsgiref.util.shift_path_info", "module": "wsgiref", "doc": ["Shift a single name from PATH_INFO to SCRIPT_NAME and return the name.", "The environ dictionary is modified in-place; use a copy if you need to keep the original PATH_INFO or SCRIPT_NAME intact.", "If there are no remaining path segments in PATH_INFO, None is returned.", "Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys.", "This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI.", "For example, if there is a WSGI application at /foo, and the request URI path is /foo/bar/baz, and the WSGI application at /foo calls shift_path_info(), it will receive the string \u201cbar\u201d, and the environment will be updated to be suitable for passing to a WSGI application at /foo/bar.", "That is, SCRIPT_NAME will change from /foo to /foo/bar, and PATH_INFO will change from /bar/baz to /baz.", "When PATH_INFO is just a \u201c/\u201d, this routine returns an empty string and appends a trailing slash to SCRIPT_NAME, even though empty path segments are normally ignored, and SCRIPT_NAME doesn\u2019t normally end in a slash.", "This is intentional behavior, to ensure that an application can tell the difference between URIs ending in /x from ones ending in /x/ when using this routine to do object traversal."]}
{"index": 7611, "name": "wsgiref.util.setup_testing_defaults", "module": "wsgiref", "doc": ["Update environ with trivial defaults for testing purposes.", "This routine adds various parameters required for WSGI, including HTTP_HOST, SERVER_NAME, SERVER_PORT, REQUEST_METHOD, SCRIPT_NAME, PATH_INFO, and all of the PEP 3333-defined wsgi.", "* variables.", "It only supplies default values, and does not replace any existing settings for these variables.", "This routine is intended to make it easier for unit tests of WSGI servers and applications to set up dummy environments.", "It should NOT be used by actual WSGI servers or applications, since the data is fake!", "Example usage:"]}
{"index": 7612, "name": "wsgiref.util.is_hop_by_hop", "module": "wsgiref", "doc": ["Return true if \u2018header_name\u2019 is an HTTP/1.1 \u201cHop-by-Hop\u201d header, as defined by RFC 2616."]}
{"index": 7613, "name": "wsgiref.util.FileWrapper", "module": "wsgiref", "doc": ["A wrapper to convert a file-like object to an iterator.", "The resulting objects support both __getitem__() and __iter__() iteration styles, for compatibility with Python 2.1 and Jython.", "As the object is iterated over, the optional blksize parameter will be repeatedly passed to the filelike object\u2019s read() method to obtain bytestrings to yield.", "When read() returns an empty bytestring, iteration is ended and is not resumable.", "If filelike has a close() method, the returned object will also have a close() method, and it will invoke the filelike object\u2019s close() method when called.", "Example usage:"]}
{"index": 7614, "name": "wsgiref.headers.Headers", "module": "wsgiref", "doc": ["Create a mapping-like object wrapping headers, which must be a list of header name/value tuples as described in PEP 3333.", "The default value of headers is an empty list.", "Headers objects support typical mapping operations including __getitem__(), get(), __setitem__(), setdefault(), __delitem__() and __contains__().", "For each of these methods, the key is the header name (treated case-insensitively), and the value is the first value associated with that header name.", "Setting a header deletes any existing values for that header, then adds a new value at the end of the wrapped header list.", "Headers\u2019 existing order is generally maintained, with new headers added to the end of the wrapped list.", "Unlike a dictionary, Headers objects do not raise an error when you try to get or delete a key that isn\u2019t in the wrapped header list.", "Getting a nonexistent header just returns None, and deleting a nonexistent header does nothing.", "Headers objects also support keys(), values(), and items() methods.", "The lists returned by keys() and items() can include the same key more than once if there is a multi-valued header.", "The len() of a Headers object is the same as the length of its items(), which is the same as the length of the wrapped header list.", "In fact, the items() method just returns a copy of the wrapped header list.", "Calling bytes() on a Headers object returns a formatted bytestring suitable for transmission as HTTP response headers.", "Each header is placed on a line with its value, separated by a colon and a space.", "Each line is terminated by a carriage return and line feed, and the bytestring is terminated with a blank line.", "In addition to their mapping interface and formatting features, Headers objects also have the following methods for querying and adding multi-valued headers, and for adding headers with MIME parameters:"]}
{"index": 7615, "name": "wsgiref.headers.Headers.get_all", "module": "wsgiref", "doc": ["Return a list of all the values for the named header.", "The returned list will be sorted in the order they appeared in the original header list or were added to this instance, and may contain duplicates.", "Any fields deleted and re-inserted are always appended to the header list.", "If no fields exist with the given name, returns an empty list."]}
{"index": 7616, "name": "wsgiref.headers.Headers.add_header", "module": "wsgiref", "doc": ["Add a (possibly multi-valued) header, with optional MIME parameters specified via keyword arguments.", "name is the header field to add.", "Keyword arguments can be used to set MIME parameters for the header field.", "Each parameter must be a string or None.", "Underscores in parameter names are converted to dashes, since dashes are illegal in Python identifiers, but many MIME parameter names include dashes.", "If the parameter value is a string, it is added to the header value parameters in the form name=\"value\".", "If it is None, only the parameter name is added.", "(This is used for MIME parameters without a value.)", "Example usage:", "The above will add a header that looks like this:"]}
{"index": 7617, "name": "wsgiref.simple_server.make_server", "module": "wsgiref", "doc": ["Create a new WSGI server listening on host and port, accepting connections for app.", "The return value is an instance of the supplied server_class, and will process requests using the specified handler_class.", "app must be a WSGI application object, as defined by PEP 3333.", "Example usage:"]}
{"index": 7618, "name": "wsgiref.simple_server.demo_app", "module": "wsgiref", "doc": ["This function is a small but complete WSGI application that returns a text page containing the message \u201cHello world!\u201d and a list of the key/value pairs provided in the environ parameter.", "It\u2019s useful for verifying that a WSGI server (such as wsgiref.simple_server) is able to run a simple WSGI application correctly."]}
{"index": 7619, "name": "wsgiref.simple_server.WSGIServer", "module": "wsgiref", "doc": ["Create a WSGIServer instance.", "server_address should be a (host,port) tuple, and RequestHandlerClass should be the subclass of http.server.BaseHTTPRequestHandler that will be used to process requests.", "You do not normally need to call this constructor, as the make_server() function can handle all the details for you.", "WSGIServer is a subclass of http.server.HTTPServer, so all of its methods (such as serve_forever() and handle_request()) are available.", "WSGIServer also provides these WSGI-specific methods:", "Normally, however, you do not need to use these additional methods, as set_app() is normally called by make_server(), and the get_app() exists mainly for the benefit of request handler instances."]}
{"index": 7620, "name": "wsgiref.simple_server.WSGIServer.set_app", "module": "wsgiref", "doc": ["Sets the callable application as the WSGI application that will receive requests."]}
{"index": 7621, "name": "wsgiref.simple_server.WSGIServer.get_app", "module": "wsgiref", "doc": ["Returns the currently-set application callable."]}
{"index": 7622, "name": "wsgiref.simple_server.WSGIRequestHandler", "module": "wsgiref", "doc": ["Create an HTTP handler for the given request (i.e.", "a socket), client_address (a (host,port) tuple), and server (WSGIServer instance).", "You do not need to create instances of this class directly; they are automatically created as needed by WSGIServer objects.", "You can, however, subclass this class and supply it as a handler_class to the make_server() function.", "Some possibly relevant methods for overriding in subclasses:"]}
{"index": 7623, "name": "wsgiref.simple_server.WSGIRequestHandler.get_environ", "module": "wsgiref", "doc": ["Returns a dictionary containing the WSGI environment for a request.", "The default implementation copies the contents of the WSGIServer object\u2019s base_environ dictionary attribute and then adds various headers derived from the HTTP request.", "Each call to this method should return a new dictionary containing all of the relevant CGI environment variables as specified in PEP 3333."]}
{"index": 7624, "name": "wsgiref.simple_server.WSGIRequestHandler.get_stderr", "module": "wsgiref", "doc": ["Return the object that should be used as the wsgi.errors stream.", "The default implementation just returns sys.stderr."]}
{"index": 7625, "name": "wsgiref.simple_server.WSGIRequestHandler.handle", "module": "wsgiref", "doc": ["Process the HTTP request.", "The default implementation creates a handler instance using a wsgiref.handlers class to implement the actual WSGI application interface."]}
{"index": 7626, "name": "wsgiref.validate.validator", "module": "wsgiref", "doc": ["Wrap application and return a new WSGI application object.", "The returned application will forward all requests to the original application, and will check that both the application and the server invoking it are conforming to the WSGI specification and to RFC 2616.", "Any detected nonconformance results in an AssertionError being raised; note, however, that how these errors are handled is server-dependent.", "For example, wsgiref.simple_server and other servers based on wsgiref.handlers (that don\u2019t override the error handling methods to do something else) will simply output a message that an error has occurred, and dump the traceback to sys.stderr or some other error stream.", "This wrapper may also generate output using the warnings module to indicate behaviors that are questionable but which may not actually be prohibited by PEP 3333.", "Unless they are suppressed using Python command-line options or the warnings API, any such warnings will be written to sys.stderr (not wsgi.errors, unless they happen to be the same object).", "Example usage:"]}
{"index": 7627, "name": "wsgiref.handlers.CGIHandler", "module": "wsgiref", "doc": ["CGI-based invocation via sys.stdin, sys.stdout, sys.stderr and os.environ.", "This is useful when you have a WSGI application and want to run it as a CGI script.", "Simply invoke CGIHandler().run(app), where app is the WSGI application object you wish to invoke.", "This class is a subclass of BaseCGIHandler that sets wsgi.run_once to true, wsgi.multithread to false, and wsgi.multiprocess to true, and always uses sys and os to obtain the necessary CGI streams and environment."]}
{"index": 7628, "name": "wsgiref.handlers.IISCGIHandler", "module": "wsgiref", "doc": ["A specialized alternative to CGIHandler, for use when deploying on Microsoft\u2019s IIS web server, without having set the config allowPathInfo option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).", "By default, IIS gives a PATH_INFO that duplicates the SCRIPT_NAME at the front, causing problems for WSGI applications that wish to implement routing.", "This handler strips any such duplicated path.", "IIS can be configured to pass the correct PATH_INFO, but this causes another bug where PATH_TRANSLATED is wrong.", "Luckily this variable is rarely used and is not guaranteed by WSGI.", "On IIS<7, though, the setting can only be made on a vhost level, affecting all other script mappings, many of which break when exposed to the PATH_TRANSLATED bug.", "For this reason IIS<7 is almost never deployed with the fix.", "(Even IIS7 rarely uses it because there is still no UI for it.)", "There is no way for CGI code to tell whether the option was set, so a separate handler class is provided.", "It is used in the same way as CGIHandler, i.e., by calling IISCGIHandler().run(app), where app is the WSGI application object you wish to invoke."]}
{"index": 7629, "name": "wsgiref.handlers.BaseCGIHandler", "module": "wsgiref", "doc": ["Similar to CGIHandler, but instead of using the sys and os modules, the CGI environment and I/O streams are specified explicitly.", "The multithread and multiprocess values are used to set the wsgi.multithread and wsgi.multiprocess flags for any applications run by the handler instance.", "This class is a subclass of SimpleHandler intended for use with software other than HTTP \u201corigin servers\u201d.", "If you are writing a gateway protocol implementation (such as CGI, FastCGI, SCGI, etc.)", "that uses a Status: header to send an HTTP status, you probably want to subclass this instead of SimpleHandler."]}
{"index": 7630, "name": "wsgiref.handlers.SimpleHandler", "module": "wsgiref", "doc": ["Similar to BaseCGIHandler, but designed for use with HTTP origin servers.", "If you are writing an HTTP server implementation, you will probably want to subclass this instead of BaseCGIHandler.", "This class is a subclass of BaseHandler.", "It overrides the __init__(), get_stdin(), get_stderr(), add_cgi_vars(), _write(), and _flush() methods to support explicitly setting the environment and streams via the constructor.", "The supplied environment and streams are stored in the stdin, stdout, stderr, and environ attributes.", "The write() method of stdout should write each chunk in full, like io.BufferedIOBase."]}
{"index": 7631, "name": "wsgiref.handlers.BaseHandler", "module": "wsgiref", "doc": ["This is an abstract base class for running WSGI applications.", "Each instance will handle a single HTTP request, although in principle you could create a subclass that was reusable for multiple requests.", "BaseHandler instances have only one method intended for external use:", "All of the other BaseHandler methods are invoked by this method in the process of running the application, and thus exist primarily to allow customizing the process.", "The following methods MUST be overridden in a subclass:", "Here are some other methods and attributes you may wish to override.", "This list is only a summary, however, and does not include every method that can be overridden.", "You should consult the docstrings and source code for additional information before attempting to create a customized BaseHandler subclass.", "Attributes and methods for customizing the WSGI environment:", "Methods and attributes for customizing exception handling:", "Methods and attributes for PEP 3333\u2019s \u201cOptional Platform-Specific File Handling\u201d feature:", "Miscellaneous methods and attributes:"]}
{"index": 7632, "name": "wsgiref.handlers.BaseHandler.run", "module": "wsgiref", "doc": ["Run the specified WSGI application, app."]}
{"index": 7633, "name": "wsgiref.handlers.BaseHandler._write", "module": "wsgiref", "doc": ["Buffer the bytes data for transmission to the client.", "It\u2019s okay if this method actually transmits the data; BaseHandler just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction."]}
{"index": 7634, "name": "wsgiref.handlers.BaseHandler._flush", "module": "wsgiref", "doc": ["Force buffered data to be transmitted to the client.", "It\u2019s okay if this method is a no-op (i.e., if _write() actually sends the data)."]}
{"index": 7635, "name": "wsgiref.handlers.BaseHandler.get_stdin", "module": "wsgiref", "doc": ["Return an input stream object suitable for use as the wsgi.input of the request currently being processed."]}
{"index": 7636, "name": "wsgiref.handlers.BaseHandler.get_stderr", "module": "wsgiref", "doc": ["Return an output stream object suitable for use as the wsgi.errors of the request currently being processed."]}
{"index": 7637, "name": "wsgiref.handlers.BaseHandler.add_cgi_vars", "module": "wsgiref", "doc": ["Insert CGI variables for the current request into the environ attribute."]}
{"index": 7638, "name": "wsgiref.handlers.BaseHandler.wsgi_multithread", "module": "wsgiref", "doc": ["The value to be used for the wsgi.multithread environment variable.", "It defaults to true in BaseHandler, but may have a different default (or be set by the constructor) in the other subclasses."]}
{"index": 7639, "name": "wsgiref.handlers.BaseHandler.wsgi_multiprocess", "module": "wsgiref", "doc": ["The value to be used for the wsgi.multiprocess environment variable.", "It defaults to true in BaseHandler, but may have a different default (or be set by the constructor) in the other subclasses."]}
{"index": 7640, "name": "wsgiref.handlers.BaseHandler.wsgi_run_once", "module": "wsgiref", "doc": ["The value to be used for the wsgi.run_once environment variable.", "It defaults to false in BaseHandler, but CGIHandler sets it to true by default."]}
{"index": 7641, "name": "wsgiref.handlers.BaseHandler.os_environ", "module": "wsgiref", "doc": ["The default environment variables to be included in every request\u2019s WSGI environment.", "By default, this is a copy of os.environ at the time that wsgiref.handlers was imported, but subclasses can either create their own at the class or instance level.", "Note that the dictionary should be considered read-only, since the default value is shared between multiple classes and instances."]}
{"index": 7642, "name": "wsgiref.handlers.BaseHandler.server_software", "module": "wsgiref", "doc": ["If the origin_server attribute is set, this attribute\u2019s value is used to set the default SERVER_SOFTWARE WSGI environment variable, and also to set a default Server: header in HTTP responses.", "It is ignored for handlers (such as BaseCGIHandler and CGIHandler) that are not HTTP origin servers."]}
{"index": 7643, "name": "wsgiref.handlers.BaseHandler.get_scheme", "module": "wsgiref", "doc": ["Return the URL scheme being used for the current request.", "The default implementation uses the guess_scheme() function from wsgiref.util to guess whether the scheme should be \u201chttp\u201d or \u201chttps\u201d, based on the current request\u2019s environ variables."]}
{"index": 7644, "name": "wsgiref.handlers.BaseHandler.setup_environ", "module": "wsgiref", "doc": ["Set the environ attribute to a fully-populated WSGI environment.", "The default implementation uses all of the above methods and attributes, plus the get_stdin(), get_stderr(), and add_cgi_vars() methods and the wsgi_file_wrapper attribute.", "It also inserts a SERVER_SOFTWARE key if not present, as long as the origin_server attribute is a true value and the server_software attribute is set."]}
{"index": 7645, "name": "wsgiref.handlers.BaseHandler.log_exception", "module": "wsgiref", "doc": ["Log the exc_info tuple in the server log.", "exc_info is a (type, value, traceback) tuple.", "The default implementation simply writes the traceback to the request\u2019s wsgi.errors stream and flushes it.", "Subclasses can override this method to change the format or retarget the output, mail the traceback to an administrator, or whatever other action may be deemed suitable."]}
{"index": 7646, "name": "wsgiref.handlers.BaseHandler.traceback_limit", "module": "wsgiref", "doc": ["The maximum number of frames to include in tracebacks output by the default log_exception() method.", "If None, all frames are included."]}
{"index": 7647, "name": "wsgiref.handlers.BaseHandler.error_output", "module": "wsgiref", "doc": ["This method is a WSGI application to generate an error page for the user.", "It is only invoked if an error occurs before headers are sent to the client.", "This method can access the current error information using sys.exc_info(), and should pass that information to start_response when calling it (as described in the \u201cError Handling\u201d section of PEP 3333).", "The default implementation just uses the error_status, error_headers, and error_body attributes to generate an output page.", "Subclasses can override this to produce more dynamic error output.", "Note, however, that it\u2019s not recommended from a security perspective to spit out diagnostics to any old user; ideally, you should have to do something special to enable diagnostic output, which is why the default implementation doesn\u2019t include any."]}
{"index": 7648, "name": "wsgiref.handlers.BaseHandler.error_status", "module": "wsgiref", "doc": ["The HTTP status used for error responses.", "This should be a status string as defined in PEP 3333; it defaults to a 500 code and message."]}
{"index": 7649, "name": "wsgiref.handlers.BaseHandler.error_headers", "module": "wsgiref", "doc": ["The HTTP headers used for error responses.", "This should be a list of WSGI response headers ((name, value) tuples), as described in PEP 3333.", "The default list just sets the content type to text/plain."]}
{"index": 7650, "name": "wsgiref.handlers.BaseHandler.error_body", "module": "wsgiref", "doc": ["The error response body.", "This should be an HTTP response body bytestring.", "It defaults to the plain text, \u201cA server error occurred.", "Please contact the administrator.\u201d"]}
{"index": 7651, "name": "wsgiref.handlers.BaseHandler.wsgi_file_wrapper", "module": "wsgiref", "doc": ["A wsgi.file_wrapper factory, or None.", "The default value of this attribute is the wsgiref.util.FileWrapper class."]}
{"index": 7652, "name": "wsgiref.handlers.BaseHandler.sendfile", "module": "wsgiref", "doc": ["Override to implement platform-specific file transmission.", "This method is called only if the application\u2019s return value is an instance of the class specified by the wsgi_file_wrapper attribute.", "It should return a true value if it was able to successfully transmit the file, so that the default transmission code will not be executed.", "The default implementation of this method just returns a false value."]}
{"index": 7653, "name": "wsgiref.handlers.BaseHandler.origin_server", "module": "wsgiref", "doc": ["This attribute should be set to a true value if the handler\u2019s _write() and _flush() are being used to communicate directly to the client, rather than via a CGI-like gateway protocol that wants the HTTP status in a special Status: header.", "This attribute\u2019s default value is true in BaseHandler, but false in BaseCGIHandler and CGIHandler."]}
{"index": 7654, "name": "wsgiref.handlers.BaseHandler.http_version", "module": "wsgiref", "doc": ["If origin_server is true, this string attribute is used to set the HTTP version of the response set to the client.", "It defaults to \"1.0\"."]}
{"index": 7655, "name": "wsgiref.handlers.read_environ", "module": "wsgiref", "doc": ["Transcode CGI variables from os.environ to PEP 3333 \u201cbytes in unicode\u201d strings, returning a new dictionary.", "This function is used by CGIHandler and IISCGIHandler in place of directly using os.environ, which is not necessarily WSGI-compliant on all platforms and web servers using Python 3 \u2013 specifically, ones where the OS\u2019s actual environment is Unicode (i.e.", "Windows), or ones where the environment is bytes, but the system encoding used by Python to decode it is anything other than ISO-8859-1 (e.g.", "Unix systems using UTF-8).", "If you are implementing a CGI-based handler of your own, you probably want to use this routine instead of just copying values out of os.environ directly."]}
{"index": 7656, "name": "xdrlib.Packer", "module": "xdrlib", "doc": ["Packer is the class for packing data into XDR representation.", "The Packer class is instantiated with no arguments."]}
{"index": 7657, "name": "xdrlib.Unpacker", "module": "xdrlib", "doc": ["Unpacker is the complementary class which unpacks XDR data values from a string buffer.", "The input buffer is given as data."]}
{"index": 7658, "name": "xdrlib.Packer.get_buffer", "module": "xdrlib", "doc": ["Returns the current pack buffer as a string."]}
{"index": 7659, "name": "xdrlib.Packer.reset", "module": "xdrlib", "doc": ["Resets the pack buffer to the empty string."]}
{"index": 7660, "name": "xdrlib.Packer.pack_float", "module": "xdrlib", "doc": ["Packs the single-precision floating point number value."]}
{"index": 7661, "name": "xdrlib.Packer.pack_double", "module": "xdrlib", "doc": ["Packs the double-precision floating point number value."]}
{"index": 7662, "name": "xdrlib.Packer.pack_fstring", "module": "xdrlib", "doc": ["Packs a fixed length string, s.  n is the length of the string but it is not packed into the data buffer.", "The string is padded with null bytes if necessary to guaranteed 4 byte alignment."]}
{"index": 7663, "name": "xdrlib.Packer.pack_fopaque", "module": "xdrlib", "doc": ["Packs a fixed length opaque data stream, similarly to pack_fstring()."]}
{"index": 7664, "name": "xdrlib.Packer.pack_string", "module": "xdrlib", "doc": ["Packs a variable length string, s.  The length of the string is first packed as an unsigned integer, then the string data is packed with pack_fstring()."]}
{"index": 7665, "name": "xdrlib.Packer.pack_opaque", "module": "xdrlib", "doc": ["Packs a variable length opaque data string, similarly to pack_string()."]}
{"index": 7666, "name": "xdrlib.Packer.pack_bytes", "module": "xdrlib", "doc": ["Packs a variable length byte stream, similarly to pack_string()."]}
{"index": 7667, "name": "xdrlib.Packer.pack_list", "module": "xdrlib", "doc": ["Packs a list of homogeneous items.", "This method is useful for lists with an indeterminate size; i.e.", "the size is not available until the entire list has been walked.", "For each item in the list, an unsigned integer 1 is packed first, followed by the data value from the list.", "pack_item is the function that is called to pack the individual item.", "At the end of the list, an unsigned integer 0 is packed.", "For example, to pack a list of integers, the code might appear like this:"]}
{"index": 7668, "name": "xdrlib.Packer.pack_farray", "module": "xdrlib", "doc": ["Packs a fixed length list (array) of homogeneous items.", "n is the length of the list; it is not packed into the buffer, but a ValueError exception is raised if len(array) is not equal to n.  As above, pack_item is the function used to pack each element."]}
{"index": 7669, "name": "xdrlib.Packer.pack_array", "module": "xdrlib", "doc": ["Packs a variable length list of homogeneous items.", "First, the length of the list is packed as an unsigned integer, then each element is packed as in pack_farray() above."]}
{"index": 7670, "name": "xdrlib.Unpacker.reset", "module": "xdrlib", "doc": ["Resets the string buffer with the given data."]}
{"index": 7671, "name": "xdrlib.Unpacker.get_position", "module": "xdrlib", "doc": ["Returns the current unpack position in the data buffer."]}
{"index": 7672, "name": "xdrlib.Unpacker.set_position", "module": "xdrlib", "doc": ["Sets the data buffer unpack position to position.", "You should be careful about using get_position() and set_position()."]}
{"index": 7673, "name": "xdrlib.Unpacker.get_buffer", "module": "xdrlib", "doc": ["Returns the current unpack data buffer as a string."]}
{"index": 7674, "name": "xdrlib.Unpacker.done", "module": "xdrlib", "doc": ["Indicates unpack completion.", "Raises an Error exception if all of the data has not been unpacked."]}
{"index": 7675, "name": "xdrlib.Unpacker.unpack_float", "module": "xdrlib", "doc": ["Unpacks a single-precision floating point number."]}
{"index": 7676, "name": "xdrlib.Unpacker.unpack_double", "module": "xdrlib", "doc": ["Unpacks a double-precision floating point number, similarly to unpack_float()."]}
{"index": 7677, "name": "xdrlib.Unpacker.unpack_fstring", "module": "xdrlib", "doc": ["Unpacks and returns a fixed length string.", "n is the number of characters expected.", "Padding with null bytes to guaranteed 4 byte alignment is assumed."]}
{"index": 7678, "name": "xdrlib.Unpacker.unpack_fopaque", "module": "xdrlib", "doc": ["Unpacks and returns a fixed length opaque data stream, similarly to unpack_fstring()."]}
{"index": 7679, "name": "xdrlib.Unpacker.unpack_string", "module": "xdrlib", "doc": ["Unpacks and returns a variable length string.", "The length of the string is first unpacked as an unsigned integer, then the string data is unpacked with unpack_fstring()."]}
{"index": 7680, "name": "xdrlib.Unpacker.unpack_opaque", "module": "xdrlib", "doc": ["Unpacks and returns a variable length opaque data string, similarly to unpack_string()."]}
{"index": 7681, "name": "xdrlib.Unpacker.unpack_bytes", "module": "xdrlib", "doc": ["Unpacks and returns a variable length byte stream, similarly to unpack_string()."]}
{"index": 7682, "name": "xdrlib.Unpacker.unpack_list", "module": "xdrlib", "doc": ["Unpacks and returns a list of homogeneous items.", "The list is unpacked one element at a time by first unpacking an unsigned integer flag.", "If the flag is 1, then the item is unpacked and appended to the list.", "A flag of 0 indicates the end of the list.", "unpack_item is the function that is called to unpack the items."]}
{"index": 7683, "name": "xdrlib.Unpacker.unpack_farray", "module": "xdrlib", "doc": ["Unpacks and returns (as a list) a fixed length array of homogeneous items.", "n is number of list elements to expect in the buffer.", "As above, unpack_item is the function used to unpack each element."]}
{"index": 7684, "name": "xdrlib.Unpacker.unpack_array", "module": "xdrlib", "doc": ["Unpacks and returns a variable length list of homogeneous items.", "First, the length of the list is unpacked as an unsigned integer, then each element is unpacked as in unpack_farray() above."]}
{"index": 7685, "name": "xdrlib.Error", "module": "xdrlib", "doc": ["The base exception class.", "Error has a single public attribute msg containing the description of the error."]}
{"index": 7686, "name": "xdrlib.ConversionError", "module": "xdrlib", "doc": ["Class derived from Error.", "Contains no additional instance variables."]}
{"index": 7687, "name": "xml.dom.registerDOMImplementation", "module": "xml", "doc": ["Register the factory function with the name name.", "The factory function should return an object which implements the DOMImplementation interface.", "The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g.", "if that implementation supports some customization)."]}
{"index": 7688, "name": "xml.dom.getDOMImplementation", "module": "xml", "doc": ["Return a suitable DOM implementation.", "The name is either well-known, the module name of a DOM implementation, or None.", "If it is not None, imports the corresponding module and returns a DOMImplementation object if the import succeeds.", "If no name is given, and if the environment variable PYTHON_DOM is set, this variable is used to find the implementation.", "If name is not given, this examines the available implementations to find one with the required feature set.", "If no implementation can be found, raise an ImportError.", "The features list must be a sequence of (feature, version) pairs which are passed to the hasFeature() method on available DOMImplementation objects."]}
{"index": 7689, "name": "xml.dom.EMPTY_NAMESPACE", "module": "xml", "doc": ["The value used to indicate that no namespace is associated with a node in the DOM.", "This is typically found as the namespaceURI of a node, or used as the namespaceURI parameter to a namespaces-specific method."]}
{"index": 7690, "name": "xml.dom.XML_NAMESPACE", "module": "xml", "doc": ["The namespace URI associated with the reserved prefix xml, as defined by Namespaces in XML (section 4)."]}
{"index": 7691, "name": "xml.dom.XMLNS_NAMESPACE", "module": "xml", "doc": ["The namespace URI for namespace declarations, as defined by Document Object Model (DOM) Level 2 Core Specification (section 1.1.8)."]}
{"index": 7692, "name": "xml.dom.XHTML_NAMESPACE", "module": "xml", "doc": ["The URI of the XHTML namespace as defined by XHTML 1.0: The Extensible HyperText Markup Language (section 3.1.1)."]}
{"index": 7693, "name": "xml.dom.DOMImplementation.hasFeature", "module": "xml", "doc": ["Return true if the feature identified by the pair of strings feature and version is implemented."]}
{"index": 7694, "name": "xml.dom.DOMImplementation.createDocument", "module": "xml", "doc": ["Return a new Document object (the root of the DOM), with a child Element object having the given namespaceUri and qualifiedName.", "The doctype must be a DocumentType object created by createDocumentType(), or None.", "In the Python DOM API, the first two arguments can also be None in order to indicate that no Element child is to be created."]}
{"index": 7695, "name": "xml.dom.DOMImplementation.createDocumentType", "module": "xml", "doc": ["Return a new DocumentType object that encapsulates the given qualifiedName, publicId, and systemId strings, representing the information contained in an XML document type declaration."]}
{"index": 7696, "name": "xml.dom.Node.nodeType", "module": "xml", "doc": ["An integer representing the node type.", "Symbolic constants for the types are on the Node object: ELEMENT_NODE, ATTRIBUTE_NODE, TEXT_NODE, CDATA_SECTION_NODE, ENTITY_NODE, PROCESSING_INSTRUCTION_NODE, COMMENT_NODE, DOCUMENT_NODE, DOCUMENT_TYPE_NODE, NOTATION_NODE.", "This is a read-only attribute."]}
{"index": 7697, "name": "xml.dom.Node.parentNode", "module": "xml", "doc": ["The parent of the current node, or None for the document node.", "The value is always a Node object or None.", "For Element nodes, this will be the parent element, except for the root element, in which case it will be the Document object.", "For Attr nodes, this is always None.", "This is a read-only attribute."]}
{"index": 7698, "name": "xml.dom.Node.attributes", "module": "xml", "doc": ["A NamedNodeMap of attribute objects.", "Only elements have actual values for this; others provide None for this attribute.", "This is a read-only attribute."]}
{"index": 7699, "name": "xml.dom.Node.previousSibling", "module": "xml", "doc": ["The node that immediately precedes this one with the same parent.", "For instance the element with an end-tag that comes just before the self element\u2019s start-tag.", "Of course, XML documents are made up of more than just elements so the previous sibling could be text, a comment, or something else.", "If this node is the first child of the parent, this attribute will be None.", "This is a read-only attribute."]}
{"index": 7700, "name": "xml.dom.Node.nextSibling", "module": "xml", "doc": ["The node that immediately follows this one with the same parent.", "See also previousSibling.", "If this is the last child of the parent, this attribute will be None.", "This is a read-only attribute."]}
{"index": 7701, "name": "xml.dom.Node.childNodes", "module": "xml", "doc": ["A list of nodes contained within this node.", "This is a read-only attribute."]}
{"index": 7702, "name": "xml.dom.Node.firstChild", "module": "xml", "doc": ["The first child of the node, if there are any, or None.", "This is a read-only attribute."]}
{"index": 7703, "name": "xml.dom.Node.lastChild", "module": "xml", "doc": ["The last child of the node, if there are any, or None.", "This is a read-only attribute."]}
{"index": 7704, "name": "xml.dom.Node.localName", "module": "xml", "doc": ["The part of the tagName following the colon if there is one, else the entire tagName.", "The value is a string."]}
{"index": 7705, "name": "xml.dom.Node.prefix", "module": "xml", "doc": ["The part of the tagName preceding the colon if there is one, else the empty string.", "The value is a string, or None."]}
{"index": 7706, "name": "xml.dom.Node.namespaceURI", "module": "xml", "doc": ["The namespace associated with the element name.", "This will be a string or None.", "This is a read-only attribute."]}
{"index": 7707, "name": "xml.dom.Node.nodeName", "module": "xml", "doc": ["This has a different meaning for each node type; see the DOM specification for details.", "You can always get the information you would get here from another property such as the tagName property for elements or the name property for attributes.", "For all node types, the value of this attribute will be either a string or None.", "This is a read-only attribute."]}
{"index": 7708, "name": "xml.dom.Node.nodeValue", "module": "xml", "doc": ["This has a different meaning for each node type; see the DOM specification for details.", "The situation is similar to that with nodeName.", "The value is a string or None."]}
{"index": 7709, "name": "xml.dom.Node.hasAttributes", "module": "xml", "doc": ["Returns true if the node has any attributes."]}
{"index": 7710, "name": "xml.dom.Node.hasChildNodes", "module": "xml", "doc": ["Returns true if the node has any child nodes."]}
{"index": 7711, "name": "xml.dom.Node.isSameNode", "module": "xml", "doc": ["Returns true if other refers to the same node as this node.", "This is especially useful for DOM implementations which use any sort of proxy architecture (because more than one object can refer to the same node)."]}
{"index": 7712, "name": "xml.dom.Node.appendChild", "module": "xml", "doc": ["Add a new child node to this node at the end of the list of children, returning newChild.", "If the node was already in the tree, it is removed first."]}
{"index": 7713, "name": "xml.dom.Node.insertBefore", "module": "xml", "doc": ["Insert a new child node before an existing child.", "It must be the case that refChild is a child of this node; if not, ValueError is raised.", "newChild is returned.", "If refChild is None, it inserts newChild at the end of the children\u2019s list."]}
{"index": 7714, "name": "xml.dom.Node.removeChild", "module": "xml", "doc": ["Remove a child node.", "oldChild must be a child of this node; if not, ValueError is raised.", "oldChild is returned on success.", "If oldChild will not be used further, its unlink() method should be called."]}
{"index": 7715, "name": "xml.dom.Node.replaceChild", "module": "xml", "doc": ["Replace an existing node with a new node.", "It must be the case that  oldChild is a child of this node; if not, ValueError is raised."]}
{"index": 7716, "name": "xml.dom.Node.normalize", "module": "xml", "doc": ["Join adjacent text nodes so that all stretches of text are stored as single Text instances.", "This simplifies processing text from a DOM tree for many applications."]}
{"index": 7717, "name": "xml.dom.Node.cloneNode", "module": "xml", "doc": ["Clone this node.", "Setting deep means to clone all child nodes as well.", "This returns the clone."]}
{"index": 7718, "name": "xml.dom.NodeList.item", "module": "xml", "doc": ["Return the i\u2019th item from the sequence, if there is one, or None.", "The index i is not allowed to be less than zero or greater than or equal to the length of the sequence."]}
{"index": 7719, "name": "xml.dom.NodeList.length", "module": "xml", "doc": ["The number of nodes in the sequence."]}
{"index": 7720, "name": "xml.dom.DocumentType.publicId", "module": "xml", "doc": ["The public identifier for the external subset of the document type definition.", "This will be a string or None."]}
{"index": 7721, "name": "xml.dom.DocumentType.systemId", "module": "xml", "doc": ["The system identifier for the external subset of the document type definition.", "This will be a URI as a string, or None."]}
{"index": 7722, "name": "xml.dom.DocumentType.internalSubset", "module": "xml", "doc": ["A string giving the complete internal subset from the document.", "This does not include the brackets which enclose the subset.", "If the document has no internal subset, this should be None."]}
{"index": 7723, "name": "xml.dom.DocumentType.name", "module": "xml", "doc": ["The name of the root element as given in the DOCTYPE declaration, if present."]}
{"index": 7724, "name": "xml.dom.DocumentType.entities", "module": "xml", "doc": ["This is a NamedNodeMap giving the definitions of external entities.", "For entity names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).", "This may be None if the information is not provided by the parser, or if no entities are defined."]}
{"index": 7725, "name": "xml.dom.DocumentType.notations", "module": "xml", "doc": ["This is a NamedNodeMap giving the definitions of notations.", "For notation names defined more than once, only the first definition is provided (others are ignored as required by the XML recommendation).", "This may be None if the information is not provided by the parser, or if no notations are defined."]}
{"index": 7726, "name": "xml.dom.Document.documentElement", "module": "xml", "doc": ["The one and only root element of the document."]}
{"index": 7727, "name": "xml.dom.Document.createElement", "module": "xml", "doc": ["Create and return a new element node.", "The element is not inserted into the document when it is created.", "You need to explicitly insert it with one of the other methods such as insertBefore() or appendChild()."]}
{"index": 7728, "name": "xml.dom.Document.createElementNS", "module": "xml", "doc": ["Create and return a new element with a namespace.", "The tagName may have a prefix.", "The element is not inserted into the document when it is created.", "You need to explicitly insert it with one of the other methods such as insertBefore() or appendChild()."]}
{"index": 7729, "name": "xml.dom.Document.createTextNode", "module": "xml", "doc": ["Create and return a text node containing the data passed as a parameter.", "As with the other creation methods, this one does not insert the node into the tree."]}
{"index": 7730, "name": "xml.dom.Document.createComment", "module": "xml", "doc": ["Create and return a comment node containing the data passed as a parameter.", "As with the other creation methods, this one does not insert the node into the tree."]}
{"index": 7731, "name": "xml.dom.Document.createProcessingInstruction", "module": "xml", "doc": ["Create and return a processing instruction node containing the target and data passed as parameters.", "As with the other creation methods, this one does not insert the node into the tree."]}
{"index": 7732, "name": "xml.dom.Document.createAttribute", "module": "xml", "doc": ["Create and return an attribute node.", "This method does not associate the attribute node with any particular element.", "You must use setAttributeNode() on the appropriate Element object to use the newly created attribute instance."]}
{"index": 7733, "name": "xml.dom.Document.createAttributeNS", "module": "xml", "doc": ["Create and return an attribute node with a namespace.", "The tagName may have a prefix.", "This method does not associate the attribute node with any particular element.", "You must use setAttributeNode() on the appropriate Element object to use the newly created attribute instance."]}
{"index": 7734, "name": "xml.dom.Document.getElementsByTagName", "module": "xml", "doc": ["Search for all descendants (direct children, children\u2019s children, etc.)", "with a particular element type name."]}
{"index": 7735, "name": "xml.dom.Document.getElementsByTagNameNS", "module": "xml", "doc": ["Search for all descendants (direct children, children\u2019s children, etc.)", "with a particular namespace URI and localname.", "The localname is the part of the namespace after the prefix."]}
{"index": 7736, "name": "xml.dom.Element.tagName", "module": "xml", "doc": ["The element type name.", "In a namespace-using document it may have colons in it.", "The value is a string."]}
{"index": 7737, "name": "xml.dom.Element.getElementsByTagName", "module": "xml", "doc": ["Same as equivalent method in the Document class."]}
{"index": 7738, "name": "xml.dom.Element.getElementsByTagNameNS", "module": "xml", "doc": ["Same as equivalent method in the Document class."]}
{"index": 7739, "name": "xml.dom.Element.hasAttribute", "module": "xml", "doc": ["Returns true if the element has an attribute named by name."]}
{"index": 7740, "name": "xml.dom.Element.hasAttributeNS", "module": "xml", "doc": ["Returns true if the element has an attribute named by namespaceURI and localName."]}
{"index": 7741, "name": "xml.dom.Element.getAttribute", "module": "xml", "doc": ["Return the value of the attribute named by name as a string.", "If no such attribute exists, an empty string is returned, as if the attribute had no value."]}
{"index": 7742, "name": "xml.dom.Element.getAttributeNode", "module": "xml", "doc": ["Return the Attr node for the attribute named by attrname."]}
{"index": 7743, "name": "xml.dom.Element.getAttributeNS", "module": "xml", "doc": ["Return the value of the attribute named by namespaceURI and localName as a string.", "If no such attribute exists, an empty string is returned, as if the attribute had no value."]}
{"index": 7744, "name": "xml.dom.Element.getAttributeNodeNS", "module": "xml", "doc": ["Return an attribute value as a node, given a namespaceURI and localName."]}
{"index": 7745, "name": "xml.dom.Element.removeAttribute", "module": "xml", "doc": ["Remove an attribute by name.", "If there is no matching attribute, a NotFoundErr is raised."]}
{"index": 7746, "name": "xml.dom.Element.removeAttributeNode", "module": "xml", "doc": ["Remove and return oldAttr from the attribute list, if present.", "If oldAttr is not present, NotFoundErr is raised."]}
{"index": 7747, "name": "xml.dom.Element.removeAttributeNS", "module": "xml", "doc": ["Remove an attribute by name.", "Note that it uses a localName, not a qname.", "No exception is raised if there is no matching attribute."]}
{"index": 7748, "name": "xml.dom.Element.setAttribute", "module": "xml", "doc": ["Set an attribute value from a string."]}
{"index": 7749, "name": "xml.dom.Element.setAttributeNode", "module": "xml", "doc": ["Add a new attribute node to the element, replacing an existing attribute if necessary if the name attribute matches.", "If a replacement occurs, the old attribute node will be returned.", "If newAttr is already in use, InuseAttributeErr will be raised."]}
{"index": 7750, "name": "xml.dom.Element.setAttributeNodeNS", "module": "xml", "doc": ["Add a new attribute node to the element, replacing an existing attribute if necessary if the namespaceURI and localName attributes match.", "If a replacement occurs, the old attribute node will be returned.", "If newAttr is already in use, InuseAttributeErr will be raised."]}
{"index": 7751, "name": "xml.dom.Element.setAttributeNS", "module": "xml", "doc": ["Set an attribute value from a string, given a namespaceURI and a qname.", "Note that a qname is the whole attribute name.", "This is different than above."]}
{"index": 7752, "name": "xml.dom.Attr.name", "module": "xml", "doc": ["The attribute name.", "In a namespace-using document it may include a colon."]}
{"index": 7753, "name": "xml.dom.Attr.localName", "module": "xml", "doc": ["The part of the name following the colon if there is one, else the entire name.", "This is a read-only attribute."]}
{"index": 7754, "name": "xml.dom.Attr.prefix", "module": "xml", "doc": ["The part of the name preceding the colon if there is one, else the empty string."]}
{"index": 7755, "name": "xml.dom.Attr.value", "module": "xml", "doc": ["The text value of the attribute.", "This is a synonym for the nodeValue attribute."]}
{"index": 7756, "name": "xml.dom.NamedNodeMap.length", "module": "xml", "doc": ["The length of the attribute list."]}
{"index": 7757, "name": "xml.dom.NamedNodeMap.item", "module": "xml", "doc": ["Return an attribute with a particular index.", "The order you get the attributes in is arbitrary but will be consistent for the life of a DOM.", "Each item is an attribute node.", "Get its value with the value attribute."]}
{"index": 7758, "name": "xml.dom.Comment.data", "module": "xml", "doc": ["The content of the comment as a string.", "The attribute contains all characters between the leading <!-- and trailing -->, but does not include them."]}
{"index": 7759, "name": "xml.dom.Text.data", "module": "xml", "doc": ["The content of the text node as a string."]}
{"index": 7760, "name": "xml.dom.ProcessingInstruction.target", "module": "xml", "doc": ["The content of the processing instruction up to the first whitespace character.", "This is a read-only attribute."]}
{"index": 7761, "name": "xml.dom.ProcessingInstruction.data", "module": "xml", "doc": ["The content of the processing instruction following the first whitespace character."]}
{"index": 7762, "name": "xml.dom.DOMException", "module": "xml", "doc": ["Base exception class used for all specific DOM exceptions.", "This exception class cannot be directly instantiated."]}
{"index": 7763, "name": "xml.dom.DomstringSizeErr", "module": "xml", "doc": ["Raised when a specified range of text does not fit into a string.", "This is not known to be used in the Python DOM implementations, but may be received from DOM implementations not written in Python."]}
{"index": 7764, "name": "xml.dom.HierarchyRequestErr", "module": "xml", "doc": ["Raised when an attempt is made to insert a node where the node type is not allowed."]}
{"index": 7765, "name": "xml.dom.IndexSizeErr", "module": "xml", "doc": ["Raised when an index or size parameter to a method is negative or exceeds the allowed values."]}
{"index": 7766, "name": "xml.dom.InuseAttributeErr", "module": "xml", "doc": ["Raised when an attempt is made to insert an Attr node that is already present elsewhere in the document."]}
{"index": 7767, "name": "xml.dom.InvalidAccessErr", "module": "xml", "doc": ["Raised if a parameter or an operation is not supported on the underlying object."]}
{"index": 7768, "name": "xml.dom.InvalidCharacterErr", "module": "xml", "doc": ["This exception is raised when a string parameter contains a character that is not permitted in the context it\u2019s being used in by the XML 1.0 recommendation.", "For example, attempting to create an Element node with a space in the element type name will cause this error to be raised."]}
{"index": 7769, "name": "xml.dom.InvalidModificationErr", "module": "xml", "doc": ["Raised when an attempt is made to modify the type of a node."]}
{"index": 7770, "name": "xml.dom.InvalidStateErr", "module": "xml", "doc": ["Raised when an attempt is made to use an object that is not defined or is no longer usable."]}
{"index": 7771, "name": "xml.dom.NamespaceErr", "module": "xml", "doc": ["If an attempt is made to change any object in a way that is not permitted with regard to the Namespaces in XML recommendation, this exception is raised."]}
{"index": 7772, "name": "xml.dom.NotFoundErr", "module": "xml", "doc": ["Exception when a node does not exist in the referenced context.", "For example, NamedNodeMap.removeNamedItem() will raise this if the node passed in does not exist in the map."]}
{"index": 7773, "name": "xml.dom.NotSupportedErr", "module": "xml", "doc": ["Raised when the implementation does not support the requested type of object or operation."]}
{"index": 7774, "name": "xml.dom.NoDataAllowedErr", "module": "xml", "doc": ["This is raised if data is specified for a node which does not support data."]}
{"index": 7775, "name": "xml.dom.NoModificationAllowedErr", "module": "xml", "doc": ["Raised on attempts to modify an object where modifications are not allowed (such as for read-only nodes)."]}
{"index": 7776, "name": "xml.dom.SyntaxErr", "module": "xml", "doc": ["Raised when an invalid or illegal string is specified."]}
{"index": 7777, "name": "xml.dom.WrongDocumentErr", "module": "xml", "doc": ["Raised when a node is inserted in a different document than it currently belongs to, and the implementation does not support migrating the node from one document to the other."]}
{"index": 7778, "name": "xml.dom.minidom.parse", "module": "xml", "doc": ["Return a Document from the given input.", "filename_or_file may be either a file name, or a file-like object.", "parser, if given, must be a SAX2 parser object.", "This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance."]}
{"index": 7779, "name": "xml.dom.minidom.parseString", "module": "xml", "doc": ["Return a Document that represents the string.", "This method creates an io.StringIO object for the string and passes that on to parse()."]}
{"index": 7780, "name": "xml.dom.minidom.Node.unlink", "module": "xml", "doc": ["Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC.", "Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice.", "This only needs to be called on the Document object, but may be called on child nodes to discard children of that node.", "You can avoid calling this method explicitly by using the with statement.", "The following code will automatically unlink dom when the with block is exited:"]}
{"index": 7781, "name": "xml.dom.minidom.Node.writexml", "module": "xml", "doc": ["Write XML to the writer object.", "The writer receives texts but not bytes as input, it should have a write() method which matches that of the file object interface.", "The indent parameter is the indentation of the current node.", "The addindent parameter is the incremental indentation to use for subnodes of the current one.", "The newl parameter specifies the string to use to terminate newlines.", "For the Document node, an additional keyword argument encoding can be used to specify the encoding field of the XML header."]}
{"index": 7782, "name": "xml.dom.minidom.Node.toxml", "module": "xml", "doc": ["Return a string or byte string containing the XML represented by the DOM node.", "With an explicit encoding 1 argument, the result is a byte string in the specified encoding.", "With no encoding argument, the result is a Unicode string, and the XML declaration in the resulting string does not specify an encoding.", "Encoding this string in an encoding other than UTF-8 is likely incorrect, since UTF-8 is the default encoding of XML."]}
{"index": 7783, "name": "xml.dom.minidom.Node.toprettyxml", "module": "xml", "doc": ["Return a pretty-printed version of the document.", "indent specifies the indentation string and defaults to a tabulator; newl specifies the string emitted at the end of each line and defaults to \\n.", "The encoding argument behaves like the corresponding argument of toxml()."]}
{"index": 7784, "name": "id3", "module": "xml", "doc": ["The encoding name included in the XML output should conform to the appropriate standards.", "For example, \u201cUTF-8\u201d is valid, but \u201cUTF8\u201d is not valid in an XML document\u2019s declaration, even though Python accepts it as an encoding name.", "See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and https://www.iana.org/assignments/character-sets/character-sets.xhtml."]}
{"index": 7785, "name": "xml.dom.pulldom.PullDom", "module": "xml", "doc": ["Subclass of xml.sax.handler.ContentHandler."]}
{"index": 7786, "name": "xml.dom.pulldom.SAX2DOM", "module": "xml", "doc": ["Subclass of xml.sax.handler.ContentHandler."]}
{"index": 7787, "name": "xml.dom.pulldom.parse", "module": "xml", "doc": ["Return a DOMEventStream from the given input.", "stream_or_string may be either a file name, or a file-like object.", "parser, if given, must be an XMLReader object.", "This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance."]}
{"index": 7788, "name": "xml.dom.pulldom.parseString", "module": "xml", "doc": ["Return a DOMEventStream that represents the (Unicode) string."]}
{"index": 7789, "name": "xml.dom.pulldom.default_bufsize", "module": "xml", "doc": ["Default value for the bufsize parameter to parse().", "The value of this variable can be changed before calling parse() and the new value will take effect."]}
{"index": 7790, "name": "xml.dom.pulldom.DOMEventStream.getEvent", "module": "xml", "doc": ["Return a tuple containing event and the current node as xml.dom.minidom.Document if event equals START_DOCUMENT, xml.dom.minidom.Element if event equals START_ELEMENT or END_ELEMENT or xml.dom.minidom.Text if event equals CHARACTERS.", "The current node does not contain information about its children, unless expandNode() is called."]}
{"index": 7791, "name": "xml.dom.pulldom.DOMEventStream.expandNode", "module": "xml", "doc": ["Expands all children of node into node.", "Example:"]}
{"index": 7792, "name": "xml.etree.ElementTree.Comment", "module": "xml", "doc": ["Comment element factory.", "This factory function creates a special element that will be serialized as an XML comment by the standard serializer.", "The comment string can be either a bytestring or a Unicode string.", "text is a string containing the comment string.", "Returns an element instance representing a comment.", "Note that XMLParser skips over comments in the input instead of creating comment objects for them.", "An ElementTree will only contain comment nodes if they have been inserted into to the tree using one of the Element methods."]}
{"index": 7793, "name": "xml.etree.ElementTree.dump", "module": "xml", "doc": ["Writes an element tree or element structure to sys.stdout.", "This function should be used for debugging only.", "The exact output format is implementation dependent.", "In this version, it\u2019s written as an ordinary XML file.", "elem is an element tree or an individual element."]}
{"index": 7794, "name": "xml.etree.ElementTree.fromstring", "module": "xml", "doc": ["Parses an XML section from a string constant.", "Same as XML().", "text is a string containing XML data.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "Returns an Element instance."]}
{"index": 7795, "name": "xml.etree.ElementTree.fromstringlist", "module": "xml", "doc": ["Parses an XML document from a sequence of string fragments.", "sequence is a list or other sequence containing XML data fragments.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "Returns an Element instance."]}
{"index": 7796, "name": "xml.etree.ElementTree.iselement", "module": "xml", "doc": ["Checks if an object appears to be a valid element object.", "element is an element instance.", "Returns a true value if this is an element object."]}
{"index": 7797, "name": "xml.etree.ElementTree.iterparse", "module": "xml", "doc": ["Parses an XML section into an element tree incrementally, and reports what\u2019s going on to the user.", "source is a filename or file object containing XML data.", "events is a sequence of events to report back.", "The supported events are the strings \"start\", \"end\", \"start-ns\" and \"end-ns\" (the \u201cns\u201d events are used to get detailed namespace information).", "If events is omitted, only \"end\" events are reported.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "parser must be a subclass of XMLParser and can only use the default TreeBuilder as a target.", "Returns an iterator providing (event, elem) pairs.", "Note that while iterparse() builds the tree incrementally, it issues blocking reads on source (or the file it names).", "As such, it\u2019s unsuitable for applications where blocking reads can\u2019t be made.", "For fully non-blocking parsing, see XMLPullParser."]}
{"index": 7798, "name": "xml.etree.ElementTree.parse", "module": "xml", "doc": ["Parses an XML section into an element tree.", "source is a filename or file object containing XML data.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "Returns an ElementTree instance."]}
{"index": 7799, "name": "xml.etree.ElementTree.ProcessingInstruction", "module": "xml", "doc": ["PI element factory.", "This factory function creates a special element that will be serialized as an XML processing instruction.", "target is a string containing the PI target.", "text is a string containing the PI contents, if given.", "Returns an element instance, representing a processing instruction.", "Note that XMLParser skips over processing instructions in the input instead of creating comment objects for them.", "An ElementTree will only contain processing instruction nodes if they have been inserted into to the tree using one of the Element methods."]}
{"index": 7800, "name": "xml.etree.ElementTree.register_namespace", "module": "xml", "doc": ["Registers a namespace prefix.", "The registry is global, and any existing mapping for either the given prefix or the namespace URI will be removed.", "prefix is a namespace prefix.", "uri is a namespace uri.", "Tags and attributes in this namespace will be serialized with the given prefix, if at all possible."]}
{"index": 7801, "name": "xml.etree.ElementTree.SubElement", "module": "xml", "doc": ["Subelement factory.", "This function creates an element instance, and appends it to an existing element.", "The element name, attribute names, and attribute values can be either bytestrings or Unicode strings.", "parent is the parent element.", "tag is the subelement name.", "attrib is an optional dictionary, containing element attributes.", "extra contains additional attributes, given as keyword arguments.", "Returns an element instance."]}
{"index": 7802, "name": "xml.etree.ElementTree.tostring", "module": "xml", "doc": ["Generates a string representation of an XML element, including all subelements.", "element is an Element instance.", "encoding 1 is the output encoding (default is US-ASCII).", "Use encoding=\"unicode\" to generate a Unicode string (otherwise, a bytestring is generated).", "method is either \"xml\", \"html\" or \"text\" (default is \"xml\").", "short_empty_elements has the same meaning as in ElementTree.write().", "Returns an (optionally) encoded string containing the XML data."]}
{"index": 7803, "name": "xml.etree.ElementTree.tostringlist", "module": "xml", "doc": ["Generates a string representation of an XML element, including all subelements.", "element is an Element instance.", "encoding 1 is the output encoding (default is US-ASCII).", "Use encoding=\"unicode\" to generate a Unicode string (otherwise, a bytestring is generated).", "method is either \"xml\", \"html\" or \"text\" (default is \"xml\").", "short_empty_elements has the same meaning as in ElementTree.write().", "Returns a list of (optionally) encoded strings containing the XML data.", "It does not guarantee any specific sequence, except that b\"\".join(tostringlist(element)) == tostring(element)."]}
{"index": 7804, "name": "xml.etree.ElementTree.XML", "module": "xml", "doc": ["Parses an XML section from a string constant.", "This function can be used to embed \u201cXML literals\u201d in Python code.", "text is a string containing XML data.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "Returns an Element instance."]}
{"index": 7805, "name": "xml.etree.ElementTree.XMLID", "module": "xml", "doc": ["Parses an XML section from a string constant, and also returns a dictionary which maps from element id:s to elements.", "text is a string containing XML data.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "Returns a tuple containing an Element instance and a dictionary."]}
{"index": 7806, "name": "xml.etree.ElementTree.xml.etree.ElementInclude.default_loader", "module": "xml", "doc": ["Default loader.", "This default loader reads an included resource from disk.", "href is a URL.", "parse is for parse mode either \u201cxml\u201d or \u201ctext\u201d.", "encoding is an optional text encoding.", "If not given, encoding is utf-8.", "Returns the expanded resource.", "If the parse mode is \"xml\", this is an ElementTree instance.", "If the parse mode is \u201ctext\u201d, this is a Unicode string.", "If the loader fails, it can return None or raise an exception."]}
{"index": 7807, "name": "xml.etree.ElementTree.xml.etree.ElementInclude.include", "module": "xml", "doc": ["This function expands XInclude directives.", "elem is the root element.", "loader is an optional resource loader.", "If omitted, it defaults to default_loader().", "If given, it should be a callable that implements the same interface as default_loader().", "Returns the expanded resource.", "If the parse mode is \"xml\", this is an ElementTree instance.", "If the parse mode is \u201ctext\u201d, this is a Unicode string.", "If the loader fails, it can return None or raise an exception."]}
{"index": 7808, "name": "xml.etree.ElementTree.Element", "module": "xml", "doc": ["Element class.", "This class defines the Element interface, and provides a reference implementation of this interface.", "The element name, attribute names, and attribute values can be either bytestrings or Unicode strings.", "tag is the element name.", "attrib is an optional dictionary, containing element attributes.", "extra contains additional attributes, given as keyword arguments.", "The following dictionary-like methods work on the element attributes.", "The following methods work on the element\u2019s children (subelements).", "Element objects also support the following sequence type methods for working with subelements: __delitem__(), __getitem__(), __setitem__(), __len__().", "Caution: Elements with no subelements will test as False.", "This behavior will change in future versions.", "Use specific len(elem) or elem is None test instead."]}
{"index": 7809, "name": "xml.etree.ElementTree.Element.tag", "module": "xml", "doc": ["A string identifying what kind of data this element represents (the element type, in other words)."]}
{"index": 7810, "name": "xml.etree.ElementTree.Element.text", "module": "xml", "doc": ["These attributes can be used to hold additional data associated with the element.", "Their values are usually strings but may be any application-specific object.", "If the element is created from an XML file, the text attribute holds either the text between the element\u2019s start tag and its first child or end tag, or None, and the tail attribute holds either the text between the element\u2019s end tag and the next tag, or None.", "For the XML data", "the a element has None for both text and tail attributes, the b element has text \"1\" and tail \"4\", the c element has text \"2\" and tail None, and the d element has text None and tail \"3\".", "To collect the inner text of an element, see itertext(), for example \"\".join(element.itertext()).", "Applications may store arbitrary objects in these attributes."]}
{"index": 7811, "name": "xml.etree.ElementTree.Element.tail", "module": "xml", "doc": ["These attributes can be used to hold additional data associated with the element.", "Their values are usually strings but may be any application-specific object.", "If the element is created from an XML file, the text attribute holds either the text between the element\u2019s start tag and its first child or end tag, or None, and the tail attribute holds either the text between the element\u2019s end tag and the next tag, or None.", "For the XML data", "the a element has None for both text and tail attributes, the b element has text \"1\" and tail \"4\", the c element has text \"2\" and tail None, and the d element has text None and tail \"3\".", "To collect the inner text of an element, see itertext(), for example \"\".join(element.itertext()).", "Applications may store arbitrary objects in these attributes."]}
{"index": 7812, "name": "xml.etree.ElementTree.Element.attrib", "module": "xml", "doc": ["A dictionary containing the element\u2019s attributes.", "Note that while the attrib value is always a real mutable Python dictionary, an ElementTree implementation may choose to use another internal representation, and create the dictionary only if someone asks for it.", "To take advantage of such implementations, use the dictionary methods below whenever possible."]}
{"index": 7813, "name": "xml.etree.ElementTree.Element.clear", "module": "xml", "doc": ["Resets an element.", "This function removes all subelements, clears all attributes, and sets the text and tail attributes to None."]}
{"index": 7814, "name": "xml.etree.ElementTree.Element.get", "module": "xml", "doc": ["Gets the element attribute named key.", "Returns the attribute value, or default if the attribute was not found."]}
{"index": 7815, "name": "xml.etree.ElementTree.Element.items", "module": "xml", "doc": ["Returns the element attributes as a sequence of (name, value) pairs.", "The attributes are returned in an arbitrary order."]}
{"index": 7816, "name": "xml.etree.ElementTree.Element.keys", "module": "xml", "doc": ["Returns the elements attribute names as a list.", "The names are returned in an arbitrary order."]}
{"index": 7817, "name": "xml.etree.ElementTree.Element.set", "module": "xml", "doc": ["Set the attribute key on the element to value."]}
{"index": 7818, "name": "xml.etree.ElementTree.Element.append", "module": "xml", "doc": ["Adds the element subelement to the end of this element\u2019s internal list of subelements.", "Raises TypeError if subelement is not an Element."]}
{"index": 7819, "name": "xml.etree.ElementTree.Element.extend", "module": "xml", "doc": ["Appends subelements from a sequence object with zero or more elements.", "Raises TypeError if a subelement is not an Element."]}
{"index": 7820, "name": "xml.etree.ElementTree.Element.find", "module": "xml", "doc": ["Finds the first subelement matching match.", "match may be a tag name or a path.", "Returns an element instance or None.", "namespaces is an optional mapping from namespace prefix to full name."]}
{"index": 7821, "name": "xml.etree.ElementTree.Element.findall", "module": "xml", "doc": ["Finds all matching subelements, by tag name or path.", "Returns a list containing all matching elements in document order.", "namespaces is an optional mapping from namespace prefix to full name."]}
{"index": 7822, "name": "xml.etree.ElementTree.Element.findtext", "module": "xml", "doc": ["Finds text for the first subelement matching match.", "match may be a tag name or a path.", "Returns the text content of the first matching element, or default if no element was found.", "Note that if the matching element has no text content an empty string is returned.", "namespaces is an optional mapping from namespace prefix to full name."]}
{"index": 7823, "name": "xml.etree.ElementTree.Element.insert", "module": "xml", "doc": ["Inserts subelement at the given position in this element.", "Raises TypeError if subelement is not an Element."]}
{"index": 7824, "name": "xml.etree.ElementTree.Element.iter", "module": "xml", "doc": ["Creates a tree iterator with the current element as the root.", "The iterator iterates over this element and all elements below it, in document (depth first) order.", "If tag is not None or '*', only elements whose tag equals tag are returned from the iterator.", "If the tree structure is modified during iteration, the result is undefined."]}
{"index": 7825, "name": "xml.etree.ElementTree.Element.iterfind", "module": "xml", "doc": ["Finds all matching subelements, by tag name or path.", "Returns an iterable yielding all matching elements in document order.", "namespaces is an optional mapping from namespace prefix to full name."]}
{"index": 7826, "name": "xml.etree.ElementTree.Element.itertext", "module": "xml", "doc": ["Creates a text iterator.", "The iterator loops over this element and all subelements, in document order, and returns all inner text."]}
{"index": 7827, "name": "xml.etree.ElementTree.Element.makeelement", "module": "xml", "doc": ["Creates a new element object of the same type as this element.", "Do not call this method, use the SubElement() factory function instead."]}
{"index": 7828, "name": "xml.etree.ElementTree.Element.remove", "module": "xml", "doc": ["Removes subelement from the element.", "Unlike the find* methods this method compares elements based on the instance identity, not on tag value or contents."]}
{"index": 7829, "name": "xml.etree.ElementTree.ElementTree", "module": "xml", "doc": ["ElementTree wrapper class.", "This class represents an entire element hierarchy, and adds some extra support for serialization to and from standard XML.", "element is the root element.", "The tree is initialized with the contents of the XML file if given."]}
{"index": 7830, "name": "xml.etree.ElementTree.ElementTree._setroot", "module": "xml", "doc": ["Replaces the root element for this tree.", "This discards the current contents of the tree, and replaces it with the given element.", "Use with care.", "element is an element instance."]}
{"index": 7831, "name": "xml.etree.ElementTree.ElementTree.find", "module": "xml", "doc": ["Same as Element.find(), starting at the root of the tree."]}
{"index": 7832, "name": "xml.etree.ElementTree.ElementTree.findall", "module": "xml", "doc": ["Same as Element.findall(), starting at the root of the tree."]}
{"index": 7833, "name": "xml.etree.ElementTree.ElementTree.findtext", "module": "xml", "doc": ["Same as Element.findtext(), starting at the root of the tree."]}
{"index": 7834, "name": "xml.etree.ElementTree.ElementTree.getroot", "module": "xml", "doc": ["Returns the root element for this tree."]}
{"index": 7835, "name": "xml.etree.ElementTree.ElementTree.iter", "module": "xml", "doc": ["Creates and returns a tree iterator for the root element.", "The iterator loops over all elements in this tree, in section order.", "tag is the tag to look for (default is to return all elements)."]}
{"index": 7836, "name": "xml.etree.ElementTree.ElementTree.iterfind", "module": "xml", "doc": ["Same as Element.iterfind(), starting at the root of the tree."]}
{"index": 7837, "name": "xml.etree.ElementTree.ElementTree.parse", "module": "xml", "doc": ["Loads an external XML section into this element tree.", "source is a file name or file object.", "parser is an optional parser instance.", "If not given, the standard XMLParser parser is used.", "Returns the section root element."]}
{"index": 7838, "name": "xml.etree.ElementTree.ElementTree.write", "module": "xml", "doc": ["Writes the element tree to a file, as XML.", "file is a file name, or a file object opened for writing.", "encoding 1 is the output encoding (default is US-ASCII).", "xml_declaration controls if an XML declaration should be added to the file.", "Use False for never, True for always, None for only if not US-ASCII or UTF-8 or Unicode (default is None).", "default_namespace sets the default XML namespace (for \u201cxmlns\u201d).", "method is either \"xml\", \"html\" or \"text\" (default is \"xml\").", "The keyword-only short_empty_elements parameter controls the formatting of elements that contain no content.", "If True (the default), they are emitted as a single self-closed tag, otherwise they are emitted as a pair of start/end tags.", "The output is either a string (str) or binary (bytes).", "This is controlled by the encoding argument.", "If encoding is \"unicode\", the output is a string; otherwise, it\u2019s binary.", "Note that this may conflict with the type of file if it\u2019s an open file object; make sure you do not try to write a string to a binary stream and vice versa."]}
{"index": 7839, "name": "xml.etree.ElementTree.QName", "module": "xml", "doc": ["QName wrapper.", "This can be used to wrap a QName attribute value, in order to get proper namespace handling on output.", "text_or_uri is a string containing the QName value, in the form {uri}local, or, if the tag argument is given, the URI part of a QName.", "If tag is given, the first argument is interpreted as a URI, and this argument is interpreted as a local name.", "QName instances are opaque."]}
{"index": 7840, "name": "xml.etree.ElementTree.TreeBuilder", "module": "xml", "doc": ["Generic element structure builder.", "This builder converts a sequence of start, data, and end method calls to a well-formed element structure.", "You can use this class to build an element structure using a custom XML parser, or a parser for some other XML-like format.", "element_factory, when given, must be a callable accepting two positional arguments: a tag and a dict of attributes.", "It is expected to return a new element instance.", "In addition, a custom TreeBuilder object can provide the following method:"]}
{"index": 7841, "name": "xml.etree.ElementTree.TreeBuilder.close", "module": "xml", "doc": ["Flushes the builder buffers, and returns the toplevel document element.", "Returns an Element instance."]}
{"index": 7842, "name": "xml.etree.ElementTree.TreeBuilder.data", "module": "xml", "doc": ["Adds text to the current element.", "data is a string.", "This should be either a bytestring, or a Unicode string."]}
{"index": 7843, "name": "xml.etree.ElementTree.TreeBuilder.end", "module": "xml", "doc": ["Closes the current element.", "tag is the element name.", "Returns the closed element."]}
{"index": 7844, "name": "xml.etree.ElementTree.TreeBuilder.start", "module": "xml", "doc": ["Opens a new element.", "tag is the element name.", "attrs is a dictionary containing element attributes.", "Returns the opened element."]}
{"index": 7845, "name": "xml.etree.ElementTree.TreeBuilder.doctype", "module": "xml", "doc": ["Handles a doctype declaration.", "name is the doctype name.", "pubid is the public identifier.", "system is the system identifier.", "This method does not exist on the default TreeBuilder class."]}
{"index": 7846, "name": "xml.etree.ElementTree.XMLParser", "module": "xml", "doc": ["This class is the low-level building block of the module.", "It uses xml.parsers.expat for efficient, event-based parsing of XML.", "It can be fed XML data incrementally with the feed() method, and parsing events are translated to a push API - by invoking callbacks on the target object.", "If target is omitted, the standard TreeBuilder is used.", "The html argument was historically used for backwards compatibility and is now deprecated.", "If encoding 1 is given, the value overrides the encoding specified in the XML file.", "XMLParser.feed() calls target\u2019s start(tag, attrs_dict) method for each opening tag, its end(tag) method for each closing tag, and data is processed by method data(data).", "XMLParser.close() calls target\u2019s method close().", "XMLParser can be used not only for building a tree structure.", "This is an example of counting the maximum depth of an XML file:"]}
{"index": 7847, "name": "xml.etree.ElementTree.XMLParser.close", "module": "xml", "doc": ["Finishes feeding data to the parser.", "Returns the result of calling the close() method of the target passed during construction; by default, this is the toplevel document element."]}
{"index": 7848, "name": "xml.etree.ElementTree.XMLParser.feed", "module": "xml", "doc": ["Feeds data to the parser.", "data is encoded data."]}
{"index": 7849, "name": "xml.etree.ElementTree.XMLPullParser", "module": "xml", "doc": ["A pull parser suitable for non-blocking applications.", "Its input-side API is similar to that of XMLParser, but instead of pushing calls to a callback target, XMLPullParser collects an internal list of parsing events and lets the user read from it.", "events is a sequence of events to report back.", "The supported events are the strings \"start\", \"end\", \"start-ns\" and \"end-ns\" (the \u201cns\u201d events are used to get detailed namespace information).", "If events is omitted, only \"end\" events are reported."]}
{"index": 7850, "name": "xml.etree.ElementTree.XMLPullParser.feed", "module": "xml", "doc": ["Feed the given bytes data to the parser."]}
{"index": 7851, "name": "xml.etree.ElementTree.XMLPullParser.close", "module": "xml", "doc": ["Signal the parser that the data stream is terminated.", "Unlike XMLParser.close(), this method always returns None.", "Any events not yet retrieved when the parser is closed can still be read with read_events()."]}
{"index": 7852, "name": "xml.etree.ElementTree.XMLPullParser.read_events", "module": "xml", "doc": ["Return an iterator over the events which have been encountered in the data fed to the parser.", "The iterator yields (event, elem) pairs, where event is a string representing the type of event (e.g.", "\"end\") and elem is the encountered Element object.", "Events provided in a previous call to read_events() will not be yielded again.", "Events are consumed from the internal queue only when they are retrieved from the iterator, so multiple readers iterating in parallel over iterators obtained from read_events() will have unpredictable results."]}
{"index": 7853, "name": "xml.etree.ElementTree.ParseError", "module": "xml", "doc": ["XML parse error, raised by the various parsing methods in this module when parsing fails.", "The string representation of an instance of this exception will contain a user-friendly error message.", "In addition, it will have the following attributes available:"]}
{"index": 7854, "name": "xml.etree.ElementTree.ParseError.code", "module": "xml", "doc": ["A numeric error code from the expat parser.", "See the documentation of xml.parsers.expat for the list of error codes and their meanings."]}
{"index": 7855, "name": "xml.etree.ElementTree.ParseError.position", "module": "xml", "doc": ["A tuple of line, column numbers, specifying where the error occurred."]}
{"index": 7856, "name": "id8", "module": "xml", "doc": ["The encoding string included in XML output should conform to the appropriate standards.", "For example, \u201cUTF-8\u201d is valid, but \u201cUTF8\u201d is not.", "See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl and https://www.iana.org/assignments/character-sets/character-sets.xhtml."]}
{"index": 7857, "name": "xml.sax.handler.ContentHandler", "module": "xml", "doc": ["This is the main callback interface in SAX, and the one most important to applications.", "The order of events in this interface mirrors the order of the information in the document."]}
{"index": 7858, "name": "xml.sax.handler.DTDHandler", "module": "xml", "doc": ["Handle DTD events.", "This interface specifies only those DTD events required for basic parsing (unparsed entities and attributes)."]}
{"index": 7859, "name": "xml.sax.handler.EntityResolver", "module": "xml", "doc": ["Basic interface for resolving entities.", "If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities."]}
{"index": 7860, "name": "xml.sax.handler.ErrorHandler", "module": "xml", "doc": ["Interface used by the parser to present error and warning messages to the application.", "The methods of this object control whether errors are immediately converted to exceptions or are handled in some other way."]}
{"index": 7861, "name": "xml.sax.handler.all_features", "module": "xml", "doc": ["List of all features."]}
{"index": 7862, "name": "xml.sax.handler.all_properties", "module": "xml", "doc": ["List of all known property names."]}
{"index": 7863, "name": "xml.sax.handler.ContentHandler.setDocumentLocator", "module": "xml", "doc": ["Called by the parser to give the application a locator for locating the origin of document events.", "SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the DocumentHandler interface.", "The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error.", "Typically, the application will use this information for reporting its own errors (such as character content that does not match an application\u2019s business rules).", "The information returned by the locator is probably not sufficient for use with a search engine.", "Note that the locator will return correct information only during the invocation of the events in this interface.", "The application should not attempt to use it at any other time."]}
{"index": 7864, "name": "xml.sax.handler.ContentHandler.startDocument", "module": "xml", "doc": ["Receive notification of the beginning of a document.", "The SAX parser will invoke this method only once, before any other methods in this interface or in DTDHandler (except for setDocumentLocator())."]}
{"index": 7865, "name": "xml.sax.handler.ContentHandler.endDocument", "module": "xml", "doc": ["Receive notification of the end of a document.", "The SAX parser will invoke this method only once, and it will be the last method invoked during the parse.", "The parser shall not invoke this method until it has either abandoned parsing (because of an unrecoverable error) or reached the end of input."]}
{"index": 7866, "name": "xml.sax.handler.ContentHandler.startPrefixMapping", "module": "xml", "doc": ["Begin the scope of a prefix-URI Namespace mapping.", "The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the feature_namespaces feature is enabled (the default).", "There are cases, however, when applications need to use prefixes in character data or in attribute values, where they cannot safely be expanded automatically; the startPrefixMapping() and endPrefixMapping() events supply the information to the application to expand prefixes in those contexts itself, if necessary.", "Note that startPrefixMapping() and endPrefixMapping() events are not guaranteed to be properly nested relative to each-other: all startPrefixMapping() events will occur before the corresponding startElement() event, and all endPrefixMapping() events will occur after the corresponding endElement() event, but their order is not guaranteed."]}
{"index": 7867, "name": "xml.sax.handler.ContentHandler.endPrefixMapping", "module": "xml", "doc": ["End the scope of a prefix-URI mapping.", "See startPrefixMapping() for details.", "This event will always occur after the corresponding endElement() event, but the order of endPrefixMapping() events is not otherwise guaranteed."]}
{"index": 7868, "name": "xml.sax.handler.ContentHandler.startElement", "module": "xml", "doc": ["Signals the start of an element in non-namespace mode.", "The name parameter contains the raw XML 1.0 name of the element type as a string and the attrs parameter holds an object of the Attributes interface (see The Attributes Interface) containing the attributes of the element.", "The object passed as attrs may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes.", "To keep a copy of the attributes, use the copy() method of the attrs object."]}
{"index": 7869, "name": "xml.sax.handler.ContentHandler.endElement", "module": "xml", "doc": ["Signals the end of an element in non-namespace mode.", "The name parameter contains the name of the element type, just as with the startElement() event."]}
{"index": 7870, "name": "xml.sax.handler.ContentHandler.startElementNS", "module": "xml", "doc": ["Signals the start of an element in namespace mode.", "The name parameter contains the name of the element type as a (uri, localname) tuple, the qname parameter contains the raw XML 1.0 name used in the source document, and the attrs parameter holds an instance of the AttributesNS interface (see The AttributesNS Interface) containing the attributes of the element.", "If no namespace is associated with the element, the uri component of name will be None.", "The object passed as attrs may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes.", "To keep a copy of the attributes, use the copy() method of the attrs object.", "Parsers may set the qname parameter to None, unless the feature_namespace_prefixes feature is activated."]}
{"index": 7871, "name": "xml.sax.handler.ContentHandler.endElementNS", "module": "xml", "doc": ["Signals the end of an element in namespace mode.", "The name parameter contains the name of the element type, just as with the startElementNS() method, likewise the qname parameter."]}
{"index": 7872, "name": "xml.sax.handler.ContentHandler.characters", "module": "xml", "doc": ["Receive notification of character data.", "The Parser will call this method to report each chunk of character data.", "SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information.", "content may be a string or bytes instance; the expat reader module always produces strings."]}
{"index": 7873, "name": "xml.sax.handler.ContentHandler.ignorableWhitespace", "module": "xml", "doc": ["Receive notification of ignorable whitespace in element content.", "Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models.", "SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information."]}
{"index": 7874, "name": "xml.sax.handler.ContentHandler.processingInstruction", "module": "xml", "doc": ["Receive notification of a processing instruction.", "The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element.", "A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a text declaration (XML 1.0, section 4.3.1) using this method."]}
{"index": 7875, "name": "xml.sax.handler.ContentHandler.skippedEntity", "module": "xml", "doc": ["Receive notification of a skipped entity.", "The Parser will invoke this method once for each entity skipped.", "Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset).", "All processors may skip external entities, depending on the values of the feature_external_ges and the feature_external_pes properties."]}
{"index": 7876, "name": "xml.sax.handler.DTDHandler.notationDecl", "module": "xml", "doc": ["Handle a notation declaration event."]}
{"index": 7877, "name": "xml.sax.handler.DTDHandler.unparsedEntityDecl", "module": "xml", "doc": ["Handle an unparsed entity declaration event."]}
{"index": 7878, "name": "xml.sax.handler.EntityResolver.resolveEntity", "module": "xml", "doc": ["Resolve the system identifier of an entity and return either the system identifier to read from as a string, or an InputSource to read from.", "The default implementation returns systemId."]}
{"index": 7879, "name": "xml.sax.handler.ErrorHandler.error", "module": "xml", "doc": ["Called when the parser encounters a recoverable error.", "If this method does not raise an exception, parsing may continue, but further document information should not be expected by the application.", "Allowing the parser to continue may allow additional errors to be discovered in the input document."]}
{"index": 7880, "name": "xml.sax.handler.ErrorHandler.fatalError", "module": "xml", "doc": ["Called when the parser encounters an error it cannot recover from; parsing is expected to terminate when this method returns."]}
{"index": 7881, "name": "xml.sax.handler.ErrorHandler.warning", "module": "xml", "doc": ["Called when the parser presents minor warning information to the application.", "Parsing is expected to continue when this method returns, and document information will continue to be passed to the application.", "Raising an exception in this method will cause parsing to end."]}
{"index": 7882, "name": "xml.sax.make_parser", "module": "xml", "doc": ["Create and return a SAX XMLReader object.", "The first parser found will be used.", "If parser_list is provided, it must be a list of strings which name modules that have a function named create_parser().", "Modules listed in parser_list will be used before modules in the default list of parsers."]}
{"index": 7883, "name": "xml.sax.parse", "module": "xml", "doc": ["Create a SAX parser and use it to parse a document.", "The document, passed in as filename_or_stream, can be a filename or a file object.", "The handler parameter needs to be a SAX ContentHandler instance.", "If error_handler is given, it must be a SAX ErrorHandler instance; if omitted,  SAXParseException will be raised on all errors.", "There is no return value; all work must be done by the handler passed in."]}
{"index": 7884, "name": "xml.sax.parseString", "module": "xml", "doc": ["Similar to parse(), but parses from a buffer string received as a parameter.", "string must be a str instance or a bytes-like object."]}
{"index": 7885, "name": "xml.sax.SAXException", "module": "xml", "doc": ["Encapsulate an XML error or warning.", "This class can contain basic error or warning information from either the XML parser or the application: it can be subclassed to provide additional functionality or to add localization.", "Note that although the handlers defined in the ErrorHandler interface receive instances of this exception, it is not required to actually raise the exception \u2014 it is also useful as a container for information.", "When instantiated, msg should be a human-readable description of the error.", "The optional exception parameter, if given, should be None or an exception that was caught by the parsing code and is being passed along as information.", "This is the base class for the other SAX exception classes."]}
{"index": 7886, "name": "xml.sax.SAXParseException", "module": "xml", "doc": ["Subclass of SAXException raised on parse errors.", "Instances of this class are passed to the methods of the SAX ErrorHandler interface to provide information about the parse error.", "This class supports the SAX Locator interface as well as the SAXException interface."]}
{"index": 7887, "name": "xml.sax.SAXNotRecognizedException", "module": "xml", "doc": ["Subclass of SAXException raised when a SAX XMLReader is confronted with an unrecognized feature or property.", "SAX applications and extensions may use this class for similar purposes."]}
{"index": 7888, "name": "xml.sax.SAXNotSupportedException", "module": "xml", "doc": ["Subclass of SAXException raised when a SAX XMLReader is asked to enable a feature that is not supported, or to set a property to a value that the implementation does not support.", "SAX applications and extensions may use this class for similar purposes."]}
{"index": 7889, "name": "xml.sax.SAXException.getMessage", "module": "xml", "doc": ["Return a human-readable message describing the error condition."]}
{"index": 7890, "name": "xml.sax.SAXException.getException", "module": "xml", "doc": ["Return an encapsulated exception object, or None."]}
{"index": 7891, "name": "xml.sax.xmlreader.XMLReader", "module": "xml", "doc": ["Base class which can be inherited by SAX parsers."]}
{"index": 7892, "name": "xml.sax.xmlreader.IncrementalParser", "module": "xml", "doc": ["In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available.", "Note that the reader will normally not read the entire file, but read it in chunks as well; still parse() won\u2019t return until the entire document is processed.", "So these interfaces should be used if the blocking behaviour of parse() is not desirable.", "When the parser is instantiated it is ready to begin accepting data from the feed method immediately.", "After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method.", "Note that these methods must not be called during parsing, that is, after parse has been called and before it returns.", "By default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers."]}
{"index": 7893, "name": "xml.sax.xmlreader.Locator", "module": "xml", "doc": ["Interface for associating a SAX event with a document location.", "A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable.", "If information is not available, methods may return None."]}
{"index": 7894, "name": "xml.sax.xmlreader.InputSource", "module": "xml", "doc": ["Encapsulation of the information needed by the XMLReader to read entities.", "This class may include information about the public identifier, system identifier, byte stream (possibly with character encoding information) and/or the character stream of an entity.", "Applications will create objects of this class for use in the XMLReader.parse() method and for returning from EntityResolver.resolveEntity.", "An InputSource belongs to the application, the XMLReader is not allowed to modify InputSource objects passed to it from the application, although it may make copies and modify those."]}
{"index": 7895, "name": "xml.sax.xmlreader.AttributesImpl", "module": "xml", "doc": ["This is an implementation of the Attributes interface (see section The Attributes Interface).", "This is a dictionary-like object which represents the element attributes in a startElement() call.", "In addition to the most useful dictionary operations, it supports a number of other methods as described by the interface.", "Objects of this class should be instantiated by readers; attrs must be a dictionary-like object containing a mapping from attribute names to attribute values."]}
{"index": 7896, "name": "xml.sax.xmlreader.AttributesNSImpl", "module": "xml", "doc": ["Namespace-aware variant of AttributesImpl, which will be passed to startElementNS().", "It is derived from AttributesImpl, but understands attribute names as two-tuples of namespaceURI and localname.", "In addition, it provides a number of methods expecting qualified names as they appear in the original document.", "This class implements the AttributesNS interface (see section The AttributesNS Interface)."]}
{"index": 7897, "name": "xml.sax.xmlreader.XMLReader.parse", "module": "xml", "doc": ["Process an input source, producing SAX events.", "The source object can be a system identifier (a string identifying the input source \u2013 typically a file name or a URL), a file-like object, or an InputSource object.", "When parse() returns, the input is completely processed, and the parser object can be discarded or reset."]}
{"index": 7898, "name": "xml.sax.xmlreader.XMLReader.getContentHandler", "module": "xml", "doc": ["Return the current ContentHandler."]}
{"index": 7899, "name": "xml.sax.xmlreader.XMLReader.setContentHandler", "module": "xml", "doc": ["Set the current ContentHandler.", "If no ContentHandler is set, content events will be discarded."]}
{"index": 7900, "name": "xml.sax.xmlreader.XMLReader.getDTDHandler", "module": "xml", "doc": ["Return the current DTDHandler."]}
{"index": 7901, "name": "xml.sax.xmlreader.XMLReader.setDTDHandler", "module": "xml", "doc": ["Set the current DTDHandler.", "If no DTDHandler is set, DTD events will be discarded."]}
{"index": 7902, "name": "xml.sax.xmlreader.XMLReader.getEntityResolver", "module": "xml", "doc": ["Return the current EntityResolver."]}
{"index": 7903, "name": "xml.sax.xmlreader.XMLReader.setEntityResolver", "module": "xml", "doc": ["Set the current EntityResolver.", "If no EntityResolver is set, attempts to resolve an external entity will result in opening the system identifier for the entity, and fail if it is not available."]}
{"index": 7904, "name": "xml.sax.xmlreader.XMLReader.getErrorHandler", "module": "xml", "doc": ["Return the current ErrorHandler."]}
{"index": 7905, "name": "xml.sax.xmlreader.XMLReader.setErrorHandler", "module": "xml", "doc": ["Set the current error handler.", "If no ErrorHandler is set, errors will be raised as exceptions, and warnings will be printed."]}
{"index": 7906, "name": "xml.sax.xmlreader.XMLReader.setLocale", "module": "xml", "doc": ["Allow an application to set the locale for errors and warnings.", "SAX parsers are not required to provide localization for errors and warnings; if they cannot support the requested locale, however, they must raise a SAX exception.", "Applications may request a locale change in the middle of a parse."]}
{"index": 7907, "name": "xml.sax.xmlreader.XMLReader.getFeature", "module": "xml", "doc": ["Return the current setting for feature featurename.", "If the feature is not recognized, SAXNotRecognizedException is raised.", "The well-known featurenames are listed in the module xml.sax.handler."]}
{"index": 7908, "name": "xml.sax.xmlreader.XMLReader.setFeature", "module": "xml", "doc": ["Set the featurename to value.", "If the feature is not recognized, SAXNotRecognizedException is raised.", "If the feature or its setting is not supported by the parser, SAXNotSupportedException is raised."]}
{"index": 7909, "name": "xml.sax.xmlreader.XMLReader.getProperty", "module": "xml", "doc": ["Return the current setting for property propertyname.", "If the property is not recognized, a SAXNotRecognizedException is raised.", "The well-known propertynames are listed in the module xml.sax.handler."]}
{"index": 7910, "name": "xml.sax.xmlreader.XMLReader.setProperty", "module": "xml", "doc": ["Set the propertyname to value.", "If the property is not recognized, SAXNotRecognizedException is raised.", "If the property or its setting is not supported by the parser, SAXNotSupportedException is raised."]}
{"index": 7911, "name": "xml.sax.xmlreader.IncrementalParser.feed", "module": "xml", "doc": ["Process a chunk of data."]}
{"index": 7912, "name": "xml.sax.xmlreader.IncrementalParser.close", "module": "xml", "doc": ["Assume the end of the document.", "That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing."]}
{"index": 7913, "name": "xml.sax.xmlreader.IncrementalParser.reset", "module": "xml", "doc": ["This method is called after close has been called to reset the parser so that it is ready to parse new documents.", "The results of calling parse or feed after close without calling reset are undefined."]}
{"index": 7914, "name": "xml.sax.xmlreader.Locator.getColumnNumber", "module": "xml", "doc": ["Return the column number where the current event begins."]}
{"index": 7915, "name": "xml.sax.xmlreader.Locator.getLineNumber", "module": "xml", "doc": ["Return the line number where the current event begins."]}
{"index": 7916, "name": "xml.sax.xmlreader.Locator.getPublicId", "module": "xml", "doc": ["Return the public identifier for the current event."]}
{"index": 7917, "name": "xml.sax.xmlreader.Locator.getSystemId", "module": "xml", "doc": ["Return the system identifier for the current event."]}
{"index": 7918, "name": "xml.sax.xmlreader.InputSource.setPublicId", "module": "xml", "doc": ["Sets the public identifier of this InputSource."]}
{"index": 7919, "name": "xml.sax.xmlreader.InputSource.getPublicId", "module": "xml", "doc": ["Returns the public identifier of this InputSource."]}
{"index": 7920, "name": "xml.sax.xmlreader.InputSource.setSystemId", "module": "xml", "doc": ["Sets the system identifier of this InputSource."]}
{"index": 7921, "name": "xml.sax.xmlreader.InputSource.getSystemId", "module": "xml", "doc": ["Returns the system identifier of this InputSource."]}
{"index": 7922, "name": "xml.sax.xmlreader.InputSource.setEncoding", "module": "xml", "doc": ["Sets the character encoding of this InputSource.", "The encoding must be a string acceptable for an XML encoding declaration (see section 4.3.3 of the XML recommendation).", "The encoding attribute of the InputSource is ignored if the InputSource also contains a character stream."]}
{"index": 7923, "name": "xml.sax.xmlreader.InputSource.getEncoding", "module": "xml", "doc": ["Get the character encoding of this InputSource."]}
{"index": 7924, "name": "xml.sax.xmlreader.InputSource.setByteStream", "module": "xml", "doc": ["Set the byte stream (a binary file) for this input source.", "The SAX parser will ignore this if there is also a character stream specified, but it will use a byte stream in preference to opening a URI connection itself.", "If the application knows the character encoding of the byte stream, it should set it with the setEncoding method."]}
{"index": 7925, "name": "xml.sax.xmlreader.InputSource.getByteStream", "module": "xml", "doc": ["Get the byte stream for this input source.", "The getEncoding method will return the character encoding for this byte stream, or None if unknown."]}
{"index": 7926, "name": "xml.sax.xmlreader.InputSource.setCharacterStream", "module": "xml", "doc": ["Set the character stream (a text file) for this input source.", "If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier."]}
{"index": 7927, "name": "xml.sax.xmlreader.InputSource.getCharacterStream", "module": "xml", "doc": ["Get the character stream for this input source."]}
{"index": 7928, "name": "xml.sax.xmlreader.Attributes.getLength", "module": "xml", "doc": ["Return the number of attributes."]}
{"index": 7929, "name": "xml.sax.xmlreader.Attributes.getNames", "module": "xml", "doc": ["Return the names of the attributes."]}
{"index": 7930, "name": "xml.sax.xmlreader.Attributes.getType", "module": "xml", "doc": ["Returns the type of the attribute name, which is normally 'CDATA'."]}
{"index": 7931, "name": "xml.sax.xmlreader.Attributes.getValue", "module": "xml", "doc": ["Return the value of attribute name."]}
{"index": 7932, "name": "xml.sax.xmlreader.AttributesNS.getValueByQName", "module": "xml", "doc": ["Return the value for a qualified name."]}
{"index": 7933, "name": "xml.sax.xmlreader.AttributesNS.getNameByQName", "module": "xml", "doc": ["Return the (namespace, localname) pair for a qualified name."]}
{"index": 7934, "name": "xml.sax.xmlreader.AttributesNS.getQNameByName", "module": "xml", "doc": ["Return the qualified name for a (namespace, localname) pair."]}
{"index": 7935, "name": "xml.sax.xmlreader.AttributesNS.getQNames", "module": "xml", "doc": ["Return the qualified names of all attributes."]}
{"index": 7936, "name": "xml.sax.saxutils.escape", "module": "xml", "doc": ["Escape '&', '<', and '>' in a string of data.", "You can escape other strings of data by passing a dictionary as the optional entities parameter.", "The keys and values must all be strings; each key will be replaced with its corresponding value.", "The characters '&', '<' and '>' are always escaped, even if entities is provided."]}
{"index": 7937, "name": "xml.sax.saxutils.unescape", "module": "xml", "doc": ["Unescape '&amp;', '&lt;', and '&gt;' in a string of data.", "You can unescape other strings of data by passing a dictionary as the optional entities parameter.", "The keys and values must all be strings; each key will be replaced with its corresponding value.", "'&amp', '&lt;', and '&gt;' are always unescaped, even if entities is provided."]}
{"index": 7938, "name": "xml.sax.saxutils.quoteattr", "module": "xml", "doc": ["Similar to escape(), but also prepares data to be used as an attribute value.", "The return value is a quoted version of data with any additional required replacements.", "quoteattr() will select a quote character based on the content of data, attempting to avoid encoding any quote characters in the string.", "If both single- and double-quote characters are already in data, the double-quote characters will be encoded and data will be wrapped in double-quotes.", "The resulting string can be used directly as an attribute value:", "This function is useful when generating attribute values for HTML or any SGML using the reference concrete syntax."]}
{"index": 7939, "name": "xml.sax.saxutils.XMLGenerator", "module": "xml", "doc": ["This class implements the ContentHandler interface by writing SAX events back into an XML document.", "In other words, using an XMLGenerator as the content handler will reproduce the original document being parsed.", "out should be a file-like object which will default to sys.stdout.", "encoding is the encoding of the output stream which defaults to 'iso-8859-1'.", "short_empty_elements controls the formatting of elements that contain no content:  if False (the default) they are emitted as a pair of start/end tags, if set to True they are emitted as a single self-closed tag."]}
{"index": 7940, "name": "xml.sax.saxutils.XMLFilterBase", "module": "xml", "doc": ["This class is designed to sit between an XMLReader and the client application\u2019s event handlers.", "By default, it does nothing but pass requests up to the reader and events on to the handlers unmodified, but subclasses can override specific methods to modify the event stream or the configuration requests as they pass through."]}
{"index": 7941, "name": "xml.sax.saxutils.prepare_input_source", "module": "xml", "doc": ["This function takes an input source and an optional base URL and returns a fully resolved InputSource object ready for reading.", "The input source can be given as a string, a file-like object, or an InputSource object; parsers will use this function to implement the polymorphic source argument to their parse() method."]}
{"index": 7942, "name": "xmlrpc.client.ServerProxy", "module": "xmlrpc", "doc": ["A ServerProxy instance is an object that manages communication with a remote XML-RPC server.", "The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server.", "The optional second argument is a transport factory instance; by default it is an internal SafeTransport instance for https: URLs and an internal HTTP Transport instance otherwise.", "The optional third argument is an encoding, by default UTF-8.", "The optional fourth argument is a debugging flag.", "The following parameters govern the use of the returned proxy instance.", "If allow_none is true,  the Python constant None will be translated into XML; the default behaviour is for None to raise a TypeError.", "This is a commonly-used extension to the XML-RPC specification, but isn\u2019t supported by all clients and servers; see http://ontosys.com/xml-rpc/extensions.php for a description.", "The use_builtin_types flag can be used to cause date/time values to be presented as datetime.datetime objects and binary data to be presented as bytes objects; this flag is false by default.", "datetime.datetime, bytes and bytearray objects may be passed to calls.", "The obsolete use_datetime flag is similar to use_builtin_types but it applies only to date/time values.", "Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: http://user:pass@host:port/path.", "The  user:pass portion will be base64-encoded as an HTTP \u2018Authorization\u2019 header, and sent to the remote server as part of the connection process when invoking an XML-RPC method.", "You only need to use this if the remote server requires a Basic Authentication user and password.", "If an HTTPS URL is provided, context may be ssl.SSLContext and configures the SSL settings of the underlying HTTPS connection.", "The returned instance is a proxy object with methods that can be used to invoke corresponding RPC calls on the remote server.", "If the remote server supports the introspection API, the proxy can also be used to query the remote server for the methods it supports (service discovery) and fetch other server-associated metadata.", "Types that are conformable (e.g.", "that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):", "This is the full set of data types supported by XML-RPC.", "Method calls may also raise a special Fault instance, used to signal XML-RPC server errors, or ProtocolError used to signal an error in the HTTP/HTTPS transport layer.", "Both Fault and ProtocolError derive from a base class called Error.", "Note that the xmlrpc client module currently does not marshal instances of subclasses of built-in types.", "When passing strings, characters special to XML such as <, >, and & will be automatically escaped.", "However, it\u2019s the caller\u2019s responsibility to ensure that the string is free of characters that aren\u2019t allowed in XML, such as the control characters with ASCII values between 0 and 31 (except, of course, tab, newline and carriage return); failing to do this will result in an XML-RPC request that isn\u2019t well-formed XML.", "If you have to pass arbitrary bytes via XML-RPC, use bytes or bytearray classes or the Binary wrapper class described below.", "Server is retained as an alias for ServerProxy for backwards compatibility.", "New code should use ServerProxy."]}
{"index": 7943, "name": "xmlrpc.client.ServerProxy.system.listMethods", "module": "xmlrpc", "doc": ["This method returns a list of strings, one for each (non-system) method supported by the XML-RPC server."]}
{"index": 7944, "name": "xmlrpc.client.ServerProxy.system.methodSignature", "module": "xmlrpc", "doc": ["This method takes one parameter, the name of a method implemented by the XML-RPC server.", "It returns an array of possible signatures for this method.", "A signature is an array of types.", "The first of these types is the return type of the method, the rest are parameters.", "Because multiple signatures (ie.", "overloading) is permitted, this method returns a list of signatures rather than a singleton.", "Signatures themselves are restricted to the top level parameters expected by a method.", "For instance if a method expects one array of structs as a parameter, and it returns a string, its signature is simply \u201cstring, array\u201d.", "If it expects three integers and returns a string, its signature is \u201cstring, int, int, int\u201d.", "If no signature is defined for the method, a non-array value is returned.", "In Python this means that the type of the returned  value will be something other than list."]}
{"index": 7945, "name": "xmlrpc.client.ServerProxy.system.methodHelp", "module": "xmlrpc", "doc": ["This method takes one parameter, the name of a method implemented by the XML-RPC server.", "It returns a documentation string describing the use of that method.", "If no such string is available, an empty string is returned.", "The documentation string may contain HTML markup."]}
{"index": 7946, "name": "xmlrpc.client.DateTime", "module": "xmlrpc", "doc": ["This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time/date string, or a datetime.datetime instance.", "It has the following methods, supported mainly for internal use by the marshalling/unmarshalling code:", "It also supports certain of Python\u2019s built-in operators through rich comparison and __repr__() methods."]}
{"index": 7947, "name": "xmlrpc.client.DateTime.decode", "module": "xmlrpc", "doc": ["Accept a string as the instance\u2019s new time value."]}
{"index": 7948, "name": "xmlrpc.client.DateTime.encode", "module": "xmlrpc", "doc": ["Write the XML-RPC encoding of this DateTime item to the out stream object."]}
{"index": 7949, "name": "xmlrpc.client.Binary", "module": "xmlrpc", "doc": ["This class may be initialized from bytes data (which may include NULs).", "The primary access to the content of a Binary object is provided by an attribute:", "Binary objects have the following methods, supported mainly for internal use by the marshalling/unmarshalling code:", "It also supports certain of Python\u2019s built-in operators through __eq__() and __ne__() methods."]}
{"index": 7950, "name": "xmlrpc.client.Binary.data", "module": "xmlrpc", "doc": ["The binary data encapsulated by the Binary instance.", "The data is provided as a bytes object."]}
{"index": 7951, "name": "xmlrpc.client.Binary.decode", "module": "xmlrpc", "doc": ["Accept a base64 bytes object and decode it as the instance\u2019s new data."]}
{"index": 7952, "name": "xmlrpc.client.Binary.encode", "module": "xmlrpc", "doc": ["Write the XML-RPC base 64 encoding of this binary item to the out stream object.", "The encoded data will have newlines every 76 characters as per RFC 2045 section 6.8, which was the de facto standard base64 specification when the XML-RPC spec was written."]}
{"index": 7953, "name": "xmlrpc.client.Fault", "module": "xmlrpc", "doc": ["A Fault object encapsulates the content of an XML-RPC fault tag.", "Fault objects have the following attributes:"]}
{"index": 7954, "name": "xmlrpc.client.Fault.faultCode", "module": "xmlrpc", "doc": ["A string indicating the fault type."]}
{"index": 7955, "name": "xmlrpc.client.Fault.faultString", "module": "xmlrpc", "doc": ["A string containing a diagnostic message associated with the fault."]}
{"index": 7956, "name": "xmlrpc.client.ProtocolError", "module": "xmlrpc", "doc": ["A ProtocolError object describes a protocol error in the underlying transport layer (such as a 404 \u2018not found\u2019 error if the server named by the URI does not exist).", "It has the following attributes:"]}
{"index": 7957, "name": "xmlrpc.client.ProtocolError.url", "module": "xmlrpc", "doc": ["The URI or URL that triggered the error."]}
{"index": 7958, "name": "xmlrpc.client.ProtocolError.errcode", "module": "xmlrpc", "doc": ["The error code."]}
{"index": 7959, "name": "xmlrpc.client.ProtocolError.errmsg", "module": "xmlrpc", "doc": ["The error message or diagnostic string."]}
{"index": 7960, "name": "xmlrpc.client.ProtocolError.headers", "module": "xmlrpc", "doc": ["A dict containing the headers of the HTTP/HTTPS request that triggered the error."]}
{"index": 7961, "name": "xmlrpc.client.MultiCall", "module": "xmlrpc", "doc": ["Create an object used to boxcar method calls.", "server is the eventual target of the call.", "Calls can be made to the result object, but they will immediately return None, and only store the call name and parameters in the MultiCall object.", "Calling the object itself causes all stored calls to be transmitted as a single system.multicall request.", "The result of this call is a generator; iterating over this generator yields the individual results."]}
{"index": 7962, "name": "xmlrpc.client.dumps", "module": "xmlrpc", "doc": ["Convert params into an XML-RPC request.", "or into a response if methodresponse is true.", "params can be either a tuple of arguments or an instance of the Fault exception class.", "If methodresponse is true, only a single value can be returned, meaning that params must be of length 1. encoding, if supplied, is the encoding to use in the generated XML; the default is UTF-8.", "Python\u2019s None value cannot be used in standard XML-RPC; to allow using it via an extension,  provide a true value for allow_none."]}
{"index": 7963, "name": "xmlrpc.client.loads", "module": "xmlrpc", "doc": ["Convert an XML-RPC request or response into Python objects, a (params, methodname).", "params is a tuple of argument; methodname is a string, or None if no method name is present in the packet.", "If the XML-RPC packet represents a fault condition, this function will raise a Fault exception.", "The use_builtin_types flag can be used to cause date/time values to be presented as datetime.datetime objects and binary data to be presented as bytes objects; this flag is false by default.", "The obsolete use_datetime flag is similar to use_builtin_types but it applies only to date/time values."]}
{"index": 7964, "name": "id6", "module": "xmlrpc", "doc": ["This approach has been first presented in a discussion on xmlrpc.com."]}
{"index": 7965, "name": "xmlrpc.server.SimpleXMLRPCServer", "module": "xmlrpc", "doc": ["Create a new server instance.", "This class provides methods for registration of functions that can be called by the XML-RPC protocol.", "The requestHandler parameter should be a factory for request handler instances; it defaults to SimpleXMLRPCRequestHandler.", "The addr and requestHandler parameters are passed to the socketserver.TCPServer constructor.", "If logRequests is true (the default), requests will be logged; setting this parameter to false will turn off logging.", "The allow_none and encoding parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server.", "The bind_and_activate parameter controls whether server_bind() and server_activate() are called immediately by the constructor; it defaults to true.", "Setting it to false allows code to manipulate the allow_reuse_address class variable before the address is bound.", "The use_builtin_types parameter is passed to the loads() function and controls which types are processed when date/times values or binary data are received; it defaults to false."]}
{"index": 7966, "name": "xmlrpc.server.CGIXMLRPCRequestHandler", "module": "xmlrpc", "doc": ["Create a new instance to handle XML-RPC requests in a CGI environment.", "The allow_none and encoding parameters are passed on to xmlrpc.client and control the XML-RPC responses that will be returned from the server.", "The use_builtin_types parameter is passed to the loads() function and controls which types are processed when date/times values or binary data are received; it defaults to false."]}
{"index": 7967, "name": "xmlrpc.server.SimpleXMLRPCRequestHandler", "module": "xmlrpc", "doc": ["Create a new request handler instance.", "This request handler supports POST requests and modifies logging so that the logRequests parameter to the SimpleXMLRPCServer constructor parameter is honored."]}
{"index": 7968, "name": "xmlrpc.server.SimpleXMLRPCServer.register_function", "module": "xmlrpc", "doc": ["Register a function that can respond to XML-RPC requests.", "If name is given, it will be the method name associated with function, otherwise function.__name__ will be used.", "name is a string, and may contain characters not legal in Python identifiers, including the period character.", "This method can also be used as a decorator.", "When used as a decorator, name can only be given as a keyword argument to register function under name.", "If no name is given, function.__name__ will be used."]}
{"index": 7969, "name": "xmlrpc.server.SimpleXMLRPCServer.register_instance", "module": "xmlrpc", "doc": ["Register an object which is used to expose method names which have not been registered using register_function().", "If instance contains a _dispatch() method, it is called with the requested method name and the parameters from the request.", "Its API is def _dispatch(self, method, params) (note that params does not represent a variable argument list).", "If it calls an underlying function to perform its task, that function is called as func(*params), expanding the parameter list.", "The return value from _dispatch() is returned to the client as the result.", "If instance does not have a _dispatch() method, it is searched for an attribute matching the name of the requested method.", "If the optional allow_dotted_names argument is true and the instance does not have a _dispatch() method, then if the requested method name contains periods, each component of the method name is searched for individually, with the effect that a simple hierarchical search is performed.", "The value found from this search is then called with the parameters from the request, and the return value is passed back to the client."]}
{"index": 7970, "name": "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions", "module": "xmlrpc", "doc": ["Registers the XML-RPC introspection functions system.listMethods, system.methodHelp and system.methodSignature."]}
{"index": 7971, "name": "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions", "module": "xmlrpc", "doc": ["Registers the XML-RPC multicall function system.multicall."]}
{"index": 7972, "name": "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths", "module": "xmlrpc", "doc": ["An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests.", "Requests posted to other paths will result in a 404 \u201cno such page\u201d HTTP error.", "If this tuple is empty, all paths will be considered valid.", "The default value is ('/', '/RPC2')."]}
{"index": 7973, "name": "xmlrpc.server.CGIXMLRPCRequestHandler.register_function", "module": "xmlrpc", "doc": ["Register a function that can respond to XML-RPC requests.", "If name is given, it will be the method name associated with function, otherwise function.__name__ will be used.", "name is a string, and may contain characters not legal in Python identifiers, including the period character.", "This method can also be used as a decorator.", "When used as a decorator, name can only be given as a keyword argument to register function under name.", "If no name is given, function.__name__ will be used."]}
{"index": 7974, "name": "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance", "module": "xmlrpc", "doc": ["Register an object which is used to expose method names  which have not been registered using register_function().", "If  instance contains a _dispatch() method, it is called with the  requested method name and the parameters from the  request; the return value is returned to the client as the result.", "If instance does not have a _dispatch() method, it is searched for an attribute matching the name of the requested method; if  the requested method name contains periods, each  component of the method name is searched for individually,  with the effect that a simple hierarchical search is performed.", "The value found from this search is then called with the  parameters from the request, and the return value is passed  back to the client."]}
{"index": 7975, "name": "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions", "module": "xmlrpc", "doc": ["Register the XML-RPC introspection functions  system.listMethods, system.methodHelp and  system.methodSignature."]}
{"index": 7976, "name": "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions", "module": "xmlrpc", "doc": ["Register the XML-RPC multicall function system.multicall."]}
{"index": 7977, "name": "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request", "module": "xmlrpc", "doc": ["Handle an XML-RPC request.", "If request_text is given, it should be the POST data provided by the HTTP server,  otherwise the contents of stdin will be used."]}
{"index": 7978, "name": "xmlrpc.server.DocXMLRPCServer", "module": "xmlrpc", "doc": ["Create a new server instance.", "All parameters have the same meaning as for SimpleXMLRPCServer; requestHandler defaults to DocXMLRPCRequestHandler."]}
{"index": 7979, "name": "xmlrpc.server.DocCGIXMLRPCRequestHandler", "module": "xmlrpc", "doc": ["Create a new instance to handle XML-RPC requests in a CGI environment."]}
{"index": 7980, "name": "xmlrpc.server.DocXMLRPCRequestHandler", "module": "xmlrpc", "doc": ["Create a new request handler instance.", "This request handler supports XML-RPC POST requests, documentation GET requests, and modifies logging so that the logRequests parameter to the DocXMLRPCServer constructor parameter is honored."]}
{"index": 7981, "name": "xmlrpc.server.DocXMLRPCServer.set_server_title", "module": "xmlrpc", "doc": ["Set the title used in the generated HTML documentation.", "This title will be used inside the HTML \u201ctitle\u201d element."]}
{"index": 7982, "name": "xmlrpc.server.DocXMLRPCServer.set_server_name", "module": "xmlrpc", "doc": ["Set the name used in the generated HTML documentation.", "This name will appear at the top of the generated documentation inside a \u201ch1\u201d element."]}
{"index": 7983, "name": "xmlrpc.server.DocXMLRPCServer.set_server_documentation", "module": "xmlrpc", "doc": ["Set the description used in the generated HTML documentation.", "This description will appear as a paragraph, below the server name, in the documentation."]}
{"index": 7984, "name": "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title", "module": "xmlrpc", "doc": ["Set the title used in the generated HTML documentation.", "This title will be used inside the HTML \u201ctitle\u201d element."]}
{"index": 7985, "name": "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name", "module": "xmlrpc", "doc": ["Set the name used in the generated HTML documentation.", "This name will appear at the top of the generated documentation inside a \u201ch1\u201d element."]}
{"index": 7986, "name": "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation", "module": "xmlrpc", "doc": ["Set the description used in the generated HTML documentation.", "This description will appear as a paragraph, below the server name, in the documentation."]}
{"index": 7987, "name": "cmdoption-zipapp-o", "module": "zipapp", "doc": ["Write the output to a file named output.", "If this option is not specified, the output filename will be the same as the input source, with the extension .pyz added.", "If an explicit filename is given, it is used as is (so a .pyz extension should be included if required).", "An output filename must be specified if the source is an archive (and in that case, output must not be the same as source)."]}
{"index": 7988, "name": "cmdoption-zipapp-p", "module": "zipapp", "doc": ["Add a #!", "line to the archive specifying interpreter as the command to run.", "Also, on POSIX, make the archive executable.", "The default is to write no #!", "line, and not make the file executable."]}
{"index": 7989, "name": "cmdoption-zipapp-m", "module": "zipapp", "doc": ["Write a __main__.py file to the archive that executes mainfn.", "The mainfn argument should have the form \u201cpkg.mod:fn\u201d, where \u201cpkg.mod\u201d is a package/module in the archive, and \u201cfn\u201d is a callable in the given module.", "The __main__.py file will execute that callable.", "--main cannot be specified when copying an archive."]}
{"index": 7990, "name": "cmdoption-zipapp-c", "module": "zipapp", "doc": ["Compress files with the deflate method, reducing the size of the output file.", "By default, files are stored uncompressed in the archive.", "--compress has no effect when copying an archive."]}
{"index": 7991, "name": "cmdoption-zipapp-info", "module": "zipapp", "doc": ["Display the interpreter embedded in the archive, for diagnostic purposes.", "In this case, any other options are ignored and SOURCE must be an archive, not a directory."]}
{"index": 7992, "name": "cmdoption-zipapp-h", "module": "zipapp", "doc": ["Print a short usage message and exit."]}
{"index": 7993, "name": "zipapp.create_archive", "module": "zipapp", "doc": ["Create an application archive from source.", "The source can be any of the following:", "The target argument determines where the resulting archive will be written:", "The interpreter argument specifies the name of the Python interpreter with which the archive will be executed.", "It is written as a \u201cshebang\u201d line at the start of the archive.", "On POSIX, this will be interpreted by the OS, and on Windows it will be handled by the Python launcher.", "Omitting the interpreter results in no shebang line being written.", "If an interpreter is specified, and the target is a filename, the executable bit of the target file will be set.", "The main argument specifies the name of a callable which will be used as the main program for the archive.", "It can only be specified if the source is a directory, and the source does not already contain a __main__.py file.", "The main argument should take the form \u201cpkg.module:callable\u201d and the archive will be run by importing \u201cpkg.module\u201d and executing the given callable with no arguments.", "It is an error to omit main if the source is a directory and does not contain a __main__.py file, as otherwise the resulting archive would not be executable.", "The optional filter argument specifies a callback function that is passed a Path object representing the path to the file being added (relative to the source directory).", "It should return True if the file is to be added.", "The optional compressed argument determines whether files are compressed.", "If set to True, files in the archive are compressed with the deflate method; otherwise, files are stored uncompressed.", "This argument has no effect when copying an existing archive.", "If a file object is specified for source or target, it is the caller\u2019s responsibility to close it after calling create_archive.", "When copying an existing archive, file objects supplied only need read and readline, or write methods.", "When creating an archive from a directory, if the target is a file object it will be passed to the zipfile.ZipFile class, and must supply the methods needed by that class."]}
{"index": 7994, "name": "zipapp.get_interpreter", "module": "zipapp", "doc": ["Return the interpreter specified in the #!", "line at the start of the archive.", "If there is no #!", "line, return None.", "The archive argument can be a filename or a file-like object open for reading in bytes mode.", "It is assumed to be at the start of the archive."]}
{"index": 7995, "name": "zipfile.BadZipFile", "module": "zipfile", "doc": ["The error raised for bad ZIP files."]}
{"index": 7996, "name": "zipfile.BadZipfile", "module": "zipfile", "doc": ["Alias of BadZipFile, for compatibility with older Python versions."]}
{"index": 7997, "name": "zipfile.LargeZipFile", "module": "zipfile", "doc": ["The error raised when a ZIP file would require ZIP64 functionality but that has not been enabled."]}
{"index": 7998, "name": "zipfile.ZipInfo", "module": "zipfile", "doc": ["Class used to represent information about a member of an archive.", "Instances of this class are returned by the getinfo() and infolist() methods of ZipFile objects.", "Most users of the zipfile module will not need to create these, but only use those created by this module.", "filename should be the full name of the archive member, and date_time should be a tuple containing six fields which describe the time of the last modification to the file; the fields are described in section ZipInfo Objects."]}
{"index": 7999, "name": "zipfile.is_zipfile", "module": "zipfile", "doc": ["Returns True if filename is a valid ZIP file based on its magic number, otherwise returns False.", "filename may be a file or file-like object too."]}
{"index": 8000, "name": "zipfile.ZIP_STORED", "module": "zipfile", "doc": ["The numeric constant for an uncompressed archive member."]}
{"index": 8001, "name": "zipfile.ZIP_DEFLATED", "module": "zipfile", "doc": ["The numeric constant for the usual ZIP compression method.", "This requires the zlib module."]}
{"index": 8002, "name": "zipfile.ZIP_BZIP2", "module": "zipfile", "doc": ["The numeric constant for the BZIP2 compression method.", "This requires the bz2 module."]}
{"index": 8003, "name": "zipfile.ZIP_LZMA", "module": "zipfile", "doc": ["The numeric constant for the LZMA compression method.", "This requires the lzma module."]}
{"index": 8004, "name": "zipfile.ZipFile", "module": "zipfile", "doc": ["Open a ZIP file, where file can be a path to a file (a string), a file-like object or a path-like object.", "The mode parameter should be 'r' to read an existing file, 'w' to truncate and write a new file, 'a' to append to an existing file, or 'x' to exclusively create and write a new file.", "If mode is 'x' and file refers to an existing file, a FileExistsError will be raised.", "If mode is 'a' and file refers to an existing ZIP file, then additional files are added to it.", "If file does not refer to a ZIP file, then a new ZIP archive is appended to the file.", "This is meant for adding a ZIP archive to another file (such as python.exe).", "If mode is 'a' and the file does not exist at all, it is created.", "If mode is 'r' or 'a', the file should be seekable.", "compression is the ZIP compression method to use when writing the archive, and should be ZIP_STORED, ZIP_DEFLATED, ZIP_BZIP2 or ZIP_LZMA; unrecognized values will cause NotImplementedError to be raised.", "If ZIP_DEFLATED, ZIP_BZIP2 or ZIP_LZMA is specified but the corresponding module (zlib, bz2 or lzma) is not available, RuntimeError is raised.", "The default is ZIP_STORED.", "If allowZip64 is True (the default) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB.", "If it is false zipfile will raise an exception when the ZIP file would require ZIP64 extensions.", "The compresslevel parameter controls the compression level to use when writing files to the archive.", "When using ZIP_STORED or ZIP_LZMA it has no effect.", "When using ZIP_DEFLATED integers 0 through 9 are accepted (see zlib for more information).", "When using ZIP_BZIP2 integers 1 through 9 are accepted (see bz2 for more information).", "If the file is created with mode 'w', 'x' or 'a' and then closed without adding any files to the archive, the appropriate ZIP structures for an empty archive will be written to the file.", "ZipFile is also a context manager and therefore supports the with statement.", "In the example, myzip is closed after the with statement\u2019s suite is finished\u2014even if an exception occurs:"]}
{"index": 8005, "name": "zipfile.ZipFile.close", "module": "zipfile", "doc": ["Close the archive file.", "You must call close() before exiting your program or essential records will not be written."]}
{"index": 8006, "name": "zipfile.ZipFile.getinfo", "module": "zipfile", "doc": ["Return a ZipInfo object with information about the archive member name.", "Calling getinfo() for a name not currently contained in the archive will raise a KeyError."]}
{"index": 8007, "name": "zipfile.ZipFile.infolist", "module": "zipfile", "doc": ["Return a list containing a ZipInfo object for each member of the archive.", "The objects are in the same order as their entries in the actual ZIP file on disk if an existing archive was opened."]}
{"index": 8008, "name": "zipfile.ZipFile.namelist", "module": "zipfile", "doc": ["Return a list of archive members by name."]}
{"index": 8009, "name": "zipfile.ZipFile.open", "module": "zipfile", "doc": ["Access a member of the archive as a binary file-like object.", "name can be either the name of a file within the archive or a ZipInfo object.", "The mode parameter, if included, must be 'r' (the default) or 'w'.", "pwd is the password used to decrypt encrypted ZIP files.", "open() is also a context manager and therefore supports the with statement:", "With mode 'r' the file-like object (ZipExtFile) is read-only and provides the following methods: read(), readline(), readlines(), seek(), tell(), __iter__(), __next__().", "These objects can operate independently of the ZipFile.", "With mode='w', a writable file handle is returned, which supports the write() method.", "While a writable file handle is open, attempting to read or write other files in the ZIP file will raise a ValueError.", "When writing a file, if the file size is not known in advance but may exceed 2 GiB, pass force_zip64=True to ensure that the header format is capable of supporting large files.", "If the file size is known in advance, construct a ZipInfo object with file_size set, and use that as the name parameter."]}
{"index": 8010, "name": "zipfile.ZipFile.extract", "module": "zipfile", "doc": ["Extract a member from the archive to the current working directory; member must be its full name or a ZipInfo object.", "Its file information is extracted as accurately as possible.", "path specifies a different directory to extract to.", "member can be a filename or a ZipInfo object.", "pwd is the password used for encrypted files.", "Returns the normalized path created (a directory or new file)."]}
{"index": 8011, "name": "zipfile.ZipFile.extractall", "module": "zipfile", "doc": ["Extract all members from the archive to the current working directory.", "path specifies a different directory to extract to.", "members is optional and must be a subset of the list returned by namelist().", "pwd is the password used for encrypted files."]}
{"index": 8012, "name": "zipfile.ZipFile.printdir", "module": "zipfile", "doc": ["Print a table of contents for the archive to sys.stdout."]}
{"index": 8013, "name": "zipfile.ZipFile.setpassword", "module": "zipfile", "doc": ["Set pwd as default password to extract encrypted files."]}
{"index": 8014, "name": "zipfile.ZipFile.read", "module": "zipfile", "doc": ["Return the bytes of the file name in the archive.", "name is the name of the file in the archive, or a ZipInfo object.", "The archive must be open for read or append.", "pwd is the password used for encrypted  files and, if specified, it will override the default password set with setpassword().", "Calling read() on a ZipFile that uses a compression method other than ZIP_STORED, ZIP_DEFLATED, ZIP_BZIP2 or ZIP_LZMA will raise a NotImplementedError.", "An error will also be raised if the corresponding compression module is not available."]}
{"index": 8015, "name": "zipfile.ZipFile.testzip", "module": "zipfile", "doc": ["Read all the files in the archive and check their CRC\u2019s and file headers.", "Return the name of the first bad file, or else return None."]}
{"index": 8016, "name": "zipfile.ZipFile.write", "module": "zipfile", "doc": ["Write the file named filename to the archive, giving it the archive name arcname (by default, this will be the same as filename, but without a drive letter and with leading path separators removed).", "If given, compress_type overrides the value given for the compression parameter to the constructor for the new entry.", "Similarly, compresslevel will override the constructor if given.", "The archive must be open with mode 'w', 'x' or 'a'."]}
{"index": 8017, "name": "zipfile.ZipFile.writestr", "module": "zipfile", "doc": ["Write a file into the archive.", "The contents is data, which may be either a str or a bytes instance; if it is a str, it is encoded as UTF-8 first.", "zinfo_or_arcname is either the file name it will be given in the archive, or a ZipInfo instance.", "If it\u2019s an instance, at least the filename, date, and time must be given.", "If it\u2019s a name, the date and time is set to the current date and time.", "The archive must be opened with mode 'w', 'x' or 'a'.", "If given, compress_type overrides the value given for the compression parameter to the constructor for the new entry, or in the zinfo_or_arcname (if that is a ZipInfo instance).", "Similarly, compresslevel will override the constructor if given."]}
{"index": 8018, "name": "zipfile.ZipFile.filename", "module": "zipfile", "doc": ["Name of the ZIP file."]}
{"index": 8019, "name": "zipfile.ZipFile.debug", "module": "zipfile", "doc": ["The level of debug output to use.", "This may be set from 0 (the default, no output) to 3 (the most output).", "Debugging information is written to sys.stdout."]}
{"index": 8020, "name": "zipfile.ZipFile.comment", "module": "zipfile", "doc": ["The comment associated with the ZIP file as a bytes object.", "If assigning a comment to a ZipFile instance created with mode 'w', 'x' or 'a', it should be no longer than 65535 bytes.", "Comments longer than this will be truncated."]}
{"index": 8021, "name": "zipfile.PyZipFile", "module": "zipfile", "doc": ["Instances have one method in addition to those of ZipFile objects:"]}
{"index": 8022, "name": "zipfile.PyZipFile.writepy", "module": "zipfile", "doc": ["Search for files *.py and add the corresponding file to the archive.", "If the optimize parameter to PyZipFile was not given or -1, the corresponding file is a *.pyc file, compiling if necessary.", "If the optimize parameter to PyZipFile was 0, 1 or 2, only files with that optimization level (see compile()) are added to the archive, compiling if necessary.", "If pathname is a file, the filename must end with .py, and just the (corresponding *.pyc) file is added at the top level (no path information).", "If pathname is a file that does not end with .py, a RuntimeError will be raised.", "If it is a directory, and the directory is not a package directory, then all the files *.pyc are added at the top level.", "If the directory is a package directory, then all *.pyc are added under the package name as a file path, and if any subdirectories are package directories, all of these are added recursively in sorted order.", "basename is intended for internal use only.", "filterfunc, if given, must be a function taking a single string argument.", "It will be passed each path (including each individual full file path) before it is added to the archive.", "If filterfunc returns a false value, the path will not be added, and if it is a directory its contents will be ignored.", "For example, if our test files are all either in test directories or start with the string test_, we can use a filterfunc to exclude them:", "The writepy() method makes archives with file names like this:"]}
{"index": 8023, "name": "zipfile.ZipInfo.from_file", "module": "zipfile", "doc": ["Construct a ZipInfo instance for a file on the filesystem, in preparation for adding it to a zip file.", "filename should be the path to a file or directory on the filesystem.", "If arcname is specified, it is used as the name within the archive.", "If arcname is not specified, the name will be the same as filename, but with any drive letter and leading path separators removed."]}
{"index": 8024, "name": "zipfile.ZipInfo.is_dir", "module": "zipfile", "doc": ["Return True if this archive member is a directory.", "This uses the entry\u2019s name: directories should always end with /."]}
{"index": 8025, "name": "zipfile.ZipInfo.filename", "module": "zipfile", "doc": ["Name of the file in the archive."]}
{"index": 8026, "name": "zipfile.ZipInfo.date_time", "module": "zipfile", "doc": ["The time and date of the last modification to the archive member.", "This is a tuple of six values:"]}
{"index": 8027, "name": "zipfile.ZipInfo.compress_type", "module": "zipfile", "doc": ["Type of compression for the archive member."]}
{"index": 8028, "name": "zipfile.ZipInfo.comment", "module": "zipfile", "doc": ["Comment for the individual archive member as a bytes object."]}
{"index": 8029, "name": "zipfile.ZipInfo.extra", "module": "zipfile", "doc": ["Expansion field data.", "The PKZIP Application Note contains some comments on the internal structure of the data contained in this bytes object."]}
{"index": 8030, "name": "zipfile.ZipInfo.create_system", "module": "zipfile", "doc": ["System which created ZIP archive."]}
{"index": 8031, "name": "zipfile.ZipInfo.create_version", "module": "zipfile", "doc": ["PKZIP version which created ZIP archive."]}
{"index": 8032, "name": "zipfile.ZipInfo.extract_version", "module": "zipfile", "doc": ["PKZIP version needed to extract archive."]}
{"index": 8033, "name": "zipfile.ZipInfo.reserved", "module": "zipfile", "doc": ["Must be zero."]}
{"index": 8034, "name": "zipfile.ZipInfo.flag_bits", "module": "zipfile", "doc": ["ZIP flag bits."]}
{"index": 8035, "name": "zipfile.ZipInfo.volume", "module": "zipfile", "doc": ["Volume number of file header."]}
{"index": 8036, "name": "zipfile.ZipInfo.internal_attr", "module": "zipfile", "doc": ["Internal attributes."]}
{"index": 8037, "name": "zipfile.ZipInfo.external_attr", "module": "zipfile", "doc": ["External file attributes."]}
{"index": 8038, "name": "zipfile.ZipInfo.header_offset", "module": "zipfile", "doc": ["Byte offset to the file header."]}
{"index": 8039, "name": "zipfile.ZipInfo.CRC", "module": "zipfile", "doc": ["CRC-32 of the uncompressed file."]}
{"index": 8040, "name": "zipfile.ZipInfo.compress_size", "module": "zipfile", "doc": ["Size of the compressed data."]}
{"index": 8041, "name": "zipfile.ZipInfo.file_size", "module": "zipfile", "doc": ["Size of the uncompressed file."]}
{"index": 8042, "name": "cmdoption-zipfile-l", "module": "zipfile", "doc": ["List files in a zipfile."]}
{"index": 8043, "name": "cmdoption-zipfile-list", "module": "zipfile", "doc": ["List files in a zipfile."]}
{"index": 8044, "name": "cmdoption-zipfile-c", "module": "zipfile", "doc": ["Create zipfile from source files."]}
{"index": 8045, "name": "cmdoption-zipfile-create", "module": "zipfile", "doc": ["Create zipfile from source files."]}
{"index": 8046, "name": "cmdoption-zipfile-e", "module": "zipfile", "doc": ["Extract zipfile into target directory."]}
{"index": 8047, "name": "cmdoption-zipfile-extract", "module": "zipfile", "doc": ["Extract zipfile into target directory."]}
{"index": 8048, "name": "cmdoption-zipfile-t", "module": "zipfile", "doc": ["Test whether the zipfile is valid or not."]}
{"index": 8049, "name": "cmdoption-zipfile-test", "module": "zipfile", "doc": ["Test whether the zipfile is valid or not."]}
{"index": 8050, "name": "zipimport.ZipImportError", "module": "zipimport", "doc": ["Exception raised by zipimporter objects.", "It\u2019s a subclass of ImportError, so it can be caught as ImportError, too."]}
{"index": 8051, "name": "zipimport.zipimporter", "module": "zipimport", "doc": ["Create a new zipimporter instance.", "archivepath must be a path to a ZIP file, or to a specific path within a ZIP file.", "For example, an archivepath of foo/bar.zip/lib will look for modules in the lib directory inside the ZIP file foo/bar.zip (provided that it exists).", "ZipImportError is raised if archivepath doesn\u2019t point to a valid ZIP archive.", "The archive and prefix attributes, when combined with a slash, equal the original archivepath argument given to the zipimporter constructor."]}
{"index": 8052, "name": "zipimport.zipimporter.find_module", "module": "zipimport", "doc": ["Search for a module specified by fullname.", "fullname must be the fully qualified (dotted) module name.", "It returns the zipimporter instance itself if the module was found, or None if it wasn\u2019t.", "The optional path argument is ignored\u2014it\u2019s there for compatibility with the importer protocol."]}
{"index": 8053, "name": "zipimport.zipimporter.get_code", "module": "zipimport", "doc": ["Return the code object for the specified module.", "Raise ZipImportError if the module couldn\u2019t be found."]}
{"index": 8054, "name": "zipimport.zipimporter.get_data", "module": "zipimport", "doc": ["Return the data associated with pathname.", "Raise OSError if the file wasn\u2019t found."]}
{"index": 8055, "name": "zipimport.zipimporter.get_filename", "module": "zipimport", "doc": ["Return the value __file__ would be set to if the specified module was imported.", "Raise ZipImportError if the module couldn\u2019t be found."]}
{"index": 8056, "name": "zipimport.zipimporter.get_source", "module": "zipimport", "doc": ["Return the source code for the specified module.", "Raise ZipImportError if the module couldn\u2019t be found, return None if the archive does contain the module, but has no source for it."]}
{"index": 8057, "name": "zipimport.zipimporter.is_package", "module": "zipimport", "doc": ["Return True if the module specified by fullname is a package.", "Raise ZipImportError if the module couldn\u2019t be found."]}
{"index": 8058, "name": "zipimport.zipimporter.load_module", "module": "zipimport", "doc": ["Load the module specified by fullname.", "fullname must be the fully qualified (dotted) module name.", "It returns the imported module, or raises ZipImportError if it wasn\u2019t found."]}
{"index": 8059, "name": "zipimport.zipimporter.archive", "module": "zipimport", "doc": ["The file name of the importer\u2019s associated ZIP file, without a possible subpath."]}
{"index": 8060, "name": "zipimport.zipimporter.prefix", "module": "zipimport", "doc": ["The subpath within the ZIP file where modules are searched.", "This is the empty string for zipimporter objects which point to the root of the ZIP file."]}
{"index": 8061, "name": "zlib.error", "module": "zlib", "doc": ["Exception raised on compression and decompression errors."]}
{"index": 8062, "name": "zlib.adler32", "module": "zlib", "doc": ["Computes an Adler-32 checksum of data.", "(An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much more quickly.)", "The result is an unsigned 32-bit integer.", "If value is present, it is used as the starting value of the checksum; otherwise, a default value of 1 is used.", "Passing in value allows computing a running checksum over the concatenation of several inputs.", "The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures.", "Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm."]}
{"index": 8063, "name": "zlib.compress", "module": "zlib", "doc": ["Compresses the bytes in data, returning a bytes object containing compressed data.", "level is an integer from 0 to 9 or -1 controlling the level of compression; 1 (Z_BEST_SPEED) is fastest and produces the least compression, 9 (Z_BEST_COMPRESSION) is slowest and produces the most.", "0 (Z_NO_COMPRESSION) is no compression.", "The default value is -1 (Z_DEFAULT_COMPRESSION).", "Z_DEFAULT_COMPRESSION represents a default compromise between speed and compression (currently equivalent to level 6).", "Raises the error exception if any error occurs."]}
{"index": 8064, "name": "zlib.compressobj", "module": "zlib", "doc": ["Returns a compression object, to be used for compressing data streams that won\u2019t fit into memory at once.", "level is the compression level \u2013 an integer from 0 to 9 or -1.", "A value of 1 (Z_BEST_SPEED) is fastest and produces the least compression, while a value of 9 (Z_BEST_COMPRESSION) is slowest and produces the most.", "0 (Z_NO_COMPRESSION) is no compression.", "The default value is -1 (Z_DEFAULT_COMPRESSION).", "Z_DEFAULT_COMPRESSION represents a default compromise between speed and compression (currently equivalent to level 6).", "method is the compression algorithm.", "Currently, the only supported value is DEFLATED.", "The wbits argument controls the size of the history buffer (or the \u201cwindow size\u201d) used when compressing data, and whether a header and trailer is included in the output.", "It can take several ranges of values, defaulting to 15 (MAX_WBITS):", "The memLevel argument controls the amount of memory used for the internal compression state.", "Valid values range from 1 to 9.", "Higher values use more memory, but are faster and produce smaller output.", "strategy is used to tune the compression algorithm.", "Possible values are Z_DEFAULT_STRATEGY, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE (zlib 1.2.0.1) and Z_FIXED (zlib 1.2.2.2).", "zdict is a predefined compression dictionary.", "This is a sequence of bytes (such as a bytes object) containing subsequences that are expected to occur frequently in the data that is to be compressed.", "Those subsequences that are expected to be most common should come at the end of the dictionary."]}
{"index": 8065, "name": "zlib.crc32", "module": "zlib", "doc": ["Computes a CRC (Cyclic Redundancy Check) checksum of data.", "The result is an unsigned 32-bit integer.", "If value is present, it is used as the starting value of the checksum; otherwise, a default value of 0 is used.", "Passing in value allows computing a running checksum over the concatenation of several inputs.", "The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures.", "Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm."]}
{"index": 8066, "name": "zlib.decompress", "module": "zlib", "doc": ["Decompresses the bytes in data, returning a bytes object containing the uncompressed data.", "The wbits parameter depends on the format of data, and is discussed further below.", "If bufsize is given, it is used as the initial size of the output buffer.", "Raises the error exception if any error occurs.", "The wbits parameter controls the size of the history buffer (or \u201cwindow size\u201d), and what header and trailer format is expected.", "It is similar to the parameter for compressobj(), but accepts more ranges of values:", "When decompressing a stream, the window size must not be smaller than the size originally used to compress the stream; using a too-small value may result in an error exception.", "The default wbits value corresponds to the largest window size and requires a zlib header and trailer to be included.", "bufsize is the initial size of the buffer used to hold decompressed data.", "If more space is required, the buffer size will be increased as needed, so you don\u2019t have to get this value exactly right; tuning it will only save a few calls to malloc()."]}
{"index": 8067, "name": "zlib.decompressobj", "module": "zlib", "doc": ["Returns a decompression object, to be used for decompressing data streams that won\u2019t fit into memory at once.", "The wbits parameter controls the size of the history buffer (or the \u201cwindow size\u201d), and what header and trailer format is expected.", "It has the same meaning as described for decompress().", "The zdict parameter specifies a predefined compression dictionary.", "If provided, this must be the same dictionary as was used by the compressor that produced the data that is to be decompressed."]}
{"index": 8068, "name": "zlib.Compress.compress", "module": "zlib", "doc": ["Compress data, returning a bytes object containing compressed data for at least part of the data in data.", "This data should be concatenated to the output produced by any preceding calls to the compress() method.", "Some input may be kept in internal buffers for later processing."]}
{"index": 8069, "name": "zlib.Compress.flush", "module": "zlib", "doc": ["All pending input is processed, and a bytes object containing the remaining compressed output is returned.", "mode can be selected from the constants Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_BLOCK (zlib 1.2.3.4), or Z_FINISH, defaulting to Z_FINISH.", "Except Z_FINISH, all constants allow compressing further bytestrings of data, while Z_FINISH finishes the compressed stream and prevents compressing any more data.", "After calling flush() with mode set to Z_FINISH, the compress() method cannot be called again; the only realistic action is to delete the object."]}
{"index": 8070, "name": "zlib.Compress.copy", "module": "zlib", "doc": ["Returns a copy of the compression object.", "This can be used to efficiently compress a set of data that share a common initial prefix."]}
{"index": 8071, "name": "zlib.Decompress.unused_data", "module": "zlib", "doc": ["A bytes object which contains any bytes past the end of the compressed data.", "That is, this remains b\"\" until the last byte that contains compression data is available.", "If the whole bytestring turned out to contain compressed data, this is b\"\", an empty bytes object."]}
{"index": 8072, "name": "zlib.Decompress.unconsumed_tail", "module": "zlib", "doc": ["A bytes object that contains any data that was not consumed by the last decompress() call because it exceeded the limit for the uncompressed data buffer.", "This data has not yet been seen by the zlib machinery, so you must feed it (possibly with further data concatenated to it) back to a subsequent decompress() method call in order to get correct output."]}
{"index": 8073, "name": "zlib.Decompress.eof", "module": "zlib", "doc": ["A boolean indicating whether the end of the compressed data stream has been reached.", "This makes it possible to distinguish between a properly-formed compressed stream, and an incomplete or truncated one."]}
{"index": 8074, "name": "zlib.Decompress.decompress", "module": "zlib", "doc": ["Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in string.", "This data should be concatenated to the output produced by any preceding calls to the decompress() method.", "Some of the input data may be preserved in internal buffers for later processing.", "If the optional parameter max_length is non-zero then the return value will be no longer than max_length.", "This may mean that not all of the compressed input can be processed; and unconsumed data will be stored in the attribute unconsumed_tail.", "This bytestring must be passed to a subsequent call to decompress() if decompression is to continue.", "If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty."]}
{"index": 8075, "name": "zlib.Decompress.flush", "module": "zlib", "doc": ["All pending input is processed, and a bytes object containing the remaining uncompressed output is returned.", "After calling flush(), the decompress() method cannot be called again; the only realistic action is to delete the object.", "The optional parameter length sets the initial size of the output buffer."]}
{"index": 8076, "name": "zlib.Decompress.copy", "module": "zlib", "doc": ["Returns a copy of the decompression object.", "This can be used to save the state of the decompressor midway through the data stream in order to speed up random seeks into the stream at a future point."]}
{"index": 8077, "name": "zlib.ZLIB_VERSION", "module": "zlib", "doc": ["The version string of the zlib library that was used for building the module.", "This may be different from the zlib library actually used at runtime, which is available as ZLIB_RUNTIME_VERSION."]}
{"index": 8078, "name": "zlib.ZLIB_RUNTIME_VERSION", "module": "zlib", "doc": ["The version string of the zlib library actually loaded by the interpreter."]}
{"index": 8079, "name": "thread.error", "module": "thread", "doc": ["Raised on thread-specific errors."]}
{"index": 8080, "name": "thread.LockType", "module": "thread", "doc": ["This is the type of lock objects."]}
{"index": 8081, "name": "thread.start_new_thread", "module": "thread", "doc": ["Start a new thread and return its identifier.", "The thread executes the function function with the argument list args (which must be a tuple).", "The optional kwargs argument specifies a dictionary of keyword arguments.", "When the function returns, the thread silently exits.", "When the function terminates with an unhandled exception, a stack trace is printed and then the thread exits (but other threads continue to run)."]}
{"index": 8082, "name": "thread.interrupt_main", "module": "thread", "doc": ["Simulate the effect of a signal.SIGINT signal arriving in the main thread.", "A thread can use this function to interrupt the main thread.", "If signal.SIGINT isn\u2019t handled by Python (it was set to signal.SIG_DFL or signal.SIG_IGN), this function does nothing."]}
{"index": 8083, "name": "thread.exit", "module": "thread", "doc": ["Raise the SystemExit exception.", "When not caught, this will cause the thread to exit silently."]}
{"index": 8084, "name": "thread.allocate_lock", "module": "thread", "doc": ["Return a new lock object.", "Methods of locks are described below.", "The lock is initially unlocked."]}
{"index": 8085, "name": "thread.get_ident", "module": "thread", "doc": ["Return the \u2018thread identifier\u2019 of the current thread.", "This is a nonzero integer.", "Its value has no direct meaning; it is intended as a magic cookie to be used e.g.", "to index a dictionary of thread-specific data.", "Thread identifiers may be recycled when a thread exits and another thread is created."]}
{"index": 8086, "name": "thread.stack_size", "module": "thread", "doc": ["Return the thread stack size used when creating new threads.", "The optional size argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32 KiB).", "If size is not specified, 0 is used.", "If changing the thread stack size is unsupported, a RuntimeError is raised.", "If the specified stack size is invalid, a ValueError is raised and the stack size is unmodified.", "32 KiB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself.", "Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32 KiB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4 KiB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information).", "Availability: Windows, systems with POSIX threads."]}
{"index": 8087, "name": "thread.TIMEOUT_MAX", "module": "thread", "doc": ["The maximum value allowed for the timeout parameter of Lock.acquire().", "Specifying a timeout greater than this value will raise an OverflowError."]}
{"index": 8088, "name": "thread.lock.acquire", "module": "thread", "doc": ["Without any optional argument, this method acquires the lock unconditionally, if necessary waiting until it is released by another thread (only one thread at a time can acquire a lock \u2014 that\u2019s their reason for existence).", "If the integer waitflag argument is present, the action depends on its value: if it is zero, the lock is only acquired if it can be acquired immediately without waiting, while if it is nonzero, the lock is acquired unconditionally as above.", "If the floating-point timeout argument is present and positive, it specifies the maximum wait time in seconds before returning.", "A negative timeout argument specifies an unbounded wait.", "You cannot specify a timeout if waitflag is zero.", "The return value is True if the lock is acquired successfully, False if not."]}
{"index": 8089, "name": "thread.lock.release", "module": "thread", "doc": ["Releases the lock.", "The lock must have been acquired earlier, but not necessarily by the same thread."]}
{"index": 8090, "name": "thread.lock.locked", "module": "thread", "doc": ["Return the status of the lock: True if it has been acquired by some thread, False if not."]}
