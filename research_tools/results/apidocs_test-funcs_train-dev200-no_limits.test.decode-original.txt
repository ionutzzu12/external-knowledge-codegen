>>> gen: { key : ( key , value ) for key , value in locals ( name , b ) }
>>> ref: locals ( )

>>> gen: [ v for i in pdbcommand - args ( ) if v = = 10 ]
>>> ref: random . Random ( seed )

>>> gen: logging . handlers . HTTPHandler ( logging . handlers . HTTPHandler ( errno ) , filename )
>>> ref: OSError ( errno , strerror , filename )

>>> gen: max ( key , x = lambda x : key . index ( x [ 0 ] ) , reverse = True )
>>> ref: max ( iterable , key )

>>> gen: pandas . Index . tolist ( fname , [ disable_existing_loggers [ i ] , disable_existing_loggers + disable_existing_loggers ] + 1 )
>>> ref: logging . config . file Config ( fname , disable_existing_loggers = True )

>>> gen: abs ( x , key = lambda x : int ( x [ 1 ] ) )
>>> ref: abs ( x )

>>> gen: msilib . Create Record ( count )
>>> ref: msilib . Create Record ( count )

>>> gen: random . System Random ( random . System Random ( cab ) , key = lambda k_v : len ( x ) )
>>> ref: msilib . Directory ( database , cab , basedir , physical , logical , default )

>>> gen: msilib . Dialog . line ( msilib . Dialog . line ( ) , key = lambda x : abs ( x . split ( ` _ ` ) - 1 ) )
>>> ref: webbrowser . get ( using = None )

>>> gen: dict ( dict ( [ * * kwarg ] ) )
>>> ref: dict ( * * kwarg )

>>> gen: imaplib . IMAP4_stream ( file ) . imaplib . IMAP4_stream ( )
>>> ref: dbm . open ( file , flag = ` r ` )

>>> gen: importlib . machinery . File Finder ( [ * filenames or profile ] )
>>> ref: pstats . Stats ( * filenames or profile )

>>> gen: re . search ( * pattern )
>>> ref: re . search ( pattern , string , flags = 0 )

>>> gen: codecs . Codec Info ( 0 , decode [ x ] )
>>> ref: codecs . Codec Info ( encode , decode )

>>> gen: logging . Stream Handler ( ` maintype ` , msg ) . socket . socket . detach ( ` subtype ` )
>>> ref: email . iterators . typed_subpart_iterator ( msg , maintype = ` text ` )

>>> gen: urllib . request . urlopen ( url , [ 1 ] ) . logging . log ( )
>>> ref: urllib . request . urlopen ( url , data = None )

>>> gen: tkinter . ttk . Notebook . tab ( x , y , * * ( 1 , 3 , 3 ) )
>>> ref: readline . set_auto_history ( enabled )

>>> gen: io . Buffered Reader ( curses . ascii . ctrl ( ) , 1 )
>>> ref: io . Buffered Reader ( raw )

>>> gen: statistics . median_grouped ( statistics . median_grouped ( filename ) , statistics . median_grouped ( filename ) )
>>> ref: logging . File Handler ( filename , mode = ` a ` )

>>> gen: msilib . Create Record ( count )
>>> ref: msilib . Create Record ( count )

>>> gen: decimal . Decimal ( decimal . Decimal ( * value ) )
>>> ref: decimal . Decimal ( value = ` 0 ` )

>>> gen: asyncio . isfuture ( obj )
>>> ref: asyncio . isfuture ( obj )

>>> gen: format = struct . pack ( ` v1 ` , v2 ) . struct . pack ( ` format ` , v2 )
>>> ref: struct . pack ( format , v1 , v2 )

>>> gen: random . choices ( random . choices ( key = lambda x : population . index ( x [ 0 ] ) ) )
>>> ref: random . choices ( population , k = 1 )

>>> gen: itertools . combinations_with_replacement ( itertools . combinations_with_replacement ( fd ) , cmd )
>>> ref: fcntl . lockf ( fd , cmd , len = 0 )

>>> gen: ssl . SSLContext . sslsocket_class ( ( 0 , 100 ) , addr_spec [ : : x [ 0 ] , x [ 0 ] + x , ( ) , ] )
>>> ref: email . headerregistry . Address ( username = ` ` )

>>> gen: [ y for y , x in random . choices ( random . choices ( k ) ) if x = = 0 ]
>>> ref: random . choices ( population , weights = None )

>>> gen: frozenset . update ( frozenset . update ( year , year ) , m )
>>> ref: calendar . prcal ( year , w = 0 , m = 3 )

>>> gen: resource . RLIMIT_NPTS ( ( 0 , 100 ) )
>>> ref: urllib . request . Proxy Handler ( proxies = None )

>>> gen: b = email . contentmanager . get_content ( msg ) . signal . alarm ( 1 )
>>> ref: email . contentmanager . get_content ( msg )

>>> gen: heap ( item , heap )
>>> ref: heapq . heappush ( heap , item )

>>> gen: s_rstrip ( * * [ ` * args ` , ` * * kws ` ] )
>>> ref: breakpoint ( * args , * * kws )

>>> gen: plt_savefig ( port . array_array_fromlist ( ) [ : , ( 0 ) , 2 : ] )
>>> ref: logging . config . listen ( verify = None )

>>> gen: sched . scheduler . enterabs ( sched . scheduler . enterabs ( ) )
>>> ref: base64 . b64decode ( s )

>>> gen: ssl . PEM_cert_to_DER_cert ( ) . getpass . getpass ( ` Password : ` )
>>> ref: getpass . getpass ( prompt = ` Password : ` )

>>> gen: queue . Simple Queue . put ( 0 , 0 , 1 ) . turtle . circle ( )
>>> ref: turtle . circle ( radius , extent = None )

>>> gen: nlines . loc [ unittest . Test Loader . get Test Case Names ( ncols . values [ a ] ) ]
>>> ref: curses . is_term_resized ( nlines , ncols )

>>> gen: traceback . print_tb ( )
>>> ref: Type Error

>>> gen: [ i for i , j in stat . S_IFMT ( fd ) if i = = j ]
>>> ref: fcntl . ioctl ( fd , request )

>>> gen: asyncio . Subprocess Transport . get_returncode ( asyncio . Subprocess Transport . get_returncode ( dir1 ) , asyncio . Subprocess Transport . get_returncode ( f ) )
>>> ref: filecmp . cmpfiles ( dir1 , dir2 , common )

>>> gen: imaplib . IMAP4 . myrights ( 0 , 0 , 1 )
>>> ref: ctypes . byref ( obj , offset )

>>> gen: math . modf ( math . modf ( items ) )
>>> ref: collections . Ordered Dict ( items )

>>> gen: ipaddress . ip_network ( info , info )
>>> ref: cgitb . text ( info , context = 5 )

>>> gen: src = nntplib . NNTP . list ( src , - 1 )
>>> ref: os . link ( src , dst , src_dir_fd = None )

>>> gen: select . kevent . flags ( 0 , 1 , 1 )
>>> ref: os . _exit ( n )

>>> gen: cmath . log10 ( cmath . log10 ( status ) , axis = 0 )
>>> ref: os . WCOREDUMP ( status )

>>> gen: filename = secrets . choice ( secrets . choice ( ) , 0 )
>>> ref: bz2 . open ( filename , mode = ` r ` )

>>> gen: list ( d . list ( ) )
>>> ref: list ( d )

>>> gen: chunk . Chunk ( chunk . Chunk ( qs ) , axis = 0 )
>>> ref: cgi . parse_qs ( qs )

>>> gen: stat . S_IFBLK ( stat . S_IFBLK ( filename , 2 ) , axis = 0 )
>>> ref: mailcap . findmatch ( caps , filename = ` / dev / null ` )

